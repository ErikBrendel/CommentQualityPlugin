# id;timestamp;commentText;codeText;commentWords;codeWords
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1479200724;Tests DeltaEvictor, evictAfter behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0)_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior,throws,exception;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1479217936;Tests DeltaEvictor, evictAfter behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0)_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior,throws,exception;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1489819457;Tests DeltaEvictor, evictAfter behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0,_			null )_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior,throws,exception;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1493195810;Tests DeltaEvictor, evictAfter behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0,_			null )_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior,throws,exception;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1495484544;Tests DeltaEvictor, evictAfter behavior._@throws Exception;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true__		final int threshold = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			DeltaEvictor.of(threshold, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior,throws,exception;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictAfter() throws Exception;1525452496;Tests DeltaEvictor, evictAfter behavior.;@Test_	public void testDeltaEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true__		final int threshold = 2___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			DeltaEvictor.of(threshold, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 15), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 9), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 16), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 22), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,after,behavior;test,public,void,test,delta,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,final,int,threshold,2,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,5,long,expected,output,add,new,stream,record,new,tuple2,key2,15,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,9,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,16,long,expected,output,add,new,stream,record,new,tuple2,key2,22,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1479200724;Tests time evictor, if no timestamp information in the StreamRecord_No element will be evicted from the window_@throws Exception;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window,throws,exception;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1479217936;Tests time evictor, if no timestamp information in the StreamRecord_No element will be evicted from the window_@throws Exception;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window,throws,exception;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1489819457;Tests time evictor, if no timestamp information in the StreamRecord_No element will be evicted from the window_@throws Exception;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window,throws,exception;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1493195810;Tests time evictor, if no timestamp information in the StreamRecord_No element will be evicted from the window_@throws Exception;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window,throws,exception;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1495484544;Tests time evictor, if no timestamp information in the StreamRecord._No element will be evicted from the window._@throws Exception;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2), evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window,throws,exception;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorNoTimestamp() throws Exception;1525452496;Tests time evictor, if no timestamp information in the StreamRecord._No element will be evicted from the window.;@Test_	public void testTimeEvictorNoTimestamp() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2), evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1)))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1)))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,time,evictor,if,no,timestamp,information,in,the,stream,record,no,element,will,be,evicted,from,the,window;test,public,void,test,time,evictor,no,timestamp,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,test,harness,process,element,new,stream,record,new,tuple2,key2,1,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1479200724;Tests DeltaEvictor, evictBefore behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = false__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0)_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior,throws,exception;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,false,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1479217936;Tests DeltaEvictor, evictBefore behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = false__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0)_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior,throws,exception;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,false,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1489819457;Tests DeltaEvictor, evictBefore behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = false__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0,_			null )_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior,throws,exception;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,false,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1493195810;Tests DeltaEvictor, evictBefore behavior_@throws Exception;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = false__		final int THRESHOLD = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			DeltaEvictor.of(THRESHOLD, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, EVICT_AFTER),_			0,_			null )_____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior,throws,exception;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,false,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1495484544;Tests DeltaEvictor, evictBefore behavior._@throws Exception;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = false__		final int threshold = 2___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			DeltaEvictor.of(threshold, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior,throws,exception;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,false,final,int,threshold,2,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testDeltaEvictorEvictBefore() throws Exception;1525452496;Tests DeltaEvictor, evictBefore behavior.;@Test_	public void testDeltaEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = false__		final int threshold = 2___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			DeltaEvictor.of(threshold, new DeltaFunction<Tuple2<String, Integer>>() {_				@Override_				public double getDelta(Tuple2<String, Integer> oldDataPoint, Tuple2<String, Integer> newDataPoint) {_					return newDataPoint.f1 - oldDataPoint.f1__				}_			}, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 5), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 6), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 11), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 10), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 8), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 10), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,delta,evictor,evict,before,behavior;test,public,void,test,delta,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,false,final,int,threshold,2,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,delta,evictor,of,threshold,new,delta,function,tuple2,string,integer,override,public,double,get,delta,tuple2,string,integer,old,data,point,tuple2,string,integer,new,data,point,return,new,data,point,f1,old,data,point,f1,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,5,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,5,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,6,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key2,11,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,10,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,8,long,expected,output,add,new,stream,record,new,tuple2,key2,10,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1479200724;Tests TimeEvictor evictBefore behavior_@throws Exception;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final int WINDOW_SIZE = 4___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2)),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,before,behavior,throws,exception;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,int,4,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1479217936;Tests TimeEvictor evictBefore behavior_@throws Exception;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final int WINDOW_SIZE = 4___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2)),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,before,behavior,throws,exception;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,int,4,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1489819457;Tests TimeEvictor evictBefore behavior_@throws Exception;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final int WINDOW_SIZE = 4___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2)),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,before,behavior,throws,exception;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,int,4,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1493195810;Tests TimeEvictor evictBefore behavior_@throws Exception;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final int WINDOW_SIZE = 4___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(WINDOW_SIZE, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2)),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,before,behavior,throws,exception;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,int,4,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1495484544;Tests TimeEvictor evictBefore behavior._@throws Exception;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final int windowSize = 4___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,time,evictor,evict,before,behavior,throws,exception;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,int,window,size,4,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictBefore() throws Exception;1525452496;Tests TimeEvictor evictBefore behavior.;@Test_	public void testTimeEvictorEvictBefore() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final int windowSize = 4___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, TimeWindow> operator = new EvictingWindowOperator<>(_			TumblingEventTimeWindows.of(Time.of(windowSize, TimeUnit.SECONDS)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 5999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 1), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 3999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), 7999))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), 3999))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,time,evictor,evict,before,behavior;test,public,void,test,time,evictor,evict,before,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,int,window,size,4,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,time,window,operator,new,evicting,window,operator,tumbling,event,time,windows,of,time,of,window,size,time,unit,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,time,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,5999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,1,3999,expected,output,add,new,stream,record,new,tuple2,key1,2,3999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,2,7999,expected,output,add,new,stream,record,new,tuple2,key2,3,3999,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1479200724;Tests CountEvictor evictAfter behavior_@throws Exception;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int WINDOW_SIZE = 4__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)____		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,count,evictor,evict,after,behavior,throws,exception;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,4,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,count,evictor,of,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1479217936;Tests CountEvictor evictAfter behavior_@throws Exception;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int WINDOW_SIZE = 4__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)____		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,count,evictor,evict,after,behavior,throws,exception;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,4,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,count,evictor,of,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1489819457;Tests CountEvictor evictAfter behavior_@throws Exception;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int WINDOW_SIZE = 4__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)____		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,count,evictor,evict,after,behavior,throws,exception;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,4,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,count,evictor,of,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1493195810;Tests CountEvictor evictAfter behavior_@throws Exception;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int WINDOW_SIZE = 4__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			CountEvictor.of(WINDOW_SIZE,EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)____		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,count,evictor,evict,after,behavior,throws,exception;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,4,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,count,evictor,of,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1495484544;Tests CountEvictor evictAfter behavior._@throws Exception;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int windowSize = 4__		final int triggerCount = 2__		final boolean evictAfter = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			CountEvictor.of(windowSize, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,count,evictor,evict,after,behavior,throws,exception;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,window,size,4,final,int,trigger,count,2,final,boolean,evict,after,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,count,evictor,of,window,size,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testCountEvictorEvictAfter() throws Exception;1525452496;Tests CountEvictor evictAfter behavior.;@Test_	public void testCountEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int windowSize = 4__		final int triggerCount = 2__		final boolean evictAfter = true___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			CountEvictor.of(windowSize, evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1998))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 6), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())__	};tests,count,evictor,evict,after,behavior;test,public,void,test,count,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,window,size,4,final,int,trigger,count,2,final,boolean,evict,after,true,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,count,evictor,of,window,size,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3999,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1998,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key2,4,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,expected,output,add,new,stream,record,new,tuple2,key2,6,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1479200724;Tests TimeEvictor evictAfter behavior_@throws Exception;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior,throws,exception;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1479217936;Tests TimeEvictor evictAfter behavior_@throws Exception;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0)____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior,throws,exception;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1489819457;Tests TimeEvictor evictAfter behavior_@throws Exception;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior,throws,exception;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1493195810;Tests TimeEvictor evictAfter behavior_@throws Exception;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int TRIGGER_COUNT = 2__		final boolean EVICT_AFTER = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)____		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(TRIGGER_COUNT),_			TimeEvictor.of(Time.seconds(2), EVICT_AFTER),_			0,_			null )____		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))_____		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))____		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior,throws,exception;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,2,final,boolean,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,time,evictor,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1495484544;Tests TimeEvictor evictAfter behavior._@throws Exception;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(inputType.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2), evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior,throws,exception;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,input,type,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
EvictingWindowOperatorTest -> @Test 	public void testTimeEvictorEvictAfter() throws Exception;1525452496;Tests TimeEvictor evictAfter behavior.;@Test_	public void testTimeEvictorEvictAfter() throws Exception {_		AtomicInteger closeCalled = new AtomicInteger(0)__		final int triggerCount = 2__		final boolean evictAfter = true___		@SuppressWarnings({"unchecked", "rawtypes"})_		TypeSerializer<StreamRecord<Tuple2<String, Integer>>> streamRecordSerializer =_			(TypeSerializer<StreamRecord<Tuple2<String, Integer>>>) new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		ListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc =_			new ListStateDescriptor<>("window-contents", streamRecordSerializer)___		EvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(_			GlobalWindows.create(),_			new GlobalWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),_			CountTrigger.of(triggerCount),_			TimeEvictor.of(Time.seconds(2), evictAfter),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 4000))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 20))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 999))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 3500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 2001))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1001))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 2), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 3), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10999))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 1002))___		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1", 4), Long.MAX_VALUE))__		expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2", 5), Long.MAX_VALUE))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new ResultSortComparator())___		testHarness.close()___		Assert.assertEquals("Close was not called.", 1, closeCalled.get())___	};tests,time,evictor,evict,after,behavior;test,public,void,test,time,evictor,evict,after,throws,exception,atomic,integer,close,called,new,atomic,integer,0,final,int,trigger,count,2,final,boolean,evict,after,true,suppress,warnings,unchecked,rawtypes,type,serializer,stream,record,tuple2,string,integer,stream,record,serializer,type,serializer,stream,record,tuple2,string,integer,new,stream,element,serializer,create,serializer,new,execution,config,list,state,descriptor,stream,record,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,stream,record,serializer,evicting,window,operator,string,tuple2,string,integer,tuple2,string,integer,global,window,operator,new,evicting,window,operator,global,windows,create,new,global,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,rich,sum,reducer,global,window,close,called,count,trigger,of,trigger,count,time,evictor,of,time,seconds,2,evict,after,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple2,string,integer,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,4000,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,20,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,2001,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1001,expected,output,add,new,stream,record,new,tuple2,key2,2,long,expected,output,add,new,stream,record,new,tuple2,key1,2,long,expected,output,add,new,stream,record,new,tuple2,key2,3,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10999,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,1002,expected,output,add,new,stream,record,new,tuple2,key1,4,long,expected,output,add,new,stream,record,new,tuple2,key2,5,long,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,result,sort,comparator,test,harness,close,assert,assert,equals,close,was,not,called,1,close,called,get
