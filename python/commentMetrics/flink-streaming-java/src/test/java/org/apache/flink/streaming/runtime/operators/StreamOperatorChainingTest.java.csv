# id;timestamp;commentText;codeText;commentWords;codeWords
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1467039317;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer> operatorChain = new OperatorChain<>(_				mockTask,_				headOperator,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,operator,chain,new,operator,chain,mock,task,head,operator,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1472663401;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer> operatorChain = new OperatorChain<>(_				mockTask,_				headOperator,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,operator,chain,new,operator,chain,mock,task,head,operator,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1475231926;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(_				mockTask,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1477923124;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1482206647;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		System.out.println(streamConfig)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,system,out,println,stream,config,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1482249704;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1495484544;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__		assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1515213012;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)___			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1516626397;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)___			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1519039285;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1526978549;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>() {_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,input,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1527089335;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(value -> value)___		input_				.map(value -> "First: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,value,value,input,map,value,first,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,input,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1548265071;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(value -> value)___		input_				.map(value -> "First: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,value,value,input,map,value,first,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,input,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChaining(StreamExecutionEnvironment env) throws Exception;1548947531;Verify that multi-chaining works.;private void testMultiChaining(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()___		input = input_				.map(value -> value)___		input_				.map(value -> "First: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		input_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First: 1", "First: 2", "First: 3"))__			assertThat(sink2Results, contains("Second: 1", "Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works;private,void,test,multi,chaining,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,input,input,map,value,value,input,map,value,first,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,input,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,first,2,first,3,assert,that,sink2results,contains,second,1,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1467039317;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer> operatorChain = new OperatorChain<>(_				mockTask,_				headOperator,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,operator,chain,new,operator,chain,mock,task,head,operator,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1472663401;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer> operatorChain = new OperatorChain<>(_				mockTask,_				headOperator,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,operator,chain,new,operator,chain,mock,task,head,operator,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1475231926;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(_				mockTask,_				mock(AccumulatorRegistry.Reporter.class))___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,mock,accumulator,registry,reporter,class,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1477923124;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1482206647;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1482249704;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1,2,3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1495484544;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		StreamTask<Integer, StreamMap<Integer, Integer>> mockTask =_				createMockTask(streamConfig, chainedVertex.getName())___		OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___		headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___		for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_			if (operator != null) {_				operator.open()__			}_		}__		headOperator.processElement(new StreamRecord<>(1))__		headOperator.processElement(new StreamRecord<>(2))__		headOperator.processElement(new StreamRecord<>(3))___		assertThat(sink1Results, contains("First 1: 1"))__		assertThat(sink2Results, contains("First 2: 1"))__		assertThat(sink3Results, contains("Second: 2", "Second: 3"))__	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,chained,vertex,get,name,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1515213012;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)___			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1516626397;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)___			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = new OperatorChain<>(mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,new,operator,chain,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1519039285;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1526978549;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(new MapFunction<Integer, Integer>(){_					private static final long serialVersionUID = 1L___					@Override_					public Integer map(Integer value) throws Exception {_						return value__					}_				})___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 1: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "First 2: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(new MapFunction<Integer, String>() {_					private static final long serialVersionUID = 1L___					@Override_					public String map(Integer value) throws Exception {_						return "Second: " + value__					}_				})_				.addSink(new SinkFunction<String>() {_					private static final long serialVersionUID = 1L___					@Override_					public void invoke(String value) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,new,map,function,integer,integer,private,static,final,long,serial,version,uid,1l,override,public,integer,map,integer,value,throws,exception,return,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,1,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink1results,add,value,split,select,one,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,first,2,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink2results,add,value,split,select,other,map,new,map,function,integer,string,private,static,final,long,serial,version,uid,1l,override,public,string,map,integer,value,throws,exception,return,second,value,add,sink,new,sink,function,string,private,static,final,long,serial,version,uid,1l,override,public,void,invoke,string,value,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1527089335;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(value -> value)___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(value -> "First 1: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(value -> "First 2: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,value,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,value,first,1,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,split,select,one,map,value,first,2,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,split,select,other,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1548265071;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(value -> value)___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(value -> "First 1: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(value -> "First 2: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,value,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,value,first,1,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,split,select,one,map,value,first,2,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,split,select,other,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
StreamOperatorChainingTest -> private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception;1548947531;Verify that multi-chaining works with object reuse enabled.;private void testMultiChainingWithSplit(StreamExecutionEnvironment env) throws Exception {__		_		DataStream<Integer> input = env.fromElements(1, 2, 3)___		sink1Results = new ArrayList<>()__		sink2Results = new ArrayList<>()__		sink3Results = new ArrayList<>()___		input = input_				.map(value -> value)___		SplitStream<Integer> split = input.split(new OutputSelector<Integer>() {_			private static final long serialVersionUID = 1L___			@Override_			public Iterable<String> select(Integer value) {_				if (value.equals(1)) {_					return Collections.singletonList("one")__				} else {_					return Collections.singletonList("other")__				}_			}_		})___		split.select("one")_				.map(value -> "First 1: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink1Results.add(value)__					}_				})___		split.select("one")_				.map(value -> "First 2: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink2Results.add(value)__					}_				})___		split.select("other")_				.map(value -> "Second: " + value)_				.addSink(new SinkFunction<String>() {__					@Override_					public void invoke(String value, Context ctx) throws Exception {_						sink3Results.add(value)__					}_				})___		_		JobGraph jobGraph = env.getStreamGraph().getJobGraph()___		Assert.assertTrue(jobGraph.getVerticesSortedTopologicallyFromSources().size() == 2)___		JobVertex chainedVertex = jobGraph.getVerticesSortedTopologicallyFromSources().get(1)___		Configuration configuration = chainedVertex.getConfiguration()___		StreamConfig streamConfig = new StreamConfig(configuration)___		StreamMap<Integer, Integer> headOperator =_				streamConfig.getStreamOperator(Thread.currentThread().getContextClassLoader())___		try (MockEnvironment environment = createMockEnvironment(chainedVertex.getName())) {_			StreamTask<Integer, StreamMap<Integer, Integer>> mockTask = createMockTask(streamConfig, environment)__			OperatorChain<Integer, StreamMap<Integer, Integer>> operatorChain = createOperatorChain(streamConfig, environment, mockTask)___			headOperator.setup(mockTask, streamConfig, operatorChain.getChainEntryPoint())___			for (StreamOperator<?> operator : operatorChain.getAllOperators()) {_				if (operator != null) {_					operator.open()__				}_			}__			headOperator.processElement(new StreamRecord<>(1))__			headOperator.processElement(new StreamRecord<>(2))__			headOperator.processElement(new StreamRecord<>(3))___			assertThat(sink1Results, contains("First 1: 1"))__			assertThat(sink2Results, contains("First 2: 1"))__			assertThat(sink3Results, contains("Second: 2", "Second: 3"))__		}_	};verify,that,multi,chaining,works,with,object,reuse,enabled;private,void,test,multi,chaining,with,split,stream,execution,environment,env,throws,exception,data,stream,integer,input,env,from,elements,1,2,3,sink1results,new,array,list,sink2results,new,array,list,sink3results,new,array,list,input,input,map,value,value,split,stream,integer,split,input,split,new,output,selector,integer,private,static,final,long,serial,version,uid,1l,override,public,iterable,string,select,integer,value,if,value,equals,1,return,collections,singleton,list,one,else,return,collections,singleton,list,other,split,select,one,map,value,first,1,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink1results,add,value,split,select,one,map,value,first,2,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink2results,add,value,split,select,other,map,value,second,value,add,sink,new,sink,function,string,override,public,void,invoke,string,value,context,ctx,throws,exception,sink3results,add,value,job,graph,job,graph,env,get,stream,graph,get,job,graph,assert,assert,true,job,graph,get,vertices,sorted,topologically,from,sources,size,2,job,vertex,chained,vertex,job,graph,get,vertices,sorted,topologically,from,sources,get,1,configuration,configuration,chained,vertex,get,configuration,stream,config,stream,config,new,stream,config,configuration,stream,map,integer,integer,head,operator,stream,config,get,stream,operator,thread,current,thread,get,context,class,loader,try,mock,environment,environment,create,mock,environment,chained,vertex,get,name,stream,task,integer,stream,map,integer,integer,mock,task,create,mock,task,stream,config,environment,operator,chain,integer,stream,map,integer,integer,operator,chain,create,operator,chain,stream,config,environment,mock,task,head,operator,setup,mock,task,stream,config,operator,chain,get,chain,entry,point,for,stream,operator,operator,operator,chain,get,all,operators,if,operator,null,operator,open,head,operator,process,element,new,stream,record,1,head,operator,process,element,new,stream,record,2,head,operator,process,element,new,stream,record,3,assert,that,sink1results,contains,first,1,1,assert,that,sink2results,contains,first,2,1,assert,that,sink3results,contains,second,2,second,3
