# id;timestamp;commentText;codeText;commentWords;codeWords
StreamElementQueueTest -> @Test 	public void testBlockingPut() throws Exception;1482206691;Tests that a put operation blocks if the queue is full.;@Test_	public void testBlockingPut() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(42, 0L))__		final StreamRecordQueueEntry<Integer> streamRecordQueueEntry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(43, 1L))___		queue.put(streamRecordQueueEntry)___		Assert.assertEquals(1, queue.size())___		Future<Void> putOperation = FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				queue.put(streamRecordQueueEntry2)___				return null__			}_		}, executor)___		_		Thread.sleep(10L)___		_		Assert.assertFalse(putOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		_		Assert.assertEquals(streamRecordQueueEntry, queue.poll())___		_		putOperation.get()___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,a,put,operation,blocks,if,the,queue,is,full;test,public,void,test,blocking,put,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,42,0l,final,stream,record,queue,entry,integer,stream,record,queue,entry2,new,stream,record,queue,entry,new,stream,record,43,1l,queue,put,stream,record,queue,entry,assert,assert,equals,1,queue,size,future,void,put,operation,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,queue,put,stream,record,queue,entry2,return,null,executor,thread,sleep,10l,assert,assert,false,put,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,queue,poll,put,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPut() throws Exception;1495484544;Tests that a put operation blocks if the queue is full.;@Test_	public void testBlockingPut() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(42, 0L))__		final StreamRecordQueueEntry<Integer> streamRecordQueueEntry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(43, 1L))___		queue.put(streamRecordQueueEntry)___		Assert.assertEquals(1, queue.size())___		Future<Void> putOperation = FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				queue.put(streamRecordQueueEntry2)___				return null__			}_		}, executor)___		_		Thread.sleep(10L)___		_		Assert.assertFalse(putOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		_		Assert.assertEquals(streamRecordQueueEntry, queue.poll())___		_		putOperation.get()___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,a,put,operation,blocks,if,the,queue,is,full;test,public,void,test,blocking,put,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,42,0l,final,stream,record,queue,entry,integer,stream,record,queue,entry2,new,stream,record,queue,entry,new,stream,record,43,1l,queue,put,stream,record,queue,entry,assert,assert,equals,1,queue,size,future,void,put,operation,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,queue,put,stream,record,queue,entry2,return,null,executor,thread,sleep,10l,assert,assert,false,put,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,queue,poll,put,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPut() throws Exception;1501760738;Tests that a put operation blocks if the queue is full.;@Test_	public void testBlockingPut() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(42, 0L))__		final StreamRecordQueueEntry<Integer> streamRecordQueueEntry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(43, 1L))___		queue.put(streamRecordQueueEntry)___		Assert.assertEquals(1, queue.size())___		CompletableFuture<Void> putOperation = CompletableFuture.runAsync(_			() -> {_				try {_					queue.put(streamRecordQueueEntry2)__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		_		Thread.sleep(10L)___		_		Assert.assertFalse(putOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		_		Assert.assertEquals(streamRecordQueueEntry, queue.poll())___		_		putOperation.get()___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,a,put,operation,blocks,if,the,queue,is,full;test,public,void,test,blocking,put,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,42,0l,final,stream,record,queue,entry,integer,stream,record,queue,entry2,new,stream,record,queue,entry,new,stream,record,43,1l,queue,put,stream,record,queue,entry,assert,assert,equals,1,queue,size,completable,future,void,put,operation,completable,future,run,async,try,queue,put,stream,record,queue,entry2,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,put,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,queue,poll,put,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPut() throws Exception;1503407113;Tests that a put operation blocks if the queue is full.;@Test_	public void testBlockingPut() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(42, 0L))__		final StreamRecordQueueEntry<Integer> streamRecordQueueEntry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(43, 1L))___		queue.put(streamRecordQueueEntry)___		Assert.assertEquals(1, queue.size())___		CompletableFuture<Void> putOperation = CompletableFuture.runAsync(_			() -> {_				try {_					queue.put(streamRecordQueueEntry2)__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		_		Thread.sleep(10L)___		_		Assert.assertFalse(putOperation.isDone())___		streamRecordQueueEntry.complete(Collections.<Integer>emptyList())___		_		Assert.assertEquals(streamRecordQueueEntry, queue.poll())___		_		putOperation.get()___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,a,put,operation,blocks,if,the,queue,is,full;test,public,void,test,blocking,put,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,42,0l,final,stream,record,queue,entry,integer,stream,record,queue,entry2,new,stream,record,queue,entry,new,stream,record,43,1l,queue,put,stream,record,queue,entry,assert,assert,equals,1,queue,size,completable,future,void,put,operation,completable,future,run,async,try,queue,put,stream,record,queue,entry2,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,put,operation,is,done,stream,record,queue,entry,complete,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,queue,poll,put,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPut() throws Exception;1506417942;Tests that a put operation blocks if the queue is full.;@Test_	public void testBlockingPut() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(42, 0L))__		final StreamRecordQueueEntry<Integer> streamRecordQueueEntry2 = new StreamRecordQueueEntry<>(new StreamRecord<>(43, 1L))___		queue.put(streamRecordQueueEntry)___		Assert.assertEquals(1, queue.size())___		CompletableFuture<Void> putOperation = CompletableFuture.runAsync(_			() -> {_				try {_					queue.put(streamRecordQueueEntry2)__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		_		Thread.sleep(10L)___		_		Assert.assertFalse(putOperation.isDone())___		streamRecordQueueEntry.complete(Collections.<Integer>emptyList())___		_		Assert.assertEquals(streamRecordQueueEntry, queue.poll())___		_		putOperation.get()___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};tests,that,a,put,operation,blocks,if,the,queue,is,full;test,public,void,test,blocking,put,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,42,0l,final,stream,record,queue,entry,integer,stream,record,queue,entry2,new,stream,record,queue,entry,new,stream,record,43,1l,queue,put,stream,record,queue,entry,assert,assert,equals,1,queue,size,completable,future,void,put,operation,completable,future,run,async,try,queue,put,stream,record,queue,entry2,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,thread,sleep,10l,assert,assert,false,put,operation,is,done,stream,record,queue,entry,complete,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,queue,poll,put,operation,get,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPoll() throws Exception;1482206691;Test that a poll operation on an empty queue blocks.;@Test_	public void testBlockingPoll() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		WatermarkQueueEntry watermarkQueueEntry = new WatermarkQueueEntry(new Watermark(1L))__		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 2L))___		Assert.assertTrue(queue.isEmpty())___		Future<AsyncResult> peekOperation = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.peekBlockingly()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(peekOperation.isDone())___		queue.put(watermarkQueueEntry)___		AsyncResult watermarkResult = peekOperation.get()___		Assert.assertEquals(watermarkQueueEntry, watermarkResult)__		Assert.assertEquals(1, queue.size())___		Assert.assertEquals(watermarkQueueEntry, queue.poll())__		Assert.assertTrue(queue.isEmpty())___		Future<AsyncResult> pollOperation = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		queue.put(streamRecordQueueEntry)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(streamRecordQueueEntry, pollOperation.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};test,that,a,poll,operation,on,an,empty,queue,blocks;test,public,void,test,blocking,poll,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,watermark,queue,entry,watermark,queue,entry,new,watermark,queue,entry,new,watermark,1l,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,1,2l,assert,assert,true,queue,is,empty,future,async,result,peek,operation,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,peek,blockingly,executor,thread,sleep,10l,assert,assert,false,peek,operation,is,done,queue,put,watermark,queue,entry,async,result,watermark,result,peek,operation,get,assert,assert,equals,watermark,queue,entry,watermark,result,assert,assert,equals,1,queue,size,assert,assert,equals,watermark,queue,entry,queue,poll,assert,assert,true,queue,is,empty,future,async,result,poll,operation,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,queue,put,stream,record,queue,entry,thread,sleep,10l,assert,assert,false,poll,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,poll,operation,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPoll() throws Exception;1495484544;Test that a poll operation on an empty queue blocks.;@Test_	public void testBlockingPoll() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		WatermarkQueueEntry watermarkQueueEntry = new WatermarkQueueEntry(new Watermark(1L))__		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 2L))___		Assert.assertTrue(queue.isEmpty())___		Future<AsyncResult> peekOperation = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.peekBlockingly()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(peekOperation.isDone())___		queue.put(watermarkQueueEntry)___		AsyncResult watermarkResult = peekOperation.get()___		Assert.assertEquals(watermarkQueueEntry, watermarkResult)__		Assert.assertEquals(1, queue.size())___		Assert.assertEquals(watermarkQueueEntry, queue.poll())__		Assert.assertTrue(queue.isEmpty())___		Future<AsyncResult> pollOperation = FlinkFuture.supplyAsync(new Callable<AsyncResult>() {_			@Override_			public AsyncResult call() throws Exception {_				return queue.poll()__			}_		}, executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		queue.put(streamRecordQueueEntry)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(streamRecordQueueEntry, pollOperation.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};test,that,a,poll,operation,on,an,empty,queue,blocks;test,public,void,test,blocking,poll,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,watermark,queue,entry,watermark,queue,entry,new,watermark,queue,entry,new,watermark,1l,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,1,2l,assert,assert,true,queue,is,empty,future,async,result,peek,operation,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,peek,blockingly,executor,thread,sleep,10l,assert,assert,false,peek,operation,is,done,queue,put,watermark,queue,entry,async,result,watermark,result,peek,operation,get,assert,assert,equals,watermark,queue,entry,watermark,result,assert,assert,equals,1,queue,size,assert,assert,equals,watermark,queue,entry,queue,poll,assert,assert,true,queue,is,empty,future,async,result,poll,operation,flink,future,supply,async,new,callable,async,result,override,public,async,result,call,throws,exception,return,queue,poll,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,queue,put,stream,record,queue,entry,thread,sleep,10l,assert,assert,false,poll,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,poll,operation,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPoll() throws Exception;1501760738;Test that a poll operation on an empty queue blocks.;@Test_	public void testBlockingPoll() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		WatermarkQueueEntry watermarkQueueEntry = new WatermarkQueueEntry(new Watermark(1L))__		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 2L))___		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> peekOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.peekBlockingly()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(peekOperation.isDone())___		queue.put(watermarkQueueEntry)___		AsyncResult watermarkResult = peekOperation.get()___		Assert.assertEquals(watermarkQueueEntry, watermarkResult)__		Assert.assertEquals(1, queue.size())___		Assert.assertEquals(watermarkQueueEntry, queue.poll())__		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		queue.put(streamRecordQueueEntry)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		streamRecordQueueEntry.collect(Collections.<Integer>emptyList())___		Assert.assertEquals(streamRecordQueueEntry, pollOperation.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};test,that,a,poll,operation,on,an,empty,queue,blocks;test,public,void,test,blocking,poll,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,watermark,queue,entry,watermark,queue,entry,new,watermark,queue,entry,new,watermark,1l,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,1,2l,assert,assert,true,queue,is,empty,completable,future,async,result,peek,operation,completable,future,supply,async,try,return,queue,peek,blockingly,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,peek,operation,is,done,queue,put,watermark,queue,entry,async,result,watermark,result,peek,operation,get,assert,assert,equals,watermark,queue,entry,watermark,result,assert,assert,equals,1,queue,size,assert,assert,equals,watermark,queue,entry,queue,poll,assert,assert,true,queue,is,empty,completable,future,async,result,poll,operation,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,queue,put,stream,record,queue,entry,thread,sleep,10l,assert,assert,false,poll,operation,is,done,stream,record,queue,entry,collect,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,poll,operation,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPoll() throws Exception;1503407113;Test that a poll operation on an empty queue blocks.;@Test_	public void testBlockingPoll() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		WatermarkQueueEntry watermarkQueueEntry = new WatermarkQueueEntry(new Watermark(1L))__		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 2L))___		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> peekOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.peekBlockingly()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(peekOperation.isDone())___		queue.put(watermarkQueueEntry)___		AsyncResult watermarkResult = peekOperation.get()___		Assert.assertEquals(watermarkQueueEntry, watermarkResult)__		Assert.assertEquals(1, queue.size())___		Assert.assertEquals(watermarkQueueEntry, queue.poll())__		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new FlinkFutureException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		queue.put(streamRecordQueueEntry)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		streamRecordQueueEntry.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(streamRecordQueueEntry, pollOperation.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};test,that,a,poll,operation,on,an,empty,queue,blocks;test,public,void,test,blocking,poll,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,watermark,queue,entry,watermark,queue,entry,new,watermark,queue,entry,new,watermark,1l,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,1,2l,assert,assert,true,queue,is,empty,completable,future,async,result,peek,operation,completable,future,supply,async,try,return,queue,peek,blockingly,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,peek,operation,is,done,queue,put,watermark,queue,entry,async,result,watermark,result,peek,operation,get,assert,assert,equals,watermark,queue,entry,watermark,result,assert,assert,equals,1,queue,size,assert,assert,equals,watermark,queue,entry,queue,poll,assert,assert,true,queue,is,empty,completable,future,async,result,poll,operation,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,flink,future,exception,e,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,queue,put,stream,record,queue,entry,thread,sleep,10l,assert,assert,false,poll,operation,is,done,stream,record,queue,entry,complete,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,poll,operation,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
StreamElementQueueTest -> @Test 	public void testBlockingPoll() throws Exception;1506417942;Test that a poll operation on an empty queue blocks.;@Test_	public void testBlockingPoll() throws Exception {_		OperatorActions operatorActions = mock(OperatorActions.class)__		final StreamElementQueue queue = createStreamElementQueue(1, operatorActions)___		WatermarkQueueEntry watermarkQueueEntry = new WatermarkQueueEntry(new Watermark(1L))__		StreamRecordQueueEntry<Integer> streamRecordQueueEntry = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 2L))___		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> peekOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.peekBlockingly()__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(peekOperation.isDone())___		queue.put(watermarkQueueEntry)___		AsyncResult watermarkResult = peekOperation.get()___		Assert.assertEquals(watermarkQueueEntry, watermarkResult)__		Assert.assertEquals(1, queue.size())___		Assert.assertEquals(watermarkQueueEntry, queue.poll())__		Assert.assertTrue(queue.isEmpty())___		CompletableFuture<AsyncResult> pollOperation = CompletableFuture.supplyAsync(_			() -> {_				try {_					return queue.poll()__				} catch (InterruptedException e) {_					throw new CompletionException(e)__				}_			},_			executor)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		queue.put(streamRecordQueueEntry)___		Thread.sleep(10L)___		Assert.assertFalse(pollOperation.isDone())___		streamRecordQueueEntry.complete(Collections.<Integer>emptyList())___		Assert.assertEquals(streamRecordQueueEntry, pollOperation.get())___		Assert.assertTrue(queue.isEmpty())___		verify(operatorActions, never()).failOperator(any(Exception.class))__	};test,that,a,poll,operation,on,an,empty,queue,blocks;test,public,void,test,blocking,poll,throws,exception,operator,actions,operator,actions,mock,operator,actions,class,final,stream,element,queue,queue,create,stream,element,queue,1,operator,actions,watermark,queue,entry,watermark,queue,entry,new,watermark,queue,entry,new,watermark,1l,stream,record,queue,entry,integer,stream,record,queue,entry,new,stream,record,queue,entry,new,stream,record,1,2l,assert,assert,true,queue,is,empty,completable,future,async,result,peek,operation,completable,future,supply,async,try,return,queue,peek,blockingly,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,thread,sleep,10l,assert,assert,false,peek,operation,is,done,queue,put,watermark,queue,entry,async,result,watermark,result,peek,operation,get,assert,assert,equals,watermark,queue,entry,watermark,result,assert,assert,equals,1,queue,size,assert,assert,equals,watermark,queue,entry,queue,poll,assert,assert,true,queue,is,empty,completable,future,async,result,poll,operation,completable,future,supply,async,try,return,queue,poll,catch,interrupted,exception,e,throw,new,completion,exception,e,executor,thread,sleep,10l,assert,assert,false,poll,operation,is,done,queue,put,stream,record,queue,entry,thread,sleep,10l,assert,assert,false,poll,operation,is,done,stream,record,queue,entry,complete,collections,integer,empty,list,assert,assert,equals,stream,record,queue,entry,poll,operation,get,assert,assert,true,queue,is,empty,verify,operator,actions,never,fail,operator,any,exception,class
