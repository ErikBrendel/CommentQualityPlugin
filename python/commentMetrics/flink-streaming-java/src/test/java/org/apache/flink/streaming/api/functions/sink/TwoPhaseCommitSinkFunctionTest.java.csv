# id;timestamp;commentText;codeText;commentWords;codeWords
TwoPhaseCommitSinkFunctionTest -> private void setupLogger();1509597134;Setup {@link org.apache.log4j.Logger}, the default logger implementation for tests,_to append {@link LoggingEvent}s to {@link #loggingEvents} so that we can assert if_the right messages were logged.__@see #testLogTimeoutAlmostReachedWarningDuringCommit_@see #testLogTimeoutAlmostReachedWarningDuringRecovery;private void setupLogger() {_		logger = Logger.getLogger(TwoPhaseCommitSinkFunction.class)__		testAppender = new AppenderSkeleton() {_			@Override_			protected void append(LoggingEvent event) {_				loggingEvents.add(event)__			}__			@Override_			public void close() {__			}__			@Override_			public boolean requiresLayout() {_				return false__			}_		}__		logger.addAppender(testAppender)__		logger.setLevel(Level.WARN)__	};setup,link,org,apache,log4j,logger,the,default,logger,implementation,for,tests,to,append,link,logging,event,s,to,link,logging,events,so,that,we,can,assert,if,the,right,messages,were,logged,see,test,log,timeout,almost,reached,warning,during,commit,see,test,log,timeout,almost,reached,warning,during,recovery;private,void,setup,logger,logger,logger,get,logger,two,phase,commit,sink,function,class,test,appender,new,appender,skeleton,override,protected,void,append,logging,event,event,logging,events,add,event,override,public,void,close,override,public,boolean,requires,layout,return,false,logger,add,appender,test,appender,logger,set,level,level,warn
TwoPhaseCommitSinkFunctionTest -> private void setupLogger();1509723634;Setup {@link org.apache.log4j.Logger}, the default logger implementation for tests,_to append {@link LoggingEvent}s to {@link #loggingEvents} so that we can assert if_the right messages were logged.__@see #testLogTimeoutAlmostReachedWarningDuringCommit_@see #testLogTimeoutAlmostReachedWarningDuringRecovery;private void setupLogger() {_		Logger.getRootLogger().removeAllAppenders()__		logger = Logger.getLogger(TwoPhaseCommitSinkFunction.class)__		testAppender = new AppenderSkeleton() {_			@Override_			protected void append(LoggingEvent event) {_				loggingEvents.add(event)__			}__			@Override_			public void close() {__			}__			@Override_			public boolean requiresLayout() {_				return false__			}_		}__		logger.addAppender(testAppender)__		logger.setLevel(Level.WARN)__	};setup,link,org,apache,log4j,logger,the,default,logger,implementation,for,tests,to,append,link,logging,event,s,to,link,logging,events,so,that,we,can,assert,if,the,right,messages,were,logged,see,test,log,timeout,almost,reached,warning,during,commit,see,test,log,timeout,almost,reached,warning,during,recovery;private,void,setup,logger,logger,get,root,logger,remove,all,appenders,logger,logger,get,logger,two,phase,commit,sink,function,class,test,appender,new,appender,skeleton,override,protected,void,append,logging,event,event,logging,events,add,event,override,public,void,close,override,public,boolean,requires,layout,return,false,logger,add,appender,test,appender,logger,set,level,level,warn
TwoPhaseCommitSinkFunctionTest -> private void setupLogger();1515213006;Setup {@link org.apache.log4j.Logger}, the default logger implementation for tests,_to append {@link LoggingEvent}s to {@link #loggingEvents} so that we can assert if_the right messages were logged.__@see #testLogTimeoutAlmostReachedWarningDuringCommit_@see #testLogTimeoutAlmostReachedWarningDuringRecovery;private void setupLogger() {_		Logger.getRootLogger().removeAllAppenders()__		logger = Logger.getLogger(TwoPhaseCommitSinkFunction.class)__		testAppender = new AppenderSkeleton() {_			@Override_			protected void append(LoggingEvent event) {_				loggingEvents.add(event)__			}__			@Override_			public void close() {__			}__			@Override_			public boolean requiresLayout() {_				return false__			}_		}__		logger.addAppender(testAppender)__		logger.setLevel(Level.WARN)__	};setup,link,org,apache,log4j,logger,the,default,logger,implementation,for,tests,to,append,link,logging,event,s,to,link,logging,events,so,that,we,can,assert,if,the,right,messages,were,logged,see,test,log,timeout,almost,reached,warning,during,commit,see,test,log,timeout,almost,reached,warning,during,recovery;private,void,setup,logger,logger,get,root,logger,remove,all,appenders,logger,logger,get,logger,two,phase,commit,sink,function,class,test,appender,new,appender,skeleton,override,protected,void,append,logging,event,event,logging,events,add,event,override,public,void,close,override,public,boolean,requires,layout,return,false,logger,add,appender,test,appender,logger,set,level,level,warn
TwoPhaseCommitSinkFunctionTest -> private void setupLogger();1519567828;Setup {@link org.apache.log4j.Logger}, the default logger implementation for tests,_to append {@link LoggingEvent}s to {@link #loggingEvents} so that we can assert if_the right messages were logged.__@see #testLogTimeoutAlmostReachedWarningDuringCommit_@see #testLogTimeoutAlmostReachedWarningDuringRecovery;private void setupLogger() {_		Logger.getRootLogger().removeAllAppenders()__		logger = Logger.getLogger(TwoPhaseCommitSinkFunction.class)__		testAppender = new AppenderSkeleton() {_			@Override_			protected void append(LoggingEvent event) {_				loggingEvents.add(event)__			}__			@Override_			public void close() {__			}__			@Override_			public boolean requiresLayout() {_				return false__			}_		}__		logger.addAppender(testAppender)__		logger.setLevel(Level.WARN)__	};setup,link,org,apache,log4j,logger,the,default,logger,implementation,for,tests,to,append,link,logging,event,s,to,link,logging,events,so,that,we,can,assert,if,the,right,messages,were,logged,see,test,log,timeout,almost,reached,warning,during,commit,see,test,log,timeout,almost,reached,warning,during,recovery;private,void,setup,logger,logger,get,root,logger,remove,all,appenders,logger,logger,get,logger,two,phase,commit,sink,function,class,test,appender,new,appender,skeleton,override,protected,void,append,logging,event,event,logging,events,add,event,override,public,void,close,override,public,boolean,requires,layout,return,false,logger,add,appender,test,appender,logger,set,level,level,warn
TwoPhaseCommitSinkFunctionTest -> private void setupLogger();1534491183;Setup {@link org.apache.log4j.Logger}, the default logger implementation for tests,_to append {@link LoggingEvent}s to {@link #loggingEvents} so that we can assert if_the right messages were logged.__@see #testLogTimeoutAlmostReachedWarningDuringCommit_@see #testLogTimeoutAlmostReachedWarningDuringRecovery;private void setupLogger() {_		Logger.getRootLogger().removeAllAppenders()__		logger = Logger.getLogger(TwoPhaseCommitSinkFunction.class)__		testAppender = new AppenderSkeleton() {_			@Override_			protected void append(LoggingEvent event) {_				loggingEvents.add(event)__			}__			@Override_			public void close() {__			}__			@Override_			public boolean requiresLayout() {_				return false__			}_		}__		logger.addAppender(testAppender)__		logger.setLevel(Level.WARN)__	};setup,link,org,apache,log4j,logger,the,default,logger,implementation,for,tests,to,append,link,logging,event,s,to,link,logging,events,so,that,we,can,assert,if,the,right,messages,were,logged,see,test,log,timeout,almost,reached,warning,during,commit,see,test,log,timeout,almost,reached,warning,during,recovery;private,void,setup,logger,logger,get,root,logger,remove,all,appenders,logger,logger,get,logger,two,phase,commit,sink,function,class,test,appender,new,appender,skeleton,override,protected,void,append,logging,event,event,logging,events,add,event,override,public,void,close,override,public,boolean,requires,layout,return,false,logger,add,appender,test,appender,logger,set,level,level,warn
