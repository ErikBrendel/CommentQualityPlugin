# id;timestamp;commentText;codeText;commentWords;codeWords
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1482249781;Tests that the schedule at fixed rate callback is called under the given lock;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1492678357;Tests that the schedule at fixed rate callback is called under the given lock;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1493195810;Tests that the schedule at fixed rate callback is called under the given lock;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1495484544;Tests that the schedule at fixed rate callback is called under the given lock.;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1508969168;Tests that the schedule at fixed rate callback is called under the given lock.;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1511447023;Tests that the schedule at fixed rate callback is called under the given lock.;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testScheduleAtFixedRateHoldsLock() throws Exception;1526336590;Tests that the schedule at fixed rate callback is called under the given lock.;@Test_	public void testScheduleAtFixedRateHoldsLock() throws Exception {__		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final OneShotLatch awaitCallback = new OneShotLatch()___		try {_			assertEquals(0, timer.getNumTasksScheduled())___			_			ScheduledFuture<?> future = timer.scheduleAtFixedRate(_				new ProcessingTimeCallback() {_					@Override_					public void onProcessingTime(long timestamp) {_						assertTrue(Thread.holdsLock(lock))___						awaitCallback.trigger()__					}_				},_				0L,_				100L)___			_			awaitCallback.await()___			_			future.cancel(true)___			_			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}_		}_		finally {_			timer.shutdownService()__		}_	};tests,that,the,schedule,at,fixed,rate,callback,is,called,under,the,given,lock;test,public,void,test,schedule,at,fixed,rate,holds,lock,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,one,shot,latch,await,callback,new,one,shot,latch,try,assert,equals,0,timer,get,num,tasks,scheduled,scheduled,future,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,assert,true,thread,holds,lock,lock,await,callback,trigger,0l,100l,await,callback,await,future,cancel,true,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout = 10000) 	public void testScheduleAtFixedRate() throws Exception;1495484544;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout = 10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout = 10000) 	public void testScheduleAtFixedRate() throws Exception;1508969168;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout = 10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout = 10000) 	public void testScheduleAtFixedRate() throws Exception;1511447023;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout = 10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout = 10000) 	public void testScheduleAtFixedRate() throws Exception;1526336590;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout = 10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1482249781;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesceAndAwaitPending()___			assertTrue(scheduledFuture.isCancelled())___			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,and,await,pending,assert,true,scheduled,future,is,cancelled,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1492678357;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesceAndAwaitPending()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,and,await,pending,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1493195810;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesceAndAwaitPending()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,and,await,pending,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1495484544;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesceAndAwaitPending()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,and,await,pending,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1508969168;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesce()__			timer.awaitPendingAfterQuiesce()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,timer,await,pending,after,quiesce,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1511447023;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesce()__			timer.awaitPendingAfterQuiesce()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,timer,await,pending,after,quiesce,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test 	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception;1526336590;Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at_fix rate future.;@Test_	public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		try {_			ScheduledFuture<?> scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_				}_			}, 0L, period)___			assertFalse(scheduledFuture.isDone())___			_			timer.quiesce()__			timer.awaitPendingAfterQuiesce()___			_			_			_			try {_				scheduledFuture.get()__				fail("scheduled future is not cancelled")__			}_			catch (CancellationException ignored) {_				_			}__			scheduledFuture = timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					throw new Exception("Test exception.")__				}_			}, 0L, 100L)___			assertNotNull(scheduledFuture)___			assertEquals(0, timer.getNumTasksScheduled())___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,shutting,down,the,system,processing,time,service,will,also,cancel,the,scheduled,at,fix,rate,future;test,public,void,test,quiesce,and,awaiting,cancels,scheduled,at,fix,rate,future,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,try,scheduled,future,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,0l,period,assert,false,scheduled,future,is,done,timer,quiesce,timer,await,pending,after,quiesce,try,scheduled,future,get,fail,scheduled,future,is,not,cancelled,catch,cancellation,exception,ignored,scheduled,future,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,throw,new,exception,test,exception,0l,100l,assert,not,null,scheduled,future,assert,equals,0,timer,get,num,tasks,scheduled,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout=10000) 	public void testScheduleAtFixedRate() throws Exception;1482249781;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout=10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout=10000) 	public void testScheduleAtFixedRate() throws Exception;1492678357;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout=10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
SystemProcessingTimeServiceTest -> @Test(timeout=10000) 	public void testScheduleAtFixedRate() throws Exception;1493195810;Tests that SystemProcessingTimeService#scheduleAtFixedRate is actually triggered multiple_times.;@Test(timeout=10000)_	public void testScheduleAtFixedRate() throws Exception {_		final Object lock = new Object()__		final AtomicReference<Throwable> errorRef = new AtomicReference<>()__		final long period = 10L__		final int countDown = 3___		final SystemProcessingTimeService timer = new SystemProcessingTimeService(_			new ReferenceSettingExceptionHandler(errorRef), lock)___		final CountDownLatch countDownLatch = new CountDownLatch(countDown)___		try {_			timer.scheduleAtFixedRate(new ProcessingTimeCallback() {_				@Override_				public void onProcessingTime(long timestamp) throws Exception {_					countDownLatch.countDown()__				}_			}, 0L, period)___			countDownLatch.await()___			if (errorRef.get() != null) {_				throw new Exception(errorRef.get())__			}__		} finally {_			timer.shutdownService()__		}_	};tests,that,system,processing,time,service,schedule,at,fixed,rate,is,actually,triggered,multiple,times;test,timeout,10000,public,void,test,schedule,at,fixed,rate,throws,exception,final,object,lock,new,object,final,atomic,reference,throwable,error,ref,new,atomic,reference,final,long,period,10l,final,int,count,down,3,final,system,processing,time,service,timer,new,system,processing,time,service,new,reference,setting,exception,handler,error,ref,lock,final,count,down,latch,count,down,latch,new,count,down,latch,count,down,try,timer,schedule,at,fixed,rate,new,processing,time,callback,override,public,void,on,processing,time,long,timestamp,throws,exception,count,down,latch,count,down,0l,period,count,down,latch,await,if,error,ref,get,null,throw,new,exception,error,ref,get,finally,timer,shutdown,service
