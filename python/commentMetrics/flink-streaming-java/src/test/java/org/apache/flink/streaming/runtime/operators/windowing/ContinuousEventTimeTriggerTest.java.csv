# id;timestamp;commentText;codeText;commentWords;codeWords
ContinuousEventTimeTriggerTest -> @Test 	public void testClear() throws Exception;1489585296;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())_ _	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,1,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testClear() throws Exception;1495484544;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())_ _	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,1,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testClear() throws Exception;1502726910;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())_ _	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,1,test,harness,num,event,time,timers,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testLateElementTriggersImmediately() throws Exception;1489585296;Verify that late elements trigger immediately and also that we don't set a timer_for those.;@Test_	public void testLateElementTriggersImmediately() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		testHarness.advanceWatermark(2)___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())__	};verify,that,late,elements,trigger,immediately,and,also,that,we,don,t,set,a,timer,for,those;test,public,void,test,late,element,triggers,immediately,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,test,harness,advance,watermark,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testLateElementTriggersImmediately() throws Exception;1495484544;Verify that late elements trigger immediately and also that we don't set a timer_for those.;@Test_	public void testLateElementTriggersImmediately() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		testHarness.advanceWatermark(2)___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())__	};verify,that,late,elements,trigger,immediately,and,also,that,we,don,t,set,a,timer,for,those;test,public,void,test,late,element,triggers,immediately,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,test,harness,advance,watermark,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testLateElementTriggersImmediately() throws Exception;1502726910;Verify that late elements trigger immediately and also that we don't set a timer_for those.;@Test_	public void testLateElementTriggersImmediately() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		testHarness.advanceWatermark(2)___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())__	};verify,that,late,elements,trigger,immediately,and,also,that,we,don,t,set,a,timer,for,those;test,public,void,test,late,element,triggers,immediately,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,test,harness,advance,watermark,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testTriggerHandlesAllOnTimerCalls() throws Exception;1489585296;Verify that the trigger doesn't fail with an NPE if we insert a timer firing when there is_no trigger state.;@Test_	public void testTriggerHandlesAllOnTimerCalls() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.milliseconds(5)), new TimeWindow.Serializer())___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		_		_		testHarness.advanceWatermark(10)___		_		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		_		testHarness.invokeOnEventTime(20, new TimeWindow(0, 2))__	};verify,that,the,trigger,doesn,t,fail,with,an,npe,if,we,insert,a,timer,firing,when,there,is,no,trigger,state;test,public,void,test,trigger,handles,all,on,timer,calls,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,milliseconds,5,new,time,window,serializer,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,test,harness,advance,watermark,10,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,test,harness,invoke,on,event,time,20,new,time,window,0,2
ContinuousEventTimeTriggerTest -> @Test 	public void testTriggerHandlesAllOnTimerCalls() throws Exception;1495484544;Verify that the trigger doesn't fail with an NPE if we insert a timer firing when there is_no trigger state.;@Test_	public void testTriggerHandlesAllOnTimerCalls() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.milliseconds(5)), new TimeWindow.Serializer())___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		_		_		testHarness.advanceWatermark(10)___		_		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		_		testHarness.invokeOnEventTime(20, new TimeWindow(0, 2))__	};verify,that,the,trigger,doesn,t,fail,with,an,npe,if,we,insert,a,timer,firing,when,there,is,no,trigger,state;test,public,void,test,trigger,handles,all,on,timer,calls,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,milliseconds,5,new,time,window,serializer,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,test,harness,advance,watermark,10,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,test,harness,invoke,on,event,time,20,new,time,window,0,2
ContinuousEventTimeTriggerTest -> @Test 	public void testTriggerHandlesAllOnTimerCalls() throws Exception;1502726910;Verify that the trigger doesn't fail with an NPE if we insert a timer firing when there is_no trigger state.;@Test_	public void testTriggerHandlesAllOnTimerCalls() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.milliseconds(5)), new TimeWindow.Serializer())___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		_		_		testHarness.advanceWatermark(10)___		_		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))___		_		testHarness.invokeOnEventTime(20, new TimeWindow(0, 2))__	};verify,that,the,trigger,doesn,t,fail,with,an,npe,if,we,insert,a,timer,firing,when,there,is,no,trigger,state;test,public,void,test,trigger,handles,all,on,timer,calls,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,milliseconds,5,new,time,window,serializer,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,test,harness,advance,watermark,10,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,test,harness,invoke,on,event,time,20,new,time,window,0,2
ContinuousEventTimeTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1489585296;Verify that state <TimeWindow>of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		_		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		Collection<Tuple2<TimeWindow, TriggerResult>> triggerResults = testHarness.advanceWatermark(2)__		boolean sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(0, 2))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		triggerResults = testHarness.advanceWatermark(4)__		sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(2, 4))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())__	};verify,that,state,time,window,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,collection,tuple2,time,window,trigger,result,trigger,results,test,harness,advance,watermark,2,boolean,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,0,2,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,1,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,trigger,results,test,harness,advance,watermark,4,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,2,4,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1495484544;Verify that state &lt_TimeWindow&gt_of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		_		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		Collection<Tuple2<TimeWindow, TriggerResult>> triggerResults = testHarness.advanceWatermark(2)__		boolean sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(0, 2))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		triggerResults = testHarness.advanceWatermark(4)__		sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(2, 4))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())__	};verify,that,state,lt,time,window,gt,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,collection,tuple2,time,window,trigger,result,trigger,results,test,harness,advance,watermark,2,boolean,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,0,2,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,1,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,trigger,results,test,harness,advance,watermark,4,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,2,4,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
ContinuousEventTimeTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1502726910;Verify that state &lt_TimeWindow&gt_of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(ContinuousEventTimeTrigger.<TimeWindow>of(Time.hours(1)), new TimeWindow.Serializer())___		_		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(4, testHarness.numEventTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		Collection<Tuple2<TimeWindow, TriggerResult>> triggerResults = testHarness.advanceWatermark(2)__		boolean sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(0, 2))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(3, testHarness.numEventTimeTimers())__		assertEquals(1, testHarness.numEventTimeTimers(new TimeWindow(0, 2)))__		assertEquals(2, testHarness.numEventTimeTimers(new TimeWindow(2, 4)))___		triggerResults = testHarness.advanceWatermark(4)__		sawFiring = false__		for (Tuple2<TimeWindow, TriggerResult> r : triggerResults) {_			if (r.f0.equals(new TimeWindow(2, 4))) {_				sawFiring = true__				assertTrue(r.f1.equals(TriggerResult.FIRE))__			}_		}_		assertTrue(sawFiring)___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(2, testHarness.numEventTimeTimers())__	};verify,that,state,lt,time,window,gt,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,continuous,event,time,trigger,time,window,of,time,hours,1,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,4,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,collection,tuple2,time,window,trigger,result,trigger,results,test,harness,advance,watermark,2,boolean,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,0,2,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,3,test,harness,num,event,time,timers,assert,equals,1,test,harness,num,event,time,timers,new,time,window,0,2,assert,equals,2,test,harness,num,event,time,timers,new,time,window,2,4,trigger,results,test,harness,advance,watermark,4,saw,firing,false,for,tuple2,time,window,trigger,result,r,trigger,results,if,r,f0,equals,new,time,window,2,4,saw,firing,true,assert,true,r,f1,equals,trigger,result,fire,assert,true,saw,firing,assert,equals,2,test,harness,num,state,entries,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,2,test,harness,num,event,time,timers
