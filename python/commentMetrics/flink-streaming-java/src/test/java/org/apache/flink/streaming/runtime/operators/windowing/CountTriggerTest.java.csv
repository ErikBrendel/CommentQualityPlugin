# id;timestamp;commentText;codeText;commentWords;codeWords
CountTriggerTest -> @Test 	public void testClear() throws Exception;1485250954;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))__	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4
CountTriggerTest -> @Test 	public void testClear() throws Exception;1495484544;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))__	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4
CountTriggerTest -> @Test 	public void testClear() throws Exception;1502726910;Verify that clear() does not leak across windows.;@Test_	public void testClear() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(2, 4))___		assertEquals(1, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))___		testHarness.clearTriggerState(new TimeWindow(0, 2))___		assertEquals(0, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(2, 4)))__	};verify,that,clear,does,not,leak,across,windows;test,public,void,test,clear,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4,test,harness,clear,trigger,state,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,0,test,harness,num,state,entries,new,time,window,2,4
CountTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1485250954;Verify that state of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		_		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numStateEntries())__	};verify,that,state,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,state,entries
CountTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1495484544;Verify that state of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		_		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numStateEntries())__	};verify,that,state,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,state,entries
CountTriggerTest -> @Test 	public void testWindowSeparationAndFiring() throws Exception;1502726910;Verify that state of separate windows does not leak into other windows.;@Test_	public void testWindowSeparationAndFiring() throws Exception {_		TriggerTestHarness<Object, TimeWindow> testHarness =_				new TriggerTestHarness<>(CountTrigger.<TimeWindow>of(3), new TimeWindow.Serializer())___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numProcessingTimeTimers())__		assertEquals(0, testHarness.numEventTimeTimers())___		assertEquals(2, testHarness.numStateEntries())__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(0, 2)))__		assertEquals(TriggerResult.CONTINUE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		_		assertEquals(1, testHarness.numStateEntries())__		assertEquals(0, testHarness.numStateEntries(new TimeWindow(0, 2)))__		assertEquals(1, testHarness.numStateEntries(new TimeWindow(2, 4)))___		assertEquals(TriggerResult.FIRE, testHarness.processElement(new StreamRecord<Object>(1), new TimeWindow(2, 4)))___		_		assertEquals(0, testHarness.numStateEntries())__	};verify,that,state,of,separate,windows,does,not,leak,into,other,windows;test,public,void,test,window,separation,and,firing,throws,exception,trigger,test,harness,object,time,window,test,harness,new,trigger,test,harness,count,trigger,time,window,of,3,new,time,window,serializer,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,processing,time,timers,assert,equals,0,test,harness,num,event,time,timers,assert,equals,2,test,harness,num,state,entries,assert,equals,1,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,0,2,assert,equals,trigger,result,continue,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,1,test,harness,num,state,entries,assert,equals,0,test,harness,num,state,entries,new,time,window,0,2,assert,equals,1,test,harness,num,state,entries,new,time,window,2,4,assert,equals,trigger,result,fire,test,harness,process,element,new,stream,record,object,1,new,time,window,2,4,assert,equals,0,test,harness,num,state,entries
