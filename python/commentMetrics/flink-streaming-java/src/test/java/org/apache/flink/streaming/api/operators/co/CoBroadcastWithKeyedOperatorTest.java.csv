# id;timestamp;commentText;codeText;commentWords;codeWords
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1518008896;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1519567828;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1520354103;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1523545470;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1531296542;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
CoBroadcastWithKeyedOperatorTest -> @Test 	public void testAccessToKeyedStateIt() throws Exception;1550863152;Test the iteration over the keyed state on the broadcast side.;@Test_	public void testAccessToKeyedStateIt() throws Exception {_		final List<String> test1content = new ArrayList<>()__		test1content.add("test1")__		test1content.add("test1")___		final List<String> test2content = new ArrayList<>()__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")__		test2content.add("test2")___		final List<String> test3content = new ArrayList<>()__		test3content.add("test3")__		test3content.add("test3")__		test3content.add("test3")___		final Map<String, List<String>> expectedState = new HashMap<>()__		expectedState.put("test1", test1content)__		expectedState.put("test2", test2content)__		expectedState.put("test3", test3content)___		try (_				TwoInputStreamOperatorTestHarness<String, Integer, String> testHarness = getInitializedTestHarness(_						BasicTypeInfo.STRING_TYPE_INFO,_						new IdentityKeySelector<>(),_						new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))_		) {__			_			testHarness.processElement1(new StreamRecord<>("test1", 12L))__			testHarness.processElement1(new StreamRecord<>("test1", 12L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))__			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))__			testHarness.processElement1(new StreamRecord<>("test3", 14L))___			testHarness.processElement1(new StreamRecord<>("test2", 13L))___			_			_			testHarness.processElement2(new StreamRecord<>(1, 13L))__		}_	};test,the,iteration,over,the,keyed,state,on,the,broadcast,side;test,public,void,test,access,to,keyed,state,it,throws,exception,final,list,string,test1content,new,array,list,test1content,add,test1,test1content,add,test1,final,list,string,test2content,new,array,list,test2content,add,test2,test2content,add,test2,test2content,add,test2,test2content,add,test2,final,list,string,test3content,new,array,list,test3content,add,test3,test3content,add,test3,test3content,add,test3,final,map,string,list,string,expected,state,new,hash,map,expected,state,put,test1,test1content,expected,state,put,test2,test2content,expected,state,put,test3,test3content,try,two,input,stream,operator,test,harness,string,integer,string,test,harness,get,initialized,test,harness,basic,type,info,new,identity,key,selector,new,stateful,function,with,keyed,state,accessed,on,broadcast,expected,state,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test1,12l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test3,14l,test,harness,process,element1,new,stream,record,test2,13l,test,harness,process,element2,new,stream,record,1,13l
