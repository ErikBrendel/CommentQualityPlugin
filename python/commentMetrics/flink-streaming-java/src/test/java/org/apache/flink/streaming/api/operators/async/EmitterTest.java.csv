# id;timestamp;commentText;codeText;commentWords;codeWords
EmitterTest -> @Test 	public void testEmitterWithExceptions() throws Exception;1482206691;Tests that the emitter handles exceptions occurring in the {@link AsyncCollector} correctly.;@Test_	public void testEmitterWithExceptions() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new Watermark(3L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 3___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		final Exception testException = new Exception("Test exception")___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)___			record2.collect(testException)__			record1.collect(Arrays.asList(1))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)___			ArgumentCaptor<Throwable> argumentCaptor = ArgumentCaptor.forClass(Throwable.class)___			verify(operatorActions).failOperator(argumentCaptor.capture())___			Throwable failureCause = argumentCaptor.getValue()___			Assert.assertNotNull(failureCause.getCause())__			Assert.assertTrue(failureCause.getCause() instanceof ExecutionException)___			Assert.assertNotNull(failureCause.getCause().getCause())__			Assert.assertEquals(testException, failureCause.getCause().getCause())__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,handles,exceptions,occurring,in,the,link,async,collector,correctly;test,public,void,test,emitter,with,exceptions,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,watermark,3l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,3,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,final,exception,test,exception,new,exception,test,exception,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,queue,put,record1,queue,put,record2,queue,put,watermark1,record2,collect,test,exception,record1,collect,arrays,as,list,1,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,argument,captor,throwable,argument,captor,argument,captor,for,class,throwable,class,verify,operator,actions,fail,operator,argument,captor,capture,throwable,failure,cause,argument,captor,get,value,assert,assert,not,null,failure,cause,get,cause,assert,assert,true,failure,cause,get,cause,instanceof,execution,exception,assert,assert,not,null,failure,cause,get,cause,get,cause,assert,assert,equals,test,exception,failure,cause,get,cause,get,cause,finally,emitter,stop,emitter,thread,interrupt
EmitterTest -> @Test 	public void testEmitterWithExceptions() throws Exception;1495484544;Tests that the emitter handles exceptions occurring in the {@link AsyncCollector} correctly.;@Test_	public void testEmitterWithExceptions() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new Watermark(3L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 3___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		final Exception testException = new Exception("Test exception")___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)___			record2.collect(testException)__			record1.collect(Arrays.asList(1))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)___			ArgumentCaptor<Throwable> argumentCaptor = ArgumentCaptor.forClass(Throwable.class)___			verify(operatorActions).failOperator(argumentCaptor.capture())___			Throwable failureCause = argumentCaptor.getValue()___			Assert.assertNotNull(failureCause.getCause())__			Assert.assertTrue(failureCause.getCause() instanceof ExecutionException)___			Assert.assertNotNull(failureCause.getCause().getCause())__			Assert.assertEquals(testException, failureCause.getCause().getCause())__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,handles,exceptions,occurring,in,the,link,async,collector,correctly;test,public,void,test,emitter,with,exceptions,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,watermark,3l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,3,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,final,exception,test,exception,new,exception,test,exception,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,queue,put,record1,queue,put,record2,queue,put,watermark1,record2,collect,test,exception,record1,collect,arrays,as,list,1,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,argument,captor,throwable,argument,captor,argument,captor,for,class,throwable,class,verify,operator,actions,fail,operator,argument,captor,capture,throwable,failure,cause,argument,captor,get,value,assert,assert,not,null,failure,cause,get,cause,assert,assert,true,failure,cause,get,cause,instanceof,execution,exception,assert,assert,not,null,failure,cause,get,cause,get,cause,assert,assert,equals,test,exception,failure,cause,get,cause,get,cause,finally,emitter,stop,emitter,thread,interrupt
EmitterTest -> @Test 	public void testEmitterWithExceptions() throws Exception;1503407113;Tests that the emitter handles exceptions occurring in the {@link ResultFuture} correctly.;@Test_	public void testEmitterWithExceptions() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new Watermark(3L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 3___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		final Exception testException = new Exception("Test exception")___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)___			record2.completeExceptionally(testException)__			record1.complete(Arrays.asList(1))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)___			ArgumentCaptor<Throwable> argumentCaptor = ArgumentCaptor.forClass(Throwable.class)___			verify(operatorActions).failOperator(argumentCaptor.capture())___			Throwable failureCause = argumentCaptor.getValue()___			Assert.assertNotNull(failureCause.getCause())__			Assert.assertTrue(failureCause.getCause() instanceof ExecutionException)___			Assert.assertNotNull(failureCause.getCause().getCause())__			Assert.assertEquals(testException, failureCause.getCause().getCause())__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,handles,exceptions,occurring,in,the,link,result,future,correctly;test,public,void,test,emitter,with,exceptions,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,watermark,3l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,3,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,final,exception,test,exception,new,exception,test,exception,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,queue,put,record1,queue,put,record2,queue,put,watermark1,record2,complete,exceptionally,test,exception,record1,complete,arrays,as,list,1,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,argument,captor,throwable,argument,captor,argument,captor,for,class,throwable,class,verify,operator,actions,fail,operator,argument,captor,capture,throwable,failure,cause,argument,captor,get,value,assert,assert,not,null,failure,cause,get,cause,assert,assert,true,failure,cause,get,cause,instanceof,execution,exception,assert,assert,not,null,failure,cause,get,cause,get,cause,assert,assert,equals,test,exception,failure,cause,get,cause,get,cause,finally,emitter,stop,emitter,thread,interrupt
EmitterTest -> @Test 	public void testEmitterWithOrderedQueue() throws Exception;1482206691;Tests that the emitter outputs completed stream element queue entries.;@Test_	public void testEmitterWithOrderedQueue() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new StreamRecord<>(2, 0L),_			new StreamRecord<>(3, 1L),_			new StreamRecord<>(4, 1L),_			new Watermark(3L),_			new StreamRecord<>(5, 4L),_			new StreamRecord<>(6, 4L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 5___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))__			StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 4L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)__			queue.put(record3)___			record2.collect(Arrays.asList(3, 4))__			record1.collect(Arrays.asList(1, 2))__			record3.collect(Arrays.asList(5, 6))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,outputs,completed,stream,element,queue,entries;test,public,void,test,emitter,with,ordered,queue,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,stream,record,2,0l,new,stream,record,3,1l,new,stream,record,4,1l,new,watermark,3l,new,stream,record,5,4l,new,stream,record,6,4l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,5,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,4l,queue,put,record1,queue,put,record2,queue,put,watermark1,queue,put,record3,record2,collect,arrays,as,list,3,4,record1,collect,arrays,as,list,1,2,record3,collect,arrays,as,list,5,6,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,finally,emitter,stop,emitter,thread,interrupt
EmitterTest -> @Test 	public void testEmitterWithOrderedQueue() throws Exception;1495484544;Tests that the emitter outputs completed stream element queue entries.;@Test_	public void testEmitterWithOrderedQueue() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new StreamRecord<>(2, 0L),_			new StreamRecord<>(3, 1L),_			new StreamRecord<>(4, 1L),_			new Watermark(3L),_			new StreamRecord<>(5, 4L),_			new StreamRecord<>(6, 4L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 5___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))__			StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 4L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)__			queue.put(record3)___			record2.collect(Arrays.asList(3, 4))__			record1.collect(Arrays.asList(1, 2))__			record3.collect(Arrays.asList(5, 6))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,outputs,completed,stream,element,queue,entries;test,public,void,test,emitter,with,ordered,queue,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,stream,record,2,0l,new,stream,record,3,1l,new,stream,record,4,1l,new,watermark,3l,new,stream,record,5,4l,new,stream,record,6,4l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,5,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,4l,queue,put,record1,queue,put,record2,queue,put,watermark1,queue,put,record3,record2,collect,arrays,as,list,3,4,record1,collect,arrays,as,list,1,2,record3,collect,arrays,as,list,5,6,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,finally,emitter,stop,emitter,thread,interrupt
EmitterTest -> @Test 	public void testEmitterWithOrderedQueue() throws Exception;1503407113;Tests that the emitter outputs completed stream element queue entries.;@Test_	public void testEmitterWithOrderedQueue() throws Exception {_		Object lock = new Object()__		List<StreamElement> list = new ArrayList<>()__		Output<StreamRecord<Integer>> output = new CollectorOutput<>(list)___		List<StreamElement> expected = Arrays.asList(_			new StreamRecord<>(1, 0L),_			new StreamRecord<>(2, 0L),_			new StreamRecord<>(3, 1L),_			new StreamRecord<>(4, 1L),_			new Watermark(3L),_			new StreamRecord<>(5, 4L),_			new StreamRecord<>(6, 4L))___		OperatorActions operatorActions = mock(OperatorActions.class)___		final int capacity = 5___		StreamElementQueue queue = new OrderedStreamElementQueue(capacity, executor, operatorActions)___		final Emitter<Integer> emitter = new Emitter<>(lock, output, queue, operatorActions)___		final Thread emitterThread = new Thread(emitter)__		emitterThread.start()___		try {_			StreamRecordQueueEntry<Integer> record1 = new StreamRecordQueueEntry<>(new StreamRecord<>(1, 0L))__			StreamRecordQueueEntry<Integer> record2 = new StreamRecordQueueEntry<>(new StreamRecord<>(2, 1L))__			WatermarkQueueEntry watermark1 = new WatermarkQueueEntry(new Watermark(3L))__			StreamRecordQueueEntry<Integer> record3 = new StreamRecordQueueEntry<>(new StreamRecord<>(3, 4L))___			queue.put(record1)__			queue.put(record2)__			queue.put(watermark1)__			queue.put(record3)___			record2.complete(Arrays.asList(3, 4))__			record1.complete(Arrays.asList(1, 2))__			record3.complete(Arrays.asList(5, 6))___			synchronized (lock) {_				while (!queue.isEmpty()) {_					lock.wait()__				}_			}__			Assert.assertEquals(expected, list)__		} finally {_			emitter.stop()__			emitterThread.interrupt()__		}_	};tests,that,the,emitter,outputs,completed,stream,element,queue,entries;test,public,void,test,emitter,with,ordered,queue,throws,exception,object,lock,new,object,list,stream,element,list,new,array,list,output,stream,record,integer,output,new,collector,output,list,list,stream,element,expected,arrays,as,list,new,stream,record,1,0l,new,stream,record,2,0l,new,stream,record,3,1l,new,stream,record,4,1l,new,watermark,3l,new,stream,record,5,4l,new,stream,record,6,4l,operator,actions,operator,actions,mock,operator,actions,class,final,int,capacity,5,stream,element,queue,queue,new,ordered,stream,element,queue,capacity,executor,operator,actions,final,emitter,integer,emitter,new,emitter,lock,output,queue,operator,actions,final,thread,emitter,thread,new,thread,emitter,emitter,thread,start,try,stream,record,queue,entry,integer,record1,new,stream,record,queue,entry,new,stream,record,1,0l,stream,record,queue,entry,integer,record2,new,stream,record,queue,entry,new,stream,record,2,1l,watermark,queue,entry,watermark1,new,watermark,queue,entry,new,watermark,3l,stream,record,queue,entry,integer,record3,new,stream,record,queue,entry,new,stream,record,3,4l,queue,put,record1,queue,put,record2,queue,put,watermark1,queue,put,record3,record2,complete,arrays,as,list,3,4,record1,complete,arrays,as,list,1,2,record3,complete,arrays,as,list,5,6,synchronized,lock,while,queue,is,empty,lock,wait,assert,assert,equals,expected,list,finally,emitter,stop,emitter,thread,interrupt
