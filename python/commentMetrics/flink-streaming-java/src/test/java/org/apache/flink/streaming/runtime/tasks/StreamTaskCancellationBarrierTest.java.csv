# id;timestamp;commentText;codeText;commentWords;codeWords
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1478636134;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1480624969;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1486732842;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1487871589;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1493195810;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1495484544;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1502801814;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1509118643;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTask<String, String> task = new OneInputStreamTask<String, String>()__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				task,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,string,string,task,new,one,input,stream,task,string,string,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,task,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1515519059;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1516626397;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierOneInput() throws Exception;1517489695;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierOneInput() throws Exception {__		OneInputStreamTaskTestHarness<String, String> testHarness = new OneInputStreamTaskTestHarness<>(_				OneInputStreamTask::new,_				1, 2,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		StreamMap<String, String> mapOperator = new StreamMap<>(new IdentityMap())__		streamConfig.setStreamOperator(mapOperator)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 1)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,one,input,throws,exception,one,input,stream,task,test,harness,string,string,test,harness,new,one,input,stream,task,test,harness,one,input,stream,task,new,1,2,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,stream,map,string,string,map,operator,new,stream,map,new,identity,map,stream,config,set,stream,operator,map,operator,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,1,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1478636134;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()))__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1480624969;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()))__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1486732842;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()))__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1487871589;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forFullCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,full,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1493195810;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forFullCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,full,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1495484544;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forFullCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,full,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1502801814;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forFullCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,full,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1509118643;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTask<String, ?> task = new InitBlockingTask()__		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(task, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,string,task,new,init,blocking,task,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,task,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1515519059;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(_				InitBlockingTask::new, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		StreamTask<String, ?> task = testHarness.getTask()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,init,blocking,task,new,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,stream,task,string,task,test,harness,get,task,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1516626397;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(_				InitBlockingTask::new, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		StreamTask<String, ?> task = testHarness.getTask()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forCheckpoint())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,init,blocking,task,new,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,stream,task,string,task,test,harness,get,task,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,checkpoint,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testEmitCancellationBarrierWhenNotReady() throws Exception;1517489695;This test checks that tasks emit a proper cancel checkpoint barrier, if a "trigger checkpoint" message_comes before they are ready.;@Test_	public void testEmitCancellationBarrierWhenNotReady() throws Exception {_		StreamTaskTestHarness<String> testHarness = new StreamTaskTestHarness<>(_				InitBlockingTask::new, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		_		testHarness.invoke()___		StreamTask<String, ?> task = testHarness.getTask()___		_		boolean result = task.triggerCheckpoint(new CheckpointMetaData(41L, System.currentTimeMillis()),_			CheckpointOptions.forCheckpointWithDefaultLocation())__		assertFalse("task triggered checkpoint though not ready", result)___		_		Object emitted = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", emitted)__		assertTrue("wrong type emitted", emitted instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 41L, ((CancelCheckpointMarker) emitted).getCheckpointId())__	};this,test,checks,that,tasks,emit,a,proper,cancel,checkpoint,barrier,if,a,trigger,checkpoint,message,comes,before,they,are,ready;test,public,void,test,emit,cancellation,barrier,when,not,ready,throws,exception,stream,task,test,harness,string,test,harness,new,stream,task,test,harness,init,blocking,task,new,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,test,harness,invoke,stream,task,string,task,test,harness,get,task,boolean,result,task,trigger,checkpoint,new,checkpoint,meta,data,41l,system,current,time,millis,checkpoint,options,for,checkpoint,with,default,location,assert,false,task,triggered,checkpoint,though,not,ready,result,object,emitted,test,harness,get,output,poll,assert,not,null,nothing,emitted,emitted,assert,true,wrong,type,emitted,emitted,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,41l,cancel,checkpoint,marker,emitted,get,checkpoint,id
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1478636134;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1480624969;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1486732842;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1487871589;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1493195810;This test verifies (for onw input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:__- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,onw,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1495484544;This test verifies (for one input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,one,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1502801814;This test verifies (for one input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,one,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1509118643;This test verifies (for one input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTask<String, String, String> task = new TwoInputStreamTask<String, String, String>()__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				task,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,one,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,string,string,string,task,new,two,input,stream,task,string,string,string,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,task,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1515519059;This test verifies (for two input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				TwoInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,two,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,two,input,stream,task,new,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1516626397;This test verifies (for two input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				TwoInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,two,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,two,input,stream,task,new,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
StreamTaskCancellationBarrierTest -> @Test 	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception;1517489695;This test verifies (for two input tasks) that the Stream tasks react the following way to_receiving a checkpoint cancellation barrier:_- send a "decline checkpoint" notification out (to the JobManager)_- emit a cancellation barrier downstream.;@Test_	public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {__		TwoInputStreamTaskTestHarness<String, String, String> testHarness = new TwoInputStreamTaskTestHarness<>(_				TwoInputStreamTask::new,_				BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO, BasicTypeInfo.STRING_TYPE_INFO)__		testHarness.setupOutputForSingletonOperatorChain()___		StreamConfig streamConfig = testHarness.getStreamConfig()__		CoStreamMap<String, String, String> op = new CoStreamMap<>(new UnionCoMap())__		streamConfig.setStreamOperator(op)__		streamConfig.setOperatorID(new OperatorID())___		StreamMockEnvironment environment = spy(testHarness.createEnvironment())___		_		testHarness.invoke(environment)__		testHarness.waitForTaskRunning()___		_		testHarness.processEvent(new CancelCheckpointMarker(2L), 0, 0)__		testHarness.processEvent(new CancelCheckpointMarker(2L), 1, 0)__		testHarness.waitForInputProcessing()___		_		verify(environment, times(1)).declineCheckpoint(eq(2L), any(CheckpointDeclineOnCancellationBarrierException.class))___		_		Object result = testHarness.getOutput().poll()__		assertNotNull("nothing emitted", result)__		assertTrue("wrong type emitted", result instanceof CancelCheckpointMarker)__		assertEquals("wrong checkpoint id", 2L, ((CancelCheckpointMarker) result).getCheckpointId())___		_		testHarness.endInput()__		testHarness.waitForTaskCompletion()__	};this,test,verifies,for,two,input,tasks,that,the,stream,tasks,react,the,following,way,to,receiving,a,checkpoint,cancellation,barrier,send,a,decline,checkpoint,notification,out,to,the,job,manager,emit,a,cancellation,barrier,downstream;test,public,void,test,decline,call,on,cancel,barrier,two,inputs,throws,exception,two,input,stream,task,test,harness,string,string,string,test,harness,new,two,input,stream,task,test,harness,two,input,stream,task,new,basic,type,info,basic,type,info,basic,type,info,test,harness,setup,output,for,singleton,operator,chain,stream,config,stream,config,test,harness,get,stream,config,co,stream,map,string,string,string,op,new,co,stream,map,new,union,co,map,stream,config,set,stream,operator,op,stream,config,set,operator,id,new,operator,id,stream,mock,environment,environment,spy,test,harness,create,environment,test,harness,invoke,environment,test,harness,wait,for,task,running,test,harness,process,event,new,cancel,checkpoint,marker,2l,0,0,test,harness,process,event,new,cancel,checkpoint,marker,2l,1,0,test,harness,wait,for,input,processing,verify,environment,times,1,decline,checkpoint,eq,2l,any,checkpoint,decline,on,cancellation,barrier,exception,class,object,result,test,harness,get,output,poll,assert,not,null,nothing,emitted,result,assert,true,wrong,type,emitted,result,instanceof,cancel,checkpoint,marker,assert,equals,wrong,checkpoint,id,2l,cancel,checkpoint,marker,result,get,checkpoint,id,test,harness,end,input,test,harness,wait,for,task,completion
