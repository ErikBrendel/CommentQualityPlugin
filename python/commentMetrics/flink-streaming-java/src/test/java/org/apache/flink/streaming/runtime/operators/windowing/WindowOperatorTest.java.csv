# id;timestamp;commentText;codeText;commentWords;codeWords
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1459869538;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)))___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), initialTime + 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), initialTime + 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), initialTime + 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), initialTime + 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,initial,time,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,initial,time,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,initial,time,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1461572320;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)))___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), initialTime + 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), initialTime + 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), initialTime + 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), initialTime + 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,initial,time,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,initial,time,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,initial,time,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1462268186;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)))___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), initialTime + 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), initialTime + 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), initialTime + 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), initialTime + 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,initial,time,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,initial,time,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,initial,time,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1466504046;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), initialTime + 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), initialTime + 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), initialTime + 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), initialTime + 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,initial,time,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,initial,time,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,initial,time,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1466504192;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		long initialTime = 0L__		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), initialTime + 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), initialTime + 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), initialTime + 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), initialTime + 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), initialTime + 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), initialTime + 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), initialTime + 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), initialTime + 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), initialTime + 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), initialTime + 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,long,initial,time,0l,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,initial,time,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,initial,time,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,initial,time,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,initial,time,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,initial,time,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,initial,time,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,initial,time,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,initial,time,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,initial,time,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1466504219;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1467040572;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1467040572;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1467645848;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1469525562;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1469560325;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1471623818;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamTaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot, 10L)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,task,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,10l,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1472663401;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new OneInputStreamOperatorTestHarness<>(operator)___		testHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,one,input,stream,operator,test,harness,operator,test,harness,configure,for,keyed,stream,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1472663401;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1474473213;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1475690674;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		operator.setInputType(TypeInfoParser.<Tuple2<String, Integer>>parse("Tuple2<String, Integer>"), new ExecutionConfig())___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,operator,set,input,type,type,info,parser,tuple2,string,integer,parse,tuple2,string,integer,new,execution,config,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1475690674;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1475692316;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1476972861;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1477069384;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1477069384;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1477316958;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1477517188;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1477517188;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1480333691;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1485118419;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1485250954;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1485250954;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1487348151;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1489819457;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1489819457;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)__		_		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1493195810;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1493298543;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1493894636;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1494942048;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))____		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1495484544;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1502726910;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1515177485;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1515213012;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1517842482;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1519567828;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithCountTrigger() throws Exception;1519568061;This tests whether merging works correctly with the CountTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPointSessions() throws Exception;1525452496;This tests a custom Session window assigner that assigns some elements to "point windows",_windows that have the same timestamp for start and end.__<p>In this test, elements that have 33 as the second tuple field will be put into a point_window.;@Test_	@SuppressWarnings("unchecked")_	public void testPointSessions() throws Exception {_		closeCalled.set(0)___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				new PointSessionWindows(3000),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()__		OperatorSubtaskState snapshot___		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.open()___			_			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 1000))___			_			snapshot = testHarness.snapshot(0L, 0L)__		}__		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.setup()__			testHarness.initializeState(snapshot)__			testHarness.open()___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 2500))___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 33), 2500))___			testHarness.processWatermark(new Watermark(12000))___			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-36", 10L, 4000L), 3999))__			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-67", 0L, 3000L), 2999))__			expectedOutput.add(new Watermark(12000))___			TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		}_	};this,tests,a,custom,session,window,assigner,that,assigns,some,elements,to,point,windows,windows,that,have,the,same,timestamp,for,start,and,end,p,in,this,test,elements,that,have,33,as,the,second,tuple,field,will,be,put,into,a,point,window;test,suppress,warnings,unchecked,public,void,test,point,sessions,throws,exception,close,called,set,0,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,new,point,session,windows,3000,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,operator,subtask,state,snapshot,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,33,1000,snapshot,test,harness,snapshot,0l,0l,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,33,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,33,2500,test,harness,process,watermark,new,watermark,12000,expected,output,add,new,stream,record,new,tuple3,key1,36,10l,4000l,3999,expected,output,add,new,stream,record,new,tuple3,key2,67,0l,3000l,2999,expected,output,add,new,watermark,12000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPointSessions() throws Exception;1538998760;This tests a custom Session window assigner that assigns some elements to "point windows",_windows that have the same timestamp for start and end.__<p>In this test, elements that have 33 as the second tuple field will be put into a point_window.;@Test_	@SuppressWarnings("unchecked")_	public void testPointSessions() throws Exception {_		closeCalled.set(0)___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				new PointSessionWindows(3000),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()__		OperatorSubtaskState snapshot___		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.open()___			_			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 1000))___			_			snapshot = testHarness.snapshot(0L, 0L)__		}__		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.setup()__			testHarness.initializeState(snapshot)__			testHarness.open()___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 2500))___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 33), 2500))___			testHarness.processWatermark(new Watermark(12000))___			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-36", 10L, 4000L), 3999))__			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-67", 0L, 3000L), 2999))__			expectedOutput.add(new Watermark(12000))___			TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		}_	};this,tests,a,custom,session,window,assigner,that,assigns,some,elements,to,point,windows,windows,that,have,the,same,timestamp,for,start,and,end,p,in,this,test,elements,that,have,33,as,the,second,tuple,field,will,be,put,into,a,point,window;test,suppress,warnings,unchecked,public,void,test,point,sessions,throws,exception,close,called,set,0,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,new,point,session,windows,3000,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,operator,subtask,state,snapshot,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,33,1000,snapshot,test,harness,snapshot,0l,0l,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,33,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,33,2500,test,harness,process,watermark,new,watermark,12000,expected,output,add,new,stream,record,new,tuple3,key1,36,10l,4000l,3999,expected,output,add,new,stream,record,new,tuple3,key2,67,0l,3000l,2999,expected,output,add,new,watermark,12000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testPointSessions() throws Exception;1544525533;This tests a custom Session window assigner that assigns some elements to "point windows",_windows that have the same timestamp for start and end.__<p>In this test, elements that have 33 as the second tuple field will be put into a point_window.;@Test_	@SuppressWarnings("unchecked")_	public void testPointSessions() throws Exception {_		closeCalled.set(0)___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				new PointSessionWindows(3000),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				EventTimeTrigger.create(),_				0,_				null )___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()__		OperatorSubtaskState snapshot___		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.open()___			_			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 1000))___			_			snapshot = testHarness.snapshot(0L, 0L)__		}__		try (OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)) {_			testHarness.setup()__			testHarness.initializeState(snapshot)__			testHarness.open()___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 33), 2500))___			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))__			testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 33), 2500))___			testHarness.processWatermark(new Watermark(12000))___			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-36", 10L, 4000L), 3999))__			expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-67", 0L, 3000L), 2999))__			expectedOutput.add(new Watermark(12000))___			TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		}_	};this,tests,a,custom,session,window,assigner,that,assigns,some,elements,to,point,windows,windows,that,have,the,same,timestamp,for,start,and,end,p,in,this,test,elements,that,have,33,as,the,second,tuple,field,will,be,put,into,a,point,window;test,suppress,warnings,unchecked,public,void,test,point,sessions,throws,exception,close,called,set,0,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,new,point,session,windows,3000,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,event,time,trigger,create,0,null,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,operator,subtask,state,snapshot,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,33,1000,snapshot,test,harness,snapshot,0l,0l,try,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,33,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key1,33,2500,test,harness,process,watermark,new,watermark,12000,expected,output,add,new,stream,record,new,tuple3,key1,36,10l,4000l,3999,expected,output,add,new,stream,record,new,tuple3,key2,67,0l,3000l,2999,expected,output,add,new,watermark,12000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1477316958;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1477517188;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		StreamStateHandle snapshot = testHarness.snapshotLegacy(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.restore(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,stream,state,handle,snapshot,test,harness,snapshot,legacy,0l,0l,test,harness,close,test,harness,setup,test,harness,restore,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1477517188;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1480333691;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1485118419;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1485250954;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1485250954;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1487348151;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0)___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1489819457;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1489819457;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1493195810;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1493298543;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1493894636;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1494942048;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int SESSION_SIZE = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(SESSION_SIZE)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1495484544;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1502726910;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1515177485;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			new KeyedOneInputStreamOperatorTestHarness<>(operator, new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,new,keyed,one,input,stream,operator,test,harness,operator,new,tuple,key,selector,basic,type,info,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,close,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1515213012;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1517842482;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorStateHandles snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,state,handles,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1519567828;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1519568061;This tests whether merging works correctly with the ContinuousEventTimeTrigger._@throws Exception;@Test_	@SuppressWarnings("unchecked")_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		TypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse("Tuple2<String, Integer>")___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_			inputType.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger,throws,exception;test,suppress,warnings,unchecked,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,type,information,tuple2,string,integer,input,type,type,info,parser,parse,tuple2,string,integer,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,input,type,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1525452496;This tests whether merging works correctly with the ContinuousEventTimeTrigger.;@Test_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger;test,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1538998760;This tests whether merging works correctly with the ContinuousEventTimeTrigger.;@Test_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger;test,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception;1544525533;This tests whether merging works correctly with the ContinuousEventTimeTrigger.;@Test_	public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_			EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_			new TimeWindow.Serializer(),_			new TupleKeySelector(),_			BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_			stateDesc,_			new InternalIterableWindowFunction<>(new SessionWindowFunction()),_			ContinuousEventTimeTrigger.of(Time.seconds(2)),_			0,_			null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_			createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 1500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))___		_		testHarness.processWatermark(new Watermark(2500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1", 1500L, 4500L), 4499))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6", 0L, 5500L), 5499))__		expectedOutput.add(new Watermark(2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 5), 4000))__		testHarness.processWatermark(new Watermark(3000))__		expectedOutput.add(new Watermark(3000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		testHarness.close()___		expectedOutput.clear()__		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 4000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))__		_		testHarness.processWatermark(new Watermark(4000))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3", 1500L, 7000L), 6999))__		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15", 0L, 7000L), 6999))__		expectedOutput.add(new Watermark(4000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,continuous,event,time,trigger;test,public,void,test,session,windows,with,continuous,event,time,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,continuous,event,time,trigger,of,time,seconds,2,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,1,1500,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,watermark,new,watermark,2500,expected,output,add,new,stream,record,new,tuple3,key1,1,1500l,4500l,4499,expected,output,add,new,stream,record,new,tuple3,key2,6,0l,5500l,5499,expected,output,add,new,watermark,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,5,4000,test,harness,process,watermark,new,watermark,3000,expected,output,add,new,watermark,3000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,2,4000,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,watermark,new,watermark,4000,expected,output,add,new,stream,record,new,tuple3,key1,3,1500l,7000l,6999,expected,output,add,new,stream,record,new,tuple3,key2,15,0l,7000l,6999,expected,output,add,new,watermark,4000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithCountTrigger() throws Exception;1525452496;This tests whether merging works correctly with the CountTrigger.;@Test_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger;test,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithCountTrigger() throws Exception;1538998760;This tests whether merging works correctly with the CountTrigger.;@Test_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger;test,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
WindowOperatorTest -> @Test 	public void testSessionWindowsWithCountTrigger() throws Exception;1544525533;This tests whether merging works correctly with the CountTrigger.;@Test_	public void testSessionWindowsWithCountTrigger() throws Exception {_		closeCalled.set(0)___		final int sessionSize = 3___		ListStateDescriptor<Tuple2<String, Integer>> stateDesc = new ListStateDescriptor<>("window-contents",_				STRING_INT_TUPLE.createSerializer(new ExecutionConfig()))___		WindowOperator<String, Tuple2<String, Integer>, Iterable<Tuple2<String, Integer>>, Tuple3<String, Long, Long>, TimeWindow> operator = new WindowOperator<>(_				EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),_				new TimeWindow.Serializer(),_				new TupleKeySelector(),_				BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),_				stateDesc,_				new InternalIterableWindowFunction<>(new SessionWindowFunction()),_				PurgingTrigger.of(CountTrigger.of(4)),_				0,_				null )___		OneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple3<String, Long, Long>> testHarness =_				createTestHarness(operator)___		ConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>()___		testHarness.open()___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 1), 0))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 2), 1000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 3), 2500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2", 4), 3500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 10))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 1000))___		_		OperatorSubtaskState snapshot = testHarness.snapshot(0L, 0L)__		testHarness.close()___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10", 0L, 6500L), 6499))__		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())__		expectedOutput.clear()___		testHarness = createTestHarness(operator)__		testHarness.setup()__		testHarness.initializeState(snapshot)__		testHarness.open()___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 2500))___		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 1), 6000))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 2), 6500))__		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 3), 7000))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		_		testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1", 10), 4500))___		expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22", 10L, 10000L), 9999L))___		TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.", expectedOutput, testHarness.getOutput(), new Tuple3ResultSortComparator())___		testHarness.close()__	};this,tests,whether,merging,works,correctly,with,the,count,trigger;test,public,void,test,session,windows,with,count,trigger,throws,exception,close,called,set,0,final,int,session,size,3,list,state,descriptor,tuple2,string,integer,state,desc,new,list,state,descriptor,window,contents,create,serializer,new,execution,config,window,operator,string,tuple2,string,integer,iterable,tuple2,string,integer,tuple3,string,long,long,time,window,operator,new,window,operator,event,time,session,windows,with,gap,time,seconds,session,size,new,time,window,serializer,new,tuple,key,selector,basic,type,info,create,serializer,new,execution,config,state,desc,new,internal,iterable,window,function,new,session,window,function,purging,trigger,of,count,trigger,of,4,0,null,one,input,stream,operator,test,harness,tuple2,string,integer,tuple3,string,long,long,test,harness,create,test,harness,operator,concurrent,linked,queue,object,expected,output,new,concurrent,linked,queue,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key2,1,0,test,harness,process,element,new,stream,record,new,tuple2,key2,2,1000,test,harness,process,element,new,stream,record,new,tuple2,key2,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key2,4,3500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,10,test,harness,process,element,new,stream,record,new,tuple2,key1,2,1000,operator,subtask,state,snapshot,test,harness,snapshot,0l,0l,test,harness,close,expected,output,add,new,stream,record,new,tuple3,key2,10,0l,6500l,6499,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,expected,output,clear,test,harness,create,test,harness,operator,test,harness,setup,test,harness,initialize,state,snapshot,test,harness,open,test,harness,process,element,new,stream,record,new,tuple2,key1,3,2500,test,harness,process,element,new,stream,record,new,tuple2,key1,1,6000,test,harness,process,element,new,stream,record,new,tuple2,key1,2,6500,test,harness,process,element,new,stream,record,new,tuple2,key1,3,7000,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,process,element,new,stream,record,new,tuple2,key1,10,4500,expected,output,add,new,stream,record,new,tuple3,key1,22,10l,10000l,9999l,test,harness,util,assert,output,equals,sorted,output,was,not,correct,expected,output,test,harness,get,output,new,tuple3result,sort,comparator,test,harness,close
