# id;timestamp;commentText;codeText;commentWords;codeWords
TimerService -> long currentProcessingTime()_;1477069385;Returns the current processing time.;long currentProcessingTime()_;returns,the,current,processing,time;long,current,processing,time
TimerService -> long currentProcessingTime()_;1495484544;Returns the current processing time.;long currentProcessingTime()_;returns,the,current,processing,time;long,current,processing,time
TimerService -> long currentProcessingTime()_;1528201559;Returns the current processing time.;long currentProcessingTime()_;returns,the,current,processing,time;long,current,processing,time
TimerService -> void registerEventTimeTimer(long time)_;1477069385;Registers a timer to be fired when the event time watermark passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerEventTimeTimer(long time)_;registers,a,timer,to,be,fired,when,the,event,time,watermark,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,event,time,timer,long,time
TimerService -> void registerEventTimeTimer(long time)_;1495484544;Registers a timer to be fired when the event time watermark passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerEventTimeTimer(long time)_;registers,a,timer,to,be,fired,when,the,event,time,watermark,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,event,time,timer,long,time
TimerService -> void registerEventTimeTimer(long time)_;1528201559;Registers a timer to be fired when the event time watermark passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerEventTimeTimer(long time)_;registers,a,timer,to,be,fired,when,the,event,time,watermark,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,event,time,timer,long,time
TimerService -> void registerProcessingTimeTimer(long time)_;1477069385;Registers a timer to be fired when processing time passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerProcessingTimeTimer(long time)_;registers,a,timer,to,be,fired,when,processing,time,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,processing,time,timer,long,time
TimerService -> void registerProcessingTimeTimer(long time)_;1495484544;Registers a timer to be fired when processing time passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerProcessingTimeTimer(long time)_;registers,a,timer,to,be,fired,when,processing,time,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,processing,time,timer,long,time
TimerService -> void registerProcessingTimeTimer(long time)_;1528201559;Registers a timer to be fired when processing time passes the given time.__<p>Timers can internally be scoped to keys and/or windows. When you set a timer_in a keyed context, such as in an operation on_{@link org.apache.flink.streaming.api.datastream.KeyedStream} then that context_will also be active when you receive the timer notification.;void registerProcessingTimeTimer(long time)_;registers,a,timer,to,be,fired,when,processing,time,passes,the,given,time,p,timers,can,internally,be,scoped,to,keys,and,or,windows,when,you,set,a,timer,in,a,keyed,context,such,as,in,an,operation,on,link,org,apache,flink,streaming,api,datastream,keyed,stream,then,that,context,will,also,be,active,when,you,receive,the,timer,notification;void,register,processing,time,timer,long,time
TimerService -> long currentWatermark()_;1477069385;Returns the current event-time watermark.;long currentWatermark()_;returns,the,current,event,time,watermark;long,current,watermark
TimerService -> long currentWatermark()_;1495484544;Returns the current event-time watermark.;long currentWatermark()_;returns,the,current,event,time,watermark;long,current,watermark
TimerService -> long currentWatermark()_;1528201559;Returns the current event-time watermark.;long currentWatermark()_;returns,the,current,event,time,watermark;long,current,watermark
