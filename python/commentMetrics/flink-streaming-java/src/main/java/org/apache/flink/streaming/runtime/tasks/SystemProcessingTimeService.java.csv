# id;timestamp;commentText;codeText;commentWords;codeWords
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1479339295;Registers a task to be executed no sooner than time {@code timestamp}, but without strong guarantees of order__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1482249781;Registers a task to be executed no sooner than time {@code timestamp}, but without strong guarantees of order__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1493195810;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1493195810;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1493195810;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1493195810;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1495484544;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1508969168;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(status, task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,status,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1511447023;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(status, task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,status,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1526336590;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0)___		_		_		try {_			return timerService.schedule(_					new TriggerTask(status, task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,try,return,timer,service,schedule,new,trigger,task,status,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @Override 	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target);1531831676;Registers a task to be executed no sooner than time {@code timestamp}, but without strong_guarantees of order.__@param timestamp Time when the task is to be enabled (in processing time)_@param target    The task to be executed_@return The future that represents the scheduled task. This always returns some future,_even if the timer was shut down;@Override_	public ScheduledFuture<?> registerTimer(long timestamp, ProcessingTimeCallback target) {__		_		_		_		long delay = Math.max(timestamp - getCurrentProcessingTime(), 0) + 1___		_		_		try {_			return timerService.schedule(_					new TriggerTask(status, task, checkpointLock, target, timestamp), delay, TimeUnit.MILLISECONDS)__		}_		catch (RejectedExecutionException e) {_			final int status = this.status.get()__			if (status == STATUS_QUIESCED) {_				return new NeverCompleteFuture(delay)__			}_			else if (status == STATUS_SHUTDOWN) {_				throw new IllegalStateException("Timer service is shut down")__			}_			else {_				_				throw e__			}_		}_	};registers,a,task,to,be,executed,no,sooner,than,time,code,timestamp,but,without,strong,guarantees,of,order,param,timestamp,time,when,the,task,is,to,be,enabled,in,processing,time,param,target,the,task,to,be,executed,return,the,future,that,represents,the,scheduled,task,this,always,returns,some,future,even,if,the,timer,was,shut,down;override,public,scheduled,future,register,timer,long,timestamp,processing,time,callback,target,long,delay,math,max,timestamp,get,current,processing,time,0,1,try,return,timer,service,schedule,new,trigger,task,status,task,checkpoint,lock,target,timestamp,delay,time,unit,milliseconds,catch,rejected,execution,exception,e,final,int,status,this,status,get,if,status,return,new,never,complete,future,delay,else,if,status,throw,new,illegal,state,exception,timer,service,is,shut,down,else,throw,e
SystemProcessingTimeService -> @VisibleForTesting 	boolean isAlive();1508969168;@return {@code true} is the status of the service_is {@link #STATUS_ALIVE}, {@code false} otherwise.;@VisibleForTesting_	boolean isAlive() {_		return status.get() == STATUS_ALIVE__	};return,code,true,is,the,status,of,the,service,is,link,code,false,otherwise;visible,for,testing,boolean,is,alive,return,status,get
SystemProcessingTimeService -> @VisibleForTesting 	boolean isAlive();1511447023;@return {@code true} is the status of the service_is {@link #STATUS_ALIVE}, {@code false} otherwise.;@VisibleForTesting_	boolean isAlive() {_		return status.get() == STATUS_ALIVE__	};return,code,true,is,the,status,of,the,service,is,link,code,false,otherwise;visible,for,testing,boolean,is,alive,return,status,get
SystemProcessingTimeService -> @VisibleForTesting 	boolean isAlive();1526336590;@return {@code true} is the status of the service_is {@link #STATUS_ALIVE}, {@code false} otherwise.;@VisibleForTesting_	boolean isAlive() {_		return status.get() == STATUS_ALIVE__	};return,code,true,is,the,status,of,the,service,is,link,code,false,otherwise;visible,for,testing,boolean,is,alive,return,status,get
SystemProcessingTimeService -> @VisibleForTesting 	boolean isAlive();1531831676;@return {@code true} is the status of the service_is {@link #STATUS_ALIVE}, {@code false} otherwise.;@VisibleForTesting_	boolean isAlive() {_		return status.get() == STATUS_ALIVE__	};return,code,true,is,the,status,of,the,service,is,link,code,false,otherwise;visible,for,testing,boolean,is,alive,return,status,get
