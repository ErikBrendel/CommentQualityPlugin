# id;timestamp;commentText;codeText;commentWords;codeWords
SocketStreamIterator -> @Override 	public boolean hasNext();1516090404;Returns true if the DataStream has more elements._(Note: blocks if there will be more elements, but they are not available yet.)_@return true if the DataStream has more elements;@Override_	public boolean hasNext() {_		if (next == null) {_			try {_				next = readNextFromStream()__			} catch (Exception e) {_				throw new RuntimeException("Failed to receive next element: " + e.getMessage(), e)__			}_		}__		return next != null__	};returns,true,if,the,data,stream,has,more,elements,note,blocks,if,there,will,be,more,elements,but,they,are,not,available,yet,return,true,if,the,data,stream,has,more,elements;override,public,boolean,has,next,if,next,null,try,next,read,next,from,stream,catch,exception,e,throw,new,runtime,exception,failed,to,receive,next,element,e,get,message,e,return,next,null
SocketStreamIterator -> @Override 	public boolean hasNext();1518197017;Returns true if the DataStream has more elements._(Note: blocks if there will be more elements, but they are not available yet.)_@return true if the DataStream has more elements;@Override_	public boolean hasNext() {_		if (next == null) {_			try {_				next = readNextFromStream()__			} catch (Exception e) {_				throw new RuntimeException("Failed to receive next element: " + e.getMessage(), e)__			}_		}__		return next != null__	};returns,true,if,the,data,stream,has,more,elements,note,blocks,if,there,will,be,more,elements,but,they,are,not,available,yet,return,true,if,the,data,stream,has,more,elements;override,public,boolean,has,next,if,next,null,try,next,read,next,from,stream,catch,exception,e,throw,new,runtime,exception,failed,to,receive,next,element,e,get,message,e,return,next,null
SocketStreamIterator -> @Override 	public boolean hasNext();1518855442;Returns true if the DataStream has more elements._(Note: blocks if there will be more elements, but they are not available yet.)_@return true if the DataStream has more elements;@Override_	public boolean hasNext() {_		if (next == null) {_			try {_				next = readNextFromStream()__			} catch (Exception e) {_				throw new RuntimeException("Failed to receive next element: " + e.getMessage(), e)__			}_		}__		return next != null__	};returns,true,if,the,data,stream,has,more,elements,note,blocks,if,there,will,be,more,elements,but,they,are,not,available,yet,return,true,if,the,data,stream,has,more,elements;override,public,boolean,has,next,if,next,null,try,next,read,next,from,stream,catch,exception,e,throw,new,runtime,exception,failed,to,receive,next,element,e,get,message,e,return,next,null
SocketStreamIterator -> @Override 	public boolean hasNext();1523020981;Returns true if the DataStream has more elements._(Note: blocks if there will be more elements, but they are not available yet.)_@return true if the DataStream has more elements;@Override_	public boolean hasNext() {_		if (next == null) {_			try {_				next = readNextFromStream()__			} catch (Exception e) {_				throw new RuntimeException("Failed to receive next element: " + e.getMessage(), e)__			}_		}__		return next != null__	};returns,true,if,the,data,stream,has,more,elements,note,blocks,if,there,will,be,more,elements,but,they,are,not,available,yet,return,true,if,the,data,stream,has,more,elements;override,public,boolean,has,next,if,next,null,try,next,read,next,from,stream,catch,exception,e,throw,new,runtime,exception,failed,to,receive,next,element,e,get,message,e,return,next,null
SocketStreamIterator -> public SocketStreamIterator(TypeSerializer<T> serializer) throws IOException;1518855442;Creates an iterator that returns the data from a socket stream with automatic port and bind address.__@param serializer serializer used for deserializing incoming records_@throws IOException thrown if socket cannot be opened;public SocketStreamIterator(TypeSerializer<T> serializer) throws IOException {_		this(0, null, serializer)__	};creates,an,iterator,that,returns,the,data,from,a,socket,stream,with,automatic,port,and,bind,address,param,serializer,serializer,used,for,deserializing,incoming,records,throws,ioexception,thrown,if,socket,cannot,be,opened;public,socket,stream,iterator,type,serializer,t,serializer,throws,ioexception,this,0,null,serializer
SocketStreamIterator -> public SocketStreamIterator(TypeSerializer<T> serializer) throws IOException;1523020981;Creates an iterator that returns the data from a socket stream with automatic port and bind address.__@param serializer serializer used for deserializing incoming records_@throws IOException thrown if socket cannot be opened;public SocketStreamIterator(TypeSerializer<T> serializer) throws IOException {_		this(0, null, serializer)__	};creates,an,iterator,that,returns,the,data,from,a,socket,stream,with,automatic,port,and,bind,address,param,serializer,serializer,used,for,deserializing,incoming,records,throws,ioexception,thrown,if,socket,cannot,be,opened;public,socket,stream,iterator,type,serializer,t,serializer,throws,ioexception,this,0,null,serializer
SocketStreamIterator -> public SocketStreamIterator(int port, InetAddress address, TypeSerializer<T> serializer) throws IOException;1518855442;Creates an iterator that returns the data from a socket stream with custom port and bind address.__@param port port for the socket connection (0 means automatic port selection)_@param address address for the socket connection_@param serializer serializer used for deserializing incoming records_@throws IOException thrown if socket cannot be opened;public SocketStreamIterator(int port, InetAddress address, TypeSerializer<T> serializer) throws IOException {_		this.serializer = serializer__		try {_			socket = new ServerSocket(port, 1, address)__		}_		catch (IOException e) {_			throw new RuntimeException("Could not open socket to receive back stream results")__		}_	};creates,an,iterator,that,returns,the,data,from,a,socket,stream,with,custom,port,and,bind,address,param,port,port,for,the,socket,connection,0,means,automatic,port,selection,param,address,address,for,the,socket,connection,param,serializer,serializer,used,for,deserializing,incoming,records,throws,ioexception,thrown,if,socket,cannot,be,opened;public,socket,stream,iterator,int,port,inet,address,address,type,serializer,t,serializer,throws,ioexception,this,serializer,serializer,try,socket,new,server,socket,port,1,address,catch,ioexception,e,throw,new,runtime,exception,could,not,open,socket,to,receive,back,stream,results
SocketStreamIterator -> public SocketStreamIterator(int port, InetAddress address, TypeSerializer<T> serializer) throws IOException;1523020981;Creates an iterator that returns the data from a socket stream with custom port and bind address.__@param port port for the socket connection (0 means automatic port selection)_@param address address for the socket connection_@param serializer serializer used for deserializing incoming records_@throws IOException thrown if socket cannot be opened;public SocketStreamIterator(int port, InetAddress address, TypeSerializer<T> serializer) throws IOException {_		this.serializer = serializer__		try {_			socket = new ServerSocket(port, 1, address)__		}_		catch (IOException e) {_			throw new RuntimeException("Could not open socket to receive back stream results")__		}_	};creates,an,iterator,that,returns,the,data,from,a,socket,stream,with,custom,port,and,bind,address,param,port,port,for,the,socket,connection,0,means,automatic,port,selection,param,address,address,for,the,socket,connection,param,serializer,serializer,used,for,deserializing,incoming,records,throws,ioexception,thrown,if,socket,cannot,be,opened;public,socket,stream,iterator,int,port,inet,address,address,type,serializer,t,serializer,throws,ioexception,this,serializer,serializer,try,socket,new,server,socket,port,1,address,catch,ioexception,e,throw,new,runtime,exception,could,not,open,socket,to,receive,back,stream,results
SocketStreamIterator -> public int getPort();1516090404;Returns the port on which the iterator is getting the data. (Used internally.)_@return The port;public int getPort() {_		return socket.getLocalPort()__	};returns,the,port,on,which,the,iterator,is,getting,the,data,used,internally,return,the,port;public,int,get,port,return,socket,get,local,port
SocketStreamIterator -> public int getPort();1518197017;Returns the port on which the iterator is getting the data. (Used internally.)_@return The port;public int getPort() {_		return socket.getLocalPort()__	};returns,the,port,on,which,the,iterator,is,getting,the,data,used,internally,return,the,port;public,int,get,port,return,socket,get,local,port
SocketStreamIterator -> public int getPort();1518855442;Returns the port on which the iterator is getting the data. (Used internally.)_@return The port;public int getPort() {_		return socket.getLocalPort()__	};returns,the,port,on,which,the,iterator,is,getting,the,data,used,internally,return,the,port;public,int,get,port,return,socket,get,local,port
SocketStreamIterator -> public int getPort();1523020981;Returns the port on which the iterator is getting the data. (Used internally.)_@return The port;public int getPort() {_		return socket.getLocalPort()__	};returns,the,port,on,which,the,iterator,is,getting,the,data,used,internally,return,the,port;public,int,get,port,return,socket,get,local,port
SocketStreamIterator -> @Override 	public T next();1516090404;Returns the next element of the DataStream. (Blocks if it is not available yet.)_@return The element_@throws NoSuchElementException if the stream has already ended;@Override_	public T next() {_		if (hasNext()) {_			T current = next__			next = null__			return current__		} else {_			throw new NoSuchElementException()__		}_	};returns,the,next,element,of,the,data,stream,blocks,if,it,is,not,available,yet,return,the,element,throws,no,such,element,exception,if,the,stream,has,already,ended;override,public,t,next,if,has,next,t,current,next,next,null,return,current,else,throw,new,no,such,element,exception
SocketStreamIterator -> @Override 	public T next();1518197017;Returns the next element of the DataStream. (Blocks if it is not available yet.)_@return The element_@throws NoSuchElementException if the stream has already ended;@Override_	public T next() {_		if (hasNext()) {_			T current = next__			next = null__			return current__		} else {_			throw new NoSuchElementException()__		}_	};returns,the,next,element,of,the,data,stream,blocks,if,it,is,not,available,yet,return,the,element,throws,no,such,element,exception,if,the,stream,has,already,ended;override,public,t,next,if,has,next,t,current,next,next,null,return,current,else,throw,new,no,such,element,exception
SocketStreamIterator -> @Override 	public T next();1518855442;Returns the next element of the DataStream. (Blocks if it is not available yet.)_@return The element_@throws NoSuchElementException if the stream has already ended;@Override_	public T next() {_		if (hasNext()) {_			T current = next__			next = null__			return current__		} else {_			throw new NoSuchElementException()__		}_	};returns,the,next,element,of,the,data,stream,blocks,if,it,is,not,available,yet,return,the,element,throws,no,such,element,exception,if,the,stream,has,already,ended;override,public,t,next,if,has,next,t,current,next,next,null,return,current,else,throw,new,no,such,element,exception
SocketStreamIterator -> @Override 	public T next();1523020981;Returns the next element of the DataStream. (Blocks if it is not available yet.)_@return The element_@throws NoSuchElementException if the stream has already ended;@Override_	public T next() {_		if (hasNext()) {_			T current = next__			next = null__			return current__		} else {_			throw new NoSuchElementException()__		}_	};returns,the,next,element,of,the,data,stream,blocks,if,it,is,not,available,yet,return,the,element,throws,no,such,element,exception,if,the,stream,has,already,ended;override,public,t,next,if,has,next,t,current,next,next,null,return,current,else,throw,new,no,such,element,exception
