# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1482206691;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1482206691;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1485189169;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1485357390;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1486328221;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1487868265;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1492569128;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1493195810;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1493195810;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1493195810;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1495484544;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1501589083;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1503407113;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1508143179;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1515669171;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private void stopResources(boolean waitForShutdown) throws InterruptedException;1527946901;Close the operator's resources. They include the emitter thread and the executor to run_the queue's complete operation.__@param waitForShutdown is true if the method should wait for the resources to be freed__otherwise false._@throws InterruptedException if current thread has been interrupted;private void stopResources(boolean waitForShutdown) throws InterruptedException {_		emitter.stop()__		emitterThread.interrupt()___		executor.shutdown()___		if (waitForShutdown) {_			try {_				if (!executor.awaitTermination(365L, TimeUnit.DAYS)) {_					executor.shutdownNow()__				}_			} catch (InterruptedException e) {_				executor.shutdownNow()___				Thread.currentThread().interrupt()__			}__			_			if (Thread.holdsLock(checkpointingLock)) {_				while (emitterThread.isAlive()) {_					checkpointingLock.wait(100L)__				}_			}__			emitterThread.join()__		} else {_			executor.shutdownNow()__		}_	};close,the,operator,s,resources,they,include,the,emitter,thread,and,the,executor,to,run,the,queue,s,complete,operation,param,wait,for,shutdown,is,true,if,the,method,should,wait,for,the,resources,to,be,freed,otherwise,false,throws,interrupted,exception,if,current,thread,has,been,interrupted;private,void,stop,resources,boolean,wait,for,shutdown,throws,interrupted,exception,emitter,stop,emitter,thread,interrupt,executor,shutdown,if,wait,for,shutdown,try,if,executor,await,termination,365l,time,unit,days,executor,shutdown,now,catch,interrupted,exception,e,executor,shutdown,now,thread,current,thread,interrupt,if,thread,holds,lock,checkpointing,lock,while,emitter,thread,is,alive,checkpointing,lock,wait,100l,emitter,thread,join,else,executor,shutdown,now
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1482206691;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1482206691;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1485189169;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1485357390;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1486328221;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1487868265;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1492569128;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added._<p>_For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1493195810;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1493195810;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1493195810;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1495484544;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1501589083;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1503407113;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1508143179;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1515669171;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
AsyncWaitOperator -> private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException;1527946901;Add the given stream element queue entry to the operator's stream element queue. This_operation blocks until the element has been added.__<p>For that it tries to put the element into the queue and if not successful then it waits on_the checkpointing lock. The checkpointing lock is also used by the {@link Emitter} to output_elements. The emitter is also responsible for notifying this method if the queue has capacity_left again, by calling notifyAll on the checkpointing lock.__@param streamElementQueueEntry to add to the operator's queue_@param <T> Type of the stream element queue entry's result_@throws InterruptedException if the current thread has been interrupted;private <T> void addAsyncBufferEntry(StreamElementQueueEntry<T> streamElementQueueEntry) throws InterruptedException {_		assert(Thread.holdsLock(checkpointingLock))___		pendingStreamElementQueueEntry = streamElementQueueEntry___		while (!queue.tryPut(streamElementQueueEntry)) {_			_			checkpointingLock.wait()__		}__		pendingStreamElementQueueEntry = null__	};add,the,given,stream,element,queue,entry,to,the,operator,s,stream,element,queue,this,operation,blocks,until,the,element,has,been,added,p,for,that,it,tries,to,put,the,element,into,the,queue,and,if,not,successful,then,it,waits,on,the,checkpointing,lock,the,checkpointing,lock,is,also,used,by,the,link,emitter,to,output,elements,the,emitter,is,also,responsible,for,notifying,this,method,if,the,queue,has,capacity,left,again,by,calling,notify,all,on,the,checkpointing,lock,param,stream,element,queue,entry,to,add,to,the,operator,s,queue,param,t,type,of,the,stream,element,queue,entry,s,result,throws,interrupted,exception,if,the,current,thread,has,been,interrupted;private,t,void,add,async,buffer,entry,stream,element,queue,entry,t,stream,element,queue,entry,throws,interrupted,exception,assert,thread,holds,lock,checkpointing,lock,pending,stream,element,queue,entry,stream,element,queue,entry,while,queue,try,put,stream,element,queue,entry,checkpointing,lock,wait,pending,stream,element,queue,entry,null
