# id;timestamp;commentText;codeText;commentWords;codeWords
KeyMap -> public int getCurrentTableCapacity();1445418103;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1455486690;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1460741894;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1493195810;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public int getCurrentTableCapacity();1495484544;Gets the current table capacity, i.e., the number of slots in the hash table, without_and overflow chaining._@return The number of slots in the hash table.;public int getCurrentTableCapacity() {_		return table.length__	};gets,the,current,table,capacity,i,e,the,number,of,slots,in,the,hash,table,without,and,overflow,chaining,return,the,number,of,slots,in,the,hash,table;public,int,get,current,table,capacity,return,table,length
KeyMap -> public KeyMap();1445418103;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1455486690;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1460741894;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1493195810;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public KeyMap();1495484544;Creates a new hash table with the default initial capacity.;public KeyMap() {_		this(0)__	};creates,a,new,hash,table,with,the,default,initial,capacity;public,key,map,this,0
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1445418103;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1455486690;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1460741894;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1493195810;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception;1495484544;Inserts or aggregates a value into the hash map. If the hash map does not yet contain the key,_this method inserts the value. If the table already contains the key (and a value) this_method will use the given ReduceFunction function to combine the existing value and the_given value to a new value, and store that value for the key.__@param key The key to map the value._@param value The new value to insert, or aggregate with the existing value._@param aggregator The aggregator to use if a value is already contained.__@return The value in the map after this operation: Either the given value, or the aggregated value.__@throws java.lang.NullPointerException Thrown, if the key is null._@throws Exception The method forwards exceptions from the aggregation function.;public final V putOrAggregate(K key, V value, ReduceFunction<V> aggregator) throws Exception {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				entry.value = aggregator.reduce(entry.value, value)__				return entry.value__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		_		return value__	};inserts,or,aggregates,a,value,into,the,hash,map,if,the,hash,map,does,not,yet,contain,the,key,this,method,inserts,the,value,if,the,table,already,contains,the,key,and,a,value,this,method,will,use,the,given,reduce,function,function,to,combine,the,existing,value,and,the,given,value,to,a,new,value,and,store,that,value,for,the,key,param,key,the,key,to,map,the,value,param,value,the,new,value,to,insert,or,aggregate,with,the,existing,value,param,aggregator,the,aggregator,to,use,if,a,value,is,already,contained,return,the,value,in,the,map,after,this,operation,either,the,given,value,or,the,aggregated,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null,throws,exception,the,method,forwards,exceptions,from,the,aggregation,function;public,final,v,put,or,aggregate,k,key,v,value,reduce,function,v,aggregator,throws,exception,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,entry,value,aggregator,reduce,entry,value,value,return,entry,value,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public int getLog2TableCapacity();1445418103;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1455486690;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1460741894;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1493195810;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> public int getLog2TableCapacity();1495484544;Gets the base-2 logarithm of the hash table capacity, as returned by_{@link #getCurrentTableCapacity()}.__@return The base-2 logarithm of the hash table capacity.;public int getLog2TableCapacity() {_		return log2size__	};gets,the,base,2,logarithm,of,the,hash,table,capacity,as,returned,by,link,get,current,table,capacity,return,the,base,2,logarithm,of,the,hash,table,capacity;public,int,get,log2table,capacity,return,log2size
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1445418103;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1455486690;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1460741894;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1493195810;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void keyDone() throws Exception_;1495484544;Called when the traversal for the current key is complete.__@throws Exception Method forwards all exceptions.;void keyDone() throws Exception_;called,when,the,traversal,for,the,current,key,is,complete,throws,exception,method,forwards,all,exceptions;void,key,done,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1445418103;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1455486690;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1460741894;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1493195810;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> TraversalEvaluator -> void startNewKey(K key) throws Exception_;1495484544;Called whenever the traversal starts with a new key.__@param key The key traversed._@throws Exception Method forwards all exceptions.;void startNewKey(K key) throws Exception_;called,whenever,the,traversal,starts,with,a,new,key,param,key,the,key,traversed,throws,exception,method,forwards,all,exceptions;void,start,new,key,k,key,throws,exception
KeyMap -> int traverseAndCountElements();1445418103;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0__		_		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}_		_		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1455486690;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0__		_		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}_		_		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1460741894;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0__		_		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}_		_		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0__		_		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}_		_		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0__		_		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}_		_		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0___		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}__		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0___		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}__		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0___		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}__		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1493195810;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0___		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}__		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int traverseAndCountElements();1495484544;For testing only: Actively counts the number of entries, rather than using the_counter variable. This method has linear complexity, rather than constant.__@return The counted number of entries.;int traverseAndCountElements() {_		int num = 0___		for (Entry<?, ?> entry : table) {_			while (entry != null) {_				num++__				entry = entry.next__			}_		}__		return num__	};for,testing,only,actively,counts,the,number,of,entries,rather,than,using,the,counter,variable,this,method,has,linear,complexity,rather,than,constant,return,the,counted,number,of,entries;int,traverse,and,count,elements,int,num,0,for,entry,entry,table,while,entry,null,num,entry,entry,next,return,num
KeyMap -> int getLongestChainLength();1445418103;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1455486690;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1460741894;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1493195810;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> int getLongestChainLength();1495484544;For testing only: Gets the length of the longest overflow chain._This method has linear complexity.__@return The length of the longest overflow chain.;int getLongestChainLength() {_		int maxLen = 0___		for (Entry<?, ?> entry : table) {_			int thisLen = 0__			while (entry != null) {_				thisLen++__				entry = entry.next__			}_			maxLen = Math.max(maxLen, thisLen)__		}__		return maxLen__	};for,testing,only,gets,the,length,of,the,longest,overflow,chain,this,method,has,linear,complexity,return,the,length,of,the,longest,overflow,chain;int,get,longest,chain,length,int,max,len,0,for,entry,entry,table,int,this,len,0,while,entry,null,this,len,entry,entry,next,max,len,math,max,max,len,this,len,return,max,len
KeyMap -> public KeyMap(int expectedNumberOfElements);1445418103;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}_		_		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1455486690;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}_		_		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1460741894;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}_		_		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}_		_		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}_		_		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}__		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}__		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}__		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1493195810;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}__		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public KeyMap(int expectedNumberOfElements);1495484544;Creates a new table with a capacity tailored to the given expected number of elements.__@param expectedNumberOfElements The number of elements to tailor the capacity to.;public KeyMap(int expectedNumberOfElements) {_		if (expectedNumberOfElements < 0) {_			throw new IllegalArgumentException("Invalid capacity: " + expectedNumberOfElements)__		}__		_		_		int capacity = Integer.highestOneBit(expectedNumberOfElements) << 1__		capacity = capacity >= 0 ? Math.max(MIN_CAPACITY, capacity) : MAX_CAPACITY___		_		log2size = MathUtils.log2strict(capacity)__		shift = FULL_BIT_RANGE - log2size__		table = allocateTable(capacity)__		rehashThreshold = getRehashThreshold(capacity)__	};creates,a,new,table,with,a,capacity,tailored,to,the,given,expected,number,of,elements,param,expected,number,of,elements,the,number,of,elements,to,tailor,the,capacity,to;public,key,map,int,expected,number,of,elements,if,expected,number,of,elements,0,throw,new,illegal,argument,exception,invalid,capacity,expected,number,of,elements,int,capacity,integer,highest,one,bit,expected,number,of,elements,1,capacity,capacity,0,math,max,capacity,log2size,math,utils,log2strict,capacity,shift,log2size,table,allocate,table,capacity,rehash,threshold,get,rehash,threshold,capacity
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1445418103;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key._<p>_The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1455486690;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key._<p>_The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1460741894;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key._<p>_The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key._<p>_The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1493195810;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public final V putIfAbsent(K key, LazyFactory<V> factory);1495484544;Inserts a value for the given key, if no value is yet contained for that key. Otherwise,_returns the value currently contained for the key.__<p>The value that is inserted in case that the key is not contained, yet, is lazily created_using the given factory.__@param key The key to insert._@param factory The factory that produces the value, if no value is contained, yet, for the key._@return The value in the map after this operation (either the previously contained value, or the_newly created value).__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V putIfAbsent(K key, LazyFactory<V> factory) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				_				return entry.value__			}_		}__		_		V value = factory.create()__		insertNewEntry(hash, key, value, slot)___		_		return value__	};inserts,a,value,for,the,given,key,if,no,value,is,yet,contained,for,that,key,otherwise,returns,the,value,currently,contained,for,the,key,p,the,value,that,is,inserted,in,case,that,the,key,is,not,contained,yet,is,lazily,created,using,the,given,factory,param,key,the,key,to,insert,param,factory,the,factory,that,produces,the,value,if,no,value,is,contained,yet,for,the,key,return,the,value,in,the,map,after,this,operation,either,the,previously,contained,value,or,the,newly,created,value,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,if,absent,k,key,lazy,factory,v,factory,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,v,value,factory,create,insert,new,entry,hash,key,value,slot,return,value
KeyMap -> public int size();1445418103;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1455486690;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1460741894;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1493195810;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public int size();1495484544;Gets the number of elements currently in the map._@return The number of elements currently in the map.;public int size() {_		return numElements__	};gets,the,number,of,elements,currently,in,the,map,return,the,number,of,elements,currently,in,the,map;public,int,size,return,num,elements
KeyMap -> public V get(K key);1445418103;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)__		_		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}_		_		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1455486690;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)__		_		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}_		_		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1460741894;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)__		_		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}_		_		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)__		_		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}_		_		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)__		_		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}_		_		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}__		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}__		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}__		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1493195810;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}__		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public V get(K key);1495484544;Looks up the value mapped under the given key. Returns null if no value is mapped under this key.__@param key The key to look up._@return The value associated with the key, or null, if no value is found for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public V get(K key) {_		final int hash = hash(key)__		final int slot = indexOf(hash)___		_		for (Entry<K, V> entry = table[slot]_ entry != null_ entry = entry.next) {_			if (entry.hashCode == hash && entry.key.equals(key)) {_				return entry.value__			}_		}__		_		return null__	};looks,up,the,value,mapped,under,the,given,key,returns,null,if,no,value,is,mapped,under,this,key,param,key,the,key,to,look,up,return,the,value,associated,with,the,key,or,null,if,no,value,is,found,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,v,get,k,key,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,entry,table,slot,entry,null,entry,entry,next,if,entry,hash,code,hash,entry,key,equals,key,return,entry,value,return,null
KeyMap -> public boolean isEmpty();1445418103;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1455486690;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1460741894;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1493195810;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> public boolean isEmpty();1495484544;Checks whether the map is empty._@return True, if the map is empty, false otherwise.;public boolean isEmpty() {_		return numElements == 0__	};checks,whether,the,map,is,empty,return,true,if,the,map,is,empty,false,otherwise;public,boolean,is,empty,return,num,elements,0
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1445418103;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1455486690;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1460741894;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1493195810;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> TraversalEvaluator -> void nextValue(V value) throws Exception_;1495484544;Called for each value found for the current key.__@param value The next value._@throws Exception Method forwards all exceptions.;void nextValue(V value) throws Exception_;called,for,each,value,found,for,the,current,key,param,value,the,next,value,throws,exception,method,forwards,all,exceptions;void,next,value,v,value,throws,exception
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1445418103;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)__		_		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length__		_		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}_		_		_		for (int pos = 0_ pos < numSlots_ pos++) {_			_			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag__						_						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)__						_						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)__						_						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}_					_					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1455486690;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)__		_		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length__		_		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}_		_		_		for (int pos = 0_ pos < numSlots_ pos++) {_			_			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag__						_						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)__						_						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)__						_						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}_					_					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1460741894;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)__		_		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length__		_		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}_		_		_		for (int pos = 0_ pos < numSlots_ pos++) {_			_			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag__						_						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)__						_						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)__						_						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}_					_					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)__		_		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length__		_		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}_		_		_		for (int pos = 0_ pos < numSlots_ pos++) {_			_			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag__						_						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)__						_						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)__						_						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}_					_					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)__		_		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length__		_		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}_		_		_		for (int pos = 0_ pos < numSlots_ pos++) {_			_			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag__						_						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)__						_						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)__						_						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}_					_					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)___		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length___		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}__		_		for (int pos = 0_ pos < numSlots_ pos++) {__			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag___						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)___						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)___						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}__					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)___		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length___		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}__		_		for (int pos = 0_ pos < numSlots_ pos++) {__			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag___						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)___						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)___						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}__					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception_	{_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)___		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length___		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}__		_		for (int pos = 0_ pos < numSlots_ pos++) {__			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++)_			{_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag___						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)___						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)___						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}__					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1493195810;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception {_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)___		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length___		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}__		_		for (int pos = 0_ pos < numSlots_ pos++) {__			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++) {_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag___						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)___						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)___						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}__					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public static <K, V> void traverseMaps( 					final KeyMap<K, V>[] maps, 					final TraversalEvaluator<K, V> visitor, 					final long touchedTag) 		throws Exception;1495484544;Performs a traversal about logical the multi-map that results from the union of the_given maps. This method does not actually build a union of the map, but traverses the hash maps_together.__@param maps The array uf maps whose union should be traversed._@param visitor The visitor that is called for each key and all values._@param touchedTag A tag that is used to mark elements that have been touched in this specific_traversal. Each successive traversal should supply a larger value for this_tag than the previous one.__@param <K> The type of the map's key._@param <V> The type of the map's value.;public static <K, V> void traverseMaps(_					final KeyMap<K, V>[] maps,_					final TraversalEvaluator<K, V> visitor,_					final long touchedTag)_		throws Exception {_		_		Arrays.sort(maps, CapacityDescendingComparator.INSTANCE)___		final int[] shifts = new int[maps.length]__		final int[] lowBitsMask = new int[maps.length]__		final int numSlots = maps[0].table.length__		final int numTables = maps.length___		_		for (int i = 0_ i < numTables_ i++) {_			shifts[i] = maps[0].log2size - maps[i].log2size__			lowBitsMask[i] = (1 << shifts[i]) - 1__		}__		_		for (int pos = 0_ pos < numSlots_ pos++) {__			_			_			_			int mask__			for (int rootTable = 0__					rootTable < numTables && ((mask = lowBitsMask[rootTable]) & pos) == mask__					rootTable++) {_				_				_				Entry<K, V> entry = maps[rootTable].table[pos >> shifts[rootTable]]__				while (entry != null) {_					_					if (entry.touchedTag < touchedTag) {_						entry.touchedTag = touchedTag___						final K key = entry.key__						final int hashCode = entry.hashCode__						visitor.startNewKey(key)__						visitor.nextValue(entry.value)___						addEntriesFromChain(entry.next, visitor, key, touchedTag, hashCode)___						_						for (int followupTable = rootTable + 1_ followupTable < numTables_ followupTable++) {_							Entry<K, V> followupEntry = maps[followupTable].table[pos >> shifts[followupTable]]__							if (followupEntry != null) {_								addEntriesFromChain(followupEntry, visitor, key, touchedTag, hashCode)__							}_						}__						visitor.keyDone()__					}__					entry = entry.next__				}_			}_		}_	};performs,a,traversal,about,logical,the,multi,map,that,results,from,the,union,of,the,given,maps,this,method,does,not,actually,build,a,union,of,the,map,but,traverses,the,hash,maps,together,param,maps,the,array,uf,maps,whose,union,should,be,traversed,param,visitor,the,visitor,that,is,called,for,each,key,and,all,values,param,touched,tag,a,tag,that,is,used,to,mark,elements,that,have,been,touched,in,this,specific,traversal,each,successive,traversal,should,supply,a,larger,value,for,this,tag,than,the,previous,one,param,k,the,type,of,the,map,s,key,param,v,the,type,of,the,map,s,value;public,static,k,v,void,traverse,maps,final,key,map,k,v,maps,final,traversal,evaluator,k,v,visitor,final,long,touched,tag,throws,exception,arrays,sort,maps,capacity,descending,comparator,instance,final,int,shifts,new,int,maps,length,final,int,low,bits,mask,new,int,maps,length,final,int,num,slots,maps,0,table,length,final,int,num,tables,maps,length,for,int,i,0,i,num,tables,i,shifts,i,maps,0,log2size,maps,i,log2size,low,bits,mask,i,1,shifts,i,1,for,int,pos,0,pos,num,slots,pos,int,mask,for,int,root,table,0,root,table,num,tables,mask,low,bits,mask,root,table,pos,mask,root,table,entry,k,v,entry,maps,root,table,table,pos,shifts,root,table,while,entry,null,if,entry,touched,tag,touched,tag,entry,touched,tag,touched,tag,final,k,key,entry,key,final,int,hash,code,entry,hash,code,visitor,start,new,key,key,visitor,next,value,entry,value,add,entries,from,chain,entry,next,visitor,key,touched,tag,hash,code,for,int,followup,table,root,table,1,followup,table,num,tables,followup,table,entry,k,v,followup,entry,maps,followup,table,table,pos,shifts,followup,table,if,followup,entry,null,add,entries,from,chain,followup,entry,visitor,key,touched,tag,hash,code,visitor,key,done,entry,entry,next
KeyMap -> public final V put(K key, V value);1445418103;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)__		_		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1455486690;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)__		_		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1460741894;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)__		_		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)__		_		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)__		_		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)___		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)___		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)___		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1493195810;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)___		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> public final V put(K key, V value);1495484544;Inserts the given value, mapped under the given key. If the table already contains a value for_the key, the value is replaced and returned. If no value is contained, yet, the function_returns null.__@param key The key to insert._@param value The value to insert._@return The previously mapped value for the key, or null, if no value was mapped for the key.__@throws java.lang.NullPointerException Thrown, if the key is null.;public final V put(K key, V value) {_		final int hash = hash(key)__		final int slot = indexOf (hash)___		_		for (Entry<K, V> e = table[slot]_ e != null_ e = e.next) {_			Object k__			if (e.hashCode == hash && ((k = e.key) == key || key.equals(k))) {_				_				V old = e.value__				e.value = value__				return old__			}_		}__		_		insertNewEntry(hash, key, value, slot)__		return null__	};inserts,the,given,value,mapped,under,the,given,key,if,the,table,already,contains,a,value,for,the,key,the,value,is,replaced,and,returned,if,no,value,is,contained,yet,the,function,returns,null,param,key,the,key,to,insert,param,value,the,value,to,insert,return,the,previously,mapped,value,for,the,key,or,null,if,no,value,was,mapped,for,the,key,throws,java,lang,null,pointer,exception,thrown,if,the,key,is,null;public,final,v,put,k,key,v,value,final,int,hash,hash,key,final,int,slot,index,of,hash,for,entry,k,v,e,table,slot,e,null,e,e,next,object,k,if,e,hash,code,hash,k,e,key,key,key,equals,k,v,old,e,value,e,value,value,return,old,insert,new,entry,hash,key,value,slot,return,null
KeyMap -> LazyFactory -> V create()_;1445418103;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1455486690;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1460741894;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1493195810;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> LazyFactory -> V create()_;1495484544;The factory method_ creates the value._@return The value.;V create()_;the,factory,method,creates,the,value,return,the,value;v,create
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1445418103;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {_			_			private final Entry<K, V>[] tab = KeyMap.this.table__			_			private Entry<K, V> nextEntry__			_			private int nextPos = 0__			_			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1455486690;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {_			_			private final Entry<K, V>[] tab = KeyMap.this.table__			_			private Entry<K, V> nextEntry__			_			private int nextPos = 0__			_			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1460741894;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {_			_			private final Entry<K, V>[] tab = KeyMap.this.table__			_			private Entry<K, V> nextEntry__			_			private int nextPos = 0__			_			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {_			_			private final Entry<K, V>[] tab = KeyMap.this.table__			_			private Entry<K, V> nextEntry__			_			private int nextPos = 0__			_			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {_			_			private final Entry<K, V>[] tab = KeyMap.this.table__			_			private Entry<K, V> nextEntry__			_			private int nextPos = 0__			_			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {__			private final Entry<K, V>[] tab = KeyMap.this.table___			private Entry<K, V> nextEntry___			private int nextPos = 0___			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {__			private final Entry<K, V>[] tab = KeyMap.this.table___			private Entry<K, V> nextEntry___			private int nextPos = 0___			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {__			private final Entry<K, V>[] tab = KeyMap.this.table___			private Entry<K, V> nextEntry___			private int nextPos = 0___			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1493195810;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {__			private final Entry<K, V>[] tab = KeyMap.this.table___			private Entry<K, V> nextEntry___			private int nextPos = 0___			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
KeyMap -> @Override 	public Iterator<Entry<K, V>> iterator();1495484544;Creates an iterator over the entries of this map.__@return An iterator over the entries of this map.;@Override_	public Iterator<Entry<K, V>> iterator() {_		return new Iterator<Entry<K, V>>() {__			private final Entry<K, V>[] tab = KeyMap.this.table___			private Entry<K, V> nextEntry___			private int nextPos = 0___			@Override_			public boolean hasNext() {_				if (nextEntry != null) {_					return true__				}_				else {_					while (nextPos < tab.length) {_						Entry<K, V> e = tab[nextPos++]__						if (e != null) {_							nextEntry = e__							return true__						}_					}_					return false__				}_			}__			@Override_			public Entry<K, V> next() {_				if (nextEntry != null || hasNext()) {_					Entry<K, V> e = nextEntry__					nextEntry = nextEntry.next__					return e__				}_				else {_					throw new NoSuchElementException()__				}_			}__			@Override_			public void remove() {_				throw new UnsupportedOperationException()__			}_		}__	};creates,an,iterator,over,the,entries,of,this,map,return,an,iterator,over,the,entries,of,this,map;override,public,iterator,entry,k,v,iterator,return,new,iterator,entry,k,v,private,final,entry,k,v,tab,key,map,this,table,private,entry,k,v,next,entry,private,int,next,pos,0,override,public,boolean,has,next,if,next,entry,null,return,true,else,while,next,pos,tab,length,entry,k,v,e,tab,next,pos,if,e,null,next,entry,e,return,true,return,false,override,public,entry,k,v,next,if,next,entry,null,has,next,entry,k,v,e,next,entry,next,entry,next,entry,next,return,e,else,throw,new,no,such,element,exception,override,public,void,remove,throw,new,unsupported,operation,exception
