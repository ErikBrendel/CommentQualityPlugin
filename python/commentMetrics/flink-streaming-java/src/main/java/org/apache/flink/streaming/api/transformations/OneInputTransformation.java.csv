# id;timestamp;commentText;codeText;commentWords;codeWords
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1445418103;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1455486690;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1493195810;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1493195810;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1493195810;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1495484544;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1502726910;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector);1515177485;Sets the {@link KeySelector} that must be used for partitioning keyed state of this operation.__@param stateKeySelector The {@code KeySelector} to set;public void setStateKeySelector(KeySelector<IN, ?> stateKeySelector) {_		this.stateKeySelector = stateKeySelector__	};sets,the,link,key,selector,that,must,be,used,for,partitioning,keyed,state,of,this,operation,param,state,key,selector,the,code,key,selector,to,set;public,void,set,state,key,selector,key,selector,in,state,key,selector,this,state,key,selector,state,key,selector
OneInputTransformation -> public TypeInformation<IN> getInputType();1445418103;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1455486690;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1493195810;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1493195810;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1493195810;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1495484544;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1502726910;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public TypeInformation<IN> getInputType();1515177485;Returns the {@code TypeInformation} for the elements of the input.;public TypeInformation<IN> getInputType() {_		return input.getOutputType()__	};returns,the,code,type,information,for,the,elements,of,the,input;public,type,information,in,get,input,type,return,input,get,output,type
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1445418103;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1455486690;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1493195810;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1493195810;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1493195810;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1495484544;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1502726910;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputTransformation( 			StreamTransformation<IN> input, 			String name, 			OneInputStreamOperator<IN, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1515177485;Creates a new {@code OneInputTransformation} from the given input and operator.__@param input The input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this {@code OneInputTransformation}_@param parallelism The parallelism of this {@code OneInputTransformation};public OneInputTransformation(_			StreamTransformation<IN> input,_			String name,_			OneInputStreamOperator<IN, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input = input__		this.operator = operator__	};creates,a,new,code,one,input,transformation,from,the,given,input,and,operator,param,input,the,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,code,one,input,transformation,param,parallelism,the,parallelism,of,this,code,one,input,transformation;public,one,input,transformation,stream,transformation,in,input,string,name,one,input,stream,operator,in,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input,input,this,operator,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1445418103;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1455486690;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1493195810;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1493195810;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1493195810;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1495484544;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1502726910;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public OneInputStreamOperator<IN, OUT> getOperator();1515177485;Returns the {@code TwoInputStreamOperator} of this Transformation.;public OneInputStreamOperator<IN, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,one,input,stream,operator,in,out,get,operator,return,operator
OneInputTransformation -> public StreamTransformation<IN> getInput();1445418103;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1455486690;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1493195810;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1493195810;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1493195810;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1495484544;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1502726910;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public StreamTransformation<IN> getInput();1515177485;Returns the input {@code StreamTransformation} of this {@code OneInputTransformation}.;public StreamTransformation<IN> getInput() {_		return input__	};returns,the,input,code,stream,transformation,of,this,code,one,input,transformation;public,stream,transformation,in,get,input,return,input
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1445418103;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1455486690;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1495484544;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1502726910;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
OneInputTransformation -> public KeySelector<IN, ?> getStateKeySelector();1515177485;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation.__@see #setStateKeySelector;public KeySelector<IN, ?> getStateKeySelector() {_		return stateKeySelector__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,see,set,state,key,selector;public,key,selector,in,get,state,key,selector,return,state,key,selector
