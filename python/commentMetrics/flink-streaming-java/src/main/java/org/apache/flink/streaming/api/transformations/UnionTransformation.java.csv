# id;timestamp;commentText;codeText;commentWords;codeWords
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1445418103;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>_The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1455486690;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>_The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1493195810;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1493195810;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1495484544;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public UnionTransformation(List<StreamTransformation<T>> inputs);1502726910;Creates a new {@code UnionTransformation} from the given input {@code StreamTransformations}.__<p>The input {@code StreamTransformations} must all have the same type.__@param inputs The list of input {@code StreamTransformations};public UnionTransformation(List<StreamTransformation<T>> inputs) {_		super("Union", inputs.get(0).getOutputType(), inputs.get(0).getParallelism())___		for (StreamTransformation<T> input: inputs) {_			if (!input.getOutputType().equals(getOutputType())) {_				throw new UnsupportedOperationException("Type mismatch in input " + input)__			}_		}__		this.inputs = Lists.newArrayList(inputs)__	};creates,a,new,code,union,transformation,from,the,given,input,code,stream,transformations,p,the,input,code,stream,transformations,must,all,have,the,same,type,param,inputs,the,list,of,input,code,stream,transformations;public,union,transformation,list,stream,transformation,t,inputs,super,union,inputs,get,0,get,output,type,inputs,get,0,get,parallelism,for,stream,transformation,t,input,inputs,if,input,get,output,type,equals,get,output,type,throw,new,unsupported,operation,exception,type,mismatch,in,input,input,this,inputs,lists,new,array,list,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1445418103;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1455486690;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1493195810;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1493195810;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1495484544;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
UnionTransformation -> public List<StreamTransformation<T>> getInputs();1502726910;Returns the list of input {@code StreamTransformations}.;public List<StreamTransformation<T>> getInputs() {_		return inputs__	};returns,the,list,of,input,code,stream,transformations;public,list,stream,transformation,t,get,inputs,return,inputs
