# id;timestamp;commentText;codeText;commentWords;codeWords
TimeWindow -> public TimeWindow cover(TimeWindow other);1459869538;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1471623818;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1485118419;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1489685642;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1493195810;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1493195810;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1493195810;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1494180263;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1495484544;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1548148563;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public TimeWindow cover(TimeWindow other);1550652777;Returns the minimal window covers both this window and the given window.;public TimeWindow cover(TimeWindow other) {_		return new TimeWindow(Math.min(start, other.start), Math.max(end, other.end))__	};returns,the,minimal,window,covers,both,this,window,and,the,given,window;public,time,window,cover,time,window,other,return,new,time,window,math,min,start,other,start,math,max,end,other,end
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1459869538;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1471623818;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1485118419;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1489685642;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1493195810;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1493195810;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1493195810;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1494180263;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1495484544;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1548148563;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c);1550652777;Merge overlapping {@link TimeWindow}s. For use by merging_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner WindowAssigners}.;public static void mergeWindows(Collection<TimeWindow> windows, MergingWindowAssigner.MergeCallback<TimeWindow> c) {__		__		List<TimeWindow> sortedWindows = new ArrayList<>(windows)___		Collections.sort(sortedWindows, new Comparator<TimeWindow>() {_			@Override_			public int compare(TimeWindow o1, TimeWindow o2) {_				return Long.compare(o1.getStart(), o2.getStart())__			}_		})___		List<Tuple2<TimeWindow, Set<TimeWindow>>> merged = new ArrayList<>()__		Tuple2<TimeWindow, Set<TimeWindow>> currentMerge = null___		for (TimeWindow candidate: sortedWindows) {_			if (currentMerge == null) {_				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			} else if (currentMerge.f0.intersects(candidate)) {_				currentMerge.f0 = currentMerge.f0.cover(candidate)__				currentMerge.f1.add(candidate)__			} else {_				merged.add(currentMerge)__				currentMerge = new Tuple2<>()__				currentMerge.f0 = candidate__				currentMerge.f1 = new HashSet<>()__				currentMerge.f1.add(candidate)__			}_		}__		if (currentMerge != null) {_			merged.add(currentMerge)__		}__		for (Tuple2<TimeWindow, Set<TimeWindow>> m: merged) {_			if (m.f1.size() > 1) {_				c.merge(m.f1, m.f0)__			}_		}_	};merge,overlapping,link,time,window,s,for,use,by,merging,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,window,assigners;public,static,void,merge,windows,collection,time,window,windows,merging,window,assigner,merge,callback,time,window,c,list,time,window,sorted,windows,new,array,list,windows,collections,sort,sorted,windows,new,comparator,time,window,override,public,int,compare,time,window,o1,time,window,o2,return,long,compare,o1,get,start,o2,get,start,list,tuple2,time,window,set,time,window,merged,new,array,list,tuple2,time,window,set,time,window,current,merge,null,for,time,window,candidate,sorted,windows,if,current,merge,null,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,else,if,current,merge,f0,intersects,candidate,current,merge,f0,current,merge,f0,cover,candidate,current,merge,f1,add,candidate,else,merged,add,current,merge,current,merge,new,tuple2,current,merge,f0,candidate,current,merge,f1,new,hash,set,current,merge,f1,add,candidate,if,current,merge,null,merged,add,current,merge,for,tuple2,time,window,set,time,window,m,merged,if,m,f1,size,1,c,merge,m,f1,m,f0
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1471623818;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1485118419;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1489685642;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1493195810;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1493195810;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1493195810;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1494180263;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1495484544;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1548148563;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize);1550652777;Method to get the window start for a timestamp.__@param timestamp epoch millisecond to get the window start._@param offset The offset which window start would be shifted by._@param windowSize The size of the generated windows._@return window start;public static long getWindowStartWithOffset(long timestamp, long offset, long windowSize) {_		return timestamp - (timestamp - offset + windowSize) % windowSize__	};method,to,get,the,window,start,for,a,timestamp,param,timestamp,epoch,millisecond,to,get,the,window,start,param,offset,the,offset,which,window,start,would,be,shifted,by,param,window,size,the,size,of,the,generated,windows,return,window,start;public,static,long,get,window,start,with,offset,long,timestamp,long,offset,long,window,size,return,timestamp,timestamp,offset,window,size,window,size
TimeWindow -> @Override 	public long maxTimestamp();1485118419;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1489685642;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1493195810;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1493195810;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1493195810;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1494180263;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1495484544;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1548148563;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> @Override 	public long maxTimestamp();1550652777;Gets the largest timestamp that still belongs to this window.__<p>This timestamp is identical to {@code getEnd() - 1}.__@return The largest timestamp that still belongs to this window.__@see #getEnd();@Override_	public long maxTimestamp() {_		return end - 1__	};gets,the,largest,timestamp,that,still,belongs,to,this,window,p,this,timestamp,is,identical,to,code,get,end,1,return,the,largest,timestamp,that,still,belongs,to,this,window,see,get,end;override,public,long,max,timestamp,return,end,1
TimeWindow -> public long getStart();1485118419;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1489685642;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1493195810;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1493195810;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1493195810;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1494180263;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1495484544;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1548148563;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getStart();1550652777;Gets the starting timestamp of the window. This is the first timestamp that belongs_to this window.__@return The starting timestamp of this window.;public long getStart() {_		return start__	};gets,the,starting,timestamp,of,the,window,this,is,the,first,timestamp,that,belongs,to,this,window,return,the,starting,timestamp,of,this,window;public,long,get,start,return,start
TimeWindow -> public long getEnd();1485118419;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1489685642;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1493195810;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1493195810;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1493195810;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1494180263;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1495484544;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1548148563;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public long getEnd();1550652777;Gets the end timestamp of this window. The end timestamp is exclusive, meaning it_is the first timestamp that does not belong to this window any more.__@return The exclusive end timestamp of this window.;public long getEnd() {_		return end__	};gets,the,end,timestamp,of,this,window,the,end,timestamp,is,exclusive,meaning,it,is,the,first,timestamp,that,does,not,belong,to,this,window,any,more,return,the,exclusive,end,timestamp,of,this,window;public,long,get,end,return,end
TimeWindow -> public boolean intersects(TimeWindow other);1459869538;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1471623818;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1485118419;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1489685642;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1493195810;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1493195810;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1493195810;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1494180263;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1495484544;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1548148563;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
TimeWindow -> public boolean intersects(TimeWindow other);1550652777;Returns {@code true} if this window intersects the given window.;public boolean intersects(TimeWindow other) {_		return this.start <= other.end && this.end >= other.start__	};returns,code,true,if,this,window,intersects,the,given,window;public,boolean,intersects,time,window,other,return,this,start,other,end,this,end,other,start
