# id;timestamp;commentText;codeText;commentWords;codeWords
TimestampsAndPeriodicWatermarksOperator -> @Override 	public void processWatermark(Watermark mark) throws Exception;1486732842;Override the base implementation to completely ignore watermarks propagated from_upstream (we rely only on the {@link AssignerWithPeriodicWatermarks} to emit_watermarks from here).;@Override_	public void processWatermark(Watermark mark) throws Exception {_		_		_		if (mark.getTimestamp() == Long.MAX_VALUE && currentWatermark != Long.MAX_VALUE) {_			currentWatermark = Long.MAX_VALUE__			output.emitWatermark(mark)__		}_	};override,the,base,implementation,to,completely,ignore,watermarks,propagated,from,upstream,we,rely,only,on,the,link,assigner,with,periodic,watermarks,to,emit,watermarks,from,here;override,public,void,process,watermark,watermark,mark,throws,exception,if,mark,get,timestamp,long,current,watermark,long,current,watermark,long,output,emit,watermark,mark
TimestampsAndPeriodicWatermarksOperator -> @Override 	public void processWatermark(Watermark mark) throws Exception;1493195810;Override the base implementation to completely ignore watermarks propagated from_upstream (we rely only on the {@link AssignerWithPeriodicWatermarks} to emit_watermarks from here).;@Override_	public void processWatermark(Watermark mark) throws Exception {_		_		_		if (mark.getTimestamp() == Long.MAX_VALUE && currentWatermark != Long.MAX_VALUE) {_			currentWatermark = Long.MAX_VALUE__			output.emitWatermark(mark)__		}_	};override,the,base,implementation,to,completely,ignore,watermarks,propagated,from,upstream,we,rely,only,on,the,link,assigner,with,periodic,watermarks,to,emit,watermarks,from,here;override,public,void,process,watermark,watermark,mark,throws,exception,if,mark,get,timestamp,long,current,watermark,long,current,watermark,long,output,emit,watermark,mark
TimestampsAndPeriodicWatermarksOperator -> @Override 	public void processWatermark(Watermark mark) throws Exception;1495484544;Override the base implementation to completely ignore watermarks propagated from_upstream (we rely only on the {@link AssignerWithPeriodicWatermarks} to emit_watermarks from here).;@Override_	public void processWatermark(Watermark mark) throws Exception {_		_		_		if (mark.getTimestamp() == Long.MAX_VALUE && currentWatermark != Long.MAX_VALUE) {_			currentWatermark = Long.MAX_VALUE__			output.emitWatermark(mark)__		}_	};override,the,base,implementation,to,completely,ignore,watermarks,propagated,from,upstream,we,rely,only,on,the,link,assigner,with,periodic,watermarks,to,emit,watermarks,from,here;override,public,void,process,watermark,watermark,mark,throws,exception,if,mark,get,timestamp,long,current,watermark,long,current,watermark,long,output,emit,watermark,mark
