# id;timestamp;commentText;codeText;commentWords;codeWords
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>_Note: This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)} method has the wrong return type._</p>_@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,p,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be replaced by {@link #apply(FlatJoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,type,information,in,flink,2,0,so,use,the,link,apply,flat,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1445418103;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1454679829;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1455101486;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1456774151;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new JoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			coGroupedWindowedStream = input1.coGroup(input2)_				.where(keySelector1)_				.equalTo(keySelector2)_				.window(windowAssigner)_				.trigger(trigger)_				.evictor(evictor)_				.allowedLateness(allowedLateness)___			return coGroupedWindowedStream_					.apply(new JoinCoGroupFunction<>(function), resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,co,grouped,windowed,stream,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,allowed,lateness,allowed,lateness,return,co,grouped,windowed,stream,apply,new,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1455101486;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1456774151;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1472563673;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1472563673;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1479922544;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1493195810;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1495484544;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1496911361;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1508481109;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1532066767;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger);1537450148;Sets the {@code Trigger} that should be used to trigger window emission.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> trigger(Trigger<? super TaggedUnion<T1, T2>, ? super W> newTrigger) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, newTrigger, evictor, allowedLateness)__		};sets,the,code,trigger,that,should,be,used,to,trigger,window,emission;public,evolving,public,with,window,t1,t2,key,w,trigger,trigger,super,tagged,union,t1,t2,super,w,new,trigger,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,new,trigger,evictor,allowed,lateness
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>_Note: This is a temporary workaround while the {@link #apply(FlatJoinFunction)} method has the wrong return type._</p>_@deprecated This method will be replaced by {@link #apply(FlatJoinFunction)} in Flink 2.0._So use the {@link #apply(FlatJoinFunction)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,p,deprecated,this,method,will,be,replaced,by,link,apply,flat,join,function,in,flink,2,0,so,use,the,link,apply,flat,join,function,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism.__@deprecated This method will be removed once the {@link #apply(FlatJoinFunction)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(FlatJoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,flat,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,flat,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1445418103;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1454679829;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1455101486;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1456774151;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1472563673;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1472563673;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1479922544;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1495484544;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1496911361;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1508481109;Specifies a {@link KeySelector} for elements from the first input.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1532066767;Specifies a {@link KeySelector} for elements from the first input.__@param keySelector The KeySelector to be used for extracting the key for partitioning.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		requireNonNull(keySelector)__		final TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return where(keySelector, keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input,param,key,selector,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning;public,key,where,key,where,key,selector,t1,key,key,selector,require,non,null,key,selector,final,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,where,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector);1537450148;Specifies a {@link KeySelector} for elements from the first input.__@param keySelector The KeySelector to be used for extracting the key for partitioning.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector)  {_		requireNonNull(keySelector)__		final TypeInformation<KEY> keyType = TypeExtractor.getKeySelectorTypes(keySelector, input1.getType())__		return where(keySelector, keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input,param,key,selector,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning;public,key,where,key,where,key,selector,t1,key,key,selector,require,non,null,key,selector,final,type,information,key,key,type,type,extractor,get,key,selector,types,key,selector,input1,get,type,return,where,key,selector,key,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1445418103;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1454679829;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1455101486;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1456774151;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				JoinFunction.class,_				0,_				1,_				2,_				new int[]{0},_				new int[]{1},_				TypeExtractor.NO_INDEX,_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,0,1,2,new,int,0,new,int,1,type,extractor,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				JoinFunction.class,_				0,_				1,_				2,_				new int[]{0},_				new int[]{1},_				TypeExtractor.NO_INDEX,_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,0,1,2,new,int,0,new,int,1,type,extractor,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				JoinFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,0,1,2,type,extractor,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the {@link #with(JoinFunction)}_method to set an operator-specific parallelism.;public <T> DataStream<T> apply(JoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				JoinFunction.class,_				0,_				1,_				2,_				TypeExtractor.NO_INDEX,_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,0,1,2,type,extractor,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1445418103;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1454679829;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1455101486;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1456774151;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			return input1.coGroup(input2)_					.where(keySelector1)_					.equalTo(keySelector2)_					.window(windowAssigner)_					.trigger(trigger)_					.evictor(evictor)_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)___		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,return,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(JoinFunction, TypeInformation)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			_			function = input1.getExecutionEnvironment().clean(function)___			coGroupedWindowedStream = input1.coGroup(input2)_				.where(keySelector1)_				.equalTo(keySelector2)_				.window(windowAssigner)_				.trigger(trigger)_				.evictor(evictor)_				.allowedLateness(allowedLateness)___			return coGroupedWindowedStream_					.apply(new FlatJoinCoGroupFunction<>(function), resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,join,function,type,information,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,function,input1,get,execution,environment,clean,function,co,grouped,windowed,stream,input1,co,group,input2,where,key,selector1,equal,to,key,selector2,window,window,assigner,trigger,trigger,evictor,evictor,allowed,lateness,allowed,lateness,return,co,grouped,windowed,stream,apply,new,flat,join,co,group,function,function,result,type
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector, TypeInformation<KEY> keyType);1532066767;Specifies a {@link KeySelector} for elements from the second input with explicit type information for the key type.__@param keySelector The KeySelector to be used for extracting the second input's key for partitioning._@param keyType The type information describing the key type.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector, TypeInformation<KEY> keyType)  {_			requireNonNull(keySelector)__			requireNonNull(keyType)___			if (!keyType.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + keyType)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input,with,explicit,type,information,for,the,key,type,param,key,selector,the,key,selector,to,be,used,for,extracting,the,second,input,s,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,key,type,require,non,null,key,selector,require,non,null,key,type,if,key,type,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,key,type,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector, TypeInformation<KEY> keyType);1537450148;Specifies a {@link KeySelector} for elements from the second input with explicit type information for the key type.__@param keySelector The KeySelector to be used for extracting the second input's key for partitioning._@param keyType The type information describing the key type.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector, TypeInformation<KEY> keyType)  {_			requireNonNull(keySelector)__			requireNonNull(keyType)___			if (!keyType.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + keyType)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input,with,explicit,type,information,for,the,key,type,param,key,selector,the,key,selector,to,be,used,for,extracting,the,second,input,s,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,key,type,require,non,null,key,selector,require,non,null,key,type,if,key,type,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,key,type,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>_Note: This is a temporary workaround while the {@link #apply(JoinFunction, TypeInformation)} method has the wrong return type._</p>_@deprecated This method will be replaced by {@link #apply(JoinFunction, TypeInformation)} in Flink 2.0._So use the {@link #apply(JoinFunction, TypeInformation)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,is,a,temporary,workaround,while,the,link,apply,join,function,type,information,method,has,the,wrong,return,type,p,deprecated,this,method,will,be,replaced,by,link,apply,join,function,type,information,in,flink,2,0,so,use,the,link,apply,join,function,type,information,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(FlatJoinFunction, TypeInformation)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction, TypeInformation)}_method is fixed in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function, TypeInformation<T> resultType) {_			return (SingleOutputStreamOperator<T>) apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,flat,join,function,type,information,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,type,information,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,type,information,t,result,type,return,single,output,stream,operator,t,apply,function,result,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector, TypeInformation<KEY> keyType);1532066767;Specifies a {@link KeySelector} for elements from the first input with explicit type information for the key type.__@param keySelector The KeySelector to be used for extracting the first input's key for partitioning._@param keyType The type information describing the key type.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector, TypeInformation<KEY> keyType)  {_		requireNonNull(keySelector)__		requireNonNull(keyType)__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input,with,explicit,type,information,for,the,key,type,param,key,selector,the,key,selector,to,be,used,for,extracting,the,first,input,s,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,require,non,null,key,selector,require,non,null,key,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector, TypeInformation<KEY> keyType);1537450148;Specifies a {@link KeySelector} for elements from the first input with explicit type information for the key type.__@param keySelector The KeySelector to be used for extracting the first input's key for partitioning._@param keyType The type information describing the key type.;public <KEY> Where<KEY> where(KeySelector<T1, KEY> keySelector, TypeInformation<KEY> keyType)  {_		requireNonNull(keySelector)__		requireNonNull(keyType)__		return new Where<>(input1.clean(keySelector), keyType)__	};specifies,a,link,key,selector,for,elements,from,the,first,input,with,explicit,type,information,for,the,key,type,param,key,selector,the,key,selector,to,be,used,for,extracting,the,first,input,s,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type;public,key,where,key,where,key,selector,t1,key,key,selector,type,information,key,key,type,require,non,null,key,selector,require,non,null,key,type,return,new,where,input1,clean,key,selector,key,type
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1445418103;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1454679829;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1455101486;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1456774151;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1472563673;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1472563673;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1479922544;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1493195810;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1493195810;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1493195810;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1495484544;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1496911361;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1508481109;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1532066767;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2);1537450148;Creates new JoinedStreams data streams, which are the first step towards building a streaming co-group.__@param input1 The first data stream._@param input2 The second data stream.;public JoinedStreams(DataStream<T1> input1, DataStream<T2> input2) {_		this.input1 = requireNonNull(input1)__		this.input2 = requireNonNull(input2)__	};creates,new,joined,streams,data,streams,which,are,the,first,step,towards,building,a,streaming,co,group,param,input1,the,first,data,stream,param,input2,the,second,data,stream;public,joined,streams,data,stream,t1,input1,data,stream,t2,input2,this,input1,require,non,null,input1,this,input2,require,non,null,input2
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1445418103;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1454679829;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1455101486;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1456774151;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1472563673;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1472563673;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1479922544;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1493195810;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1495484544;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1496911361;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1508481109;Specifies a {@link KeySelector} for elements from the second input.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			if (!otherKey.equals(this.keyType)) {_				throw new IllegalArgumentException("The keys for the two inputs are not equal: " +_						"first key = " + this.keyType + " , second key = " + otherKey)__			}__			return new EqualTo(input2.clean(keySelector))__		};specifies,a,link,key,selector,for,elements,from,the,second,input;public,equal,to,equal,to,key,selector,t2,key,key,selector,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,if,other,key,equals,this,key,type,throw,new,illegal,argument,exception,the,keys,for,the,two,inputs,are,not,equal,first,key,this,key,type,second,key,other,key,return,new,equal,to,input2,clean,key,selector
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1532066767;Specifies a {@link KeySelector} for elements from the second input.__@param keySelector The KeySelector to be used for extracting the second input's key for partitioning.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			requireNonNull(keySelector)__			final TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return equalTo(keySelector, otherKey)__		};specifies,a,link,key,selector,for,elements,from,the,second,input,param,key,selector,the,key,selector,to,be,used,for,extracting,the,second,input,s,key,for,partitioning;public,equal,to,equal,to,key,selector,t2,key,key,selector,require,non,null,key,selector,final,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,equal,to,key,selector,other,key
JoinedStreams -> Where -> public EqualTo equalTo(KeySelector<T2, KEY> keySelector);1537450148;Specifies a {@link KeySelector} for elements from the second input.__@param keySelector The KeySelector to be used for extracting the second input's key for partitioning.;public EqualTo equalTo(KeySelector<T2, KEY> keySelector)  {_			requireNonNull(keySelector)__			final TypeInformation<KEY> otherKey = TypeExtractor.getKeySelectorTypes(keySelector, input2.getType())__			return equalTo(keySelector, otherKey)__		};specifies,a,link,key,selector,for,elements,from,the,second,input,param,key,selector,the,key,selector,to,be,used,for,extracting,the,second,input,s,key,for,partitioning;public,equal,to,equal,to,key,selector,t2,key,key,selector,require,non,null,key,selector,final,type,information,key,other,key,type,extractor,get,key,selector,types,key,selector,input2,get,type,return,equal,to,key,selector,other,key
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1445418103;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1454679829;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1455101486;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1456774151;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					JoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					FlatJoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					FlatJoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					FlatJoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					FlatJoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_					function,_					FlatJoinFunction.class,_					true,_					true,_					input1.getType(),_					input2.getType(),_					"Join",_					false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,true,true,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				FlatJoinFunction.class,_				0,_				1,_				2,_				new int[]{0},_				new int[]{1},_				new int[]{2, 0},_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,0,1,2,new,int,0,new,int,1,new,int,2,0,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				FlatJoinFunction.class,_				0,_				1,_				2,_				new int[]{0},_				new int[]{1},_				new int[]{2, 0},_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,0,1,2,new,int,0,new,int,1,new,int,2,0,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				FlatJoinFunction.class,_				0,_				1,_				2,_				new int[]{2, 0},_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,0,1,2,new,int,2,0,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> WithWindow -> public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>Note: This method's return type does not support setting an operator-specific parallelism._Due to binary backwards compatibility, this cannot be altered. Use the_{@link #with(FlatJoinFunction)}, method to set an operator-specific parallelism.;public <T> DataStream<T> apply(FlatJoinFunction<T1, T2, T> function) {_			TypeInformation<T> resultType = TypeExtractor.getBinaryOperatorReturnType(_				function,_				FlatJoinFunction.class,_				0,_				1,_				2,_				new int[]{2, 0},_				input1.getType(),_				input2.getType(),_				"Join",_				false)___			return apply(function, resultType)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,method,s,return,type,does,not,support,setting,an,operator,specific,parallelism,due,to,binary,backwards,compatibility,this,cannot,be,altered,use,the,link,with,flat,join,function,method,to,set,an,operator,specific,parallelism;public,t,data,stream,t,apply,flat,join,function,t1,t2,t,function,type,information,t,result,type,type,extractor,get,binary,operator,return,type,function,flat,join,function,class,0,1,2,new,int,2,0,input1,get,type,input2,get,type,join,false,return,apply,function,result,type
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1455101486;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1456774151;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1472563673;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1472563673;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1479922544;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1493195810;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1493195810;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1493195810;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1495484544;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1496911361;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1508481109;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1532066767;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null
JoinedStreams -> Where -> EqualTo -> @PublicEvolving 			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner);1537450148;Specifies the window on which the join operation works.;@PublicEvolving_			public <W extends Window> WithWindow<T1, T2, KEY, W> window(WindowAssigner<? super TaggedUnion<T1, T2>, W> assigner) {_				return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType, assigner, null, null, null)__			};specifies,the,window,on,which,the,join,operation,works;public,evolving,public,w,extends,window,with,window,t1,t2,key,w,window,window,assigner,super,tagged,union,t1,t2,w,assigner,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,assigner,null,null,null
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1455101486;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1456774151;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1472563673;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1472563673;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1479922544;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>_Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1493195810;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1495484544;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1496911361;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1508481109;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1532066767;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor
JoinedStreams -> WithWindow -> @PublicEvolving 		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor);1537450148;Sets the {@code Evictor} that should be used to evict elements from a window before emission.__<p>Note: When using an evictor window performance will degrade significantly, since_pre-aggregation of window results cannot be used.;@PublicEvolving_		public WithWindow<T1, T2, KEY, W> evictor(Evictor<? super TaggedUnion<T1, T2>, ? super W> newEvictor) {_			return new WithWindow<>(input1, input2, keySelector1, keySelector2, keyType,_					windowAssigner, trigger, newEvictor, allowedLateness)__		};sets,the,code,evictor,that,should,be,used,to,evict,elements,from,a,window,before,emission,p,note,when,using,an,evictor,window,performance,will,degrade,significantly,since,pre,aggregation,of,window,results,cannot,be,used;public,evolving,public,with,window,t1,t2,key,w,evictor,evictor,super,tagged,union,t1,t2,super,w,new,evictor,return,new,with,window,input1,input2,key,selector1,key,selector2,key,type,window,assigner,trigger,new,evictor,allowed,lateness
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p>_Note: This is a temporary workaround while the {@link #apply(JoinFunction)} method has the wrong return type._</p>_@deprecated This method will be replaced by {@link #apply(JoinFunction)} in Flink 2.0._So use the {@link #apply(JoinFunction)} in the future.;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,note,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,p,deprecated,this,method,will,be,replaced,by,link,apply,join,function,in,flink,2,0,so,use,the,link,apply,join,function,in,the,future;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1472563673;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1479922544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1493195810;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1495484544;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1496911361;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1508481109;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1532066767;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
JoinedStreams -> WithWindow -> @PublicEvolving 		@Deprecated 		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function);1537450148;Completes the join operation with the user function that is executed_for each combination of elements with the same key in a window.__<p><b>Note:</b> This is a temporary workaround while the {@link #apply(JoinFunction)}_method has the wrong return type and hence does not allow one to set an operator-specific_parallelism__@deprecated This method will be removed once the {@link #apply(JoinFunction)} method is fixed_in the next major version of Flink (2.0).;@PublicEvolving_		@Deprecated_		public <T> SingleOutputStreamOperator<T> with(JoinFunction<T1, T2, T> function) {_			return (SingleOutputStreamOperator<T>) apply(function)__		};completes,the,join,operation,with,the,user,function,that,is,executed,for,each,combination,of,elements,with,the,same,key,in,a,window,p,b,note,b,this,is,a,temporary,workaround,while,the,link,apply,join,function,method,has,the,wrong,return,type,and,hence,does,not,allow,one,to,set,an,operator,specific,parallelism,deprecated,this,method,will,be,removed,once,the,link,apply,join,function,method,is,fixed,in,the,next,major,version,of,flink,2,0;public,evolving,deprecated,public,t,single,output,stream,operator,t,with,join,function,t1,t2,t,function,return,single,output,stream,operator,t,apply,function
