# id;timestamp;commentText;codeText;commentWords;codeWords
ExtractionAwareDeltaFunction -> public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;1445418103;This method is exactly the same as_{@link DeltaFunction#getDelta(Object, Object)} except that it gets the_result of the previously done extractions as input. Therefore, this_method only does the actual calculation of the delta but no data_extraction or conversion.__@param oldDataPoint_the older data point._@param newDataPoint_the new data point._@return the delta between the two points.;public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;this,method,is,exactly,the,same,as,link,delta,function,get,delta,object,object,except,that,it,gets,the,result,of,the,previously,done,extractions,as,input,therefore,this,method,only,does,the,actual,calculation,of,the,delta,but,no,data,extraction,or,conversion,param,old,data,point,the,older,data,point,param,new,data,point,the,new,data,point,return,the,delta,between,the,two,points;public,abstract,double,get,nested,delta,to,old,data,point,to,new,data,point
ExtractionAwareDeltaFunction -> public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;1455486690;This method is exactly the same as_{@link DeltaFunction#getDelta(Object, Object)} except that it gets the_result of the previously done extractions as input. Therefore, this_method only does the actual calculation of the delta but no data_extraction or conversion.__@param oldDataPoint_the older data point._@param newDataPoint_the new data point._@return the delta between the two points.;public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;this,method,is,exactly,the,same,as,link,delta,function,get,delta,object,object,except,that,it,gets,the,result,of,the,previously,done,extractions,as,input,therefore,this,method,only,does,the,actual,calculation,of,the,delta,but,no,data,extraction,or,conversion,param,old,data,point,the,older,data,point,param,new,data,point,the,new,data,point,return,the,delta,between,the,two,points;public,abstract,double,get,nested,delta,to,old,data,point,to,new,data,point
ExtractionAwareDeltaFunction -> public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;1493195810;This method is exactly the same as_{@link DeltaFunction#getDelta(Object, Object)} except that it gets the_result of the previously done extractions as input. Therefore, this_method only does the actual calculation of the delta but no data_extraction or conversion.__@param oldDataPoint_the older data point._@param newDataPoint_the new data point._@return the delta between the two points.;public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;this,method,is,exactly,the,same,as,link,delta,function,get,delta,object,object,except,that,it,gets,the,result,of,the,previously,done,extractions,as,input,therefore,this,method,only,does,the,actual,calculation,of,the,delta,but,no,data,extraction,or,conversion,param,old,data,point,the,older,data,point,param,new,data,point,the,new,data,point,return,the,delta,between,the,two,points;public,abstract,double,get,nested,delta,to,old,data,point,to,new,data,point
ExtractionAwareDeltaFunction -> public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;1493195810;This method is exactly the same as_{@link DeltaFunction#getDelta(Object, Object)} except that it gets the_result of the previously done extractions as input. Therefore, this_method only does the actual calculation of the delta but no data_extraction or conversion.__@param oldDataPoint_the older data point._@param newDataPoint_the new data point._@return the delta between the two points.;public abstract double getNestedDelta(TO oldDataPoint, TO newDataPoint)_;this,method,is,exactly,the,same,as,link,delta,function,get,delta,object,object,except,that,it,gets,the,result,of,the,previously,done,extractions,as,input,therefore,this,method,only,does,the,actual,calculation,of,the,delta,but,no,data,extraction,or,conversion,param,old,data,point,the,older,data,point,param,new,data,point,the,new,data,point,return,the,delta,between,the,two,points;public,abstract,double,get,nested,delta,to,old,data,point,to,new,data,point
ExtractionAwareDeltaFunction -> @SuppressWarnings("unchecked") 	@Override 	public double getDelta(DATA oldDataPoint, DATA newDataPoint);1445418103;This method takes the two data point and runs the set extractor on it._The delta function implemented at {@link #getNestedDelta} is then called_with the extracted data. In case no extractor is set the input data gets_passes to {@link #getNestedDelta} as-is. The return value is just_forwarded from {@link #getNestedDelta}.__@param oldDataPoint_the older data point as raw data (before extraction)._@param newDataPoint_the new data point as raw data (before extraction)._@return the delta between the two points.;@SuppressWarnings("unchecked")_	@Override_	public double getDelta(DATA oldDataPoint, DATA newDataPoint) {_		if (converter == null) {_			_			_			_			return getNestedDelta((TO) oldDataPoint, (TO) newDataPoint)__		} else {_			return getNestedDelta(converter.extract(oldDataPoint), converter.extract(newDataPoint))__		}__	};this,method,takes,the,two,data,point,and,runs,the,set,extractor,on,it,the,delta,function,implemented,at,link,get,nested,delta,is,then,called,with,the,extracted,data,in,case,no,extractor,is,set,the,input,data,gets,passes,to,link,get,nested,delta,as,is,the,return,value,is,just,forwarded,from,link,get,nested,delta,param,old,data,point,the,older,data,point,as,raw,data,before,extraction,param,new,data,point,the,new,data,point,as,raw,data,before,extraction,return,the,delta,between,the,two,points;suppress,warnings,unchecked,override,public,double,get,delta,data,old,data,point,data,new,data,point,if,converter,null,return,get,nested,delta,to,old,data,point,to,new,data,point,else,return,get,nested,delta,converter,extract,old,data,point,converter,extract,new,data,point
ExtractionAwareDeltaFunction -> @SuppressWarnings("unchecked") 	@Override 	public double getDelta(DATA oldDataPoint, DATA newDataPoint);1455486690;This method takes the two data point and runs the set extractor on it._The delta function implemented at {@link #getNestedDelta} is then called_with the extracted data. In case no extractor is set the input data gets_passes to {@link #getNestedDelta} as-is. The return value is just_forwarded from {@link #getNestedDelta}.__@param oldDataPoint_the older data point as raw data (before extraction)._@param newDataPoint_the new data point as raw data (before extraction)._@return the delta between the two points.;@SuppressWarnings("unchecked")_	@Override_	public double getDelta(DATA oldDataPoint, DATA newDataPoint) {_		if (converter == null) {_			_			_			_			return getNestedDelta((TO) oldDataPoint, (TO) newDataPoint)__		} else {_			return getNestedDelta(converter.extract(oldDataPoint), converter.extract(newDataPoint))__		}__	};this,method,takes,the,two,data,point,and,runs,the,set,extractor,on,it,the,delta,function,implemented,at,link,get,nested,delta,is,then,called,with,the,extracted,data,in,case,no,extractor,is,set,the,input,data,gets,passes,to,link,get,nested,delta,as,is,the,return,value,is,just,forwarded,from,link,get,nested,delta,param,old,data,point,the,older,data,point,as,raw,data,before,extraction,param,new,data,point,the,new,data,point,as,raw,data,before,extraction,return,the,delta,between,the,two,points;suppress,warnings,unchecked,override,public,double,get,delta,data,old,data,point,data,new,data,point,if,converter,null,return,get,nested,delta,to,old,data,point,to,new,data,point,else,return,get,nested,delta,converter,extract,old,data,point,converter,extract,new,data,point
ExtractionAwareDeltaFunction -> @SuppressWarnings("unchecked") 	@Override 	public double getDelta(DATA oldDataPoint, DATA newDataPoint);1493195810;This method takes the two data point and runs the set extractor on it._The delta function implemented at {@link #getNestedDelta} is then called_with the extracted data. In case no extractor is set the input data gets_passes to {@link #getNestedDelta} as-is. The return value is just_forwarded from {@link #getNestedDelta}.__@param oldDataPoint_the older data point as raw data (before extraction)._@param newDataPoint_the new data point as raw data (before extraction)._@return the delta between the two points.;@SuppressWarnings("unchecked")_	@Override_	public double getDelta(DATA oldDataPoint, DATA newDataPoint) {_		if (converter == null) {_			_			_			_			return getNestedDelta((TO) oldDataPoint, (TO) newDataPoint)__		} else {_			return getNestedDelta(converter.extract(oldDataPoint), converter.extract(newDataPoint))__		}__	};this,method,takes,the,two,data,point,and,runs,the,set,extractor,on,it,the,delta,function,implemented,at,link,get,nested,delta,is,then,called,with,the,extracted,data,in,case,no,extractor,is,set,the,input,data,gets,passes,to,link,get,nested,delta,as,is,the,return,value,is,just,forwarded,from,link,get,nested,delta,param,old,data,point,the,older,data,point,as,raw,data,before,extraction,param,new,data,point,the,new,data,point,as,raw,data,before,extraction,return,the,delta,between,the,two,points;suppress,warnings,unchecked,override,public,double,get,delta,data,old,data,point,data,new,data,point,if,converter,null,return,get,nested,delta,to,old,data,point,to,new,data,point,else,return,get,nested,delta,converter,extract,old,data,point,converter,extract,new,data,point
ExtractionAwareDeltaFunction -> @SuppressWarnings("unchecked") 	@Override 	public double getDelta(DATA oldDataPoint, DATA newDataPoint);1493195810;This method takes the two data point and runs the set extractor on it._The delta function implemented at {@link #getNestedDelta} is then called_with the extracted data. In case no extractor is set the input data gets_passes to {@link #getNestedDelta} as-is. The return value is just_forwarded from {@link #getNestedDelta}.__@param oldDataPoint_the older data point as raw data (before extraction)._@param newDataPoint_the new data point as raw data (before extraction)._@return the delta between the two points.;@SuppressWarnings("unchecked")_	@Override_	public double getDelta(DATA oldDataPoint, DATA newDataPoint) {_		if (converter == null) {_			_			_			_			return getNestedDelta((TO) oldDataPoint, (TO) newDataPoint)__		} else {_			return getNestedDelta(converter.extract(oldDataPoint), converter.extract(newDataPoint))__		}__	};this,method,takes,the,two,data,point,and,runs,the,set,extractor,on,it,the,delta,function,implemented,at,link,get,nested,delta,is,then,called,with,the,extracted,data,in,case,no,extractor,is,set,the,input,data,gets,passes,to,link,get,nested,delta,as,is,the,return,value,is,just,forwarded,from,link,get,nested,delta,param,old,data,point,the,older,data,point,as,raw,data,before,extraction,param,new,data,point,the,new,data,point,as,raw,data,before,extraction,return,the,delta,between,the,two,points;suppress,warnings,unchecked,override,public,double,get,delta,data,old,data,point,data,new,data,point,if,converter,null,return,get,nested,delta,to,old,data,point,to,new,data,point,else,return,get,nested,delta,converter,extract,old,data,point,converter,extract,new,data,point
