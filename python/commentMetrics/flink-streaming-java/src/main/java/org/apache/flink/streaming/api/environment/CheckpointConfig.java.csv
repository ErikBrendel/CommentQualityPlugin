# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1448554589;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1453318250;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1454679829;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1455101486;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1460392581;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1476432306;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1481618369;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1493195810;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1493195810;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1493195810;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1495484544;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1499314317;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1511180335;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> public void setCheckpointTimeout(long checkpointTimeout);1516295283;Sets the maximum time that a checkpoint may take before being discarded.__@param checkpointTimeout The checkpoint timeout, in milliseconds.;public void setCheckpointTimeout(long checkpointTimeout) {_		if (checkpointTimeout <= 0) {_			throw new IllegalArgumentException("Checkpoint timeout must be larger than zero")__		}_		this.checkpointTimeout = checkpointTimeout__	};sets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,param,checkpoint,timeout,the,checkpoint,timeout,in,milliseconds;public,void,set,checkpoint,timeout,long,checkpoint,timeout,if,checkpoint,timeout,0,throw,new,illegal,argument,exception,checkpoint,timeout,must,be,larger,than,zero,this,checkpoint,timeout,checkpoint,timeout
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1476432306;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1481618369;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1493195810;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1493195810;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1493195810;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1495484544;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1499314317;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1511180335;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> ExternalizedCheckpointCleanup -> public boolean deleteOnCancellation();1516295283;Returns whether persistent checkpoints shall be discarded on_cancellation of the job.__@return <code>true</code> if persistent checkpoints shall be discarded_on cancellation of the job.;public boolean deleteOnCancellation() {_			return deleteOnCancellation__		};returns,whether,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job,return,code,true,code,if,persistent,checkpoints,shall,be,discarded,on,cancellation,of,the,job;public,boolean,delete,on,cancellation,return,delete,on,cancellation
CheckpointConfig -> public long getCheckpointTimeout();1448554589;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1453318250;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1454679829;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1455101486;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1460392581;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1476432306;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1481618369;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1493195810;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1493195810;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1493195810;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1495484544;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1499314317;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1511180335;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> public long getCheckpointTimeout();1516295283;Gets the maximum time that a checkpoint may take before being discarded.__@return The checkpoint timeout, in milliseconds.;public long getCheckpointTimeout() {_		return checkpointTimeout__	};gets,the,maximum,time,that,a,checkpoint,may,take,before,being,discarded,return,the,checkpoint,timeout,in,milliseconds;public,long,get,checkpoint,timeout,return,checkpoint,timeout
CheckpointConfig -> @Deprecated 	public void setForceCheckpointing(boolean forceCheckpointing);1448554589;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	public void setForceCheckpointing(boolean forceCheckpointing);1453318250;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1455101486;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1460392581;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1476432306;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1481618369;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1495484544;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1499314317;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1511180335;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public void setForceCheckpointing(boolean forceCheckpointing);1516295283;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@param forceCheckpointing The flag to force checkpointing.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public void setForceCheckpointing(boolean forceCheckpointing) {_		this.forceCheckpointing = forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,param,force,checkpointing,the,flag,to,force,checkpointing,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,void,set,force,checkpointing,boolean,force,checkpointing,this,force,checkpointing,force,checkpointing
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1476432306;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1481618369;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1493195810;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1493195810;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1493195810;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1495484544;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1499314317;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1511180335;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> @PublicEvolving 	public boolean isExternalizedCheckpointsEnabled();1516295283;Returns whether checkpoints should be persisted externally.__@return <code>true</code> if checkpoints should be externalized.;@PublicEvolving_	public boolean isExternalizedCheckpointsEnabled() {_		return externalizedCheckpointCleanup != null__	};returns,whether,checkpoints,should,be,persisted,externally,return,code,true,code,if,checkpoints,should,be,externalized;public,evolving,public,boolean,is,externalized,checkpoints,enabled,return,externalized,checkpoint,cleanup,null
CheckpointConfig -> public boolean isCheckpointingEnabled();1448554589;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1453318250;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1454679829;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1455101486;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1460392581;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1476432306;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1481618369;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1493195810;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1493195810;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1493195810;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1495484544;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1499314317;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1511180335;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isCheckpointingEnabled();1516295283;Checks whether checkpointing is enabled.__@return True if checkpointing is enables, false otherwise.;public boolean isCheckpointingEnabled() {_		return checkpointInterval > 0__	};checks,whether,checkpointing,is,enabled,return,true,if,checkpointing,is,enables,false,otherwise;public,boolean,is,checkpointing,enabled,return,checkpoint,interval,0
CheckpointConfig -> public boolean isFailOnCheckpointingErrors();1511180335;This determines the behaviour of tasks if there is an error in their local checkpointing. If this returns true,_tasks will fail as a reaction. If this returns false, task will only decline the failed checkpoint.;public boolean isFailOnCheckpointingErrors() {_		return failOnCheckpointingErrors__	};this,determines,the,behaviour,of,tasks,if,there,is,an,error,in,their,local,checkpointing,if,this,returns,true,tasks,will,fail,as,a,reaction,if,this,returns,false,task,will,only,decline,the,failed,checkpoint;public,boolean,is,fail,on,checkpointing,errors,return,fail,on,checkpointing,errors
CheckpointConfig -> public boolean isFailOnCheckpointingErrors();1516295283;This determines the behaviour of tasks if there is an error in their local checkpointing. If this returns true,_tasks will fail as a reaction. If this returns false, task will only decline the failed checkpoint.;public boolean isFailOnCheckpointingErrors() {_		return failOnCheckpointingErrors__	};this,determines,the,behaviour,of,tasks,if,there,is,an,error,in,their,local,checkpointing,if,this,returns,true,tasks,will,fail,as,a,reaction,if,this,returns,false,task,will,only,decline,the,failed,checkpoint;public,boolean,is,fail,on,checkpointing,errors,return,fail,on,checkpointing,errors
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1448554589;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1453318250;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1454679829;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1455101486;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1460392581;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1476432306;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1481618369;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1493195810;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1493195810;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1493195810;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1495484544;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1499314317;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1511180335;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints);1516295283;Sets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@param maxConcurrentCheckpoints The maximum number of concurrent checkpoint attempts.;public void setMaxConcurrentCheckpoints(int maxConcurrentCheckpoints) {_		if (maxConcurrentCheckpoints < 1) {_			throw new IllegalArgumentException("The maximum number of concurrent attempts must be at least one.")__		}_		this.maxConcurrentCheckpoints = maxConcurrentCheckpoints__	};sets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,param,max,concurrent,checkpoints,the,maximum,number,of,concurrent,checkpoint,attempts;public,void,set,max,concurrent,checkpoints,int,max,concurrent,checkpoints,if,max,concurrent,checkpoints,1,throw,new,illegal,argument,exception,the,maximum,number,of,concurrent,attempts,must,be,at,least,one,this,max,concurrent,checkpoints,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1448554589;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1453318250;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1454679829;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1455101486;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1460392581;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1476432306;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1481618369;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1493195810;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1493195810;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1493195810;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1495484544;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1499314317;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1511180335;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public int getMaxConcurrentCheckpoints();1516295283;Gets the maximum number of checkpoint attempts that may be in progress at the same time. If this_value is <i>n</i>, then no checkpoints will be triggered while <i>n</i> checkpoint attempts are_currently in flight. For the next checkpoint to be triggered, one checkpoint attempt would need_to finish or expire.__@return The maximum number of concurrent checkpoint attempts.;public int getMaxConcurrentCheckpoints() {_		return maxConcurrentCheckpoints__	};gets,the,maximum,number,of,checkpoint,attempts,that,may,be,in,progress,at,the,same,time,if,this,value,is,i,n,i,then,no,checkpoints,will,be,triggered,while,i,n,i,checkpoint,attempts,are,currently,in,flight,for,the,next,checkpoint,to,be,triggered,one,checkpoint,attempt,would,need,to,finish,or,expire,return,the,maximum,number,of,concurrent,checkpoint,attempts;public,int,get,max,concurrent,checkpoints,return,max,concurrent,checkpoints
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1448554589;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1453318250;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1454679829;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1455101486;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1460392581;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1476432306;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1481618369;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1493195810;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1493195810;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1493195810;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1495484544;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1499314317;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1511180335;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setCheckpointingMode(CheckpointingMode checkpointingMode);1516295283;Sets the checkpointing mode (exactly-once vs. at-least-once).__@param checkpointingMode The checkpointing mode.;public void setCheckpointingMode(CheckpointingMode checkpointingMode) {_		this.checkpointingMode = requireNonNull(checkpointingMode)__	};sets,the,checkpointing,mode,exactly,once,vs,at,least,once,param,checkpointing,mode,the,checkpointing,mode;public,void,set,checkpointing,mode,checkpointing,mode,checkpointing,mode,this,checkpointing,mode,require,non,null,checkpointing,mode
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1460392581;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1476432306;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1481618369;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1493195810;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1493195810;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1493195810;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1495484544;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1499314317;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1511180335;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints);1516295283;Sets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #setMaxConcurrentCheckpoints(int)}).__<p>If the maximum number of concurrent checkpoints is set to one, this setting makes effectively sure_that a minimum amount of time passes where no checkpoint is in progress at all.__@param minPauseBetweenCheckpoints The minimal pause before the next checkpoint is triggered.;public void setMinPauseBetweenCheckpoints(long minPauseBetweenCheckpoints) {_		if (minPauseBetweenCheckpoints < 0) {_			throw new IllegalArgumentException("Pause value must be zero or positive")__		}_		this.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints__	};sets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,set,max,concurrent,checkpoints,int,p,if,the,maximum,number,of,concurrent,checkpoints,is,set,to,one,this,setting,makes,effectively,sure,that,a,minimum,amount,of,time,passes,where,no,checkpoint,is,in,progress,at,all,param,min,pause,between,checkpoints,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,void,set,min,pause,between,checkpoints,long,min,pause,between,checkpoints,if,min,pause,between,checkpoints,0,throw,new,illegal,argument,exception,pause,value,must,be,zero,or,positive,this,min,pause,between,checkpoints,min,pause,between,checkpoints
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1455101486;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1460392581;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1476432306;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1481618369;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1493195810;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1495484544;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1499314317;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1511180335;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	@PublicEvolving 	public boolean isForceCheckpointing();1516295283;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	@PublicEvolving_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,evolving,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1476432306;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1481618369;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1493195810;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1493195810;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1493195810;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1495484544;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1499314317;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1511180335;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> @PublicEvolving 	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup();1516295283;Returns the cleanup behaviour for externalized checkpoints.__@return The cleanup behaviour for externalized checkpoints or_<code>null</code> if none is configured.;@PublicEvolving_	public ExternalizedCheckpointCleanup getExternalizedCheckpointCleanup() {_		return externalizedCheckpointCleanup__	};returns,the,cleanup,behaviour,for,externalized,checkpoints,return,the,cleanup,behaviour,for,externalized,checkpoints,or,code,null,code,if,none,is,configured;public,evolving,public,externalized,checkpoint,cleanup,get,externalized,checkpoint,cleanup,return,externalized,checkpoint,cleanup
CheckpointConfig -> public void setFailOnCheckpointingErrors(boolean failOnCheckpointingErrors);1511180335;Sets the expected behaviour for tasks in case that they encounter an error in their checkpointing procedure._If this is set to true, the task will fail on checkpointing error. If this is set to false, the task will only_decline a the checkpoint and continue running. The default is true.;public void setFailOnCheckpointingErrors(boolean failOnCheckpointingErrors) {_		this.failOnCheckpointingErrors = failOnCheckpointingErrors__	};sets,the,expected,behaviour,for,tasks,in,case,that,they,encounter,an,error,in,their,checkpointing,procedure,if,this,is,set,to,true,the,task,will,fail,on,checkpointing,error,if,this,is,set,to,false,the,task,will,only,decline,a,the,checkpoint,and,continue,running,the,default,is,true;public,void,set,fail,on,checkpointing,errors,boolean,fail,on,checkpointing,errors,this,fail,on,checkpointing,errors,fail,on,checkpointing,errors
CheckpointConfig -> public void setFailOnCheckpointingErrors(boolean failOnCheckpointingErrors);1516295283;Sets the expected behaviour for tasks in case that they encounter an error in their checkpointing procedure._If this is set to true, the task will fail on checkpointing error. If this is set to false, the task will only_decline a the checkpoint and continue running. The default is true.;public void setFailOnCheckpointingErrors(boolean failOnCheckpointingErrors) {_		this.failOnCheckpointingErrors = failOnCheckpointingErrors__	};sets,the,expected,behaviour,for,tasks,in,case,that,they,encounter,an,error,in,their,checkpointing,procedure,if,this,is,set,to,true,the,task,will,fail,on,checkpointing,error,if,this,is,set,to,false,the,task,will,only,decline,a,the,checkpoint,and,continue,running,the,default,is,true;public,void,set,fail,on,checkpointing,errors,boolean,fail,on,checkpointing,errors,this,fail,on,checkpointing,errors,fail,on,checkpointing,errors
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1448554589;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1453318250;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1454679829;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1455101486;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1460392581;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1476432306;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1481618369;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1493195810;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1493195810;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1493195810;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1495484544;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1499314317;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1511180335;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> public long getMinPauseBetweenCheckpoints();1516295283;Gets the minimal pause between checkpointing attempts. This setting defines how soon the_checkpoint coordinator may trigger another checkpoint after it becomes possible to trigger_another checkpoint with respect to the maximum number of concurrent checkpoints_(see {@link #getMaxConcurrentCheckpoints()}).__@return The minimal pause before the next checkpoint is triggered.;public long getMinPauseBetweenCheckpoints() {_		return minPauseBetweenCheckpoints__	};gets,the,minimal,pause,between,checkpointing,attempts,this,setting,defines,how,soon,the,checkpoint,coordinator,may,trigger,another,checkpoint,after,it,becomes,possible,to,trigger,another,checkpoint,with,respect,to,the,maximum,number,of,concurrent,checkpoints,see,link,get,max,concurrent,checkpoints,return,the,minimal,pause,before,the,next,checkpoint,is,triggered;public,long,get,min,pause,between,checkpoints,return,min,pause,between,checkpoints
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1476432306;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails (terminating with job status {@link JobStatus#FAILED})._In this case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,terminating,with,job,status,link,job,status,failed,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1481618369;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1493195810;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1493195810;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1493195810;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1495484544;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link ConfigConstants#CHECKPOINTS_DIRECTORY_KEY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,config,constants,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1499314317;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link CoreOptions#CHECKPOINTS_DIRECTORY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,core,options,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1511180335;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link CoreOptions#CHECKPOINTS_DIRECTORY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,core,options,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> @PublicEvolving 	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode);1516295283;Enables checkpoints to be persisted externally.__<p>Externalized checkpoints write their meta data out to persistent_storage and are <strong>not</strong> automatically cleaned up when_the owning job fails or is suspended (terminating with job status_{@link JobStatus#FAILED} or {@link JobStatus#SUSPENDED}). In this_case, you have to manually clean up the checkpoint state, both_the meta data and actual program state.__<p>The {@link ExternalizedCheckpointCleanup} mode defines how an_externalized checkpoint should be cleaned up on job cancellation. If you_choose to retain externalized checkpoints on cancellation you have you_handle checkpoint clean up manually when you cancel the job as well_(terminating with job status {@link JobStatus#CANCELED}).__<p>The target directory for externalized checkpoints is configured_via {@link org.apache.flink.configuration.CheckpointingOptions#CHECKPOINTS_DIRECTORY}.__@param cleanupMode Externalized checkpoint cleanup behaviour.;@PublicEvolving_	public void enableExternalizedCheckpoints(ExternalizedCheckpointCleanup cleanupMode) {_		this.externalizedCheckpointCleanup = checkNotNull(cleanupMode)__	};enables,checkpoints,to,be,persisted,externally,p,externalized,checkpoints,write,their,meta,data,out,to,persistent,storage,and,are,strong,not,strong,automatically,cleaned,up,when,the,owning,job,fails,or,is,suspended,terminating,with,job,status,link,job,status,failed,or,link,job,status,suspended,in,this,case,you,have,to,manually,clean,up,the,checkpoint,state,both,the,meta,data,and,actual,program,state,p,the,link,externalized,checkpoint,cleanup,mode,defines,how,an,externalized,checkpoint,should,be,cleaned,up,on,job,cancellation,if,you,choose,to,retain,externalized,checkpoints,on,cancellation,you,have,you,handle,checkpoint,clean,up,manually,when,you,cancel,the,job,as,well,terminating,with,job,status,link,job,status,canceled,p,the,target,directory,for,externalized,checkpoints,is,configured,via,link,org,apache,flink,configuration,checkpointing,options,param,cleanup,mode,externalized,checkpoint,cleanup,behaviour;public,evolving,public,void,enable,externalized,checkpoints,externalized,checkpoint,cleanup,cleanup,mode,this,externalized,checkpoint,cleanup,check,not,null,cleanup,mode
CheckpointConfig -> public long getCheckpointInterval();1448554589;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1453318250;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1454679829;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1455101486;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1460392581;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1476432306;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1481618369;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1493195810;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1493195810;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1493195810;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1495484544;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1499314317;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1511180335;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public long getCheckpointInterval();1516295283;Gets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #getMaxConcurrentCheckpoints()} and {@link #getMinPauseBetweenCheckpoints()}.__@return The checkpoint interval, in milliseconds.;public long getCheckpointInterval() {_		return checkpointInterval__	};gets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,get,max,concurrent,checkpoints,and,link,get,min,pause,between,checkpoints,return,the,checkpoint,interval,in,milliseconds;public,long,get,checkpoint,interval,return,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1448554589;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1453318250;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1454679829;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1455101486;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1460392581;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1476432306;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1481618369;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1493195810;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1493195810;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1493195810;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1495484544;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1499314317;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1511180335;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> public void setCheckpointInterval(long checkpointInterval);1516295283;Sets the interval in which checkpoints are periodically scheduled.__<p>This setting defines the base interval. Checkpoint triggering may be delayed by the settings_{@link #setMaxConcurrentCheckpoints(int)} and {@link #setMinPauseBetweenCheckpoints(long)}.__@param checkpointInterval The checkpoint interval, in milliseconds.;public void setCheckpointInterval(long checkpointInterval) {_		if (checkpointInterval <= 0) {_			throw new IllegalArgumentException("Checkpoint interval must be larger than zero")__		}_		this.checkpointInterval = checkpointInterval__	};sets,the,interval,in,which,checkpoints,are,periodically,scheduled,p,this,setting,defines,the,base,interval,checkpoint,triggering,may,be,delayed,by,the,settings,link,set,max,concurrent,checkpoints,int,and,link,set,min,pause,between,checkpoints,long,param,checkpoint,interval,the,checkpoint,interval,in,milliseconds;public,void,set,checkpoint,interval,long,checkpoint,interval,if,checkpoint,interval,0,throw,new,illegal,argument,exception,checkpoint,interval,must,be,larger,than,zero,this,checkpoint,interval,checkpoint,interval
CheckpointConfig -> @Deprecated 	public boolean isForceCheckpointing();1448554589;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> @Deprecated 	public boolean isForceCheckpointing();1453318250;Checks whether checkpointing is forced, despite currently non-checkpointable iteration feedback.__@return True, if checkpointing is forced, false otherwise.__@deprecated This will be removed once iterations properly participate in checkpointing.;@Deprecated_	public boolean isForceCheckpointing() {_		return forceCheckpointing__	};checks,whether,checkpointing,is,forced,despite,currently,non,checkpointable,iteration,feedback,return,true,if,checkpointing,is,forced,false,otherwise,deprecated,this,will,be,removed,once,iterations,properly,participate,in,checkpointing;deprecated,public,boolean,is,force,checkpointing,return,force,checkpointing
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1448554589;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1453318250;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1454679829;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1455101486;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1460392581;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1476432306;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1481618369;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1493195810;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1493195810;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1493195810;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1495484544;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1499314317;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1511180335;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
CheckpointConfig -> public CheckpointingMode getCheckpointingMode();1516295283;Gets the checkpointing mode (exactly-once vs. at-least-once).__@return The checkpointing mode.;public CheckpointingMode getCheckpointingMode() {_		return checkpointingMode__	};gets,the,checkpointing,mode,exactly,once,vs,at,least,once,return,the,checkpointing,mode;public,checkpointing,mode,get,checkpointing,mode,return,checkpointing,mode
