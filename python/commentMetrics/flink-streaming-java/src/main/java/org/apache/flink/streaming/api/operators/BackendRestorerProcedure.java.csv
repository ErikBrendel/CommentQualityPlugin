# id;timestamp;commentText;codeText;commentWords;codeWords
BackendRestorerProcedure -> public BackendRestorerProcedure( 		@Nonnull SupplierWithException<T, Exception> instanceSupplier, 		@Nonnull CloseableRegistry backendCloseableRegistry, 		@Nonnull String logDescription);1519741691;Creates a new backend restorer using the given backend supplier and the closeable registry.__@param instanceSupplier factory function for new, empty backend instances._@param backendCloseableRegistry registry to allow participation in task lifecycle, e.g. react to cancel.;public BackendRestorerProcedure(_		@Nonnull SupplierWithException<T, Exception> instanceSupplier,_		@Nonnull CloseableRegistry backendCloseableRegistry,_		@Nonnull String logDescription) {__		this.instanceSupplier = Preconditions.checkNotNull(instanceSupplier)__		this.backendCloseableRegistry = Preconditions.checkNotNull(backendCloseableRegistry)__		this.logDescription = logDescription__	};creates,a,new,backend,restorer,using,the,given,backend,supplier,and,the,closeable,registry,param,instance,supplier,factory,function,for,new,empty,backend,instances,param,backend,closeable,registry,registry,to,allow,participation,in,task,lifecycle,e,g,react,to,cancel;public,backend,restorer,procedure,nonnull,supplier,with,exception,t,exception,instance,supplier,nonnull,closeable,registry,backend,closeable,registry,nonnull,string,log,description,this,instance,supplier,preconditions,check,not,null,instance,supplier,this,backend,closeable,registry,preconditions,check,not,null,backend,closeable,registry,this,log,description,log,description
BackendRestorerProcedure -> public BackendRestorerProcedure( 		@Nonnull SupplierWithException<T, Exception> instanceSupplier, 		@Nonnull CloseableRegistry backendCloseableRegistry, 		@Nonnull String logDescription);1526544183;Creates a new backend restorer using the given backend supplier and the closeable registry.__@param instanceSupplier factory function for new, empty backend instances._@param backendCloseableRegistry registry to allow participation in task lifecycle, e.g. react to cancel.;public BackendRestorerProcedure(_		@Nonnull SupplierWithException<T, Exception> instanceSupplier,_		@Nonnull CloseableRegistry backendCloseableRegistry,_		@Nonnull String logDescription) {__		this.instanceSupplier = Preconditions.checkNotNull(instanceSupplier)__		this.backendCloseableRegistry = Preconditions.checkNotNull(backendCloseableRegistry)__		this.logDescription = logDescription__	};creates,a,new,backend,restorer,using,the,given,backend,supplier,and,the,closeable,registry,param,instance,supplier,factory,function,for,new,empty,backend,instances,param,backend,closeable,registry,registry,to,allow,participation,in,task,lifecycle,e,g,react,to,cancel;public,backend,restorer,procedure,nonnull,supplier,with,exception,t,exception,instance,supplier,nonnull,closeable,registry,backend,closeable,registry,nonnull,string,log,description,this,instance,supplier,preconditions,check,not,null,instance,supplier,this,backend,closeable,registry,preconditions,check,not,null,backend,closeable,registry,this,log,description,log,description
BackendRestorerProcedure -> public BackendRestorerProcedure( 		@Nonnull SupplierWithException<T, Exception> instanceSupplier, 		@Nonnull CloseableRegistry backendCloseableRegistry, 		@Nonnull String logDescription);1526544184;Creates a new backend restorer using the given backend supplier and the closeable registry.__@param instanceSupplier factory function for new, empty backend instances._@param backendCloseableRegistry registry to allow participation in task lifecycle, e.g. react to cancel.;public BackendRestorerProcedure(_		@Nonnull SupplierWithException<T, Exception> instanceSupplier,_		@Nonnull CloseableRegistry backendCloseableRegistry,_		@Nonnull String logDescription) {__		this.instanceSupplier = Preconditions.checkNotNull(instanceSupplier)__		this.backendCloseableRegistry = Preconditions.checkNotNull(backendCloseableRegistry)__		this.logDescription = logDescription__	};creates,a,new,backend,restorer,using,the,given,backend,supplier,and,the,closeable,registry,param,instance,supplier,factory,function,for,new,empty,backend,instances,param,backend,closeable,registry,registry,to,allow,participation,in,task,lifecycle,e,g,react,to,cancel;public,backend,restorer,procedure,nonnull,supplier,with,exception,t,exception,instance,supplier,nonnull,closeable,registry,backend,closeable,registry,nonnull,string,log,description,this,instance,supplier,preconditions,check,not,null,instance,supplier,this,backend,closeable,registry,preconditions,check,not,null,backend,closeable,registry,this,log,description,log,description
BackendRestorerProcedure -> @Nonnull 	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception;1519741691;Creates a new state backend and restores it from the provided set of state snapshot alternatives.__@param restoreOptions list of prioritized state snapshot alternatives for recovery._@return the created (and restored) state backend._@throws Exception if the backend could not be created or restored.;@Nonnull_	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception {__		if (restoreOptions.isEmpty()) {_			restoreOptions = Collections.singletonList(Collections.emptyList())__		}__		int alternativeIdx = 0___		Exception collectedException = null___		while (alternativeIdx < restoreOptions.size()) {__			Collection<S> restoreState = restoreOptions.get(alternativeIdx)___			++alternativeIdx___			if (restoreState.isEmpty()) {_				LOG.debug("Creating {} with empty state.", logDescription)__			} else {_				if (LOG.isTraceEnabled()) {_					LOG.trace("Creating {} and restoring with state {} from alternative ({}/{}).",_						logDescription, restoreState, alternativeIdx, restoreOptions.size())__				} else {_					LOG.debug("Creating {} and restoring with state from alternative ({}/{}).",_						logDescription, alternativeIdx, restoreOptions.size())__				}_			}__			try {_				return attemptCreateAndRestore(restoreState)__			} catch (Exception ex) {__				collectedException = ExceptionUtils.firstOrSuppressed(ex, collectedException)___				LOG.warn("Exception while restoring {} from alternative ({}/{}), will retry while more " +_					"alternatives are available.", logDescription, alternativeIdx, restoreOptions.size(), ex)__			}_		}__		throw new FlinkException("Could not restore " + logDescription + " from any of the " + restoreOptions.size() +_			" provided restore options.", collectedException)__	};creates,a,new,state,backend,and,restores,it,from,the,provided,set,of,state,snapshot,alternatives,param,restore,options,list,of,prioritized,state,snapshot,alternatives,for,recovery,return,the,created,and,restored,state,backend,throws,exception,if,the,backend,could,not,be,created,or,restored;nonnull,public,t,create,and,restore,nonnull,list,extends,collection,s,restore,options,throws,exception,if,restore,options,is,empty,restore,options,collections,singleton,list,collections,empty,list,int,alternative,idx,0,exception,collected,exception,null,while,alternative,idx,restore,options,size,collection,s,restore,state,restore,options,get,alternative,idx,alternative,idx,if,restore,state,is,empty,log,debug,creating,with,empty,state,log,description,else,if,log,is,trace,enabled,log,trace,creating,and,restoring,with,state,from,alternative,log,description,restore,state,alternative,idx,restore,options,size,else,log,debug,creating,and,restoring,with,state,from,alternative,log,description,alternative,idx,restore,options,size,try,return,attempt,create,and,restore,restore,state,catch,exception,ex,collected,exception,exception,utils,first,or,suppressed,ex,collected,exception,log,warn,exception,while,restoring,from,alternative,will,retry,while,more,alternatives,are,available,log,description,alternative,idx,restore,options,size,ex,throw,new,flink,exception,could,not,restore,log,description,from,any,of,the,restore,options,size,provided,restore,options,collected,exception
BackendRestorerProcedure -> @Nonnull 	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception;1526544183;Creates a new state backend and restores it from the provided set of state snapshot alternatives.__@param restoreOptions list of prioritized state snapshot alternatives for recovery._@return the created (and restored) state backend._@throws Exception if the backend could not be created or restored.;@Nonnull_	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception {__		if (restoreOptions.isEmpty()) {_			restoreOptions = Collections.singletonList(Collections.emptyList())__		}__		int alternativeIdx = 0___		Exception collectedException = null___		while (alternativeIdx < restoreOptions.size()) {__			Collection<S> restoreState = restoreOptions.get(alternativeIdx)___			++alternativeIdx___			if (restoreState.isEmpty()) {_				LOG.debug("Creating {} with empty state.", logDescription)__			} else {_				if (LOG.isTraceEnabled()) {_					LOG.trace("Creating {} and restoring with state {} from alternative ({}/{}).",_						logDescription, restoreState, alternativeIdx, restoreOptions.size())__				} else {_					LOG.debug("Creating {} and restoring with state from alternative ({}/{}).",_						logDescription, alternativeIdx, restoreOptions.size())__				}_			}__			try {_				return attemptCreateAndRestore(restoreState)__			} catch (Exception ex) {__				collectedException = ExceptionUtils.firstOrSuppressed(ex, collectedException)___				LOG.warn("Exception while restoring {} from alternative ({}/{}), will retry while more " +_					"alternatives are available.", logDescription, alternativeIdx, restoreOptions.size(), ex)___				if (backendCloseableRegistry.isClosed()) {_					throw new FlinkException("Stopping restore attempts for already cancelled task.", collectedException)__				}_			}_		}__		throw new FlinkException("Could not restore " + logDescription + " from any of the " + restoreOptions.size() +_			" provided restore options.", collectedException)__	};creates,a,new,state,backend,and,restores,it,from,the,provided,set,of,state,snapshot,alternatives,param,restore,options,list,of,prioritized,state,snapshot,alternatives,for,recovery,return,the,created,and,restored,state,backend,throws,exception,if,the,backend,could,not,be,created,or,restored;nonnull,public,t,create,and,restore,nonnull,list,extends,collection,s,restore,options,throws,exception,if,restore,options,is,empty,restore,options,collections,singleton,list,collections,empty,list,int,alternative,idx,0,exception,collected,exception,null,while,alternative,idx,restore,options,size,collection,s,restore,state,restore,options,get,alternative,idx,alternative,idx,if,restore,state,is,empty,log,debug,creating,with,empty,state,log,description,else,if,log,is,trace,enabled,log,trace,creating,and,restoring,with,state,from,alternative,log,description,restore,state,alternative,idx,restore,options,size,else,log,debug,creating,and,restoring,with,state,from,alternative,log,description,alternative,idx,restore,options,size,try,return,attempt,create,and,restore,restore,state,catch,exception,ex,collected,exception,exception,utils,first,or,suppressed,ex,collected,exception,log,warn,exception,while,restoring,from,alternative,will,retry,while,more,alternatives,are,available,log,description,alternative,idx,restore,options,size,ex,if,backend,closeable,registry,is,closed,throw,new,flink,exception,stopping,restore,attempts,for,already,cancelled,task,collected,exception,throw,new,flink,exception,could,not,restore,log,description,from,any,of,the,restore,options,size,provided,restore,options,collected,exception
BackendRestorerProcedure -> @Nonnull 	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception;1526544184;Creates a new state backend and restores it from the provided set of state snapshot alternatives.__@param restoreOptions list of prioritized state snapshot alternatives for recovery._@return the created (and restored) state backend._@throws Exception if the backend could not be created or restored.;@Nonnull_	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception {__		if (restoreOptions.isEmpty()) {_			restoreOptions = Collections.singletonList(Collections.emptyList())__		}__		int alternativeIdx = 0___		Exception collectedException = null___		while (alternativeIdx < restoreOptions.size()) {__			Collection<S> restoreState = restoreOptions.get(alternativeIdx)___			++alternativeIdx___			_			_			if (restoreState.isEmpty()) {_				LOG.debug("Creating {} with empty state.", logDescription)__			} else {_				if (LOG.isTraceEnabled()) {_					LOG.trace("Creating {} and restoring with state {} from alternative ({}/{}).",_						logDescription, restoreState, alternativeIdx, restoreOptions.size())__				} else {_					LOG.debug("Creating {} and restoring with state from alternative ({}/{}).",_						logDescription, alternativeIdx, restoreOptions.size())__				}_			}__			try {_				return attemptCreateAndRestore(restoreState)__			} catch (Exception ex) {__				collectedException = ExceptionUtils.firstOrSuppressed(ex, collectedException)___				LOG.warn("Exception while restoring {} from alternative ({}/{}), will retry while more " +_					"alternatives are available.", logDescription, alternativeIdx, restoreOptions.size(), ex)___				if (backendCloseableRegistry.isClosed()) {_					throw new FlinkException("Stopping restore attempts for already cancelled task.", collectedException)__				}_			}_		}__		throw new FlinkException("Could not restore " + logDescription + " from any of the " + restoreOptions.size() +_			" provided restore options.", collectedException)__	};creates,a,new,state,backend,and,restores,it,from,the,provided,set,of,state,snapshot,alternatives,param,restore,options,list,of,prioritized,state,snapshot,alternatives,for,recovery,return,the,created,and,restored,state,backend,throws,exception,if,the,backend,could,not,be,created,or,restored;nonnull,public,t,create,and,restore,nonnull,list,extends,collection,s,restore,options,throws,exception,if,restore,options,is,empty,restore,options,collections,singleton,list,collections,empty,list,int,alternative,idx,0,exception,collected,exception,null,while,alternative,idx,restore,options,size,collection,s,restore,state,restore,options,get,alternative,idx,alternative,idx,if,restore,state,is,empty,log,debug,creating,with,empty,state,log,description,else,if,log,is,trace,enabled,log,trace,creating,and,restoring,with,state,from,alternative,log,description,restore,state,alternative,idx,restore,options,size,else,log,debug,creating,and,restoring,with,state,from,alternative,log,description,alternative,idx,restore,options,size,try,return,attempt,create,and,restore,restore,state,catch,exception,ex,collected,exception,exception,utils,first,or,suppressed,ex,collected,exception,log,warn,exception,while,restoring,from,alternative,will,retry,while,more,alternatives,are,available,log,description,alternative,idx,restore,options,size,ex,if,backend,closeable,registry,is,closed,throw,new,flink,exception,stopping,restore,attempts,for,already,cancelled,task,collected,exception,throw,new,flink,exception,could,not,restore,log,description,from,any,of,the,restore,options,size,provided,restore,options,collected,exception
BackendRestorerProcedure -> @Nonnull 	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception;1550863001;Creates a new state backend and restores it from the provided set of state snapshot alternatives.__@param restoreOptions list of prioritized state snapshot alternatives for recovery._@return the created (and restored) state backend._@throws Exception if the backend could not be created or restored.;@Nonnull_	public T createAndRestore(@Nonnull List<? extends Collection<S>> restoreOptions) throws Exception {__		if (restoreOptions.isEmpty()) {_			restoreOptions = Collections.singletonList(Collections.emptyList())__		}__		int alternativeIdx = 0___		Exception collectedException = null___		while (alternativeIdx < restoreOptions.size()) {__			Collection<S> restoreState = restoreOptions.get(alternativeIdx)___			++alternativeIdx___			_			_			if (restoreState.isEmpty()) {_				LOG.debug("Creating {} with empty state.", logDescription)__			} else {_				if (LOG.isTraceEnabled()) {_					LOG.trace("Creating {} and restoring with state {} from alternative ({}/{}).",_						logDescription, restoreState, alternativeIdx, restoreOptions.size())__				} else {_					LOG.debug("Creating {} and restoring with state from alternative ({}/{}).",_						logDescription, alternativeIdx, restoreOptions.size())__				}_			}__			try {_				return attemptCreateAndRestore(restoreState)__			} catch (Exception ex) {__				collectedException = ExceptionUtils.firstOrSuppressed(ex, collectedException)___				LOG.warn("Exception while restoring {} from alternative ({}/{}), will retry while more " +_					"alternatives are available.", logDescription, alternativeIdx, restoreOptions.size(), ex)___				if (backendCloseableRegistry.isClosed()) {_					throw new FlinkException("Stopping restore attempts for already cancelled task.", collectedException)__				}_			}_		}__		throw new FlinkException("Could not restore " + logDescription + " from any of the " + restoreOptions.size() +_			" provided restore options.", collectedException)__	};creates,a,new,state,backend,and,restores,it,from,the,provided,set,of,state,snapshot,alternatives,param,restore,options,list,of,prioritized,state,snapshot,alternatives,for,recovery,return,the,created,and,restored,state,backend,throws,exception,if,the,backend,could,not,be,created,or,restored;nonnull,public,t,create,and,restore,nonnull,list,extends,collection,s,restore,options,throws,exception,if,restore,options,is,empty,restore,options,collections,singleton,list,collections,empty,list,int,alternative,idx,0,exception,collected,exception,null,while,alternative,idx,restore,options,size,collection,s,restore,state,restore,options,get,alternative,idx,alternative,idx,if,restore,state,is,empty,log,debug,creating,with,empty,state,log,description,else,if,log,is,trace,enabled,log,trace,creating,and,restoring,with,state,from,alternative,log,description,restore,state,alternative,idx,restore,options,size,else,log,debug,creating,and,restoring,with,state,from,alternative,log,description,alternative,idx,restore,options,size,try,return,attempt,create,and,restore,restore,state,catch,exception,ex,collected,exception,exception,utils,first,or,suppressed,ex,collected,exception,log,warn,exception,while,restoring,from,alternative,will,retry,while,more,alternatives,are,available,log,description,alternative,idx,restore,options,size,ex,if,backend,closeable,registry,is,closed,throw,new,flink,exception,stopping,restore,attempts,for,already,cancelled,task,collected,exception,throw,new,flink,exception,could,not,restore,log,description,from,any,of,the,restore,options,size,provided,restore,options,collected,exception
