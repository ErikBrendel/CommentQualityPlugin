# id;timestamp;commentText;codeText;commentWords;codeWords
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1445418103;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1454527671;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1455486690;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1493195810;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1493195810;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1495484544;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1502726910;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public TwoInputTransformation( 			StreamTransformation<IN1> input1, 			StreamTransformation<IN2> input2, 			String name, 			TwoInputStreamOperator<IN1, IN2, OUT> operator, 			TypeInformation<OUT> outputType, 			int parallelism);1518008865;Creates a new {@code TwoInputTransformation} from the given inputs and operator.__@param input1 The first input {@code StreamTransformation}_@param input2 The second input {@code StreamTransformation}_@param name The name of the {@code StreamTransformation}, this will be shown in Visualizations and the Log_@param operator The {@code TwoInputStreamOperator}_@param outputType The type of the elements produced by this Transformation_@param parallelism The parallelism of this Transformation;public TwoInputTransformation(_			StreamTransformation<IN1> input1,_			StreamTransformation<IN2> input2,_			String name,_			TwoInputStreamOperator<IN1, IN2, OUT> operator,_			TypeInformation<OUT> outputType,_			int parallelism) {_		super(name, outputType, parallelism)__		this.input1 = input1__		this.input2 = input2__		this.operator = operator__	};creates,a,new,code,two,input,transformation,from,the,given,inputs,and,operator,param,input1,the,first,input,code,stream,transformation,param,input2,the,second,input,code,stream,transformation,param,name,the,name,of,the,code,stream,transformation,this,will,be,shown,in,visualizations,and,the,log,param,operator,the,code,two,input,stream,operator,param,output,type,the,type,of,the,elements,produced,by,this,transformation,param,parallelism,the,parallelism,of,this,transformation;public,two,input,transformation,stream,transformation,in1,input1,stream,transformation,in2,input2,string,name,two,input,stream,operator,in1,in2,out,operator,type,information,out,output,type,int,parallelism,super,name,output,type,parallelism,this,input1,input1,this,input2,input2,this,operator,operator
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1454527671;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1455486690;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1495484544;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1502726910;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public KeySelector<IN2, ?> getStateKeySelector2();1518008865;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the second input.__@see #setStateKeySelectors;public KeySelector<IN2, ?> getStateKeySelector2() {_		return stateKeySelector2__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,second,input,see,set,state,key,selectors;public,key,selector,in2,get,state,key,selector2,return,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1454527671;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1455486690;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1493195810;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1493195810;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1495484544;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1502726910;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2);1518008865;Sets the {@link KeySelector KeySelectors} that must be used for partitioning keyed state of_this transformation.__@param stateKeySelector1 The {@code KeySelector} to set for the first input_@param stateKeySelector2 The {@code KeySelector} to set for the first input;public void setStateKeySelectors(KeySelector<IN1, ?> stateKeySelector1, KeySelector<IN2, ?> stateKeySelector2) {_		this.stateKeySelector1 = stateKeySelector1__		this.stateKeySelector2 = stateKeySelector2__	};sets,the,link,key,selector,key,selectors,that,must,be,used,for,partitioning,keyed,state,of,this,transformation,param,state,key,selector1,the,code,key,selector,to,set,for,the,first,input,param,state,key,selector2,the,code,key,selector,to,set,for,the,first,input;public,void,set,state,key,selectors,key,selector,in1,state,key,selector1,key,selector,in2,state,key,selector2,this,state,key,selector1,state,key,selector1,this,state,key,selector2,state,key,selector2
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1454527671;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1455486690;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1493195810;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1495484544;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1502726910;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public KeySelector<IN1, ?> getStateKeySelector1();1518008865;Returns the {@code KeySelector} that must be used for partitioning keyed state in this_Operation for the first input.__@see #setStateKeySelectors;public KeySelector<IN1, ?> getStateKeySelector1() {_		return stateKeySelector1__	};returns,the,code,key,selector,that,must,be,used,for,partitioning,keyed,state,in,this,operation,for,the,first,input,see,set,state,key,selectors;public,key,selector,in1,get,state,key,selector1,return,state,key,selector1
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1445418103;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1454527671;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1455486690;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1493195810;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1493195810;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1495484544;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1502726910;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public StreamTransformation<IN2> getInput2();1518008865;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN2> getInput2() {_		return input2__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in2,get,input2,return,input2
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1445418103;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1454527671;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1455486690;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1493195810;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1493195810;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1495484544;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1502726910;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TwoInputStreamOperator<IN1, IN2, OUT> getOperator();1518008865;Returns the {@code TwoInputStreamOperator} of this Transformation.;public TwoInputStreamOperator<IN1, IN2, OUT> getOperator() {_		return operator__	};returns,the,code,two,input,stream,operator,of,this,transformation;public,two,input,stream,operator,in1,in2,out,get,operator,return,operator
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1445418103;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1454527671;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1455486690;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1493195810;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1493195810;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1495484544;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1502726910;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN1> getInputType1();1518008865;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN1> getInputType1() {_		return input1.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in1,get,input,type1,return,input1,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1445418103;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1454527671;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1455486690;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1493195810;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1493195810;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1495484544;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1502726910;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public TypeInformation<IN2> getInputType2();1518008865;Returns the {@code TypeInformation} for the elements from the first input.;public TypeInformation<IN2> getInputType2() {_		return input2.getOutputType()__	};returns,the,code,type,information,for,the,elements,from,the,first,input;public,type,information,in2,get,input,type2,return,input2,get,output,type
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1445418103;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1454527671;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1455486690;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1493195810;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1493195810;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1495484544;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1502726910;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
TwoInputTransformation -> public StreamTransformation<IN1> getInput1();1518008865;Returns the first input {@code StreamTransformation} of this {@code TwoInputTransformation}.;public StreamTransformation<IN1> getInput1() {_		return input1__	};returns,the,first,input,code,stream,transformation,of,this,code,two,input,transformation;public,stream,transformation,in1,get,input1,return,input1
