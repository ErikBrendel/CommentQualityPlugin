# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1482206691;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1493195810;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1493195810;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1495484544;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1496911361;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1532066767;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1482206691;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1493195810;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1493195810;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1495484544;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1496911361;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit, 			int capacity);1532066767;Add an AsyncWaitOperator. The order of output stream records may be reordered.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param capacity The max number of async i/o operation that can be triggered_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit,_			int capacity) {_		return addOperator(in, func, timeUnit.toMillis(timeout), capacity, OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,capacity,the,max,number,of,async,i,o,operation,that,can,be,triggered,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,int,capacity,return,add,operator,in,func,time,unit,to,millis,timeout,capacity,output,mode,unordered
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1482206691;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo =_			TypeExtractor.getUnaryOperatorReturnType(func, AsyncFunction.class, false,_				true, in.getType(), Utils.getCallLocationName(), true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,false,true,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1493195810;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo =_			TypeExtractor.getUnaryOperatorReturnType(func, AsyncFunction.class, false,_				true, in.getType(), Utils.getCallLocationName(), true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,false,true,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1493195810;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo =_			TypeExtractor.getUnaryOperatorReturnType(func, AsyncFunction.class, false,_				true, in.getType(), Utils.getCallLocationName(), true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,false,true,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1495484544;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo =_			TypeExtractor.getUnaryOperatorReturnType(func, AsyncFunction.class, false,_				true, in.getType(), Utils.getCallLocationName(), true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,false,true,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1496911361;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			func,_			AsyncFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1, 0},_			in.getType(),_			Utils.getCallLocationName(),_			true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,0,1,new,int,0,new,int,1,0,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			int bufSize, 			OutputMode mode);1532066767;Add an AsyncWaitOperator.__@param in The {@link DataStream} where the {@link AsyncWaitOperator} will be added._@param func {@link AsyncFunction} wrapped inside {@link AsyncWaitOperator}._@param timeout for the asynchronous operation to complete_@param bufSize The max number of inputs the {@link AsyncWaitOperator} can hold inside._@param mode Processing mode for {@link AsyncWaitOperator}._@param <IN> Input type._@param <OUT> Output type._@return A new {@link SingleOutputStreamOperator};private static <IN, OUT> SingleOutputStreamOperator<OUT> addOperator(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			int bufSize,_			OutputMode mode) {__		TypeInformation<OUT> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			func,_			AsyncFunction.class,_			0,_			1,_			new int[]{1, 0},_			in.getType(),_			Utils.getCallLocationName(),_			true)___		_		AsyncWaitOperator<IN, OUT> operator = new AsyncWaitOperator<>(_			in.getExecutionEnvironment().clean(func),_			timeout,_			bufSize,_			mode)___		return in.transform("async wait operator", outTypeInfo, operator)__	};add,an,async,wait,operator,param,in,the,link,data,stream,where,the,link,async,wait,operator,will,be,added,param,func,link,async,function,wrapped,inside,link,async,wait,operator,param,timeout,for,the,asynchronous,operation,to,complete,param,buf,size,the,max,number,of,inputs,the,link,async,wait,operator,can,hold,inside,param,mode,processing,mode,for,link,async,wait,operator,param,in,input,type,param,out,output,type,return,a,new,link,single,output,stream,operator;private,static,in,out,single,output,stream,operator,out,add,operator,data,stream,in,in,async,function,in,out,func,long,timeout,int,buf,size,output,mode,mode,type,information,out,out,type,info,type,extractor,get,unary,operator,return,type,func,async,function,class,0,1,new,int,1,0,in,get,type,utils,get,call,location,name,true,async,wait,operator,in,out,operator,new,async,wait,operator,in,get,execution,environment,clean,func,timeout,buf,size,mode,return,in,transform,async,wait,operator,out,type,info,operator
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1482206691;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1493195810;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1493195810;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1495484544;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1496911361;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1532066767;Add an AsyncWaitOperator. The order of output stream records may be reordered._@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> unorderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.UNORDERED)__	};add,an,async,wait,operator,the,order,of,output,stream,records,may,be,reordered,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,unordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,unordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1482206691;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1493195810;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1493195810;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1495484544;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1496911361;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
AsyncDataStream -> public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait( 			DataStream<IN> in, 			AsyncFunction<IN, OUT> func, 			long timeout, 			TimeUnit timeUnit);1532066767;Add an AsyncWaitOperator. The order to process input records is guaranteed to be the same as_input ones.__@param in Input {@link DataStream}_@param func {@link AsyncFunction}_@param timeout for the asynchronous operation to complete_@param timeUnit of the given timeout_@param <IN> Type of input record_@param <OUT> Type of output record_@return A new {@link SingleOutputStreamOperator}.;public static <IN, OUT> SingleOutputStreamOperator<OUT> orderedWait(_			DataStream<IN> in,_			AsyncFunction<IN, OUT> func,_			long timeout,_			TimeUnit timeUnit) {_		return addOperator(_			in,_			func,_			timeUnit.toMillis(timeout),_			DEFAULT_QUEUE_CAPACITY,_			OutputMode.ORDERED)__	};add,an,async,wait,operator,the,order,to,process,input,records,is,guaranteed,to,be,the,same,as,input,ones,param,in,input,link,data,stream,param,func,link,async,function,param,timeout,for,the,asynchronous,operation,to,complete,param,time,unit,of,the,given,timeout,param,in,type,of,input,record,param,out,type,of,output,record,return,a,new,link,single,output,stream,operator;public,static,in,out,single,output,stream,operator,out,ordered,wait,data,stream,in,in,async,function,in,out,func,long,timeout,time,unit,time,unit,return,add,operator,in,func,time,unit,to,millis,timeout,output,mode,ordered
