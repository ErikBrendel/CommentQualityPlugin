# id;timestamp;commentText;codeText;commentWords;codeWords
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1445418103;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1453742891;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1454679829;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1455101486;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1455703064;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(String field);1456774151;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1445418103;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1453742891;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1454679829;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1455101486;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1455703064;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> min(int positionToMin);1456774151;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1470753741;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1472663071;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1472663401;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1477069385;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1478532357;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1478532357;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1478532357;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1480022562;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1480022575;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1480354709;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1484303457;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1484911938;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1485269495;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1488799576;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1488799576;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1489165080;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1493195810;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1493195810;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1493195810;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1493195810;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1456778239;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1470753741;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1472663071;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1472663401;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1477069385;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1478532357;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1478532357;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1478532357;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1480022562;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1480022575;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1480354709;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1484303457;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1484911938;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1485269495;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1488799576;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1488799576;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1489165080;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1493195810;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1494363409;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1495484544;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1496911361;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1497693649;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1499314317;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1508312416;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1518197017;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1520351570;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1531422206;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(String field);1532066767;Applies an aggregation that gives the current sum of the data_stream at the given field by the given key. An independent_aggregate is kept per key.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,sum,of,the,data,stream,at,the,given,field,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1456778239;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1470753741;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1472663071;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1472663401;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1477069385;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1478532357;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1478532357;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1478532357;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1480022562;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1480022575;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1480354709;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1484303457;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1484911938;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1485269495;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1488799576;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1488799576;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1489165080;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1493195810;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1494363409;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1495484544;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1496911361;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1497693649;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1499314317;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1508312416;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1518197017;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1520351570;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1531422206;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> sum(int positionToSum);1532066767;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The field position in the data points to sum. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,field,position,in,the,data,points,to,sum,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1456778239;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1470753741;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1472663071;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1472663401;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1477069385;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1478532357;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1478532357;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1478532357;Applies an aggregation that that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1480022562;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1480022575;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1480354709;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1484303457;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1484911938;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1485269495;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1488799576;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1488799576;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1489165080;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1493195810;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1494363409;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1495484544;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1496911361;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1497693649;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1499314317;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1508312416;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1518197017;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1520351570;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1531422206;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(int positionToMin);1532066767;Applies an aggregation that gives the current minimum of the data_stream at the given position by the given key. An independent aggregate_is kept per key.__@param positionToMin_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(int positionToMin) {_		return aggregate(new ComparableAggregator<>(positionToMin, getType(), AggregationFunction.AggregationType.MIN,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,min,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,int,position,to,min,return,aggregate,new,comparable,aggregator,position,to,min,get,type,aggregation,function,aggregation,type,min,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1445418103;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1453742891;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1454679829;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1455101486;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1455703064;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(String field);1456774151;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1445418103;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1453742891;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1454679829;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1455101486;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1455703064;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy);1456774151;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1480354709;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<KEY, T, R> operator =_				new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,key,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1484303457;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<KEY, T, R> operator =_				new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,key,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1484911938;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<KEY, T, R> operator =_				new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,key,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1485269495;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<KEY, T, R> operator =_				new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,key,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<KEY, T, R> operator =_				new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,key,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1470753741;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1472663071;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1472663401;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1477069385;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1480022562;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1480022575;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1480354709;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1484303457;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1484911938;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1485269495;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1488799576;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1488799576;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1489165080;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1494363409;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1495484544;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1496911361;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1497693649;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1499314317;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1508312416;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1518197017;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1520351570;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1531422206;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ValueStateDescriptor<T> stateDescriptor);1532066767;Publishes the keyed stream as a queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ValueStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableValueStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,value,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1470753741;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1472663071;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1472663401;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1477069385;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1478532357;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1478532357;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1478532357;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1480022562;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1480022575;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1480354709;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType(),_				null)___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,null,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1484303457;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1484911938;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1485269495;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1488799576;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1488799576;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1489165080;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1493195810;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1493195810;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1493195810;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1493195810;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1494363409;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1495484544;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1496911361;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1497693649;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1499314317;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1508312416;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1518197017;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1520351570;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1531422206;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName);1532066767;Publishes the keyed stream as queryable ValueState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(String queryableStateName) {_		ValueStateDescriptor<T> valueStateDescriptor = new ValueStateDescriptor<T>(_				UUID.randomUUID().toString(),_				getType())___		return asQueryableState(queryableStateName, valueStateDescriptor)__	};publishes,the,keyed,stream,as,queryable,value,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,value,state,descriptor,t,value,state,descriptor,new,value,state,descriptor,t,uuid,random,uuid,to,string,get,type,return,as,queryable,state,queryable,state,name,value,state,descriptor
KeyedStream -> public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1445418103;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1453742891;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> public TypeInformation<KEY> getKeyType();1445418103;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;public,type,information,key,get,key,type,return,key,type
KeyedStream -> public TypeInformation<KEY> getKeyType();1453742891;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;public,type,information,key,get,key,type,return,key,type
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1470753741;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1472663071;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1472663401;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1477069385;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1480022562;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1480022575;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1480354709;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ListStateDescriptor<T> stateDescriptor);1484303457;Publishes the keyed stream as a queryable ListStance instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ListStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				getType().createSerializer(getExecutionConfig()),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,list,stance,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,list,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,get,type,create,serializer,get,execution,config,get,key,type,create,serializer,get,execution,config
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1454679829;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1455101486;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1455703064;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1456774151;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1456778239;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1470753741;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1472663071;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1472663401;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1477069385;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1478532357;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1478532357;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1478532357;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1480022562;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1480022575;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1480354709;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1484303457;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1484911938;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1485269495;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1488799576;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1488799576;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1489165080;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1493195810;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1493195810;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1493195810;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1493195810;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1494363409;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1495484544;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1496911361;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1497693649;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1499314317;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1508312416;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1518197017;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1520351570;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1531422206;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> @Internal 	public TypeInformation<KEY> getKeyType();1532066767;Gets the type of the key by which the stream is partitioned._@return The type of the key by which the stream is partitioned.;@Internal_	public TypeInformation<KEY> getKeyType() {_		return keyType__	};gets,the,type,of,the,key,by,which,the,stream,is,partitioned,return,the,type,of,the,key,by,which,the,stream,is,partitioned;internal,public,type,information,key,get,key,type,return,key,type
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1456778239;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1470753741;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1472663071;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1472663401;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1477069385;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1478532357;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1478532357;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1478532357;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1480022562;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1480022575;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1480354709;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1484303457;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1484911938;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1485269495;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1488799576;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1488799576;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1489165080;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1493195810;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1493195810;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1493195810;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1493195810;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1494363409;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1495484544;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1496911361;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1497693649;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1499314317;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1508312416;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1518197017;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1520351570;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1531422206;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer);1532066767;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> @Deprecated 	@Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1520351570;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction, TypeInformation)};@Deprecated_	@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		LegacyKeyedProcessOperator<KEY, T, R> operator = new LegacyKeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function,type,information;deprecated,override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,legacy,keyed,process,operator,key,t,r,operator,new,legacy,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Deprecated 	@Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1531422206;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction, TypeInformation)};@Deprecated_	@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		LegacyKeyedProcessOperator<KEY, T, R> operator = new LegacyKeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function,type,information;deprecated,override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,legacy,keyed,process,operator,key,t,r,operator,new,legacy,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Deprecated 	@Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1532066767;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction, TypeInformation)};@Deprecated_	@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		LegacyKeyedProcessOperator<KEY, T, R> operator = new LegacyKeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function,type,information;deprecated,override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,legacy,keyed,process,operator,key,t,r,operator,new,legacy,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1456778239;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1470753741;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1472663071;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1472663401;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1477069385;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1478532357;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1478532357;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1478532357;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1480022562;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1480022575;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1480354709;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1484303457;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1484911938;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1485269495;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1488799576;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1488799576;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1489165080;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1493195810;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1493195810;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1493195810;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1493195810;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1489165080;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1494363409;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1495484544;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1496911361;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1497693649;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1499314317;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1508312416;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1518197017;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1520351570;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1531422206;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> private boolean validateKeyTypeIsHashable(TypeInformation<?> type);1532066767;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation.__@param type The {@link TypeInformation} of the type to check._@return {@code false} if:_<ol>_<li>it is a POJO type but does not override the {@link #hashCode()} method and relies on_the {@link Object#hashCode()} implementation.</li>_<li>it is an array of any type (see {@link PrimitiveArrayTypeInfo}, {@link BasicArrayTypeInfo},_{@link ObjectArrayTypeInfo}).</li>_</ol>,_{@code true} otherwise.;private boolean validateKeyTypeIsHashable(TypeInformation<?> type) {_		try {_			return (type instanceof PojoTypeInfo)_					? !type.getTypeClass().getMethod("hashCode").getDeclaringClass().equals(Object.class)_					: !(type instanceof PrimitiveArrayTypeInfo || type instanceof BasicArrayTypeInfo || type instanceof ObjectArrayTypeInfo)__		} catch (NoSuchMethodException ignored) {_			_		}_		return false__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,param,type,the,link,type,information,of,the,type,to,check,return,code,false,if,ol,li,it,is,a,pojo,type,but,does,not,override,the,link,hash,code,method,and,relies,on,the,link,object,hash,code,implementation,li,li,it,is,an,array,of,any,type,see,link,primitive,array,type,info,link,basic,array,type,info,link,object,array,type,info,li,ol,code,true,otherwise;private,boolean,validate,key,type,is,hashable,type,information,type,try,return,type,instanceof,pojo,type,info,type,get,type,class,get,method,hash,code,get,declaring,class,equals,object,class,type,instanceof,primitive,array,type,info,type,instanceof,basic,array,type,info,type,instanceof,object,array,type,info,catch,no,such,method,exception,ignored,return,false
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1445418103;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1453742891;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1454679829;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1455101486;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1455703064;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer);1456774151;Applies a reduce transformation on the grouped data stream grouped on by_the given key position. The {@link ReduceFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same reducer.__@param reducer_The {@link ReduceFunction} that will be called for every_element of the input values with the same key._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> reduce(ReduceFunction<T> reducer) {_		return transform("Keyed Reduce", getType(), new StreamGroupedReduce<T>(_				clean(reducer), getType().createSerializer(getExecutionConfig())))__	};applies,a,reduce,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,reduce,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,reducer,param,reducer,the,link,reduce,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,return,the,transformed,data,stream;public,single,output,stream,operator,t,reduce,reduce,function,t,reducer,return,transform,keyed,reduce,get,type,new,stream,grouped,reduce,t,clean,reducer,get,type,create,serializer,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1456778239;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1470753741;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1472663071;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1472663401;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1477069385;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1480022562;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1480022575;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1480354709;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1484303457;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1484911938;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1485269495;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1489165080;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1494363409;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1495484544;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1496911361;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1497693649;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1499314317;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1508312416;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1518197017;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1520351570;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1531422206;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy);1532066767;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1445418103;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1453742891;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1454679829;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1455101486;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1455703064;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1456774151;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1456778239;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1470753741;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1472663071;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1472663401;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1477069385;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1480022562;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1480022575;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1480354709;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1484303457;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1484911938;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1485269495;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1488799576;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1488799576;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1489165080;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1494363409;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1495484544;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1496911361;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1497693649;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1499314317;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1508312416;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1518197017;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1520351570;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1531422206;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector);1532066767;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector) {_		this(dataStream, keySelector, TypeExtractor.getKeySelectorTypes(keySelector, dataStream.getType()))__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,this,data,stream,key,selector,type,extractor,get,key,selector,types,key,selector,data,stream,get,type
KeyedStream -> @Internal 	KeyedStream( 		DataStream<T> stream, 		PartitionTransformation<T> partitionTransformation, 		KeySelector<T, KEY> keySelector, 		TypeInformation<KEY> keyType);1518197017;Creates a new {@link KeyedStream} using the given {@link KeySelector} and {@link TypeInformation}_to partition operator state by key, where the partitioning is defined by a {@link PartitionTransformation}.__@param stream_Base stream of data_@param partitionTransformation_Function that determines how the keys are distributed to downstream operator(s)_@param keySelector_Function to extract keys from the base stream_@param keyType_Defines the type of the extracted keys;@Internal_	KeyedStream(_		DataStream<T> stream,_		PartitionTransformation<T> partitionTransformation,_		KeySelector<T, KEY> keySelector,_		TypeInformation<KEY> keyType) {__		super(stream.getExecutionEnvironment(), partitionTransformation)__		this.keySelector = clean(keySelector)__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,and,link,type,information,to,partition,operator,state,by,key,where,the,partitioning,is,defined,by,a,link,partition,transformation,param,stream,base,stream,of,data,param,partition,transformation,function,that,determines,how,the,keys,are,distributed,to,downstream,operator,s,param,key,selector,function,to,extract,keys,from,the,base,stream,param,key,type,defines,the,type,of,the,extracted,keys;internal,keyed,stream,data,stream,t,stream,partition,transformation,t,partition,transformation,key,selector,t,key,key,selector,type,information,key,key,type,super,stream,get,execution,environment,partition,transformation,this,key,selector,clean,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> @Internal 	KeyedStream( 		DataStream<T> stream, 		PartitionTransformation<T> partitionTransformation, 		KeySelector<T, KEY> keySelector, 		TypeInformation<KEY> keyType);1520351570;Creates a new {@link KeyedStream} using the given {@link KeySelector} and {@link TypeInformation}_to partition operator state by key, where the partitioning is defined by a {@link PartitionTransformation}.__@param stream_Base stream of data_@param partitionTransformation_Function that determines how the keys are distributed to downstream operator(s)_@param keySelector_Function to extract keys from the base stream_@param keyType_Defines the type of the extracted keys;@Internal_	KeyedStream(_		DataStream<T> stream,_		PartitionTransformation<T> partitionTransformation,_		KeySelector<T, KEY> keySelector,_		TypeInformation<KEY> keyType) {__		super(stream.getExecutionEnvironment(), partitionTransformation)__		this.keySelector = clean(keySelector)__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,and,link,type,information,to,partition,operator,state,by,key,where,the,partitioning,is,defined,by,a,link,partition,transformation,param,stream,base,stream,of,data,param,partition,transformation,function,that,determines,how,the,keys,are,distributed,to,downstream,operator,s,param,key,selector,function,to,extract,keys,from,the,base,stream,param,key,type,defines,the,type,of,the,extracted,keys;internal,keyed,stream,data,stream,t,stream,partition,transformation,t,partition,transformation,key,selector,t,key,key,selector,type,information,key,key,type,super,stream,get,execution,environment,partition,transformation,this,key,selector,clean,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> @Internal 	KeyedStream( 		DataStream<T> stream, 		PartitionTransformation<T> partitionTransformation, 		KeySelector<T, KEY> keySelector, 		TypeInformation<KEY> keyType);1531422206;Creates a new {@link KeyedStream} using the given {@link KeySelector} and {@link TypeInformation}_to partition operator state by key, where the partitioning is defined by a {@link PartitionTransformation}.__@param stream_Base stream of data_@param partitionTransformation_Function that determines how the keys are distributed to downstream operator(s)_@param keySelector_Function to extract keys from the base stream_@param keyType_Defines the type of the extracted keys;@Internal_	KeyedStream(_		DataStream<T> stream,_		PartitionTransformation<T> partitionTransformation,_		KeySelector<T, KEY> keySelector,_		TypeInformation<KEY> keyType) {__		super(stream.getExecutionEnvironment(), partitionTransformation)__		this.keySelector = clean(keySelector)__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,and,link,type,information,to,partition,operator,state,by,key,where,the,partitioning,is,defined,by,a,link,partition,transformation,param,stream,base,stream,of,data,param,partition,transformation,function,that,determines,how,the,keys,are,distributed,to,downstream,operator,s,param,key,selector,function,to,extract,keys,from,the,base,stream,param,key,type,defines,the,type,of,the,extracted,keys;internal,keyed,stream,data,stream,t,stream,partition,transformation,t,partition,transformation,key,selector,t,key,key,selector,type,information,key,key,type,super,stream,get,execution,environment,partition,transformation,this,key,selector,clean,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> @Internal 	KeyedStream( 		DataStream<T> stream, 		PartitionTransformation<T> partitionTransformation, 		KeySelector<T, KEY> keySelector, 		TypeInformation<KEY> keyType);1532066767;Creates a new {@link KeyedStream} using the given {@link KeySelector} and {@link TypeInformation}_to partition operator state by key, where the partitioning is defined by a {@link PartitionTransformation}.__@param stream_Base stream of data_@param partitionTransformation_Function that determines how the keys are distributed to downstream operator(s)_@param keySelector_Function to extract keys from the base stream_@param keyType_Defines the type of the extracted keys;@Internal_	KeyedStream(_		DataStream<T> stream,_		PartitionTransformation<T> partitionTransformation,_		KeySelector<T, KEY> keySelector,_		TypeInformation<KEY> keyType) {__		super(stream.getExecutionEnvironment(), partitionTransformation)__		this.keySelector = clean(keySelector)__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,and,link,type,information,to,partition,operator,state,by,key,where,the,partitioning,is,defined,by,a,link,partition,transformation,param,stream,base,stream,of,data,param,partition,transformation,function,that,determines,how,the,keys,are,distributed,to,downstream,operator,s,param,key,selector,function,to,extract,keys,from,the,base,stream,param,key,type,defines,the,type,of,the,extracted,keys;internal,keyed,stream,data,stream,t,stream,partition,transformation,t,partition,transformation,key,selector,t,key,key,selector,type,information,key,key,type,super,stream,get,execution,environment,partition,transformation,this,key,selector,clean,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1456778239;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1470753741;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1472663071;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1472663401;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1477069385;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1480022562;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1480022575;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1480354709;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1484303457;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1484911938;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1485269495;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1488799576;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1488799576;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1489165080;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1493195810;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1494363409;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1495484544;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1496911361;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1497693649;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1499314317;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1508312416;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1518197017;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1520351570;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1531422206;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(String field, boolean first);1532066767;Applies an aggregation that gives the current maximum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1456778239;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1470753741;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1472663071;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1472663401;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1477069385;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1480022562;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to maximize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,maximize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1480022575;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1480354709;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1484303457;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1484911938;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1485269495;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1489165080;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1494363409;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1495484544;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1496911361;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1497693649;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1499314317;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1508312416;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1518197017;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1520351570;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1531422206;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first);1532066767;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1489165080;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1494363409;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1495484544;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1496911361;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1497693649;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1499314317;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1508312416;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Override 	@Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1518197017;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator =_				new KeyedProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,process,function,return,transform,process,output,type,operator
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1494363409;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1495484544;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1496911361;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1497693649;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1499314317;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1508312416;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1518197017;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1520351570;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1531422206;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Deprecated 	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder);1532066767;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.__@deprecated will be removed in a future version;@Deprecated_	public <R> SingleOutputStreamOperator<R> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream,deprecated,will,be,removed,in,a,future,version;deprecated,public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1480354709;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1484303457;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1484911938;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1485269495;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__<p>A {@link RichProcessFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,p,a,link,rich,process,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1453742891;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		return window(TumblingTimeWindows.of(size))__	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,return,window,tumbling,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1454679829;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		return window(TumblingTimeWindows.of(size))__	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,return,window,tumbling,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1455101486;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		return window(TumblingTimeWindows.of(size))__	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,return,window,tumbling,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1455703064;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1456774151;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1456778239;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1470753741;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1472663071;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1472663401;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1477069385;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1478532357;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1478532357;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1478532357;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1480022562;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1480022575;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1480354709;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1484303457;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1484911938;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1485269495;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1488799576;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1488799576;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1489165080;Windows this {@code KeyedStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1493195810;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1493195810;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1493195810;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1493195810;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1494363409;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1495484544;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1496911361;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1497693649;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1499314317;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1508312416;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1518197017;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1520351570;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1531422206;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size);1532066767;Windows this {@code KeyedStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(TumblingProcessingTimeWindows.of(size))__		} else {_			return window(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,keyed,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,tumbling,processing,time,windows,of,size,else,return,window,tumbling,event,time,windows,of,size
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1455101486;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1455703064;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1456774151;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1456778239;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1470753741;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1472663071;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1472663401;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1477069385;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1478532357;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1478532357;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1478532357;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1480022562;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1480022575;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1480354709;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1484303457;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1484911938;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1485269495;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1488799576;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1488799576;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1489165080;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1494363409;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1495484544;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1496911361;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1497693649;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1499314317;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1508312416;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1518197017;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1520351570;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1531422206;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> @PublicEvolving 	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner);1532066767;Windows this data stream to a {@code WindowedStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a {@link WindowAssigner}. The_grouping of elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to_specify when windows are evaluated. However, {@code WindowAssigners} have a default_{@code Trigger} that is used if a {@code Trigger} is not specified.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> WindowedStream<T, KEY, W> window(WindowAssigner<? super T, W> assigner) {_		return new WindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,windowed,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,windowed,stream,t,key,w,window,window,assigner,super,t,w,assigner,return,new,windowed,stream,this,assigner
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1456778239;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1470753741;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1472663071;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1472663401;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1477069385;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1480022562;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1480022575;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1480354709;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1484303457;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1484911938;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1485269495;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1489165080;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1494363409;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1495484544;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1496911361;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1497693649;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1499314317;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1508312416;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1518197017;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1520351570;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1531422206;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(String positionToMinBy);1532066767;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> @PublicEvolving 	public <T1> IntervalJoin<T, T1, KEY> intervalJoin(KeyedStream<T1, KEY> otherStream);1531422206;Join elements of this {@link KeyedStream} with elements of another {@link KeyedStream} over_a time interval that can be specified with {@link IntervalJoin#between(Time, Time)}.__@param otherStream The other keyed stream to join this keyed stream with_@param <T1> Type parameter of elements in the other stream_@return An instance of {@link IntervalJoin} with this keyed stream and the other keyed stream;@PublicEvolving_	public <T1> IntervalJoin<T, T1, KEY> intervalJoin(KeyedStream<T1, KEY> otherStream) {_		return new IntervalJoin<>(this, otherStream)__	};join,elements,of,this,link,keyed,stream,with,elements,of,another,link,keyed,stream,over,a,time,interval,that,can,be,specified,with,link,interval,join,between,time,time,param,other,stream,the,other,keyed,stream,to,join,this,keyed,stream,with,param,t1,type,parameter,of,elements,in,the,other,stream,return,an,instance,of,link,interval,join,with,this,keyed,stream,and,the,other,keyed,stream;public,evolving,public,t1,interval,join,t,t1,key,interval,join,keyed,stream,t1,key,other,stream,return,new,interval,join,this,other,stream
KeyedStream -> @PublicEvolving 	public <T1> IntervalJoin<T, T1, KEY> intervalJoin(KeyedStream<T1, KEY> otherStream);1532066767;Join elements of this {@link KeyedStream} with elements of another {@link KeyedStream} over_a time interval that can be specified with {@link IntervalJoin#between(Time, Time)}.__@param otherStream The other keyed stream to join this keyed stream with_@param <T1> Type parameter of elements in the other stream_@return An instance of {@link IntervalJoin} with this keyed stream and the other keyed stream;@PublicEvolving_	public <T1> IntervalJoin<T, T1, KEY> intervalJoin(KeyedStream<T1, KEY> otherStream) {_		return new IntervalJoin<>(this, otherStream)__	};join,elements,of,this,link,keyed,stream,with,elements,of,another,link,keyed,stream,over,a,time,interval,that,can,be,specified,with,link,interval,join,between,time,time,param,other,stream,the,other,keyed,stream,to,join,this,keyed,stream,with,param,t1,type,parameter,of,elements,in,the,other,stream,return,an,instance,of,link,interval,join,with,this,keyed,stream,and,the,other,keyed,stream;public,evolving,public,t1,interval,join,t,t1,key,interval,join,keyed,stream,t1,key,other,stream,return,new,interval,join,this,other,stream
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1445418103;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1453742891;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1454679829;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1455101486;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1455703064;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(String field);1456774151;Applies an aggregation that that gives the current sum of the pojo data_stream at the given field expressionby the given key. An independent_aggregate is kept per key. A field expression is either the name of a_public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(String field) {_		return aggregate(new SumAggregator<>(field, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,sum,of,the,pojo,data,stream,at,the,given,field,expressionby,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,string,field,return,aggregate,new,sum,aggregator,field,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1445418103;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1453742891;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1454679829;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1455101486;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1455703064;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy);1456774151;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1445418103;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1453742891;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1454679829;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1455101486;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1455703064;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy);1456774151;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(String positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,string,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1445418103;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1453742891;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1454679829;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1455101486;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1455703064;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder);1456774151;Applies a fold transformation on the grouped data stream grouped on by_the given key position. The {@link FoldFunction} will receive input_values based on the key value. Only input values with the same key will_go to the same folder.__@param folder_The {@link FoldFunction} that will be called for every element_of the input values with the same key._@param initialValue_The initialValue passed to the folders for each key._@return The transformed DataStream.;public <R> SingleOutputStreamOperator<R, ?> fold(R initialValue, FoldFunction<T, R> folder) {__		TypeInformation<R> outType = TypeExtractor.getFoldReturnTypes(_				clean(folder), getType(), Utils.getCallLocationName(), true)___		return transform("Keyed Fold", outType, new StreamGroupedFold<>(clean(folder), initialValue))__	};applies,a,fold,transformation,on,the,grouped,data,stream,grouped,on,by,the,given,key,position,the,link,fold,function,will,receive,input,values,based,on,the,key,value,only,input,values,with,the,same,key,will,go,to,the,same,folder,param,folder,the,link,fold,function,that,will,be,called,for,every,element,of,the,input,values,with,the,same,key,param,initial,value,the,initial,value,passed,to,the,folders,for,each,key,return,the,transformed,data,stream;public,r,single,output,stream,operator,r,fold,r,initial,value,fold,function,t,r,folder,type,information,r,out,type,type,extractor,get,fold,return,types,clean,folder,get,type,utils,get,call,location,name,true,return,transform,keyed,fold,out,type,new,stream,grouped,fold,clean,folder,initial,value
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			KeyedProcessFunction<KEY, T, R> keyedProcessFunction, 			TypeInformation<R> outputType);1520351570;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			KeyedProcessFunction<KEY, T, R> keyedProcessFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator = new KeyedProcessOperator<>(clean(keyedProcessFunction))__		return transform("KeyedProcess", outputType, operator)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,keyed,process,function,return,transform,keyed,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			KeyedProcessFunction<KEY, T, R> keyedProcessFunction, 			TypeInformation<R> outputType);1531422206;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			KeyedProcessFunction<KEY, T, R> keyedProcessFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator = new KeyedProcessOperator<>(clean(keyedProcessFunction))__		return transform("KeyedProcess", outputType, operator)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,keyed,process,function,return,transform,keyed,process,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			KeyedProcessFunction<KEY, T, R> keyedProcessFunction, 			TypeInformation<R> outputType);1532066767;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			KeyedProcessFunction<KEY, T, R> keyedProcessFunction,_			TypeInformation<R> outputType) {__		KeyedProcessOperator<KEY, T, R> operator = new KeyedProcessOperator<>(clean(keyedProcessFunction))__		return transform("KeyedProcess", outputType, operator)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,output,type,keyed,process,operator,key,t,r,operator,new,keyed,process,operator,clean,keyed,process,function,return,transform,keyed,process,output,type,operator
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1456778239;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1470753741;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1472663071;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1472663401;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1477069385;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1478532357;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1478532357;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1478532357;Applies an aggregation that that gives the current maximum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1480022562;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1480022575;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1480354709;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1484303457;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1484911938;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1485269495;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1488799576;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1488799576;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1489165080;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1493195810;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1494363409;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1495484544;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1496911361;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1497693649;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1499314317;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1508312416;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1518197017;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1520351570;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1531422206;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(String field);1532066767;Applies an aggregation that gives the current maximum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAX,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,max,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1445418103;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1453742891;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1454679829;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1455101486;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1455703064;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy);1456774151;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1445418103;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1453742891;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1454679829;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1455101486;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1455703064;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> max(int positionToMax);1456774151;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> @Deprecated 	@Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1520351570;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction)};@Deprecated_	@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function;deprecated,override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Deprecated 	@Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1531422206;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction)};@Deprecated_	@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function;deprecated,override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Deprecated 	@Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1532066767;Applies the given {@link ProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.__@deprecated Use {@link KeyedStream#process(KeyedProcessFunction)};@Deprecated_	@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream,deprecated,use,link,keyed,stream,process,keyed,process,function;deprecated,override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1445418103;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1453742891;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1454679829;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1455101486;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1455703064;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first);1456774151;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T, ?> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1489165080;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1494363409;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1495484544;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1496911361;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{2, 0},_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,new,int,0,new,int,2,0,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1497693649;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1499314317;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1508312416;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> @Override 	@PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1518197017;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Override_	@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;override,public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1445418103;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1453742891;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1454679829;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1455101486;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1455703064;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1456774151;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1456778239;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1470753741;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(dataStream.getExecutionEnvironment(), new PartitionTransformation<>(_				dataStream.getTransformation(), new HashPartitioner<>(keySelector)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,hash,partitioner,key,selector,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1472663071;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector,_					new HashKeyGroupAssigner<KEY>())))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,new,hash,key,group,assigner,key,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1472663401;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1477069385;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1478532357;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1480022562;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1480022575;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1480354709;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1484303457;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1484911938;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(_					keySelector, KeyGroupRangeAssignment.DEFAULT_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,key,group,range,assignment,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1485269495;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1488799576;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1488799576;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = keyType__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1489165080;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1493195810;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1494363409;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1495484544;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1496911361;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1497693649;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1499314317;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1508312416;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		super(_			dataStream.getExecutionEnvironment(),_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)))__		this.keySelector = keySelector__		this.keyType = validateKeyType(keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,super,data,stream,get,execution,environment,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,this,key,selector,key,selector,this,key,type,validate,key,type,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1518197017;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		this(_			dataStream,_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)),_			keySelector,_			keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,this,data,stream,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,key,selector,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1520351570;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		this(_			dataStream,_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)),_			keySelector,_			keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,this,data,stream,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,key,selector,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1531422206;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		this(_			dataStream,_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)),_			keySelector,_			keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,this,data,stream,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,key,selector,key,type
KeyedStream -> public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType);1532066767;Creates a new {@link KeyedStream} using the given {@link KeySelector}_to partition operator state by key.__@param dataStream_Base stream of data_@param keySelector_Function for determining state partitions;public KeyedStream(DataStream<T> dataStream, KeySelector<T, KEY> keySelector, TypeInformation<KEY> keyType) {_		this(_			dataStream,_			new PartitionTransformation<>(_				dataStream.getTransformation(),_				new KeyGroupStreamPartitioner<>(keySelector, StreamGraphGenerator.DEFAULT_LOWER_BOUND_MAX_PARALLELISM)),_			keySelector,_			keyType)__	};creates,a,new,link,keyed,stream,using,the,given,link,key,selector,to,partition,operator,state,by,key,param,data,stream,base,stream,of,data,param,key,selector,function,for,determining,state,partitions;public,keyed,stream,data,stream,t,data,stream,key,selector,t,key,key,selector,type,information,key,key,type,this,data,stream,new,partition,transformation,data,stream,get,transformation,new,key,group,stream,partitioner,key,selector,stream,graph,generator,key,selector,key,type
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1494363409;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1495484544;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1496911361;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1497693649;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1499314317;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1508312416;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1518197017;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1520351570;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1531422206;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	@Deprecated 	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState( 			String queryableStateName, 			FoldingStateDescriptor<T, ACC> stateDescriptor);1532066767;Publishes the keyed stream as a queryable FoldingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance__@deprecated will be removed in a future version;@PublicEvolving_	@Deprecated_	public <ACC> QueryableStateStream<KEY, ACC> asQueryableState(_			String queryableStateName,_			FoldingStateDescriptor<T, ACC> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,folding,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance,deprecated,will,be,removed,in,a,future,version;public,evolving,deprecated,public,acc,queryable,state,stream,key,acc,as,queryable,state,string,queryable,state,name,folding,state,descriptor,t,acc,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1454679829;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1455101486;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1455703064;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1456774151;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1456778239;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1470753741;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1472663071;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1472663401;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1477069385;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1478532357;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1478532357;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1478532357;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1480022562;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1480022575;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1480354709;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1484303457;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1484911938;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1485269495;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1488799576;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1488799576;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1489165080;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1493195810;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1493195810;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1493195810;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1493195810;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1494363409;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1495484544;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1496911361;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1497693649;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1499314317;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1508312416;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1518197017;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1520351570;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1531422206;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @Internal 	public KeySelector<T, KEY> getKeySelector();1532066767;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;@Internal_	public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;internal,public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1445418103;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1453742891;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1454679829;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1455101486;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1455703064;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first);1456774151;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1456778239;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1470753741;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1472663071;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1472663401;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1477069385;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1478532357;Applies an aggregation that that gives the current minimum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1480022562;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1480022575;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1480354709;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1484303457;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1484911938;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1485269495;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1488799576;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1488799576;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1489165080;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1493195810;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1494363409;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1495484544;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1496911361;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1497693649;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1499314317;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1508312416;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1518197017;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1520351570;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1531422206;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @SuppressWarnings({ "rawtypes", "unchecked" }) 	public SingleOutputStreamOperator<T> minBy(String field, boolean first);1532066767;Applies an aggregation that gives the current minimum element of the_data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;@SuppressWarnings({ "rawtypes", "unchecked" })_	public SingleOutputStreamOperator<T> minBy(String field, boolean first) {_		return aggregate(new ComparableAggregator(field, getType(), AggregationFunction.AggregationType.MINBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,element,of,the,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;suppress,warnings,rawtypes,unchecked,public,single,output,stream,operator,t,min,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1456778239;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1470753741;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1472663071;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1472663401;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1477069385;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1478532357;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1478532357;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1478532357;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1480022562;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to maximize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,maximize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1480022575;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1480354709;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1484303457;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1484911938;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1485269495;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1488799576;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1488799576;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1489165080;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1493195810;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1494363409;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1495484544;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1496911361;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1497693649;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1499314317;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1508312416;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1518197017;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1520351570;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1531422206;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> max(int positionToMax);1532066767;Applies an aggregation that gives the current maximum of the data stream_at the given position by the given key. An independent aggregate is kept_per key.__@param positionToMax_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> max(int positionToMax) {_		return aggregate(new ComparableAggregator<>(positionToMax, getType(), AggregationFunction.AggregationType.MAX,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,maximum,of,the,data,stream,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,max,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,int,position,to,max,return,aggregate,new,comparable,aggregator,position,to,max,get,type,aggregation,function,aggregation,type,max,get,execution,config
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> flatMap( 			TimelyFlatMapFunction<T, R> flatMapper, 			TypeInformation<R> outputType);1478532357;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> flatMap(_			TimelyFlatMapFunction<T, R> flatMapper,_			TypeInformation<R> outputType) {__		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(keyType.createSerializer(getExecutionConfig()), clean(flatMapper))___		return transform("Flat Map", outputType, operator)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,output,type,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,key,type,create,serializer,get,execution,config,clean,flat,mapper,return,transform,flat,map,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> flatMap( 			TimelyFlatMapFunction<T, R> flatMapper, 			TypeInformation<R> outputType);1478532357;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> flatMap(_			TimelyFlatMapFunction<T, R> flatMapper,_			TypeInformation<R> outputType) {__		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(clean(flatMapper))___		return transform("Flat Map", outputType, operator)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,output,type,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,clean,flat,mapper,return,transform,flat,map,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> flatMap( 			TimelyFlatMapFunction<T, R> flatMapper, 			TypeInformation<R> outputType);1480022562;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> flatMap(_			TimelyFlatMapFunction<T, R> flatMapper,_			TypeInformation<R> outputType) {__		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(clean(flatMapper))___		return transform("Flat Map", outputType, operator)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,output,type,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,clean,flat,mapper,return,transform,flat,map,output,type,operator
KeyedStream -> @Internal 	public <R> SingleOutputStreamOperator<R> flatMap( 			TimelyFlatMapFunction<T, R> flatMapper, 			TypeInformation<R> outputType);1480022575;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> flatMap(_			TimelyFlatMapFunction<T, R> flatMapper,_			TypeInformation<R> outputType) {__		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(clean(flatMapper))___		return transform("Flat Map", outputType, operator)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,output,type,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,clean,flat,mapper,return,transform,flat,map,output,type,operator
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1456778239;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1470753741;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1472663071;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1472663401;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1477069385;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1478532357;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The position in the data point to maximize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,position,in,the,data,point,to,maximize,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1480022562;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to maximize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,maximize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1480022575;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1480354709;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1484303457;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1484911938;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1485269495;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1488799576;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1489165080;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1493195810;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1494363409;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1495484544;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1496911361;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1497693649;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1499314317;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1508312416;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1518197017;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1520351570;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1531422206;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy);1532066767;Applies an aggregation that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns the first one by default.__@param positionToMaxBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> maxBy(int positionToMaxBy) {_		return this.maxBy(positionToMaxBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,max,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,return,this,max,by,position,to,max,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1456778239;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1470753741;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1472663071;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1472663401;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1477069385;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The position in the data point to minimize_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,position,in,the,data,point,to,minimize,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1480022562;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1480022575;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1480354709;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1484303457;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1484911938;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1485269495;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1489165080;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1494363409;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1495484544;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1496911361;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1497693649;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1499314317;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1508312416;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1518197017;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1520351570;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1531422206;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy);1532066767;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns the first one by default.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy) {_		return this.minBy(positionToMinBy, true)__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,the,first,one,by,default,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,return,this,min,by,position,to,min,by,true
KeyedStream -> IntervalJoin -> @PublicEvolving 		public IntervalJoined<T1, T2, KEY> between(Time lowerBound, Time upperBound);1531422206;Specifies the time boundaries over which the join operation works, so that_<pre>leftElement.timestamp + lowerBound <= rightElement.timestamp <= leftElement.timestamp + upperBound</pre>_By default both the lower and the upper bound are inclusive. This can be configured_with {@link IntervalJoined#lowerBoundExclusive()} and_{@link IntervalJoined#upperBoundExclusive()}__@param lowerBound The lower bound. Needs to be smaller than or equal to the upperBound_@param upperBound The upper bound. Needs to be bigger than or equal to the lowerBound;@PublicEvolving_		public IntervalJoined<T1, T2, KEY> between(Time lowerBound, Time upperBound) {__			TimeCharacteristic timeCharacteristic =_				streamOne.getExecutionEnvironment().getStreamTimeCharacteristic()___			if (timeCharacteristic != TimeCharacteristic.EventTime) {_				throw new UnsupportedTimeCharacteristicException("Time-bounded stream joins are only supported in event time")__			}__			checkNotNull(lowerBound, "A lower bound needs to be provided for a time-bounded join")__			checkNotNull(upperBound, "An upper bound needs to be provided for a time-bounded join")___			return new IntervalJoined<>(_				streamOne,_				streamTwo,_				lowerBound.toMilliseconds(),_				upperBound.toMilliseconds(),_				true,_				true_			)__		};specifies,the,time,boundaries,over,which,the,join,operation,works,so,that,pre,left,element,timestamp,lower,bound,right,element,timestamp,left,element,timestamp,upper,bound,pre,by,default,both,the,lower,and,the,upper,bound,are,inclusive,this,can,be,configured,with,link,interval,joined,lower,bound,exclusive,and,link,interval,joined,upper,bound,exclusive,param,lower,bound,the,lower,bound,needs,to,be,smaller,than,or,equal,to,the,upper,bound,param,upper,bound,the,upper,bound,needs,to,be,bigger,than,or,equal,to,the,lower,bound;public,evolving,public,interval,joined,t1,t2,key,between,time,lower,bound,time,upper,bound,time,characteristic,time,characteristic,stream,one,get,execution,environment,get,stream,time,characteristic,if,time,characteristic,time,characteristic,event,time,throw,new,unsupported,time,characteristic,exception,time,bounded,stream,joins,are,only,supported,in,event,time,check,not,null,lower,bound,a,lower,bound,needs,to,be,provided,for,a,time,bounded,join,check,not,null,upper,bound,an,upper,bound,needs,to,be,provided,for,a,time,bounded,join,return,new,interval,joined,stream,one,stream,two,lower,bound,to,milliseconds,upper,bound,to,milliseconds,true,true
KeyedStream -> IntervalJoin -> @PublicEvolving 		public IntervalJoined<T1, T2, KEY> between(Time lowerBound, Time upperBound);1532066767;Specifies the time boundaries over which the join operation works, so that_<pre>leftElement.timestamp + lowerBound <= rightElement.timestamp <= leftElement.timestamp + upperBound</pre>_By default both the lower and the upper bound are inclusive. This can be configured_with {@link IntervalJoined#lowerBoundExclusive()} and_{@link IntervalJoined#upperBoundExclusive()}__@param lowerBound The lower bound. Needs to be smaller than or equal to the upperBound_@param upperBound The upper bound. Needs to be bigger than or equal to the lowerBound;@PublicEvolving_		public IntervalJoined<T1, T2, KEY> between(Time lowerBound, Time upperBound) {__			TimeCharacteristic timeCharacteristic =_				streamOne.getExecutionEnvironment().getStreamTimeCharacteristic()___			if (timeCharacteristic != TimeCharacteristic.EventTime) {_				throw new UnsupportedTimeCharacteristicException("Time-bounded stream joins are only supported in event time")__			}__			checkNotNull(lowerBound, "A lower bound needs to be provided for a time-bounded join")__			checkNotNull(upperBound, "An upper bound needs to be provided for a time-bounded join")___			return new IntervalJoined<>(_				streamOne,_				streamTwo,_				lowerBound.toMilliseconds(),_				upperBound.toMilliseconds(),_				true,_				true_			)__		};specifies,the,time,boundaries,over,which,the,join,operation,works,so,that,pre,left,element,timestamp,lower,bound,right,element,timestamp,left,element,timestamp,upper,bound,pre,by,default,both,the,lower,and,the,upper,bound,are,inclusive,this,can,be,configured,with,link,interval,joined,lower,bound,exclusive,and,link,interval,joined,upper,bound,exclusive,param,lower,bound,the,lower,bound,needs,to,be,smaller,than,or,equal,to,the,upper,bound,param,upper,bound,the,upper,bound,needs,to,be,bigger,than,or,equal,to,the,lower,bound;public,evolving,public,interval,joined,t1,t2,key,between,time,lower,bound,time,upper,bound,time,characteristic,time,characteristic,stream,one,get,execution,environment,get,stream,time,characteristic,if,time,characteristic,time,characteristic,event,time,throw,new,unsupported,time,characteristic,exception,time,bounded,stream,joins,are,only,supported,in,event,time,check,not,null,lower,bound,a,lower,bound,needs,to,be,provided,for,a,time,bounded,join,check,not,null,upper,bound,an,upper,bound,needs,to,be,provided,for,a,time,bounded,join,return,new,interval,joined,stream,one,stream,two,lower,bound,to,milliseconds,upper,bound,to,milliseconds,true,true
KeyedStream -> public KeySelector<T, KEY> getKeySelector();1445418103;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> public KeySelector<T, KEY> getKeySelector();1453742891;Gets the key selector that can get the key by which the stream if partitioned from the elements._@return The key selector for the key.;public KeySelector<T, KEY> getKeySelector() {_		return this.keySelector__	};gets,the,key,selector,that,can,get,the,key,by,which,the,stream,if,partitioned,from,the,elements,return,the,key,selector,for,the,key;public,key,selector,t,key,get,key,selector,return,this,key,selector
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1470753741;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1472663071;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1472663401;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1477069385;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1478532357;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1480022562;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1480022575;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1480354709;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1484303457;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1484911938;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1485269495;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1488799576;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1488799576;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1489165080;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1493195810;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1494363409;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1495484544;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1496911361;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1497693649;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1499314317;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor.getSerializer(),_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,serializer,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1508312416;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1518197017;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1520351570;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1531422206;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> @PublicEvolving 	public QueryableStateStream<KEY, T> asQueryableState( 			String queryableStateName, 			ReducingStateDescriptor<T> stateDescriptor);1532066767;Publishes the keyed stream as a queryable ReducingState instance.__@param queryableStateName Name under which to the publish the queryable state instance_@param stateDescriptor State descriptor to create state instance from_@return Queryable state instance;@PublicEvolving_	public QueryableStateStream<KEY, T> asQueryableState(_			String queryableStateName,_			ReducingStateDescriptor<T> stateDescriptor) {__		transform("Queryable state: " + queryableStateName,_				getType(),_				new QueryableAppendingStateOperator<>(queryableStateName, stateDescriptor))___		stateDescriptor.initializeSerializerUnlessSet(getExecutionConfig())___		return new QueryableStateStream<>(_				queryableStateName,_				stateDescriptor,_				getKeyType().createSerializer(getExecutionConfig()))__	};publishes,the,keyed,stream,as,a,queryable,reducing,state,instance,param,queryable,state,name,name,under,which,to,the,publish,the,queryable,state,instance,param,state,descriptor,state,descriptor,to,create,state,instance,from,return,queryable,state,instance;public,evolving,public,queryable,state,stream,key,t,as,queryable,state,string,queryable,state,name,reducing,state,descriptor,t,state,descriptor,transform,queryable,state,queryable,state,name,get,type,new,queryable,appending,state,operator,queryable,state,name,state,descriptor,state,descriptor,initialize,serializer,unless,set,get,execution,config,return,new,queryable,state,stream,queryable,state,name,state,descriptor,get,key,type,create,serializer,get,execution,config
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1445418103;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1453742891;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1454679829;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1455101486;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1455703064;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1456774151;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1456778239;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1470753741;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1472663071;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1472663401;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1477069385;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1478532357;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1478532357;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1478532357;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1480022562;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1480022575;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1480354709;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1484303457;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1484911938;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1485269495;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1488799576;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1488799576;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1489165080;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1493195810;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1493195810;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1493195810;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1493195810;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1494363409;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1495484544;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1496911361;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1497693649;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1499314317;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1508312416;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1518197017;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1520351570;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1531422206;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide);1532066767;Windows this {@code KeyedStream} into sliding count windows.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size, long slide) {_		return window(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,keyed,stream,into,sliding,count,windows,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,long,slide,return,window,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1453742891;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		return window(SlidingTimeWindows.of(size, slide))__	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,return,window,sliding,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1454679829;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		return window(SlidingTimeWindows.of(size, slide))__	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,return,window,sliding,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1455101486;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		return window(SlidingTimeWindows.of(size, slide))__	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,return,window,sliding,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1455703064;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1456774151;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1456778239;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1470753741;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1472663071;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1472663401;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1477069385;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1478532357;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1478532357;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1478532357;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1480022562;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1480022575;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1480354709;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1484303457;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1484911938;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1485269495;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1488799576;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1488799576;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1489165080;Windows this {@code KeyedStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1493195810;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1493195810;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1493195810;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1493195810;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1494363409;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1495484544;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1496911361;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1497693649;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1499314317;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1508312416;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1518197017;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1520351570;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1531422206;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide);1532066767;Windows this {@code KeyedStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time_characteristic set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public WindowedStream<T, KEY, TimeWindow> timeWindow(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return window(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return window(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,keyed,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,windowed,stream,t,key,time,window,time,window,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,sliding,processing,time,windows,of,size,slide,else,return,window,sliding,event,time,windows,of,size,slide
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1456778239;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1470753741;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1472663071;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1472663401;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1477069385;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1478532357;Applies an aggregation that that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The position in the data point to minimize_@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,position,in,the,data,point,to,minimize,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1480022562;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, basic and primitive array types, Scala case classes,_and primitive types (which is considered as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,basic,and,primitive,array,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1480022575;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1480354709;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1484303457;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1484911938;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1485269495;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1488799576;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1489165080;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1493195810;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1494363409;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1495484544;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1496911361;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1497693649;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1499314317;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1508312416;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1518197017;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1520351570;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1531422206;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first);1532066767;Applies an aggregation that gives the current element with the_minimum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the minimum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMinBy_The field position in the data points to minimize. This is applicable to_Tuple types, Scala case classes, and primitive types (which is considered_as having one field)._@param first_If true, then the operator return the first element with the_minimal value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T> minBy(int positionToMinBy, boolean first) {_		return aggregate(new ComparableAggregator<T>(positionToMinBy, getType(), AggregationFunction.AggregationType.MINBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,element,with,the,minimum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,minimum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,min,by,the,field,position,in,the,data,points,to,minimize,this,is,applicable,to,tuple,types,scala,case,classes,and,primitive,types,which,is,considered,as,having,one,field,param,first,if,true,then,the,operator,return,the,first,element,with,the,minimal,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,by,int,position,to,min,by,boolean,first,return,aggregate,new,comparable,aggregator,t,position,to,min,by,get,type,aggregation,function,aggregation,type,minby,first,get,execution,config
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction);1520351570;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				keyedProcessFunction,_				KeyedProcessFunction.class,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(keyedProcessFunction, outType)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,keyed,process,function,keyed,process,function,class,1,2,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,keyed,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction);1531422206;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				keyedProcessFunction,_				KeyedProcessFunction.class,_				1,_				2,_				TypeExtractor.NO_INDEX,_				TypeExtractor.NO_INDEX,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(keyedProcessFunction, outType)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,keyed,process,function,keyed,process,function,class,1,2,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,keyed,process,function,out,type
KeyedStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction);1532066767;Applies the given {@link KeyedProcessFunction} on the input stream, thereby creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements. Contrary to the {@link DataStream#flatMap(FlatMapFunction)}_function, this function can also query the time and set timers. When reacting to the firing_of set timers the function can directly emit elements and/or register yet more timers.__@param keyedProcessFunction The {@link KeyedProcessFunction} that is called for each element in the stream.__@param <R> The type of elements emitted by the {@code KeyedProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(KeyedProcessFunction<KEY, T, R> keyedProcessFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				keyedProcessFunction,_				KeyedProcessFunction.class,_				1,_				2,_				TypeExtractor.NO_INDEX,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(keyedProcessFunction, outType)__	};applies,the,given,link,keyed,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,contrary,to,the,link,data,stream,flat,map,flat,map,function,function,this,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,directly,emit,elements,and,or,register,yet,more,timers,param,keyed,process,function,the,link,keyed,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,keyed,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,keyed,process,function,key,t,r,keyed,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,keyed,process,function,keyed,process,function,class,1,2,type,extractor,get,type,utils,get,call,location,name,true,return,process,keyed,process,function,out,type
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1477069385;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(keyType.createSerializer(getExecutionConfig()), clean(flatMapper))___		return transform("Flat Map", outType, operator)___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,key,type,create,serializer,get,execution,config,clean,flat,mapper,return,transform,flat,map,out,type,operator
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1478532357;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		StreamTimelyFlatMap<KEY, T, R> operator =_				new StreamTimelyFlatMap<>(keyType.createSerializer(getExecutionConfig()), clean(flatMapper))___		return transform("Flat Map", outType, operator)___	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,stream,timely,flat,map,key,t,r,operator,new,stream,timely,flat,map,key,type,create,serializer,get,execution,config,clean,flat,mapper,return,transform,flat,map,out,type,operator
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1478532357;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return flatMap(flatMapper, outType)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,return,flat,map,flat,mapper,out,type
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1478532357;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return flatMap(flatMapper, outType)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,return,flat,map,flat,mapper,out,type
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1480022562;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return flatMap(flatMapper, outType)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,return,flat,map,flat,mapper,out,type
KeyedStream -> public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper);1480022575;Applies the given {@link TimelyFlatMapFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the stream and can produce_zero or more output. The function can also query the time and set timers. When_reacting to the firing of set timers the function can emit yet more elements.__<p>A {@link org.apache.flink.streaming.api.functions.RichTimelyFlatMapFunction}_can be used to gain access to features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper The {@link TimelyFlatMapFunction} that is called for each element_in the stream.__@param <R> The of elements emitted by the {@code TimelyFlatMapFunction}.__@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(TimelyFlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				flatMapper,_				TimelyFlatMapFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return flatMap(flatMapper, outType)__	};applies,the,given,link,timely,flat,map,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,stream,and,can,produce,zero,or,more,output,the,function,can,also,query,the,time,and,set,timers,when,reacting,to,the,firing,of,set,timers,the,function,can,emit,yet,more,elements,p,a,link,org,apache,flink,streaming,api,functions,rich,timely,flat,map,function,can,be,used,to,gain,access,to,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,link,timely,flat,map,function,that,is,called,for,each,element,in,the,stream,param,r,the,of,elements,emitted,by,the,code,timely,flat,map,function,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,timely,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,unary,operator,return,type,flat,mapper,timely,flat,map,function,class,false,true,get,type,utils,get,call,location,name,true,return,flat,map,flat,mapper,out,type
KeyedStream -> IntervalJoined -> @PublicEvolving 		public IntervalJoined<IN1, IN2, KEY> upperBoundExclusive();1531422206;Set the upper bound to be exclusive.;@PublicEvolving_		public IntervalJoined<IN1, IN2, KEY> upperBoundExclusive() {_			this.upperBoundInclusive = false__			return this__		};set,the,upper,bound,to,be,exclusive;public,evolving,public,interval,joined,in1,in2,key,upper,bound,exclusive,this,upper,bound,inclusive,false,return,this
KeyedStream -> IntervalJoined -> @PublicEvolving 		public IntervalJoined<IN1, IN2, KEY> upperBoundExclusive();1532066767;Set the upper bound to be exclusive.;@PublicEvolving_		public IntervalJoined<IN1, IN2, KEY> upperBoundExclusive() {_			this.upperBoundInclusive = false__			return this__		};set,the,upper,bound,to,be,exclusive;public,evolving,public,interval,joined,in1,in2,key,upper,bound,exclusive,this,upper,bound,inclusive,false,return,this
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1445418103;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1453742891;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1454679829;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1455101486;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1455703064;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first);1456774151;Applies an aggregation that that gives the current element with the_maximum value at the given position by the given key. An independent_aggregate is kept per key. If more elements have the maximum value at the_given position, the operator returns either the first or last one,_depending on the parameter set.__@param positionToMaxBy_The position in the data point to maximize._@param first_If true, then the operator return the first element with the_maximum value, otherwise returns the last_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(int positionToMaxBy, boolean first) {_		return aggregate(new ComparableAggregator<>(positionToMaxBy, getType(), AggregationFunction.AggregationType.MAXBY, first,_				getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,element,with,the,maximum,value,at,the,given,position,by,the,given,key,an,independent,aggregate,is,kept,per,key,if,more,elements,have,the,maximum,value,at,the,given,position,the,operator,returns,either,the,first,or,last,one,depending,on,the,parameter,set,param,position,to,max,by,the,position,in,the,data,point,to,maximize,param,first,if,true,then,the,operator,return,the,first,element,with,the,maximum,value,otherwise,returns,the,last,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,int,position,to,max,by,boolean,first,return,aggregate,new,comparable,aggregator,position,to,max,by,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1456778239;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1470753741;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1472663071;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1472663401;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1477069385;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1478532357;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1478532357;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1478532357;Applies an aggregation that that gives the current minimum of the pojo_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,minimum,of,the,pojo,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1480022562;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore, an array index can also be specified in case of an array of_a primitive or basic type_ or "0" or "*" can be specified in case of a_basic type (which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,an,array,index,can,also,be,specified,in,case,of,an,array,of,a,primitive,or,basic,type,or,0,or,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1480022575;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1480354709;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1484303457;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1484911938;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1485269495;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1488799576;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1488799576;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1489165080;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1493195810;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1494363409;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1495484544;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1496911361;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1497693649;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1499314317;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1508312416;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1518197017;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1520351570;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1531422206;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T> min(String field);1532066767;Applies an aggregation that gives the current minimum of the_data stream at the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}'s underlying type. A dot can be used to drill down into_objects, as in {@code "field1.fieldxy" }.__@param field_In case of a POJO, Scala case class, or Tuple type, the_name of the (public) field on which to perform the aggregation._Additionally, a dot can be used to drill down into nested_objects, as in {@code "field1.fieldxy" }._Furthermore "*" can be specified in case of a basic type_(which is considered as having only one field)._@return The transformed DataStream.;public SingleOutputStreamOperator<T> min(String field) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MIN,_				false, getExecutionConfig()))__	};applies,an,aggregation,that,gives,the,current,minimum,of,the,data,stream,at,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,fieldxy,param,field,in,case,of,a,pojo,scala,case,class,or,tuple,type,the,name,of,the,public,field,on,which,to,perform,the,aggregation,additionally,a,dot,can,be,used,to,drill,down,into,nested,objects,as,in,code,field1,fieldxy,furthermore,can,be,specified,in,case,of,a,basic,type,which,is,considered,as,having,only,one,field,return,the,transformed,data,stream;public,single,output,stream,operator,t,min,string,field,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,min,false,get,execution,config
KeyedStream -> IntervalJoined -> @PublicEvolving 		public IntervalJoined<IN1, IN2, KEY> lowerBoundExclusive();1531422206;Set the lower bound to be exclusive.;@PublicEvolving_		public IntervalJoined<IN1, IN2, KEY> lowerBoundExclusive() {_			this.lowerBoundInclusive = false__			return this__		};set,the,lower,bound,to,be,exclusive;public,evolving,public,interval,joined,in1,in2,key,lower,bound,exclusive,this,lower,bound,inclusive,false,return,this
KeyedStream -> IntervalJoined -> @PublicEvolving 		public IntervalJoined<IN1, IN2, KEY> lowerBoundExclusive();1532066767;Set the lower bound to be exclusive.;@PublicEvolving_		public IntervalJoined<IN1, IN2, KEY> lowerBoundExclusive() {_			this.lowerBoundInclusive = false__			return this__		};set,the,lower,bound,to,be,exclusive;public,evolving,public,interval,joined,in1,in2,key,lower,bound,exclusive,this,lower,bound,inclusive,false,return,this
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1489165080;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}_			_			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))_	_				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}_			_			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))_	_				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1493195810;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1494363409;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1495484544;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1496911361;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1497693649;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1499314317;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1508312416;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1518197017;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1520351570;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1531422206;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType);1532066767;Validates that a given type of element (as encoded by the provided {@link TypeInformation}) can be_used as a key in the {@code DataStream.keyBy()} operation. This is done by searching depth-first the_key type and checking if each of the composite types satisfies the required conditions_(see {@link #validateKeyTypeIsHashable(TypeInformation)}).__@param keyType The {@link TypeInformation} of the key.;private TypeInformation<KEY> validateKeyType(TypeInformation<KEY> keyType) {_		Stack<TypeInformation<?>> stack = new Stack<>()__		stack.push(keyType)___		List<TypeInformation<?>> unsupportedTypes = new ArrayList<>()___		while (!stack.isEmpty()) {_			TypeInformation<?> typeInfo = stack.pop()___			if (!validateKeyTypeIsHashable(typeInfo)) {_				unsupportedTypes.add(typeInfo)__			}__			if (typeInfo instanceof TupleTypeInfoBase) {_				for (int i = 0_ i < typeInfo.getArity()_ i++) {_					stack.push(((TupleTypeInfoBase) typeInfo).getTypeAt(i))__				}_			}_		}__		if (!unsupportedTypes.isEmpty()) {_			throw new InvalidProgramException("Type " + keyType + " cannot be used as key. Contained " +_					"UNSUPPORTED key types: " + StringUtils.join(unsupportedTypes, ", ") + ". Look " +_					"at the keyBy() documentation for the conditions a type has to satisfy in order to be " +_					"eligible for a key.")__		}__		return keyType__	};validates,that,a,given,type,of,element,as,encoded,by,the,provided,link,type,information,can,be,used,as,a,key,in,the,code,data,stream,key,by,operation,this,is,done,by,searching,depth,first,the,key,type,and,checking,if,each,of,the,composite,types,satisfies,the,required,conditions,see,link,validate,key,type,is,hashable,type,information,param,key,type,the,link,type,information,of,the,key;private,type,information,key,validate,key,type,type,information,key,key,type,stack,type,information,stack,new,stack,stack,push,key,type,list,type,information,unsupported,types,new,array,list,while,stack,is,empty,type,information,type,info,stack,pop,if,validate,key,type,is,hashable,type,info,unsupported,types,add,type,info,if,type,info,instanceof,tuple,type,info,base,for,int,i,0,i,type,info,get,arity,i,stack,push,tuple,type,info,base,type,info,get,type,at,i,if,unsupported,types,is,empty,throw,new,invalid,program,exception,type,key,type,cannot,be,used,as,key,contained,unsupported,key,types,string,utils,join,unsupported,types,look,at,the,key,by,documentation,for,the,conditions,a,type,has,to,satisfy,in,order,to,be,eligible,for,a,key,return,key,type
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1445418103;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1453742891;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1454679829;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1455101486;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1455703064;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1456774151;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1456778239;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1470753741;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1472663071;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1472663401;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1477069385;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1478532357;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1478532357;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1478532357;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1480022562;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1480022575;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1480354709;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1484303457;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1484911938;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1485269495;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1488799576;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1488799576;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1489165080;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1493195810;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1493195810;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1493195810;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1493195810;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1494363409;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1495484544;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1496911361;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1497693649;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1499314317;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1508312416;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1518197017;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1520351570;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1531422206;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public WindowedStream<T, KEY, GlobalWindow> countWindow(long size);1532066767;Windows this {@code KeyedStream} into tumbling count windows.__@param size The size of the windows in number of elements.;public WindowedStream<T, KEY, GlobalWindow> countWindow(long size) {_		return window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,keyed,stream,into,tumbling,count,windows,param,size,the,size,of,the,windows,in,number,of,elements;public,windowed,stream,t,key,global,window,count,window,long,size,return,window,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1445418103;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1453742891;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1454679829;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1455101486;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1455703064;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> sum(int positionToSum);1456774151;Applies an aggregation that gives a rolling sum of the data stream at the_given position grouped by the given key. An independent aggregate is kept_per key.__@param positionToSum_The position in the data point to sum_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> sum(int positionToSum) {_		return aggregate(new SumAggregator<>(positionToSum, getType(), getExecutionConfig()))__	};applies,an,aggregation,that,gives,a,rolling,sum,of,the,data,stream,at,the,given,position,grouped,by,the,given,key,an,independent,aggregate,is,kept,per,key,param,position,to,sum,the,position,in,the,data,point,to,sum,return,the,transformed,data,stream;public,single,output,stream,operator,t,sum,int,position,to,sum,return,aggregate,new,sum,aggregator,position,to,sum,get,type,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1445418103;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1453742891;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1454679829;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1455101486;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1455703064;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
KeyedStream -> public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first);1456774151;Applies an aggregation that that gives the current maximum element of the_pojo data stream by the given field expression by the given key. An_independent aggregate is kept per key. A field expression is either the_name of a public field or a getter method with parentheses of the_{@link DataStream}S underlying type. A dot can be used to drill down into_objects, as in {@code "field1.getInnerField2()" }.__@param field_The field expression based on which the aggregation will be_applied._@param first_If True then in case of field equality the first object will_be returned_@return The transformed DataStream.;public SingleOutputStreamOperator<T, ?> maxBy(String field, boolean first) {_		return aggregate(new ComparableAggregator<>(field, getType(), AggregationFunction.AggregationType.MAXBY,_				first, getExecutionConfig()))__	};applies,an,aggregation,that,that,gives,the,current,maximum,element,of,the,pojo,data,stream,by,the,given,field,expression,by,the,given,key,an,independent,aggregate,is,kept,per,key,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,field,the,field,expression,based,on,which,the,aggregation,will,be,applied,param,first,if,true,then,in,case,of,field,equality,the,first,object,will,be,returned,return,the,transformed,data,stream;public,single,output,stream,operator,t,max,by,string,field,boolean,first,return,aggregate,new,comparable,aggregator,field,get,type,aggregation,function,aggregation,type,maxby,first,get,execution,config
