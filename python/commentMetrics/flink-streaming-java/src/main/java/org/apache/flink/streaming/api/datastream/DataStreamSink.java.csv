# id;timestamp;commentText;codeText;commentWords;codeWords
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1485181339;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1488304750;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1489671807;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID._<p/>_<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions)._<p/>_<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>_A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator._<p/>__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,p,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> setUidHash(String uidHash);1493195810;Sets an user provided hash for this operator. This will be used AS IS the create the JobVertexID.__<p>The user provided hash is an alternative to the generated hashes, that is considered when identifying an_operator through the default hash mechanics fails (e.g. because of changes between Flink versions).__<p><strong>Important</strong>: this should be used as a workaround or for trouble shooting. The provided hash_needs to be unique per transformation and job. Otherwise, job submission will fail. Furthermore, you cannot_assign user-specified hash to intermediate nodes in an operator chain and trying so will let your job fail.__<p>A use case for this is in migration between Flink versions or changing the jobs in a way that changes the_automatically generated hashes. In this case, providing the previous hashes directly through this method (e.g._obtained from old logs) can help to reestablish a lost mapping from states to their target operator.__@param uidHash The user provided hash for this operator. This will become the JobVertexID, which is shown in the_logs and web ui._@return The operator with the user provided hash.;@PublicEvolving_	public DataStreamSink<T> setUidHash(String uidHash) {_		transformation.setUidHash(uidHash)__		return this__	};sets,an,user,provided,hash,for,this,operator,this,will,be,used,as,is,the,create,the,job,vertex,id,p,the,user,provided,hash,is,an,alternative,to,the,generated,hashes,that,is,considered,when,identifying,an,operator,through,the,default,hash,mechanics,fails,e,g,because,of,changes,between,flink,versions,p,strong,important,strong,this,should,be,used,as,a,workaround,or,for,trouble,shooting,the,provided,hash,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,furthermore,you,cannot,assign,user,specified,hash,to,intermediate,nodes,in,an,operator,chain,and,trying,so,will,let,your,job,fail,p,a,use,case,for,this,is,in,migration,between,flink,versions,or,changing,the,jobs,in,a,way,that,changes,the,automatically,generated,hashes,in,this,case,providing,the,previous,hashes,directly,through,this,method,e,g,obtained,from,old,logs,can,help,to,reestablish,a,lost,mapping,from,states,to,their,target,operator,param,uid,hash,the,user,provided,hash,for,this,operator,this,will,become,the,job,vertex,id,which,is,shown,in,the,logs,and,web,ui,return,the,operator,with,the,user,provided,hash;public,evolving,public,data,stream,sink,t,set,uid,hash,string,uid,hash,transformation,set,uid,hash,uid,hash,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1445418103;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1452526242;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1454679829;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1455101486;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1456247173;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1485181339;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1488304750;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1488304750;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1489671807;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1493195810;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> name(String name);1493195810;Sets the name of this sink. This name is_used by the visualization and logging during runtime.__@return The named sink.;public DataStreamSink<T> name(String name) {_		transformation.setName(name)__		return this__	};sets,the,name,of,this,sink,this,name,is,used,by,the,visualization,and,logging,during,runtime,return,the,named,sink;public,data,stream,sink,t,name,string,name,transformation,set,name,name,return,this
DataStreamSink -> public DataStreamSink<T> disableChaining();1445418103;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> public DataStreamSink<T> disableChaining();1452526242;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec resources);1489671807;Sets the resources for this sink, the minimum and preferred resources are the same by default.__@param resources The resources for this sink._@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,sink,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec resources);1493195810;Sets the resources for this sink, the minimum and preferred resources are the same by default.__@param resources The resources for this sink._@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,sink,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec resources);1493195810;Sets the resources for this sink, the minimum and preferred resources are the same by default.__@param resources The resources for this sink._@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec resources) {_		Preconditions.checkNotNull(resources, "The resources must be not null.")__		Preconditions.checkArgument(resources.isValid(), "The values in resources must be not less than 0.")___		transformation.setResources(resources, resources)___		return this__	};sets,the,resources,for,this,sink,the,minimum,and,preferred,resources,are,the,same,by,default,param,resources,the,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,resources,preconditions,check,not,null,resources,the,resources,must,be,not,null,preconditions,check,argument,resources,is,valid,the,values,in,resources,must,be,not,less,than,0,transformation,set,resources,resources,resources,return,this
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1454679829;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1455101486;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1456247173;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1485181339;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1488304750;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1488304750;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1489671807;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1493195810;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> @Internal 	public SinkTransformation<T> getTransformation();1493195810;Returns the transformation that contains the actual sink operator of this sink.;@Internal_	public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;internal,public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> public SinkTransformation<T> getTransformation();1445418103;Returns the transformation that contains the actual sink operator of this sink.;public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> public SinkTransformation<T> getTransformation();1452526242;Returns the transformation that contains the actual sink operator of this sink.;public SinkTransformation<T> getTransformation() {_		return transformation__	};returns,the,transformation,that,contains,the,actual,sink,operator,of,this,sink;public,sink,transformation,t,get,transformation,return,transformation
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1445418103;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1452526242;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1454679829;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1455101486;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1456247173;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1485181339;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1488304750;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1489671807;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1493195810;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> public DataStreamSink<T> setParallelism(int parallelism);1493195810;Sets the parallelism for this sink. The degree must be higher than zero.__@param parallelism The parallelism for this sink._@return The sink with set parallelism.;public DataStreamSink<T> setParallelism(int parallelism) {_		transformation.setParallelism(parallelism)__		return this__	};sets,the,parallelism,for,this,sink,the,degree,must,be,higher,than,zero,param,parallelism,the,parallelism,for,this,sink,return,the,sink,with,set,parallelism;public,data,stream,sink,t,set,parallelism,int,parallelism,transformation,set,parallelism,parallelism,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1455101486;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1456247173;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1485181339;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1488304750;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1488304750;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1489671807;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1493195810;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> uid(String uid);1493195810;Sets an ID for this operator.__<p>The specified ID is used to assign the same operator ID across job_submissions (for example when starting a job from a savepoint).__<p><strong>Important</strong>: this ID needs to be unique per_transformation and job. Otherwise, job submission will fail.__@param uid The unique user-specified ID of this transformation._@return The operator with the specified ID.;@PublicEvolving_	public DataStreamSink<T> uid(String uid) {_		transformation.setUid(uid)__		return this__	};sets,an,id,for,this,operator,p,the,specified,id,is,used,to,assign,the,same,operator,id,across,job,submissions,for,example,when,starting,a,job,from,a,savepoint,p,strong,important,strong,this,id,needs,to,be,unique,per,transformation,and,job,otherwise,job,submission,will,fail,param,uid,the,unique,user,specified,id,of,this,transformation,return,the,operator,with,the,specified,id;public,evolving,public,data,stream,sink,t,uid,string,uid,transformation,set,uid,uid,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1456247173;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1485181339;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1488304750;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1489671807;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup);1493195810;Sets the slot sharing group of this operation. Parallel instances of_operations that are in the same slot sharing group will be co-located in the same_TaskManager slot, if possible.__<p>Operations inherit the slot sharing group of input operations if all input operations_are in the same slot sharing group and no slot sharing group was explicitly specified.__<p>Initially an operation is in the default slot sharing group. An operation can be put into_the default group explicitly by setting the slot sharing group to {@code "default"}.__@param slotSharingGroup The slot sharing group name.;@PublicEvolving_	public DataStreamSink<T> slotSharingGroup(String slotSharingGroup) {_		transformation.setSlotSharingGroup(slotSharingGroup)__		return this__	};sets,the,slot,sharing,group,of,this,operation,parallel,instances,of,operations,that,are,in,the,same,slot,sharing,group,will,be,co,located,in,the,same,task,manager,slot,if,possible,p,operations,inherit,the,slot,sharing,group,of,input,operations,if,all,input,operations,are,in,the,same,slot,sharing,group,and,no,slot,sharing,group,was,explicitly,specified,p,initially,an,operation,is,in,the,default,slot,sharing,group,an,operation,can,be,put,into,the,default,group,explicitly,by,setting,the,slot,sharing,group,to,code,default,param,slot,sharing,group,the,slot,sharing,group,name;public,evolving,public,data,stream,sink,t,slot,sharing,group,string,slot,sharing,group,transformation,set,slot,sharing,group,slot,sharing,group,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1455101486;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1456247173;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1485181339;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1488304750;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1488304750;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1489671807;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>_Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1493195810;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> @PublicEvolving 	public DataStreamSink<T> disableChaining();1493195810;Turns off chaining for this operator so thread co-location will not be_used as an optimization.__<p>Chaining can be turned off for the whole_job by {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#disableOperatorChaining()}_however it is not advised for performance considerations.__@return The sink with chaining disabled;@PublicEvolving_	public DataStreamSink<T> disableChaining() {_		this.transformation.setChainingStrategy(ChainingStrategy.NEVER)__		return this__	};turns,off,chaining,for,this,operator,so,thread,co,location,will,not,be,used,as,an,optimization,p,chaining,can,be,turned,off,for,the,whole,job,by,link,org,apache,flink,streaming,api,environment,stream,execution,environment,disable,operator,chaining,however,it,is,not,advised,for,performance,considerations,return,the,sink,with,chaining,disabled;public,evolving,public,data,stream,sink,t,disable,chaining,this,transformation,set,chaining,strategy,chaining,strategy,never,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for this sink, and the lower and upper resource limits will_be considered in resource resize feature for future plan.__@param minResources The minimum resources for this sink._@param preferredResources The preferred resources for this sink_@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,sink,param,preferred,resources,the,preferred,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this sink, and the lower and upper resource limits will_be considered in resource resize feature for future plan.__@param minResources The minimum resources for this sink._@param preferredResources The preferred resources for this sink_@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,sink,param,preferred,resources,the,preferred,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
DataStreamSink -> private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493195810;Sets the minimum and preferred resources for this sink, and the lower and upper resource limits will_be considered in resource resize feature for future plan.__@param minResources The minimum resources for this sink._@param preferredResources The preferred resources for this sink_@return The sink with set minimum and preferred resources.;private DataStreamSink<T> setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		Preconditions.checkNotNull(minResources, "The min resources must be not null.")__		Preconditions.checkNotNull(preferredResources, "The preferred resources must be not null.")__		Preconditions.checkArgument(minResources.isValid() && preferredResources.isValid() && minResources.lessThanOrEqual(preferredResources),_				"The values in resources must be not less than 0 and the preferred resources must be greater than the min resources.")___		transformation.setResources(minResources, preferredResources)___		return this__	};sets,the,minimum,and,preferred,resources,for,this,sink,and,the,lower,and,upper,resource,limits,will,be,considered,in,resource,resize,feature,for,future,plan,param,min,resources,the,minimum,resources,for,this,sink,param,preferred,resources,the,preferred,resources,for,this,sink,return,the,sink,with,set,minimum,and,preferred,resources;private,data,stream,sink,t,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,preconditions,check,not,null,min,resources,the,min,resources,must,be,not,null,preconditions,check,not,null,preferred,resources,the,preferred,resources,must,be,not,null,preconditions,check,argument,min,resources,is,valid,preferred,resources,is,valid,min,resources,less,than,or,equal,preferred,resources,the,values,in,resources,must,be,not,less,than,0,and,the,preferred,resources,must,be,greater,than,the,min,resources,transformation,set,resources,min,resources,preferred,resources,return,this
