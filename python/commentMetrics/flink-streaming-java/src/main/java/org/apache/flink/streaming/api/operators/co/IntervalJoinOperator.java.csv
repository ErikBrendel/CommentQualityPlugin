# id;timestamp;commentText;codeText;commentWords;codeWords
IntervalJoinOperator -> @Override 	public void processElement2(StreamRecord<T2> record) throws Exception;1531422206;Process a {@link StreamRecord} from the right stream. Whenever a {@link StreamRecord}_arrives at the right stream, it will get added to the right buffer. Possible join candidates_for that element will be looked up from the left buffer and if the pair lies within the user_defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an exception during state access;@Override_	public void processElement2(StreamRecord<T2> record) throws Exception {_		processElement(record, rightBuffer, leftBuffer, -upperBound, -lowerBound, false)__	};process,a,link,stream,record,from,the,right,stream,whenever,a,link,stream,record,arrives,at,the,right,stream,it,will,get,added,to,the,right,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,left,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element2,stream,record,t2,record,throws,exception,process,element,record,right,buffer,left,buffer,upper,bound,lower,bound,false
IntervalJoinOperator -> @Override 	public void processElement2(StreamRecord<T2> record) throws Exception;1532889296;Process a {@link StreamRecord} from the right stream. Whenever a {@link StreamRecord}_arrives at the right stream, it will get added to the right buffer. Possible join candidates_for that element will be looked up from the left buffer and if the pair lies within the user_defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an exception during state access;@Override_	public void processElement2(StreamRecord<T2> record) throws Exception {_		processElement(record, rightBuffer, leftBuffer, -upperBound, -lowerBound, false)__	};process,a,link,stream,record,from,the,right,stream,whenever,a,link,stream,record,arrives,at,the,right,stream,it,will,get,added,to,the,right,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,left,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element2,stream,record,t2,record,throws,exception,process,element,record,right,buffer,left,buffer,upper,bound,lower,bound,false
IntervalJoinOperator -> @Override 	public void processElement2(StreamRecord<T2> record) throws Exception;1548860008;Process a {@link StreamRecord} from the right stream. Whenever a {@link StreamRecord}_arrives at the right stream, it will get added to the right buffer. Possible join candidates_for that element will be looked up from the left buffer and if the pair lies within the user_defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an exception during state access;@Override_	public void processElement2(StreamRecord<T2> record) throws Exception {_		processElement(record, rightBuffer, leftBuffer, -upperBound, -lowerBound, false)__	};process,a,link,stream,record,from,the,right,stream,whenever,a,link,stream,record,arrives,at,the,right,stream,it,will,get,added,to,the,right,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,left,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element2,stream,record,t2,record,throws,exception,process,element,record,right,buffer,left,buffer,upper,bound,lower,bound,false
IntervalJoinOperator -> @Override 	public void processElement2(StreamRecord<T2> record) throws Exception;1550652777;Process a {@link StreamRecord} from the right stream. Whenever a {@link StreamRecord}_arrives at the right stream, it will get added to the right buffer. Possible join candidates_for that element will be looked up from the left buffer and if the pair lies within the user_defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an exception during state access;@Override_	public void processElement2(StreamRecord<T2> record) throws Exception {_		processElement(record, rightBuffer, leftBuffer, -upperBound, -lowerBound, false)__	};process,a,link,stream,record,from,the,right,stream,whenever,a,link,stream,record,arrives,at,the,right,stream,it,will,get,added,to,the,right,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,left,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element2,stream,record,t2,record,throws,exception,process,element,record,right,buffer,left,buffer,upper,bound,lower,bound,false
IntervalJoinOperator -> public IntervalJoinOperator( 			long lowerBound, 			long upperBound, 			boolean lowerBoundInclusive, 			boolean upperBoundInclusive, 			TypeSerializer<T1> leftTypeSerializer, 			TypeSerializer<T2> rightTypeSerializer, 			ProcessJoinFunction<T1, T2, OUT> udf);1531422206;Creates a new IntervalJoinOperator.__@param lowerBound          The lower bound for evaluating if elements should be joined_@param upperBound          The upper bound for evaluating if elements should be joined_@param lowerBoundInclusive Whether or not to include elements where the timestamp matches_the lower bound_@param upperBoundInclusive Whether or not to include elements where the timestamp matches_the upper bound_@param udf                 A user-defined {@link ProcessJoinFunction} that gets called_whenever two elements of T1 and T2 are joined;public IntervalJoinOperator(_			long lowerBound,_			long upperBound,_			boolean lowerBoundInclusive,_			boolean upperBoundInclusive,_			TypeSerializer<T1> leftTypeSerializer,_			TypeSerializer<T2> rightTypeSerializer,_			ProcessJoinFunction<T1, T2, OUT> udf) {__		super(Preconditions.checkNotNull(udf))___		Preconditions.checkArgument(lowerBound <= upperBound,_			"lowerBound <= upperBound must be fulfilled")___		_		_		this.lowerBound = (lowerBoundInclusive) ? lowerBound : lowerBound + 1L__		this.upperBound = (upperBoundInclusive) ? upperBound : upperBound - 1L___		this.leftTypeSerializer = Preconditions.checkNotNull(leftTypeSerializer)__		this.rightTypeSerializer = Preconditions.checkNotNull(rightTypeSerializer)__	};creates,a,new,interval,join,operator,param,lower,bound,the,lower,bound,for,evaluating,if,elements,should,be,joined,param,upper,bound,the,upper,bound,for,evaluating,if,elements,should,be,joined,param,lower,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,lower,bound,param,upper,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,upper,bound,param,udf,a,user,defined,link,process,join,function,that,gets,called,whenever,two,elements,of,t1,and,t2,are,joined;public,interval,join,operator,long,lower,bound,long,upper,bound,boolean,lower,bound,inclusive,boolean,upper,bound,inclusive,type,serializer,t1,left,type,serializer,type,serializer,t2,right,type,serializer,process,join,function,t1,t2,out,udf,super,preconditions,check,not,null,udf,preconditions,check,argument,lower,bound,upper,bound,lower,bound,upper,bound,must,be,fulfilled,this,lower,bound,lower,bound,inclusive,lower,bound,lower,bound,1l,this,upper,bound,upper,bound,inclusive,upper,bound,upper,bound,1l,this,left,type,serializer,preconditions,check,not,null,left,type,serializer,this,right,type,serializer,preconditions,check,not,null,right,type,serializer
IntervalJoinOperator -> public IntervalJoinOperator( 			long lowerBound, 			long upperBound, 			boolean lowerBoundInclusive, 			boolean upperBoundInclusive, 			TypeSerializer<T1> leftTypeSerializer, 			TypeSerializer<T2> rightTypeSerializer, 			ProcessJoinFunction<T1, T2, OUT> udf);1532889296;Creates a new IntervalJoinOperator.__@param lowerBound          The lower bound for evaluating if elements should be joined_@param upperBound          The upper bound for evaluating if elements should be joined_@param lowerBoundInclusive Whether or not to include elements where the timestamp matches_the lower bound_@param upperBoundInclusive Whether or not to include elements where the timestamp matches_the upper bound_@param udf                 A user-defined {@link ProcessJoinFunction} that gets called_whenever two elements of T1 and T2 are joined;public IntervalJoinOperator(_			long lowerBound,_			long upperBound,_			boolean lowerBoundInclusive,_			boolean upperBoundInclusive,_			TypeSerializer<T1> leftTypeSerializer,_			TypeSerializer<T2> rightTypeSerializer,_			ProcessJoinFunction<T1, T2, OUT> udf) {__		super(Preconditions.checkNotNull(udf))___		Preconditions.checkArgument(lowerBound <= upperBound,_			"lowerBound <= upperBound must be fulfilled")___		_		_		this.lowerBound = (lowerBoundInclusive) ? lowerBound : lowerBound + 1L__		this.upperBound = (upperBoundInclusive) ? upperBound : upperBound - 1L___		this.leftTypeSerializer = Preconditions.checkNotNull(leftTypeSerializer)__		this.rightTypeSerializer = Preconditions.checkNotNull(rightTypeSerializer)__	};creates,a,new,interval,join,operator,param,lower,bound,the,lower,bound,for,evaluating,if,elements,should,be,joined,param,upper,bound,the,upper,bound,for,evaluating,if,elements,should,be,joined,param,lower,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,lower,bound,param,upper,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,upper,bound,param,udf,a,user,defined,link,process,join,function,that,gets,called,whenever,two,elements,of,t1,and,t2,are,joined;public,interval,join,operator,long,lower,bound,long,upper,bound,boolean,lower,bound,inclusive,boolean,upper,bound,inclusive,type,serializer,t1,left,type,serializer,type,serializer,t2,right,type,serializer,process,join,function,t1,t2,out,udf,super,preconditions,check,not,null,udf,preconditions,check,argument,lower,bound,upper,bound,lower,bound,upper,bound,must,be,fulfilled,this,lower,bound,lower,bound,inclusive,lower,bound,lower,bound,1l,this,upper,bound,upper,bound,inclusive,upper,bound,upper,bound,1l,this,left,type,serializer,preconditions,check,not,null,left,type,serializer,this,right,type,serializer,preconditions,check,not,null,right,type,serializer
IntervalJoinOperator -> public IntervalJoinOperator( 			long lowerBound, 			long upperBound, 			boolean lowerBoundInclusive, 			boolean upperBoundInclusive, 			TypeSerializer<T1> leftTypeSerializer, 			TypeSerializer<T2> rightTypeSerializer, 			ProcessJoinFunction<T1, T2, OUT> udf);1548860008;Creates a new IntervalJoinOperator.__@param lowerBound          The lower bound for evaluating if elements should be joined_@param upperBound          The upper bound for evaluating if elements should be joined_@param lowerBoundInclusive Whether or not to include elements where the timestamp matches_the lower bound_@param upperBoundInclusive Whether or not to include elements where the timestamp matches_the upper bound_@param udf                 A user-defined {@link ProcessJoinFunction} that gets called_whenever two elements of T1 and T2 are joined;public IntervalJoinOperator(_			long lowerBound,_			long upperBound,_			boolean lowerBoundInclusive,_			boolean upperBoundInclusive,_			TypeSerializer<T1> leftTypeSerializer,_			TypeSerializer<T2> rightTypeSerializer,_			ProcessJoinFunction<T1, T2, OUT> udf) {__		super(Preconditions.checkNotNull(udf))___		Preconditions.checkArgument(lowerBound <= upperBound,_			"lowerBound <= upperBound must be fulfilled")___		_		_		this.lowerBound = (lowerBoundInclusive) ? lowerBound : lowerBound + 1L__		this.upperBound = (upperBoundInclusive) ? upperBound : upperBound - 1L___		this.leftTypeSerializer = Preconditions.checkNotNull(leftTypeSerializer)__		this.rightTypeSerializer = Preconditions.checkNotNull(rightTypeSerializer)__	};creates,a,new,interval,join,operator,param,lower,bound,the,lower,bound,for,evaluating,if,elements,should,be,joined,param,upper,bound,the,upper,bound,for,evaluating,if,elements,should,be,joined,param,lower,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,lower,bound,param,upper,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,upper,bound,param,udf,a,user,defined,link,process,join,function,that,gets,called,whenever,two,elements,of,t1,and,t2,are,joined;public,interval,join,operator,long,lower,bound,long,upper,bound,boolean,lower,bound,inclusive,boolean,upper,bound,inclusive,type,serializer,t1,left,type,serializer,type,serializer,t2,right,type,serializer,process,join,function,t1,t2,out,udf,super,preconditions,check,not,null,udf,preconditions,check,argument,lower,bound,upper,bound,lower,bound,upper,bound,must,be,fulfilled,this,lower,bound,lower,bound,inclusive,lower,bound,lower,bound,1l,this,upper,bound,upper,bound,inclusive,upper,bound,upper,bound,1l,this,left,type,serializer,preconditions,check,not,null,left,type,serializer,this,right,type,serializer,preconditions,check,not,null,right,type,serializer
IntervalJoinOperator -> public IntervalJoinOperator( 			long lowerBound, 			long upperBound, 			boolean lowerBoundInclusive, 			boolean upperBoundInclusive, 			TypeSerializer<T1> leftTypeSerializer, 			TypeSerializer<T2> rightTypeSerializer, 			ProcessJoinFunction<T1, T2, OUT> udf);1550652777;Creates a new IntervalJoinOperator.__@param lowerBound          The lower bound for evaluating if elements should be joined_@param upperBound          The upper bound for evaluating if elements should be joined_@param lowerBoundInclusive Whether or not to include elements where the timestamp matches_the lower bound_@param upperBoundInclusive Whether or not to include elements where the timestamp matches_the upper bound_@param udf                 A user-defined {@link ProcessJoinFunction} that gets called_whenever two elements of T1 and T2 are joined;public IntervalJoinOperator(_			long lowerBound,_			long upperBound,_			boolean lowerBoundInclusive,_			boolean upperBoundInclusive,_			TypeSerializer<T1> leftTypeSerializer,_			TypeSerializer<T2> rightTypeSerializer,_			ProcessJoinFunction<T1, T2, OUT> udf) {__		super(Preconditions.checkNotNull(udf))___		Preconditions.checkArgument(lowerBound <= upperBound,_			"lowerBound <= upperBound must be fulfilled")___		_		_		this.lowerBound = (lowerBoundInclusive) ? lowerBound : lowerBound + 1L__		this.upperBound = (upperBoundInclusive) ? upperBound : upperBound - 1L___		this.leftTypeSerializer = Preconditions.checkNotNull(leftTypeSerializer)__		this.rightTypeSerializer = Preconditions.checkNotNull(rightTypeSerializer)__	};creates,a,new,interval,join,operator,param,lower,bound,the,lower,bound,for,evaluating,if,elements,should,be,joined,param,upper,bound,the,upper,bound,for,evaluating,if,elements,should,be,joined,param,lower,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,lower,bound,param,upper,bound,inclusive,whether,or,not,to,include,elements,where,the,timestamp,matches,the,upper,bound,param,udf,a,user,defined,link,process,join,function,that,gets,called,whenever,two,elements,of,t1,and,t2,are,joined;public,interval,join,operator,long,lower,bound,long,upper,bound,boolean,lower,bound,inclusive,boolean,upper,bound,inclusive,type,serializer,t1,left,type,serializer,type,serializer,t2,right,type,serializer,process,join,function,t1,t2,out,udf,super,preconditions,check,not,null,udf,preconditions,check,argument,lower,bound,upper,bound,lower,bound,upper,bound,must,be,fulfilled,this,lower,bound,lower,bound,inclusive,lower,bound,lower,bound,1l,this,upper,bound,upper,bound,inclusive,upper,bound,upper,bound,1l,this,left,type,serializer,preconditions,check,not,null,left,type,serializer,this,right,type,serializer,preconditions,check,not,null,right,type,serializer
IntervalJoinOperator -> @Override 	public void processElement1(StreamRecord<T1> record) throws Exception;1531422206;Process a {@link StreamRecord} from the left stream. Whenever an {@link StreamRecord}_arrives at the left stream, it will get added to the left buffer. Possible join candidates_for that element will be looked up from the right buffer and if the pair lies within the_user defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an Exception during state access;@Override_	public void processElement1(StreamRecord<T1> record) throws Exception {_		processElement(record, leftBuffer, rightBuffer, lowerBound, upperBound, true)__	};process,a,link,stream,record,from,the,left,stream,whenever,an,link,stream,record,arrives,at,the,left,stream,it,will,get,added,to,the,left,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,right,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element1,stream,record,t1,record,throws,exception,process,element,record,left,buffer,right,buffer,lower,bound,upper,bound,true
IntervalJoinOperator -> @Override 	public void processElement1(StreamRecord<T1> record) throws Exception;1532889296;Process a {@link StreamRecord} from the left stream. Whenever an {@link StreamRecord}_arrives at the left stream, it will get added to the left buffer. Possible join candidates_for that element will be looked up from the right buffer and if the pair lies within the_user defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an Exception during state access;@Override_	public void processElement1(StreamRecord<T1> record) throws Exception {_		processElement(record, leftBuffer, rightBuffer, lowerBound, upperBound, true)__	};process,a,link,stream,record,from,the,left,stream,whenever,an,link,stream,record,arrives,at,the,left,stream,it,will,get,added,to,the,left,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,right,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element1,stream,record,t1,record,throws,exception,process,element,record,left,buffer,right,buffer,lower,bound,upper,bound,true
IntervalJoinOperator -> @Override 	public void processElement1(StreamRecord<T1> record) throws Exception;1548860008;Process a {@link StreamRecord} from the left stream. Whenever an {@link StreamRecord}_arrives at the left stream, it will get added to the left buffer. Possible join candidates_for that element will be looked up from the right buffer and if the pair lies within the_user defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an Exception during state access;@Override_	public void processElement1(StreamRecord<T1> record) throws Exception {_		processElement(record, leftBuffer, rightBuffer, lowerBound, upperBound, true)__	};process,a,link,stream,record,from,the,left,stream,whenever,an,link,stream,record,arrives,at,the,left,stream,it,will,get,added,to,the,left,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,right,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element1,stream,record,t1,record,throws,exception,process,element,record,left,buffer,right,buffer,lower,bound,upper,bound,true
IntervalJoinOperator -> @Override 	public void processElement1(StreamRecord<T1> record) throws Exception;1550652777;Process a {@link StreamRecord} from the left stream. Whenever an {@link StreamRecord}_arrives at the left stream, it will get added to the left buffer. Possible join candidates_for that element will be looked up from the right buffer and if the pair lies within the_user defined boundaries, it gets passed to the {@link ProcessJoinFunction}.__@param record An incoming record to be joined_@throws Exception Can throw an Exception during state access;@Override_	public void processElement1(StreamRecord<T1> record) throws Exception {_		processElement(record, leftBuffer, rightBuffer, lowerBound, upperBound, true)__	};process,a,link,stream,record,from,the,left,stream,whenever,an,link,stream,record,arrives,at,the,left,stream,it,will,get,added,to,the,left,buffer,possible,join,candidates,for,that,element,will,be,looked,up,from,the,right,buffer,and,if,the,pair,lies,within,the,user,defined,boundaries,it,gets,passed,to,the,link,process,join,function,param,record,an,incoming,record,to,be,joined,throws,exception,can,throw,an,exception,during,state,access;override,public,void,process,element1,stream,record,t1,record,throws,exception,process,element,record,left,buffer,right,buffer,lower,bound,upper,bound,true
