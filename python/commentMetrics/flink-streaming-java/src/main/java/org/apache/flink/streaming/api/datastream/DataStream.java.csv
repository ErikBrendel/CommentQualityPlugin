# id;timestamp;commentText;codeText;commentWords;codeWords
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455101486;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455634373;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455640938;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455703064;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455704943;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455718153;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1455718153;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1456347641;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1456508941;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1456774151;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1456778239;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1461851300;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1465991918;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1466613129;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1488304750;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1488304750;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1488799576;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1489165080;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1493195810;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1495484544;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1496911361;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1497693649;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1509723634;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1516028607;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1518008865;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1518008932;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1518196458;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1518989075;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1520268868;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1523971392;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1532066767;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1534492343;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1547196539;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@PublicEvolving_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,evolving,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1445418103;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1446112342;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1448637843;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1449051578;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1450713543;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1453742891;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1454428544;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1454679829;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1454933011;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1454933011;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455101486;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<T, R>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,t,r,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455634373;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455640938;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455703064;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455704943;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455718153;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1455718153;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1456347641;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1456508941;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper);1456774151;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1445418103;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1446112342;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1448637843;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1449051578;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1450713543;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1453742891;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1454428544;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1454679829;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1454933011;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1454933011;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455101486;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455634373;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455640938;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455703064;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455704943;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455718153;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1455718153;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1456347641;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1456508941;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1456774151;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1456778239;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1461851300;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1465991918;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1466613129;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1488304750;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1488304750;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1488799576;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1489165080;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1495484544;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1496911361;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1497693649;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1509723634;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1516028607;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1518008865;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1518008932;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1518196458;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1518989075;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1520268868;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1523971392;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1532066767;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1534492343;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream);1547196539;Creates a join operation. See {@link CoGroupedStreams} for an example of how the keys_and window can be specified.;public <T2> CoGroupedStreams<T, T2> coGroup(DataStream<T2> otherStream) {_		return new CoGroupedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,co,grouped,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,co,grouped,streams,t,t2,co,group,data,stream,t2,other,stream,return,new,co,grouped,streams,this,other,stream
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1445418103;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br/>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1446112342;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1448637843;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1449051578;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1450713543;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1453742891;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1454428544;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1453742891;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1454428544;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1454679829;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1454933011;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1454933011;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455101486;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455634373;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455640938;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455703064;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455704943;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455718153;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1455718153;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1456347641;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1456508941;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1456774151;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1456778239;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1461851300;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1465991918;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1466613129;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1488304750;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1488304750;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1488799576;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1489165080;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1493195810;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1493195810;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1493195810;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1493195810;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1495484544;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1496911361;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1497693649;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1509723634;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1516028607;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1518008865;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1518008932;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1518196458;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1518989075;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1520268868;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1523971392;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1532066767;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1534492343;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide);1547196539;Windows this {@code DataStream} into sliding time windows.__<p>This is a shortcut for either {@code .window(SlidingEventTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size, Time slide) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(SlidingProcessingTimeWindows.of(size, slide))__		} else {_			return windowAll(SlidingEventTimeWindows.of(size, slide))__		}_	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,event,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,time,slide,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,sliding,processing,time,windows,of,size,slide,else,return,window,all,sliding,event,time,windows,of,size,slide
DataStream -> public DataStreamSink<T> writeAsCsv(String path, long millis);1450713543;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, long millis);1453742891;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, long millis);1454428544;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1450713543;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1453742891;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1454428544;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455634373;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455640938;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455703064;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455704943;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455718153;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1455718153;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1456347641;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1456508941;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1456774151;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1456778239;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1461851300;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1465991918;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1466613129;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1488304750;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1488304750;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1488799576;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1489165080;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1493195810;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1493195810;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1493195810;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1493195810;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1495484544;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1496911361;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1497693649;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1509723634;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1516028607;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1518008865;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1518008932;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1518196458;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1518989075;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1520268868;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1523971392;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1532066767;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1534492343;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> @SuppressWarnings("unchecked") 	@PublicEvolving 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			String rowDelimiter, 			String fieldDelimiter);1547196539;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@PublicEvolving_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return writeUsingOutputFormat((OutputFormat<T>) of)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,evolving,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,using,output,format,output,format,t,of
DataStream -> public DataStream<T> shuffle();1445418103;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1446112342;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1448637843;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1449051578;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1450713543;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1453742891;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStream<T> shuffle();1454428544;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1456778239;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1461851300;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1465991918;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1466613129;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1488304750;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1488304750;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1488799576;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1489165080;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1493195810;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1493195810;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1493195810;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1493195810;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1495484544;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1496911361;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1497693649;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1509723634;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1516028607;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1518008865;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1518008932;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1518196458;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1518989075;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1520268868;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1523971392;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1532066767;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1534492343;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper);1547196539;Applies a Map transformation on a {@link DataStream}. The transformation_calls a {@link MapFunction} for each element of the DataStream. Each_MapFunction call returns exactly one element. The user can also extend_{@link RichMapFunction} to gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param mapper_The MapFunction that is called for each element of the_DataStream._@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> map(MapFunction<T, R> mapper) {__		TypeInformation<R> outType = TypeExtractor.getMapReturnTypes(clean(mapper), getType(),_				Utils.getCallLocationName(), true)___		return transform("Map", outType, new StreamMap<>(clean(mapper)))__	};applies,a,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,map,function,for,each,element,of,the,data,stream,each,map,function,call,returns,exactly,one,element,the,user,can,also,extend,link,rich,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,mapper,the,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,map,map,function,t,r,mapper,type,information,r,out,type,type,extractor,get,map,return,types,clean,mapper,get,type,utils,get,call,location,name,true,return,transform,map,out,type,new,stream,map,clean,mapper
DataStream -> public DataStream<T> partitionByHash(String... fields);1445418103;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1446112342;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1448637843;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1449051578;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1450713543;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1453742891;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1454428544;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1454679829;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455101486;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455634373;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455640938;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455703064;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455704943;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(String... fields);1455718153;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(String... fields) {_		return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,string,fields,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1445418103;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1446112342;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1448637843;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1449051578;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1450713543;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1453742891;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1454428544;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1454679829;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1454933011;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1454933011;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455101486;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455634373;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455640938;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455703064;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455704943;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455718153;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1455718153;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1456347641;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1456508941;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1456774151;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1456778239;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1461851300;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1465991918;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1466613129;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1488304750;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1488304750;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1488799576;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1489165080;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1493195810;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1493195810;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1493195810;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1493195810;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1495484544;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1496911361;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1497693649;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1509723634;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1516028607;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1518008865;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1518008932;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1518196458;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1518989075;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1520268868;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1523971392;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1532066767;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1534492343;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation);1547196539;Create a new {@link DataStream} in the given execution environment with_partitioning set to forward by default.__@param environment The StreamExecutionEnvironment;public DataStream(StreamExecutionEnvironment environment, StreamTransformation<T> transformation) {_		this.environment = Preconditions.checkNotNull(environment, "Execution Environment must not be null.")__		this.transformation = Preconditions.checkNotNull(transformation, "Stream Transformation must not be null.")__	};create,a,new,link,data,stream,in,the,given,execution,environment,with,partitioning,set,to,forward,by,default,param,environment,the,stream,execution,environment;public,data,stream,stream,execution,environment,environment,stream,transformation,t,transformation,this,environment,preconditions,check,not,null,environment,execution,environment,must,not,be,null,this,transformation,preconditions,check,not,null,transformation,stream,transformation,must,not,be,null
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1445418103;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1446112342;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1448637843;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1449051578;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,0l
DataStream -> @Experimental 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1454679829;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@Experimental_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;experimental,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @Experimental 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1454933011;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@Experimental_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;experimental,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @Experimental 	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1454933011;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;@Experimental_	public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;experimental,public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1454679829;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, 			long millis);1445418103;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode,_			long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, 			long millis);1446112342;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode,_			long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, 			long millis);1448637843;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode,_			long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, 			long millis);1449051578;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode,_			long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}_		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455101486;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455634373;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455640938;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455703064;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455704943;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455718153;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1455718153;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1456347641;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1456508941;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1456774151;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1456778239;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1461851300;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1465991918;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1466613129;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1488304750;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1488304750;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1488799576;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1489165080;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1495484544;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1496911361;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1497693649;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1509723634;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1516028607;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1518008865;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1518008932;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1518196458;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1518989075;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1520268868;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1523971392;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1532066767;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1534492343;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1547196539;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,csv,output,format,csv,output,format
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1445418103;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1446112342;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1448637843;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1449051578;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1450713543;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1453742891;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1454428544;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1454679829;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1454933011;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1454933011;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455101486;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<T>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,t,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455634373;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455640938;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455703064;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455704943;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455718153;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1455718153;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1456347641;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1456508941;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter);1456774151;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T, ?> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1454679829;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1445418103;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1446112342;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1448637843;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1449051578;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1450713543;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1453742891;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1454428544;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1454679829;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1454933011;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1454933011;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455101486;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455634373;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455640938;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455703064;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455704943;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455718153;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1455718153;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1456347641;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1456508941;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1456774151;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1456778239;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1461851300;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1465991918;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1466613129;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1488304750;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1488304750;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1488799576;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1489165080;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1493195810;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1493195810;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1493195810;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1493195810;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1495484544;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1496911361;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1497693649;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1509723634;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1516028607;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1518008865;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1518008932;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1518196458;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1518989075;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1520268868;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1523971392;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1532066767;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1534492343;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field);1547196539;Partitions a POJO DataStream on the specified key fields using a custom partitioner._This method takes the key expression to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The expression for the field on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, String field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new String[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,pojo,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,expression,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,expression,for,the,field,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,string,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,string,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> @Experimental 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1454679829;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@Experimental_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;experimental,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @Experimental 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1454933011;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@Experimental_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;experimental,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @Experimental 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1454933011;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@Experimental_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;experimental,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455101486;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455634373;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455640938;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455703064;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455704943;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455718153;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1455718153;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1456347641;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1456508941;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1456774151;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1456778239;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1461851300;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1465991918;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1466613129;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1488304750;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1488304750;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1488799576;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1489165080;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1493195810;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1495484544;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1496911361;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1497693649;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1509723634;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1516028607;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1518008865;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1518008932;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1518196458;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1518989075;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1520268868;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1523971392;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1532066767;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1534492343;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsCsv(String path);1547196539;Writes a DataStream to the file specified by the path parameter.__<p>For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,csv,output,format,csv,output,format
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1456778239;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1461851300;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1465991918;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1466613129;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1488304750;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1488304750;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1488799576;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1489165080;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1493195810;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1493195810;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1493195810;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1493195810;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1495484544;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1496911361;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1497693649;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1509723634;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1516028607;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1518008865;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1518008932;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1518196458;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1518989075;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1520268868;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1523971392;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1532066767;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1534492343;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor);1547196539;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>If you know that the timestamps are strictly increasing you can use an_{@link AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instead._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instead,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Experimental 	public DataStream<T> shuffle();1454679829;Sets the partitioning of the {@link DataStream} so that the output tuples_are shuffled uniformly randomly to the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,shuffled,uniformly,randomly,to,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @Experimental 	public DataStream<T> shuffle();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @Experimental 	public DataStream<T> shuffle();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455101486;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455634373;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455640938;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455703064;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455704943;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455718153;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1455718153;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1456347641;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1456508941;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1456774151;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1456778239;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1461851300;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1465991918;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1466613129;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1488304750;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1488304750;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1488799576;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1489165080;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1495484544;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1496911361;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1497693649;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1509723634;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1516028607;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1518008865;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1518008932;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1518196458;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1518989075;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1520268868;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1523971392;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1532066767;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1534492343;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1547196539;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,this,max,wait,time,millis
DataStream -> @Experimental 	public DataStream<T> forward();1454679829;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;@Experimental_	public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;experimental,public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> @Experimental 	public DataStream<T> forward();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;@Experimental_	public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;experimental,public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455101486;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455634373;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455640938;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455703064;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455704943;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455718153;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1455718153;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1456347641;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1456508941;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1456774151;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1456778239;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1461851300;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1465991918;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1466613129;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1488304750;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1488304750;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1488799576;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1489165080;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1493195810;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1493195810;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1493195810;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1493195810;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1495484544;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1496911361;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1497693649;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1509723634;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1516028607;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1518008865;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1518008932;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1518196458;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1518989075;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1520268868;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1523971392;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1532066767;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1534492343;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print();1547196539;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>()__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,return,add,sink,print,function,name,print,to,std,out
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType);1532066767;It creates a new {@link KeyedStream} that uses the provided key with explicit type information_for partitioning its operator states.__@param key The KeySelector to be used for extracting the key for partitioning._@param keyType The type information describing the key type._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType) {_		Preconditions.checkNotNull(key)__		Preconditions.checkNotNull(keyType)__		return new KeyedStream<>(this, clean(key), keyType)__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,with,explicit,type,information,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,type,information,k,key,type,preconditions,check,not,null,key,preconditions,check,not,null,key,type,return,new,keyed,stream,this,clean,key,key,type
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType);1534492343;It creates a new {@link KeyedStream} that uses the provided key with explicit type information_for partitioning its operator states.__@param key The KeySelector to be used for extracting the key for partitioning._@param keyType The type information describing the key type._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType) {_		Preconditions.checkNotNull(key)__		Preconditions.checkNotNull(keyType)__		return new KeyedStream<>(this, clean(key), keyType)__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,with,explicit,type,information,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,type,information,k,key,type,preconditions,check,not,null,key,preconditions,check,not,null,key,type,return,new,keyed,stream,this,clean,key,key,type
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType);1547196539;It creates a new {@link KeyedStream} that uses the provided key with explicit type information_for partitioning its operator states.__@param key The KeySelector to be used for extracting the key for partitioning._@param keyType The type information describing the key type._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key, TypeInformation<K> keyType) {_		Preconditions.checkNotNull(key)__		Preconditions.checkNotNull(keyType)__		return new KeyedStream<>(this, clean(key), keyType)__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,with,explicit,type,information,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,param,key,type,the,type,information,describing,the,key,type,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,type,information,k,key,type,preconditions,check,not,null,key,preconditions,check,not,null,key,type,return,new,keyed,stream,this,clean,key,key,type
DataStream -> public DataStreamSink<T> writeAsCsv(String path);1450713543;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path);1453742891;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path);1454428544;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455101486;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455634373;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455640938;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455703064;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455704943;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1456347641;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1456508941;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1456774151;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1456778239;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1461851300;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1465991918;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1466613129;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1488799576;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1489165080;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1495484544;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1496911361;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1497693649;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1509723634;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1516028607;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1518008865;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> shuffle();1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are shuffled uniformly randomly to the next operation.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> shuffle() {_		return setConnectionType(new ShufflePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,shuffled,uniformly,randomly,to,the,next,operation,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,shuffle,return,set,connection,type,new,shuffle,partitioner,t
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1445418103;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1446112342;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1448637843;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1449051578;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1450713543;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1453742891;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1454428544;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1454679829;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1454933011;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1454933011;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455101486;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<T>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<T>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,t,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,t,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455634373;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455640938;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455703064;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455704943;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455718153;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1455718153;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1456347641;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1456508941;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1456774151;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1456778239;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1461851300;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1465991918;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1466613129;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1488304750;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1488304750;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1488799576;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1489165080;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig() )__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1493195810;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1493195810;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1493195810;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1493195810;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1495484544;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1496911361;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1497693649;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1509723634;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1516028607;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1518008865;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1518008932;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1518196458;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1518989075;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1520268868;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1523971392;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1532066767;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1534492343;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction);1547196539;Adds the given sink to this DataStream. Only streams with sinks added_will be executed once the {@link StreamExecutionEnvironment#execute()}_method is called.__@param sinkFunction_The object containing the sink's invoke function._@return The closed DataStream.;public DataStreamSink<T> addSink(SinkFunction<T> sinkFunction) {__		_		transformation.getOutputType()___		_		if (sinkFunction instanceof InputTypeConfigurable) {_			((InputTypeConfigurable) sinkFunction).setInputType(getType(), getExecutionConfig())__		}__		StreamSink<T> sinkOperator = new StreamSink<>(clean(sinkFunction))___		DataStreamSink<T> sink = new DataStreamSink<>(this, sinkOperator)___		getExecutionEnvironment().addOperator(sink.getTransformation())__		return sink__	};adds,the,given,sink,to,this,data,stream,only,streams,with,sinks,added,will,be,executed,once,the,link,stream,execution,environment,execute,method,is,called,param,sink,function,the,object,containing,the,sink,s,invoke,function,return,the,closed,data,stream;public,data,stream,sink,t,add,sink,sink,function,t,sink,function,transformation,get,output,type,if,sink,function,instanceof,input,type,configurable,input,type,configurable,sink,function,set,input,type,get,type,get,execution,config,stream,sink,t,sink,operator,new,stream,sink,clean,sink,function,data,stream,sink,t,sink,new,data,stream,sink,this,sink,operator,get,execution,environment,add,operator,sink,get,transformation,return,sink
DataStream -> @Experimental 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1454679829;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@Experimental_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;experimental,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Experimental 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1454933011;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@Experimental_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;experimental,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Experimental 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1454933011;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@Experimental_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;experimental,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1454679829;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1454933011;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1454933011;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1445418103;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1446112342;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1448637843;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1449051578;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1450713543;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1453742891;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1454428544;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1454679829;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1454933011;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1454933011;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455101486;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455634373;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455640938;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455703064;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455704943;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455718153;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1455718153;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1456347641;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1456508941;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1456774151;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1456778239;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1461851300;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1465991918;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1466613129;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1488304750;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1488304750;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1488799576;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1489165080;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1493195810;Windows this {@code DataStream} into tumbling count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1493195810;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1493195810;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1493195810;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1495484544;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1496911361;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1497693649;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1509723634;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1516028607;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1518008865;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1518008932;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1518196458;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1518989075;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1520268868;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1523971392;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1532066767;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1534492343;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size);1547196539;Windows this {@code DataStream} into tumbling count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size) {_		return windowAll(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)))__	};windows,this,code,data,stream,into,tumbling,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,return,window,all,global,windows,create,trigger,purging,trigger,of,count,trigger,of,size
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1454679829;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode, long millis) {_		return writeAsCsv(path, writeMode, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,return,write,as,csv,path,write,mode,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T, byte[]> schema);1445418103;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T, byte[]> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,byte,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T, byte[]> schema);1446112342;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T, byte[]> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,byte,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, long millis);1454679829;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, long millis);1454933011;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path, long millis);1454933011;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1455704943;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1455718153;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1455718153;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1456347641;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1456508941;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1456774151;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public DataStream<T> global();1445418103;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1446112342;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1448637843;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1449051578;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1450713543;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1453742891;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public DataStream<T> global();1454428544;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> public Integer getId();1445418103;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1446112342;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1448637843;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1449051578;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1450713543;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1453742891;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> public Integer getId();1454428544;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;public,integer,get,id,return,transformation,get,id
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, long millis);1454679829;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, long millis);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path, long millis);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path, long millis) {_		return writeAsCsv(path, null, millis, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,long,millis,return,write,as,csv,path,null,millis,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1445418103;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1446112342;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1448637843;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1449051578;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1450713543;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1453742891;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis);1454428544;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_T            the file update frequency__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,t,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,millis
DataStream -> @Experimental 	public IterativeStream<T> iterate();1454679829;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> @Experimental 	public IterativeStream<T> iterate();1454933011;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> @Experimental 	public IterativeStream<T> iterate();1454933011;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1450713543;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1453742891;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1454428544;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path);1445418103;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path);1446112342;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path);1448637843;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,0l
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path);1449051578;Writes a DataStream to the file specified by path in csv format.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,0l
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455101486;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455634373;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455640938;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455703064;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455704943;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455718153;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1455718153;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1456347641;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1456508941;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1456774151;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1456778239;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1461851300;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1465991918;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1466613129;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1488304750;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1488304750;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1488799576;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1489165080;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1493195810;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1495484544;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1496911361;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1497693649;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1509723634;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1516028607;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1518008865;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1518008932;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1518196458;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1518989075;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1520268868;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1523971392;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1532066767;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1534492343;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> @PublicEvolving 	public IterativeStream<T> iterate();1547196539;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}__<p>A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information.__<p>The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call.__<p>By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;@PublicEvolving_	public IterativeStream<T> iterate() {_		return new IterativeStream<>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,evolving,public,iterative,stream,t,iterate,return,new,iterative,stream,this,0
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1445418103;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1446112342;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1448637843;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1449051578;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1450713543;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1453742891;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1454428544;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1454679829;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455101486;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<T>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,t,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455634373;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455640938;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455703064;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455704943;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,clean,key,selector
DataStream -> public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector);1455718153;Sets the partitioning of the {@link DataStream} so that the output is_partitioned using the given {@link KeySelector}. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param keySelector The function that extracts the key from an element in the Stream_@return The partitioned DataStream;public DataStream<T> partitionByHash(KeySelector<T, ?> keySelector) {_		return setConnectionType(new HashPartitioner<>(clean(keySelector)))__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,using,the,given,link,key,selector,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,key,selector,the,function,that,extracts,the,key,from,an,element,in,the,stream,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,key,selector,t,key,selector,return,set,connection,type,new,hash,partitioner,clean,key,selector
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455101486;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455634373;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455640938;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455703064;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455704943;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455718153;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1455718153;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1456347641;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1456508941;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1456774151;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1445418103;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1446112342;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1448637843;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1449051578;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1450713543;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1453742891;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1454428544;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1454679829;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1454933011;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1454933011;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455101486;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455634373;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455640938;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455703064;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455704943;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455718153;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1455718153;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1456347641;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1456508941;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1456774151;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1456778239;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1461851300;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1465991918;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1466613129;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1488304750;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1488304750;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1488799576;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1489165080;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1493195810;Windows this {@code DataStream} into sliding count windows.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1493195810;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1493195810;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1493195810;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1495484544;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1496911361;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1497693649;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1509723634;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1516028607;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1518008865;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1518008932;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1518196458;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1518989075;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1520268868;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1523971392;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1532066767;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1534492343;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide);1547196539;Windows this {@code DataStream} into sliding count windows.__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__@param size The size of the windows in number of elements._@param slide The slide interval in number of elements.;public AllWindowedStream<T, GlobalWindow> countWindowAll(long size, long slide) {_		return windowAll(GlobalWindows.create())_				.evictor(CountEvictor.of(size))_				.trigger(CountTrigger.of(slide))__	};windows,this,code,data,stream,into,sliding,count,windows,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,param,size,the,size,of,the,windows,in,number,of,elements,param,slide,the,slide,interval,in,number,of,elements;public,all,windowed,stream,t,global,window,count,window,all,long,size,long,slide,return,window,all,global,windows,create,evictor,count,evictor,of,size,trigger,count,trigger,of,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1453742891;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1454428544;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1454679829;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1454933011;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1454933011;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455101486;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455634373;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455640938;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455703064;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455704943;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455718153;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1455718153;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1456347641;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1456508941;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1456774151;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1456778239;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1461851300;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1465991918;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1466613129;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1488304750;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1488304750;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1488799576;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1489165080;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1493195810;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1493195810;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1493195810;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1493195810;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1495484544;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1496911361;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1497693649;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1509723634;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1516028607;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1518008865;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1518008932;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1518196458;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1518989075;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1520268868;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1523971392;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1532066767;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1534492343;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size);1547196539;Windows this {@code DataStream} into tumbling time windows.__<p>This is a shortcut for either {@code .window(TumblingEventTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>Note: This operation is inherently non-parallel since all elements have to pass through_the same operator instance.__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(Time size) {_		if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {_			return windowAll(TumblingProcessingTimeWindows.of(size))__		} else {_			return windowAll(TumblingEventTimeWindows.of(size))__		}_	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,event,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,is,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,time,size,if,environment,get,stream,time,characteristic,time,characteristic,processing,time,return,window,all,tumbling,processing,time,windows,of,size,else,return,window,all,tumbling,event,time,windows,of,size
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1456778239;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1461851300;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1465991918;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1466613129;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1488304750;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1488304750;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1488799576;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1489165080;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1493195810;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1493195810;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1493195810;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1493195810;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1495484544;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1496911361;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1497693649;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1509723634;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1516028607;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1518008865;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1518008932;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1518196458;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1518989075;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1520268868;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1523971392;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1532066767;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1534492343;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter);1547196539;Applies a Filter transformation on a {@link DataStream}. The_transformation calls a {@link FilterFunction} for each element of the_DataStream and retains only those element for which the function returns_true. Elements for which the function returns false are filtered. The_user can also extend {@link RichFilterFunction} to gain access to other_features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param filter_The FilterFunction that is called for each element of the_DataStream._@return The filtered DataStream.;public SingleOutputStreamOperator<T> filter(FilterFunction<T> filter) {_		return transform("Filter", getType(), new StreamFilter<>(clean(filter)))___	};applies,a,filter,transformation,on,a,link,data,stream,the,transformation,calls,a,link,filter,function,for,each,element,of,the,data,stream,and,retains,only,those,element,for,which,the,function,returns,true,elements,for,which,the,function,returns,false,are,filtered,the,user,can,also,extend,link,rich,filter,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,filter,the,filter,function,that,is,called,for,each,element,of,the,data,stream,return,the,filtered,data,stream;public,single,output,stream,operator,t,filter,filter,function,t,filter,return,transform,filter,get,type,new,stream,filter,clean,filter
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1445418103;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1446112342;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1448637843;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1449051578;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1450713543;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1453742891;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1454428544;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1454679829;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1454933011;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1454933011;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455101486;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<T>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,t,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455634373;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455640938;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455703064;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455704943;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455718153;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1455718153;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1456347641;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1456508941;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1456774151;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1456778239;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1461851300;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1465991918;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1466613129;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1488304750;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1488304750;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1488799576;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1489165080;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1493195810;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1493195810;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1493195810;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1493195810;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1495484544;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1496911361;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1497693649;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1509723634;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1516028607;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1518008865;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1518008932;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1518196458;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1518989075;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1520268868;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1523971392;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1532066767;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> public SplitStream<T> split(OutputSelector<T> outputSelector);1534492343;Operator used for directing tuples to specific named outputs using an_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}._Calling this method on an operator creates a new {@link SplitStream}.__@param outputSelector_The user defined_{@link org.apache.flink.streaming.api.collector.selector.OutputSelector}_for directing the tuples._@return The {@link SplitStream};public SplitStream<T> split(OutputSelector<T> outputSelector) {_		return new SplitStream<>(this, clean(outputSelector))__	};operator,used,for,directing,tuples,to,specific,named,outputs,using,an,link,org,apache,flink,streaming,api,collector,selector,output,selector,calling,this,method,on,an,operator,creates,a,new,link,split,stream,param,output,selector,the,user,defined,link,org,apache,flink,streaming,api,collector,selector,output,selector,for,directing,the,tuples,return,the,link,split,stream;public,split,stream,t,split,output,selector,t,output,selector,return,new,split,stream,this,clean,output,selector
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455704943;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455718153;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455718153;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1456347641;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1456508941;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @Deprecated 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1456774151;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@param extractor The TimestampExtractor that is called for each element of the DataStream.__@deprecated Please use {@link #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)}_of {@link #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks)}_instread._@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks)_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);@Deprecated_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream,deprecated,please,use,link,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,of,link,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,instread,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;deprecated,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide);1445418103;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,abstract,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide);1446112342;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,abstract,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide);1448637843;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,abstract,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide);1449051578;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,abstract,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide);1450713543;Windows this {@code DataStream} into sliding time windows.__<p>_This is a shortcut for either {@code .window(SlidingTimeWindows.of(size, slide))} or_{@code .window(SlidingProcessingTimeWindows.of(size, slide))} depending on the time characteristic_set using_{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size, AbstractTime slide) {_		return windowAll(SlidingTimeWindows.of(size, slide))__	};windows,this,code,data,stream,into,sliding,time,windows,p,this,is,a,shortcut,for,either,code,window,sliding,time,windows,of,size,slide,or,code,window,sliding,processing,time,windows,of,size,slide,depending,on,the,time,characteristic,set,using,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,abstract,time,slide,return,window,all,sliding,time,windows,of,size,slide
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1489165080;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1495484544;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1496911361;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1497693649;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1509723634;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1516028607;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1518008865;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1518008932;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1518196458;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1518989075;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1520268868;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1523971392;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1532066767;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1534492343;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @Internal 	public <R> SingleOutputStreamOperator<R> process( 			ProcessFunction<T, R> processFunction, 			TypeInformation<R> outputType);1547196539;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream._@param outputType {@link TypeInformation} for the result type of the function.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@Internal_	public <R> SingleOutputStreamOperator<R> process(_			ProcessFunction<T, R> processFunction,_			TypeInformation<R> outputType) {__		ProcessOperator<T, R> operator = new ProcessOperator<>(clean(processFunction))___		return transform("Process", outputType, operator)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,output,type,link,type,information,for,the,result,type,of,the,function,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;internal,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,output,type,process,operator,t,r,operator,new,process,operator,clean,process,function,return,transform,process,output,type,operator
DataStream -> @SuppressWarnings("unchecked") 	@Experimental 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1454679829;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@Experimental_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,experimental,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	@Experimental 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@Experimental_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,experimental,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	@Experimental 	public <X extends Tuple> DataStreamSink<T> writeAsCsv( 			String path, 			WriteMode writeMode, 			long millis, 			String rowDelimiter, 			String fieldDelimiter);1454933011;Writes a DataStream to the file specified by the path parameter. The_writing is performed periodically every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE._@param millis_the file update frequency_@param rowDelimiter_the delimiter for two rows_@param fieldDelimiter_the delimiter for two fields__@return the closed DataStream;@SuppressWarnings("unchecked")_	@Experimental_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(_			String path,_			WriteMode writeMode,_			long millis,_			String rowDelimiter,_			String fieldDelimiter) {_		Preconditions.checkArgument(_			getType().isTupleType(),_			"The writeAsCsv() method can only be used on data streams of tuples.")___		CsvOutputFormat<X> of = new CsvOutputFormat<X>(_			new Path(path),_			rowDelimiter,_			fieldDelimiter)___		if (writeMode != null) {_			of.setWriteMode(writeMode)__		}__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,the,writing,is,performed,periodically,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,param,millis,the,file,update,frequency,param,row,delimiter,the,delimiter,for,two,rows,param,field,delimiter,the,delimiter,for,two,fields,return,the,closed,data,stream;suppress,warnings,unchecked,experimental,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,long,millis,string,row,delimiter,string,field,delimiter,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,streams,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,row,delimiter,field,delimiter,if,write,mode,null,of,set,write,mode,write,mode,return,write,output,format,t,of,millis
DataStream -> public DataStream<T> forward();1445418103;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1446112342;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1448637843;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1449051578;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1450713543;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1453742891;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1454428544;Sets the partitioning of the {@link DataStream} so that the output tuples_are forwarded to the local subtask of the next component (whenever_possible).__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,forwarded,to,the,local,subtask,of,the,next,component,whenever,possible,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455101486;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455634373;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455640938;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455703064;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455704943;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1456347641;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1456508941;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1456774151;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1456778239;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1461851300;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1465991918;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1466613129;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1488799576;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1489165080;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1495484544;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1496911361;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1497693649;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1509723634;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1516028607;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1518008865;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public DataStream<T> forward();1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are forwarded to the local subtask of the next operation.__@return The DataStream with forward partitioning set.;public DataStream<T> forward() {_		return setConnectionType(new ForwardPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,forwarded,to,the,local,subtask,of,the,next,operation,return,the,data,stream,with,forward,partitioning,set;public,data,stream,t,forward,return,set,connection,type,new,forward,partitioner,t
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1445418103;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1446112342;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1448637843;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1449051578;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1450713543;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1453742891;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1454428544;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455101486;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455634373;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455640938;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455703064;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455704943;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455718153;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1455718153;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1456347641;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1456508941;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1456774151;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1456778239;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1461851300;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1465991918;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1466613129;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1488304750;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1488304750;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1488799576;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1489165080;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1495484544;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1496911361;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1497693649;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1509723634;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1516028607;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1518008865;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1518008932;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1518196458;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1518989075;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1520268868;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1523971392;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1532066767;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1534492343;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1547196539;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<>(new Path(path))__		tof.setWriteMode(writeMode)__		return writeUsingOutputFormat(tof)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,new,path,path,tof,set,write,mode,write,mode,return,write,using,output,format,tof
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1445418103;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1446112342;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1448637843;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1449051578;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1450713543;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1453742891;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> public IterativeStream<T> iterate(long maxWaitTimeMillis);1454428544;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> protected <F> F clean(F f);1445418103;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1446112342;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1448637843;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1449051578;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1450713543;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1453742891;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1454428544;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1454679829;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1454933011;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1454933011;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455101486;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455634373;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455640938;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455703064;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455704943;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455718153;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1455718153;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1456347641;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1456508941;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1456774151;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1456778239;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1461851300;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1465991918;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1466613129;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1488304750;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1488304750;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1488799576;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1489165080;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1493195810;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1493195810;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1493195810;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1493195810;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1495484544;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1496911361;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1497693649;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1509723634;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1516028607;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1518008865;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1518008932;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1518196458;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1518989075;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1520268868;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1523971392;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1532066767;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1534492343;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> protected <F> F clean(F f);1547196539;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;protected <F> F clean(F f) {_		return getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;protected,f,f,clean,f,f,return,get,execution,environment,clean,f
DataStream -> public DataStreamSink<T> writeAsText(String path);1445418103;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1446112342;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1448637843;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1449051578;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1450713543;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1453742891;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public DataStreamSink<T> writeAsText(String path);1454428544;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> @Experimental 	public DataStream<T> rescale();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@Experimental_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;experimental,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @Experimental 	public DataStream<T> rescale();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@Experimental_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;experimental,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> public int getParallelism();1445418103;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1446112342;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1448637843;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1449051578;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1450713543;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1453742891;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1454428544;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1454679829;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1454933011;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1454933011;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455101486;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455634373;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455640938;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455703064;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455704943;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455718153;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1455718153;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1456347641;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1456508941;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1456774151;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1456778239;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1461851300;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1465991918;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1466613129;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1488304750;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1488304750;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1488799576;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1489165080;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1493195810;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1493195810;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1493195810;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1493195810;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1495484544;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1496911361;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1497693649;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1509723634;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1516028607;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1518008865;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1518008932;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1518196458;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1518989075;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1520268868;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1523971392;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1532066767;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1534492343;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public int getParallelism();1547196539;Gets the parallelism for this operator.__@return The parallelism set for this operator.;public int getParallelism() {_		return transformation.getParallelism()__	};gets,the,parallelism,for,this,operator,return,the,parallelism,set,for,this,operator;public,int,get,parallelism,return,transformation,get,parallelism
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1445418103;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1446112342;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1448637843;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1449051578;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1450713543;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1453742891;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1454428544;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1454679829;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1454933011;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1454933011;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455101486;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455634373;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455640938;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455703064;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455704943;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455718153;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1455718153;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1456347641;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1456508941;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1456774151;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1456778239;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1461851300;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1465991918;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1466613129;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1488304750;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1488304750;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1488799576;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1489165080;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1493195810;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1493195810;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1493195810;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1493195810;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1495484544;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1496911361;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1497693649;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1509723634;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1516028607;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1518008865;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1518008932;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1518196458;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1518989075;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1520268868;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1523971392;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1532066767;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1534492343;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public StreamExecutionEnvironment getExecutionEnvironment();1547196539;Returns the {@link StreamExecutionEnvironment} that was used to create this_{@link DataStream}.__@return The Execution Environment;public StreamExecutionEnvironment getExecutionEnvironment() {_		return environment__	};returns,the,link,stream,execution,environment,that,was,used,to,create,this,link,data,stream,return,the,execution,environment;public,stream,execution,environment,get,execution,environment,return,environment
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1445418103;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1446112342;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1448637843;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1449051578;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1450713543;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1453742891;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public DataStreamSink<T> writeAsText(String path, long millis);1454428544;Writes a DataStream to the file specified by path in text format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to._@param millis_The file update frequency.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, long millis) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		return write(tof, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,long,millis,text,output,format,t,tof,new,text,output,format,t,new,path,path,return,write,tof,millis
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1456778239;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1461851300;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1465991918;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1466613129;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1488304750;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1488304750;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1488799576;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1489165080;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1495484544;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1496911361;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1497693649;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1509723634;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1516028607;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1518008865;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1518008932;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1518196458;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1518989075;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1520268868;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1523971392;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1532066767;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1534492343;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1547196539;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For the second case and when the watermarks are required to lag behind the maximum_timestamp seen so far in the elements of the stream by a fixed amount of time, and this_amount is known in advance, use the_{@link BoundedOutOfOrdernessTimestampExtractor}.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPeriodicWatermarksOperator<T> operator =_				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,the,second,case,and,when,the,watermarks,are,required,to,lag,behind,the,maximum,timestamp,seen,so,far,in,the,elements,of,the,stream,by,a,fixed,amount,of,time,and,this,amount,is,known,in,advance,use,the,link,bounded,out,of,orderness,timestamp,extractor,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr(String sinkIdentifier);1534492343;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@param sinkIdentifier The string to prefix the output with._@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr(String sinkIdentifier) {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(sinkIdentifier, true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,param,sink,identifier,the,string,to,prefix,the,output,with,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,string,sink,identifier,print,sink,function,t,print,function,new,print,sink,function,sink,identifier,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr(String sinkIdentifier);1547196539;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@param sinkIdentifier The string to prefix the output with._@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr(String sinkIdentifier) {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(sinkIdentifier, true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,param,sink,identifier,the,string,to,prefix,the,output,with,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,string,sink,identifier,print,sink,function,t,print,function,new,print,sink,function,sink,identifier,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455634373;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455640938;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455703064;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455704943;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455718153;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1455718153;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1456347641;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1456508941;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1456774151;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1456778239;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1461851300;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1465991918;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1466613129;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1488304750;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1488304750;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1488799576;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1489165080;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1493195810;Writes the dataStream into an output, described by an OutputFormat.__The output is not participating in Flink's checkpointing!__For writing to a file system periodically, the use of the "flink-connector-filesystem" is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,the,output,is,not,participating,in,flink,s,checkpointing,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1493195810;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1493195810;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1493195810;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1495484544;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1496911361;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1497693649;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1509723634;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1516028607;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1518008865;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1518008932;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1518196458;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1518989075;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1520268868;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1523971392;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1532066767;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1534492343;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format);1547196539;Writes the dataStream into an output, described by an OutputFormat.__<p>The output is not participating in Flink's checkpointing!__<p>For writing to a file system periodically, the use of the "flink-connector-filesystem"_is recommended.__@param format The output format_@return The closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeUsingOutputFormat(OutputFormat<T> format) {_		return addSink(new OutputFormatSinkFunction<>(format))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,p,the,output,is,not,participating,in,flink,s,checkpointing,p,for,writing,to,a,file,system,periodically,the,use,of,the,flink,connector,filesystem,is,recommended,param,format,the,output,format,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,using,output,format,output,format,t,format,return,add,sink,new,output,format,sink,function,format
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1518008932;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1518196458;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1518989075;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1520268868;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1523971392;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1532066767;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1534492343;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> @PublicEvolving 	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream);1547196539;Creates a new {@link BroadcastConnectedStream} by connecting the current_{@link DataStream} or {@link KeyedStream} with a {@link BroadcastStream}.__<p>The latter can be created using the {@link #broadcast(MapStateDescriptor[])} method.__<p>The resulting stream can be further processed using the {@code BroadcastConnectedStream.process(MyFunction)}_method, where {@code MyFunction} can be either a_{@link org.apache.flink.streaming.api.functions.co.KeyedBroadcastProcessFunction KeyedBroadcastProcessFunction}_or a {@link org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction BroadcastProcessFunction}_depending on the current stream being a {@link KeyedStream} or not.__@param broadcastStream The broadcast stream with the broadcast state to be connected with this stream._@return The {@link BroadcastConnectedStream}.;@PublicEvolving_	public <R> BroadcastConnectedStream<T, R> connect(BroadcastStream<R> broadcastStream) {_		return new BroadcastConnectedStream<>(_				environment,_				this,_				Preconditions.checkNotNull(broadcastStream),_				broadcastStream.getBroadcastStateDescriptor())__	};creates,a,new,link,broadcast,connected,stream,by,connecting,the,current,link,data,stream,or,link,keyed,stream,with,a,link,broadcast,stream,p,the,latter,can,be,created,using,the,link,broadcast,map,state,descriptor,method,p,the,resulting,stream,can,be,further,processed,using,the,code,broadcast,connected,stream,process,my,function,method,where,code,my,function,can,be,either,a,link,org,apache,flink,streaming,api,functions,co,keyed,broadcast,process,function,keyed,broadcast,process,function,or,a,link,org,apache,flink,streaming,api,functions,co,broadcast,process,function,broadcast,process,function,depending,on,the,current,stream,being,a,link,keyed,stream,or,not,param,broadcast,stream,the,broadcast,stream,with,the,broadcast,state,to,be,connected,with,this,stream,return,the,link,broadcast,connected,stream;public,evolving,public,r,broadcast,connected,stream,t,r,connect,broadcast,stream,r,broadcast,stream,return,new,broadcast,connected,stream,environment,this,preconditions,check,not,null,broadcast,stream,broadcast,stream,get,broadcast,state,descriptor
DataStream -> public TypeInformation<T> getType();1445418103;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1446112342;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1448637843;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1449051578;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1450713543;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1453742891;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1454428544;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1454679829;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1454933011;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1454933011;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455101486;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455634373;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455640938;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455703064;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455704943;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455718153;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1455718153;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1456347641;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1456508941;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1456774151;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1456778239;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1461851300;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1465991918;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1466613129;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1488304750;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1488304750;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1488799576;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1489165080;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1493195810;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1493195810;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1493195810;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1493195810;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1495484544;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1496911361;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1497693649;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1509723634;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1516028607;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1518008865;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1518008932;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1518196458;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1518989075;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1520268868;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1523971392;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1532066767;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1534492343;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public TypeInformation<T> getType();1547196539;Gets the type of the stream.__@return The type of the datastream.;public TypeInformation<T> getType() {_		return transformation.getOutputType()__	};gets,the,type,of,the,stream,return,the,type,of,the,datastream;public,type,information,t,get,type,return,transformation,get,output,type
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1445418103;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1446112342;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1448637843;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1449051578;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1450713543;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1453742891;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> public DataStreamSink<T> write(OutputFormat<T> format, long millis);1454428544;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> @PublicEvolving 	public DataStreamSink<T> print(String sinkIdentifier);1534492343;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@param sinkIdentifier The string to prefix the output with._@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print(String sinkIdentifier) {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(sinkIdentifier, false)__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,param,sink,identifier,the,string,to,prefix,the,output,with,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,string,sink,identifier,print,sink,function,t,print,function,new,print,sink,function,sink,identifier,false,return,add,sink,print,function,name,print,to,std,out
DataStream -> @PublicEvolving 	public DataStreamSink<T> print(String sinkIdentifier);1547196539;Writes a DataStream to the standard output stream (stdout).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stdout on the machine where the code is executed, i.e. the Flink_worker.__@param sinkIdentifier The string to prefix the output with._@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> print(String sinkIdentifier) {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(sinkIdentifier, false)__		return addSink(printFunction).name("Print to Std. Out")__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stdout,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,param,sink,identifier,the,string,to,prefix,the,output,with,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,string,sink,identifier,print,sink,function,t,print,function,new,print,sink,function,sink,identifier,false,return,add,sink,print,function,name,print,to,std,out
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1456778239;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1461851300;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1465991918;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1466613129;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1488304750;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1488304750;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1488799576;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1489165080;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1493195810;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1493195810;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1493195810;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1493195810;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1495484544;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1496911361;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1497693649;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1509723634;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1516028607;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1518008865;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1518008932;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1518196458;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1518989075;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1520268868;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1523971392;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1532066767;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1534492343;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper);1547196539;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1445418103;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1446112342;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1448637843;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1449051578;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1450713543;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1453742891;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1454428544;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size);1445418103;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size);1446112342;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size);1448637843;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size);1449051578;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size);1450713543;Windows this {@code DataStream} into tumbling time windows.__<p>_This is a shortcut for either {@code .window(TumblingTimeWindows.of(size))} or_{@code .window(TumblingProcessingTimeWindows.of(size))} depending on the time characteristic_set using__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__{@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}__@param size The size of the window.;public AllWindowedStream<T, TimeWindow> timeWindowAll(AbstractTime size) {_		return windowAll(TumblingTimeWindows.of(size))__	};windows,this,code,data,stream,into,tumbling,time,windows,p,this,is,a,shortcut,for,either,code,window,tumbling,time,windows,of,size,or,code,window,tumbling,processing,time,windows,of,size,depending,on,the,time,characteristic,set,using,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,link,org,apache,flink,streaming,api,environment,stream,execution,environment,set,stream,time,characteristic,org,apache,flink,streaming,api,time,characteristic,param,size,the,size,of,the,window;public,all,windowed,stream,t,time,window,time,window,all,abstract,time,size,return,window,all,tumbling,time,windows,of,size
DataStream -> public DataStream<T> broadcast();1445418103;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1446112342;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1448637843;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1449051578;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1450713543;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1453742891;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1454428544;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1454679829;Sets the partitioning of the {@link DataStream} so that the output tuples_are broadcasted to every parallel instance of the next component.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,broadcasted,to,every,parallel,instance,of,the,next,component,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455101486;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455634373;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455640938;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455703064;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455704943;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1456347641;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1456508941;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1456774151;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1456778239;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1461851300;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1465991918;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1466613129;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1488799576;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1489165080;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1495484544;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1496911361;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1497693649;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1509723634;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1516028607;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1518008865;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public DataStream<T> broadcast();1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcast to every parallel instance of the next operation.__@return The DataStream with broadcast partitioning set.;public DataStream<T> broadcast() {_		return setConnectionType(new BroadcastPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcast,to,every,parallel,instance,of,the,next,operation,return,the,data,stream,with,broadcast,partitioning,set;public,data,stream,t,broadcast,return,set,connection,type,new,broadcast,partitioner,t
DataStream -> public StreamTransformation<T> getTransformation();1445418103;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1446112342;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1448637843;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1449051578;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1450713543;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1453742891;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public StreamTransformation<T> getTransformation();1454428544;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Experimental 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1454679829;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@Experimental_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;experimental,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> @Experimental 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1454933011;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@Experimental_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;experimental,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> @Experimental 	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes);1454933011;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@Experimental_	public <R extends Tuple> SingleOutputStreamOperator<R, ?> project(int... fieldIndexes) {_		return new StreamProjection<T>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;experimental,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,t,this,field,indexes,project,tuple,x
DataStream -> public DataStream<T> rebalance();1445418103;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1446112342;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1448637843;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1449051578;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1450713543;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1453742891;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1454428544;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1454679829;Sets the partitioning of the {@link DataStream} so that the output tuples_are distributed evenly to instances of the next component in a Round-robin_fashion.__<p>_This setting only effects the how the outputs will be distributed between_the parallel instances of the next processing operator.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,tuples,are,distributed,evenly,to,instances,of,the,next,component,in,a,round,robin,fashion,p,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1454933011;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455101486;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455634373;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455640938;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455703064;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455704943;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1456347641;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1456508941;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1456774151;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1456778239;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1461851300;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1465991918;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1466613129;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1488799576;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1489165080;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1495484544;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1496911361;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1497693649;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1509723634;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1516028607;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1518008865;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> public DataStream<T> rebalance();1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to instances of the next operation in a round-robin_fashion.__@return The DataStream with rebalance partitioning set.;public DataStream<T> rebalance() {_		return setConnectionType(new RebalancePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,instances,of,the,next,operation,in,a,round,robin,fashion,return,the,data,stream,with,rebalance,partitioning,set;public,data,stream,t,rebalance,return,set,connection,type,new,rebalance,partitioner,t
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1456778239;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1461851300;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1465991918;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1466613129;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1488304750;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1488304750;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1488799576;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1489165080;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1493195810;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1493195810;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1493195810;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1493195810;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1495484544;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1496911361;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1497693649;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1509723634;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1516028607;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1518008865;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1518008932;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1518196458;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1518989075;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1520268868;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1523971392;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1532066767;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1534492343;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1547196539;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis);1445418103;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis);1446112342;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis);1448637843;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,millis
DataStream -> @SuppressWarnings("unchecked") 	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis);1449051578;Writes a DataStream to the file specified by path in csv format. The_writing is performed periodically, in every millis milliseconds.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param millis_the file update frequency__@return the closed DataStream;@SuppressWarnings("unchecked")_	public <X extends Tuple> DataStreamSink<T> writeAsCsv(String path, long millis) {_		Preconditions.checkArgument(getType().isTupleType(),_				"The writeAsCsv() method can only be used on data sets of tuples.")__		CsvOutputFormat<X> of = new CsvOutputFormat<X>(new Path(path),_				CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__		return write((OutputFormat<T>) of, millis)__	};writes,a,data,stream,to,the,file,specified,by,path,in,csv,format,the,writing,is,performed,periodically,in,every,millis,milliseconds,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,millis,the,file,update,frequency,return,the,closed,data,stream;suppress,warnings,unchecked,public,x,extends,tuple,data,stream,sink,t,write,as,csv,string,path,long,millis,preconditions,check,argument,get,type,is,tuple,type,the,write,as,csv,method,can,only,be,used,on,data,sets,of,tuples,csv,output,format,x,of,new,csv,output,format,x,new,path,path,csv,output,format,csv,output,format,return,write,output,format,t,of,millis
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1445418103;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1446112342;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1448637843;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1449051578;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1450713543;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1453742891;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner);1454428544;Windows this data stream to a {@code KeyedTriggerWindowDataStream}, which evaluates windows_over a key grouped stream. Elements are put into windows by a_{@link org.apache.flink.streaming.api.windowing.assigners.WindowAssigner}. The grouping of_elements is done both by key and by window.__<p>_A {@link org.apache.flink.streaming.api.windowing.triggers.Trigger} can be defined to specify_when windows are evaluated. However, {@code WindowAssigners} have a default {@code Trigger}_that is used if a {@code Trigger} is not specified.__<p>_Note: This operation can be inherently non-parallel since all elements have to pass through_the same operator instance. (Only for special cases, such as aligned time windows is_it possible to perform this operation in parallel).__@param assigner The {@code WindowAssigner} that assigns elements to windows._@return The trigger windows data stream.;public <W extends Window> AllWindowedStream<T, W> windowAll(WindowAssigner<? super T, W> assigner) {_		return new AllWindowedStream<>(this, assigner)__	};windows,this,data,stream,to,a,code,keyed,trigger,window,data,stream,which,evaluates,windows,over,a,key,grouped,stream,elements,are,put,into,windows,by,a,link,org,apache,flink,streaming,api,windowing,assigners,window,assigner,the,grouping,of,elements,is,done,both,by,key,and,by,window,p,a,link,org,apache,flink,streaming,api,windowing,triggers,trigger,can,be,defined,to,specify,when,windows,are,evaluated,however,code,window,assigners,have,a,default,code,trigger,that,is,used,if,a,code,trigger,is,not,specified,p,note,this,operation,can,be,inherently,non,parallel,since,all,elements,have,to,pass,through,the,same,operator,instance,only,for,special,cases,such,as,aligned,time,windows,is,it,possible,to,perform,this,operation,in,parallel,param,assigner,the,code,window,assigner,that,assigns,elements,to,windows,return,the,trigger,windows,data,stream;public,w,extends,window,all,windowed,stream,t,w,window,all,window,assigner,super,t,w,assigner,return,new,all,windowed,stream,this,assigner
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1488799576;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1489165080;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1493195810;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1495484544;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_				processFunction,_				ProcessFunction.class,_				false,_				true,_				getType(),_				Utils.getCallLocationName(),_				true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,false,true,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1496911361;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{2, 0},_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,new,int,0,new,int,2,0,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1497693649;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1509723634;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1516028607;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1518008865;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1518008932;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1518196458;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1518989075;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1520268868;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1523971392;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1532066767;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1534492343;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction);1547196539;Applies the given {@link ProcessFunction} on the input stream, thereby_creating a transformed output stream.__<p>The function will be called for every element in the input streams and can produce zero_or more output elements.__@param processFunction The {@link ProcessFunction} that is called for each element_in the stream.__@param <R> The type of elements emitted by the {@code ProcessFunction}.__@return The transformed {@link DataStream}.;@PublicEvolving_	public <R> SingleOutputStreamOperator<R> process(ProcessFunction<T, R> processFunction) {__		TypeInformation<R> outType = TypeExtractor.getUnaryOperatorReturnType(_			processFunction,_			ProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			getType(),_			Utils.getCallLocationName(),_			true)___		return process(processFunction, outType)__	};applies,the,given,link,process,function,on,the,input,stream,thereby,creating,a,transformed,output,stream,p,the,function,will,be,called,for,every,element,in,the,input,streams,and,can,produce,zero,or,more,output,elements,param,process,function,the,link,process,function,that,is,called,for,each,element,in,the,stream,param,r,the,type,of,elements,emitted,by,the,code,process,function,return,the,transformed,link,data,stream;public,evolving,public,r,single,output,stream,operator,r,process,process,function,t,r,process,function,type,information,r,out,type,type,extractor,get,unary,operator,return,type,process,function,process,function,class,0,1,type,extractor,get,type,utils,get,call,location,name,true,return,process,process,function,out,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1445418103;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1446112342;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1448637843;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1449051578;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1450713543;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1453742891;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1454428544;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1454679829;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1454933011;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1454933011;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455101486;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455634373;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455640938;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455703064;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455704943;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455718153;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1455718153;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1456347641;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1456508941;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1456774151;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1456778239;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1461851300;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1465991918;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1466613129;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1488304750;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1488304750;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1488799576;Partitions the operator state of a {@link DataStream}using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}S underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1489165080;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1493195810;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1493195810;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1493195810;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1493195810;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1495484544;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1496911361;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1497693649;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1509723634;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1516028607;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1518008865;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1518008932;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1518196458;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1518989075;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1520268868;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1523971392;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1532066767;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1534492343;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(String... fields);1547196539;Partitions the operator state of a {@link DataStream} using field expressions._A field expression is either the name of a public field or a getter method with parentheses_of the {@link DataStream}'s underlying type. A dot can be used to drill_down into objects, as in {@code "field1.getInnerField2()" }.__@param fields_One or more field expressions on which the state of the {@link DataStream} operators will be_partitioned._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(String... fields) {_		return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__	};partitions,the,operator,state,of,a,link,data,stream,using,field,expressions,a,field,expression,is,either,the,name,of,a,public,field,or,a,getter,method,with,parentheses,of,the,link,data,stream,s,underlying,type,a,dot,can,be,used,to,drill,down,into,objects,as,in,code,field1,get,inner,field2,param,fields,one,or,more,field,expressions,on,which,the,state,of,the,link,data,stream,operators,will,be,partitioned,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,string,fields,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1445418103;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1446112342;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1448637843;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1449051578;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1450713543;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1453742891;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1454428544;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1454679829;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1454933011;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455101486;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,t,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455634373;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455640938;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455703064;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455704943;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> public DataStream<T> partitionByHash(int... fields);1455718153;Sets the partitioning of the {@link DataStream} so that the output is_partitioned hashing on the given fields. This setting only_effects the how the outputs will be distributed between the parallel_instances of the next processing operator.__@param fields The tuple fields that should be used for partitioning_@return The partitioned DataStream;public DataStream<T> partitionByHash(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return partitionByHash(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return partitionByHash(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,is,partitioned,hashing,on,the,given,fields,this,setting,only,effects,the,how,the,outputs,will,be,distributed,between,the,parallel,instances,of,the,next,processing,operator,param,fields,the,tuple,fields,that,should,be,used,for,partitioning,return,the,partitioned,data,stream;public,data,stream,t,partition,by,hash,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,partition,by,hash,key,selector,util,get,selector,for,array,fields,get,type,else,return,partition,by,hash,new,keys,expression,keys,fields,get,type
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1456778239;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1461851300;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1465991918;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1466613129;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1488304750;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1488304750;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1488799576;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1489165080;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1493195810;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>_The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1493195810;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1493195810;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1493195810;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1495484544;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1496911361;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1497693649;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1509723634;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1516028607;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1518008865;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1518008932;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1518196458;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1518989075;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1520268868;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1523971392;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1532066767;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1534492343;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> @PublicEvolving 	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes);1547196539;Initiates a Project transformation on a {@link Tuple} {@link DataStream}.<br>_<b>Note: Only Tuple DataStreams can be projected.</b>__<p>The transformation projects each Tuple of the DataSet onto a (sub)set of_fields.__@param fieldIndexes_The field indexes of the input tuples that are retained. The_order of fields in the output tuple corresponds to the order_of field indexes._@return The projected DataStream__@see Tuple_@see DataStream;@PublicEvolving_	public <R extends Tuple> SingleOutputStreamOperator<R> project(int... fieldIndexes) {_		return new StreamProjection<>(this, fieldIndexes).projectTupleX()__	};initiates,a,project,transformation,on,a,link,tuple,link,data,stream,br,b,note,only,tuple,data,streams,can,be,projected,b,p,the,transformation,projects,each,tuple,of,the,data,set,onto,a,sub,set,of,fields,param,field,indexes,the,field,indexes,of,the,input,tuples,that,are,retained,the,order,of,fields,in,the,output,tuple,corresponds,to,the,order,of,field,indexes,return,the,projected,data,stream,see,tuple,see,data,stream;public,evolving,public,r,extends,tuple,single,output,stream,operator,r,project,int,field,indexes,return,new,stream,projection,this,field,indexes,project,tuple,x
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1445418103;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Control the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,control,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1446112342;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Control the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,control,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1448637843;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Control the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,control,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1449051578;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_the path pointing to the location the text file is written to_@param writeMode_Control the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,control,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1450713543;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1453742891;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> public DataStreamSink<T> writeAsText(String path, WriteMode writeMode);1454428544;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return The closed DataStream.;public DataStreamSink<T> writeAsText(String path, WriteMode writeMode) {_		TextOutputFormat<T> tof = new TextOutputFormat<T>(new Path(path))__		tof.setWriteMode(writeMode)__		return write(tof, 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,text,string,path,write,mode,write,mode,text,output,format,t,tof,new,text,output,format,t,new,path,path,tof,set,write,mode,write,mode,return,write,tof,0l
DataStream -> @Experimental 	public DataStream<T> global();1454679829;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @Experimental 	public DataStream<T> global();1454933011;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @Experimental 	public DataStream<T> global();1454933011;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@Experimental_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;experimental,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455101486;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<T, R>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,t,r,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455634373;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455640938;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455703064;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455704943;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455718153;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1455718153;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1456347641;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1456508941;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> @PublicEvolving 	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator);1456774151;Method for passing user defined operators along with the type_information that will transform the DataStream.__@param operatorName_name of the operator, for logging purposes_@param outTypeInfo_the output type of the operator_@param operator_the object containing the transformation logic_@param <R>_type of the return stream_@return the data stream constructed;@PublicEvolving_	public <R> SingleOutputStreamOperator<R, ?> transform(String operatorName, TypeInformation<R> outTypeInfo, OneInputStreamOperator<T, R> operator) {__		_		transformation.getOutputType()___		OneInputTransformation<T, R> resultTransform = new OneInputTransformation<>(_				this.transformation,_				operatorName,_				operator,_				outTypeInfo,_				environment.getParallelism())___		@SuppressWarnings({ "unchecked", "rawtypes" })_		SingleOutputStreamOperator<R, ?> returnStream = new SingleOutputStreamOperator(environment, resultTransform)___		getExecutionEnvironment().addOperator(resultTransform)___		return returnStream__	};method,for,passing,user,defined,operators,along,with,the,type,information,that,will,transform,the,data,stream,param,operator,name,name,of,the,operator,for,logging,purposes,param,out,type,info,the,output,type,of,the,operator,param,operator,the,object,containing,the,transformation,logic,param,r,type,of,the,return,stream,return,the,data,stream,constructed;public,evolving,public,r,single,output,stream,operator,r,transform,string,operator,name,type,information,r,out,type,info,one,input,stream,operator,t,r,operator,transformation,get,output,type,one,input,transformation,t,r,result,transform,new,one,input,transformation,this,transformation,operator,name,operator,out,type,info,environment,get,parallelism,suppress,warnings,unchecked,rawtypes,single,output,stream,operator,r,return,stream,new,single,output,stream,operator,environment,result,transform,get,execution,environment,add,operator,result,transform,return,return,stream
DataStream -> public DataStreamSink<T> printToErr();1445418103;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1446112342;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1448637843;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1449051578;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1450713543;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1453742891;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> public DataStreamSink<T> printToErr();1454428544;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1488304750;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1488799576;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1489165080;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1493195810;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1493195810;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1493195810;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1493195810;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1495484544;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1496911361;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1497693649;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1509723634;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1516028607;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1518008865;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1518008932;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1518196458;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1518989075;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1520268868;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1523971392;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1532066767;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1534492343;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> @PublicEvolving 	public ResourceSpec getPreferredResources();1547196539;Gets the preferred resources for this operator.__@return The preferred resources set for this operator.;@PublicEvolving_	public ResourceSpec getPreferredResources() {_		return transformation.getPreferredResources()__	};gets,the,preferred,resources,for,this,operator,return,the,preferred,resources,set,for,this,operator;public,evolving,public,resource,spec,get,preferred,resources,return,transformation,get,preferred,resources
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1445418103;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1446112342;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1448637843;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1449051578;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1450713543;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1453742891;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1454428544;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1454679829;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1454933011;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1454933011;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455101486;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<T>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,t,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455634373;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455640938;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455703064;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455704943;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455718153;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1455718153;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1456347641;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1456508941;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1456774151;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1456778239;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1461851300;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1465991918;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1466613129;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1488304750;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1488304750;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1488799576;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1489165080;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1493195810;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type._<p>_Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1493195810;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1493195810;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1493195810;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1495484544;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1496911361;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1497693649;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1509723634;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1516028607;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1518008865;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1518008932;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1518196458;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1518989075;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1520268868;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1523971392;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1532066767;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1534492343;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field);1547196539;Partitions a tuple DataStream on the specified key fields using a custom partitioner._This method takes the key position to partition on, and a partitioner that accepts the key type.__<p>Note: This method works only on single field keys.__@param partitioner The partitioner to assign partitions to keys._@param field The field index on which the DataStream is to partitioned._@return The partitioned DataStream.;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, int field) {_		Keys.ExpressionKeys<T> outExpressionKeys = new Keys.ExpressionKeys<>(new int[]{field}, getType())__		return partitionCustom(partitioner, outExpressionKeys)__	};partitions,a,tuple,data,stream,on,the,specified,key,fields,using,a,custom,partitioner,this,method,takes,the,key,position,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,field,the,field,index,on,which,the,data,stream,is,to,partitioned,return,the,partitioned,data,stream;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,int,field,keys,expression,keys,t,out,expression,keys,new,keys,expression,keys,new,int,field,get,type,return,partition,custom,partitioner,out,expression,keys
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1445418103;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!(newStream.getParallelism() == this.getParallelism())) {_				throw new UnsupportedClassVersionError(_						"DataStream can only be unioned with DataStreams of the same parallelism. " +_								"This Stream: " + this.getTransformation() +_								", other stream: " + newStream.getTransformation())__			}_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			Collection<StreamTransformation<?>> predecessors = newStream.getTransformation().getTransitivePredecessors()___			if (predecessors.contains(this.transformation) || thisPredecessors.contains(newStream.getTransformation())) {_				throw new UnsupportedOperationException("A DataStream cannot be unioned with itself")__			}_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,new,stream,get,parallelism,this,get,parallelism,throw,new,unsupported,class,version,error,data,stream,can,only,be,unioned,with,data,streams,of,the,same,parallelism,this,stream,this,get,transformation,other,stream,new,stream,get,transformation,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,collection,stream,transformation,predecessors,new,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,this,predecessors,contains,new,stream,get,transformation,throw,new,unsupported,operation,exception,a,data,stream,cannot,be,unioned,with,itself,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1446112342;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!(newStream.getParallelism() == this.getParallelism())) {_				throw new UnsupportedClassVersionError(_						"DataStream can only be unioned with DataStreams of the same parallelism. " +_								"This Stream: " + this.getTransformation() +_								", other stream: " + newStream.getTransformation())__			}_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			Collection<StreamTransformation<?>> predecessors = newStream.getTransformation().getTransitivePredecessors()___			if (predecessors.contains(this.transformation) || thisPredecessors.contains(newStream.getTransformation())) {_				throw new UnsupportedOperationException("A DataStream cannot be unioned with itself")__			}_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,new,stream,get,parallelism,this,get,parallelism,throw,new,unsupported,class,version,error,data,stream,can,only,be,unioned,with,data,streams,of,the,same,parallelism,this,stream,this,get,transformation,other,stream,new,stream,get,transformation,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,collection,stream,transformation,predecessors,new,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,this,predecessors,contains,new,stream,get,transformation,throw,new,unsupported,operation,exception,a,data,stream,cannot,be,unioned,with,itself,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1448637843;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!(newStream.getParallelism() == this.getParallelism())) {_				throw new UnsupportedClassVersionError(_						"DataStream can only be unioned with DataStreams of the same parallelism. " +_								"This Stream: " + this.getTransformation() +_								", other stream: " + newStream.getTransformation())__			}_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			Collection<StreamTransformation<?>> predecessors = newStream.getTransformation().getTransitivePredecessors()___			if (predecessors.contains(this.transformation) || thisPredecessors.contains(newStream.getTransformation())) {_				throw new UnsupportedOperationException("A DataStream cannot be unioned with itself")__			}_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,new,stream,get,parallelism,this,get,parallelism,throw,new,unsupported,class,version,error,data,stream,can,only,be,unioned,with,data,streams,of,the,same,parallelism,this,stream,this,get,transformation,other,stream,new,stream,get,transformation,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,collection,stream,transformation,predecessors,new,stream,get,transformation,get,transitive,predecessors,if,predecessors,contains,this,transformation,this,predecessors,contains,new,stream,get,transformation,throw,new,unsupported,operation,exception,a,data,stream,cannot,be,unioned,with,itself,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1449051578;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1450713543;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1453742891;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1454428544;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1454679829;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1454933011;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1454933011;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455101486;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<T>(this.environment, new UnionTransformation<T>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,t,this,environment,new,union,transformation,t,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455634373;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		Collection<StreamTransformation<?>> thisPredecessors = this.getTransformation().getTransitivePredecessors()___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,collection,stream,transformation,this,predecessors,this,get,transformation,get,transitive,predecessors,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455640938;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455703064;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455704943;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455718153;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1455718153;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1456347641;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1456508941;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1456774151;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1456778239;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1461851300;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1465991918;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1466613129;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1488304750;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1488304750;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1488799576;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1489165080;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1493195810;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1493195810;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}_			_			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1493195810;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1493195810;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1495484544;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1496911361;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1497693649;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1509723634;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1516028607;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1518008865;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1518008932;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1518196458;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1518989075;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1520268868;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1523971392;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1532066767;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1534492343;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @SafeVarargs 	public final DataStream<T> union(DataStream<T>... streams);1547196539;Creates a new {@link DataStream} by merging {@link DataStream} outputs of_the same type with each other. The DataStreams merged using this operator_will be transformed simultaneously.__@param streams_The DataStreams to union output with._@return The {@link DataStream}.;@SafeVarargs_	public final DataStream<T> union(DataStream<T>... streams) {_		List<StreamTransformation<T>> unionedTransforms = new ArrayList<>()__		unionedTransforms.add(this.transformation)___		for (DataStream<T> newStream : streams) {_			if (!getType().equals(newStream.getType())) {_				throw new IllegalArgumentException("Cannot union streams of different types: "_						+ getType() + " and " + newStream.getType())__			}__			unionedTransforms.add(newStream.getTransformation())__		}_		return new DataStream<>(this.environment, new UnionTransformation<>(unionedTransforms))__	};creates,a,new,link,data,stream,by,merging,link,data,stream,outputs,of,the,same,type,with,each,other,the,data,streams,merged,using,this,operator,will,be,transformed,simultaneously,param,streams,the,data,streams,to,union,output,with,return,the,link,data,stream;safe,varargs,public,final,data,stream,t,union,data,stream,t,streams,list,stream,transformation,t,unioned,transforms,new,array,list,unioned,transforms,add,this,transformation,for,data,stream,t,new,stream,streams,if,get,type,equals,new,stream,get,type,throw,new,illegal,argument,exception,cannot,union,streams,of,different,types,get,type,and,new,stream,get,type,unioned,transforms,add,new,stream,get,transformation,return,new,data,stream,this,environment,new,union,transformation,unioned,transforms
DataStream -> @Experimental 	public DataStreamSink<T> printToErr();1454679829;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> printToErr();1454933011;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> printToErr();1454933011;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path);1454679829;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path);1454933011;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> @Experimental 	public DataStreamSink<T> writeAsCsv(String path);1454933011;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to__@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeAsCsv(String path) {_		return writeAsCsv(path, null, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,csv,string,path,return,write,as,csv,path,null,0l,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> print();1445418103;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1446112342;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1448637843;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1449051578;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1450713543;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1453742891;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> public DataStreamSink<T> print();1454428544;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> print();1454679829;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> print();1454933011;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> @Experimental 	public DataStreamSink<T> print();1454933011;Writes a DataStream to the standard output stream (stdout).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> print() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>()__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stdout,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;experimental,public,data,stream,sink,t,print,print,sink,function,t,print,function,new,print,sink,function,t,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455101486;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<T>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,t,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455634373;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455640938;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455703064;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455704943;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455718153;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1455718153;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1456347641;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1456508941;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1456774151;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1456778239;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1461851300;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1465991918;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1466613129;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1488304750;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1488304750;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1488799576;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1489165080;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1493195810;Writes a DataStream to the standard output stream (stderr).__<p>_For each element of the DataStream the result of_{@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1493195810;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1493195810;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1493195810;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1495484544;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1496911361;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1497693649;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1509723634;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1516028607;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1518008865;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1518008932;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1518196458;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction)__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1518989075;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1520268868;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1523971392;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1532066767;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1534492343;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @PublicEvolving 	public DataStreamSink<T> printToErr();1547196539;Writes a DataStream to the standard output stream (stderr).__<p>For each element of the DataStream the result of {@link Object#toString()} is written.__<p>NOTE: This will print to stderr on the machine where the code is executed, i.e. the Flink_worker.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> printToErr() {_		PrintSinkFunction<T> printFunction = new PrintSinkFunction<>(true)__		return addSink(printFunction).name("Print to Std. Err")__	};writes,a,data,stream,to,the,standard,output,stream,stderr,p,for,each,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,p,note,this,will,print,to,stderr,on,the,machine,where,the,code,is,executed,i,e,the,flink,worker,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,print,to,err,print,sink,function,t,print,function,new,print,sink,function,true,return,add,sink,print,function,name,print,to,std,err
DataStream -> @Experimental 	public DataStreamSink<T> write(OutputFormat<T> format, long millis);1454679829;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;@Experimental_	public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> @Experimental 	public DataStreamSink<T> write(OutputFormat<T> format, long millis);1454933011;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;@Experimental_	public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> @Experimental 	public DataStreamSink<T> write(OutputFormat<T> format, long millis);1454933011;Writes the dataStream into an output, described by an OutputFormat.__@param format The output format_@param millis the write frequency_@return The closed DataStream;@Experimental_	public DataStreamSink<T> write(OutputFormat<T> format, long millis) {_		return addSink(new FileSinkFunctionByMillis<T>(format, millis))__	};writes,the,data,stream,into,an,output,described,by,an,output,format,param,format,the,output,format,param,millis,the,write,frequency,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,output,format,t,format,long,millis,return,add,sink,new,file,sink,function,by,millis,t,format,millis
DataStream -> @PublicEvolving 	public DataStream<T> global();1455101486;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455634373;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455640938;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455703064;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455704943;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455718153;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1455718153;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1456347641;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1456508941;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1456774151;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1456778239;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1461851300;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1465991918;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1466613129;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1488304750;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1488304750;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1488799576;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1489165080;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1493195810;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1493195810;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1493195810;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1493195810;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1495484544;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1496911361;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1497693649;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1509723634;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1516028607;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1518008865;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1518008932;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1518196458;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1518989075;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1520268868;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1523971392;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1532066767;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1534492343;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> global();1547196539;Sets the partitioning of the {@link DataStream} so that the output values_all go to the first instance of the next processing operator. Use this_setting with care since it might cause a serious performance bottleneck_in the application.__@return The DataStream with shuffle partitioning set.;@PublicEvolving_	public DataStream<T> global() {_		return setConnectionType(new GlobalPartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,values,all,go,to,the,first,instance,of,the,next,processing,operator,use,this,setting,with,care,since,it,might,cause,a,serious,performance,bottleneck,in,the,application,return,the,data,stream,with,shuffle,partitioning,set;public,evolving,public,data,stream,t,global,return,set,connection,type,new,global,partitioner,t
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455101486;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455634373;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455640938;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455703064;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455704943;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455718153;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1455718153;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1456347641;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1456508941;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1456774151;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1456778239;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1461851300;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1465991918;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1466613129;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1488304750;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1488304750;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1488799576;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1489165080;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1493195810;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1493195810;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1495484544;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1496911361;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1497693649;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1509723634;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1516028607;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1518008865;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1518008932;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1518196458;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1518989075;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1520268868;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1523971392;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1532066767;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1534492343;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeAsText(String path);1547196539;Writes a DataStream to the file specified by path in text format.__<p>For every element of the DataStream the result of {@link Object#toString()} is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@PublicEvolving_	public DataStreamSink<T> writeAsText(String path) {_		return writeUsingOutputFormat(new TextOutputFormat<T>(new Path(path)))__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,as,text,string,path,return,write,using,output,format,new,text,output,format,t,new,path,path
DataStream -> @Internal 	public int getId();1456508941;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1456774151;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1456778239;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1461851300;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1465991918;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1466613129;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1488304750;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1488304750;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1488799576;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1489165080;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1493195810;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1493195810;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1493195810;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1493195810;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1495484544;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1496911361;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1497693649;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1509723634;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1516028607;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1518008865;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1518008932;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1518196458;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1518989075;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1520268868;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1523971392;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1532066767;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1534492343;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @Internal 	public int getId();1547196539;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public int getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,int,get,id,return,transformation,get,id
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455101486;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455634373;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455640938;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455703064;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455704943;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455718153;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1455718153;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1456347641;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1456508941;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1456774151;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1456778239;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1461851300;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1465991918;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1466613129;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1488304750;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1488304750;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1488799576;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1489165080;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1493195810;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1493195810;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1493195810;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1493195810;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1495484544;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1496911361;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1497693649;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1509723634;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1516028607;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1518008865;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1518008932;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1518196458;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1518989075;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1520268868;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1523971392;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1532066767;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1534492343;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1547196539;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@PublicEvolving_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,evolving,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1445418103;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1446112342;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1448637843;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1449051578;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1450713543;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1453742891;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1454428544;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1454679829;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1454933011;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1454933011;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455101486;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455634373;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455640938;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455703064;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455704943;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455718153;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1455718153;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1456347641;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1456508941;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1456774151;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1456778239;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1461851300;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1465991918;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1466613129;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1488304750;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1488304750;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1488799576;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1489165080;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1493195810;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1495484544;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1496911361;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1497693649;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1509723634;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1516028607;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1518008865;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1518008932;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1518196458;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1518989075;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1520268868;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1523971392;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1532066767;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1534492343;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream);1547196539;Creates a join operation. See {@link JoinedStreams} for an example of how the keys_and window can be specified.;public <T2> JoinedStreams<T, T2> join(DataStream<T2> otherStream) {_		return new JoinedStreams<>(this, otherStream)__	};creates,a,join,operation,see,link,joined,streams,for,an,example,of,how,the,keys,and,window,can,be,specified;public,t2,joined,streams,t,t2,join,data,stream,t2,other,stream,return,new,joined,streams,this,other,stream
DataStream -> @Experimental 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1454679829;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> @Experimental 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1454933011;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> @Experimental 	public IterativeStream<T> iterate(long maxWaitTimeMillis);1454933011;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@param maxWaitTimeMillis_Number of milliseconds to wait between inputs before shutting_down__@return The iterative data stream created.;@Experimental_	public IterativeStream<T> iterate(long maxWaitTimeMillis) {_		return new IterativeStream<T>(this, maxWaitTimeMillis)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,param,max,wait,time,millis,number,of,milliseconds,to,wait,between,inputs,before,shutting,down,return,the,iterative,data,stream,created;experimental,public,iterative,stream,t,iterate,long,max,wait,time,millis,return,new,iterative,stream,t,this,max,wait,time,millis
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path);1454679829;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> @Experimental 	public DataStreamSink<T> writeAsText(String path);1454933011;Writes a DataStream to the file specified by path in text format.__<p>_For every element of the DataStream the result of {@link Object#toString()}_is written.__@param path_The path pointing to the location the text file is written to.__@return The closed DataStream.;@Experimental_	public DataStreamSink<T> writeAsText(String path) {_		return write(new TextOutputFormat<T>(new Path(path)), 0L)__	};writes,a,data,stream,to,the,file,specified,by,path,in,text,format,p,for,every,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,as,text,string,path,return,write,new,text,output,format,t,new,path,path,0l
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1445418103;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1446112342;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1448637843;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1449051578;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1450713543;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1453742891;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1454428544;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1454679829;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1454933011;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1454933011;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455101486;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<T>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,t,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455634373;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455640938;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455703064;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455704943;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455718153;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1455718153;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1456347641;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1456508941;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1456774151;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1456778239;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1461851300;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1465991918;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1466613129;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1488304750;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1488304750;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1488799576;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1489165080;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1493195810;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1493195810;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1493195810;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1493195810;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1495484544;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1496911361;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1497693649;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1509723634;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1516028607;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1518008865;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1518008932;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1518196458;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1518989075;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1520268868;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1523971392;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1532066767;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1534492343;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> public KeyedStream<T, Tuple> keyBy(int... fields);1547196539;Partitions the operator state of a {@link DataStream} by the given key positions.__@param fields_The position of the fields on which the {@link DataStream}_will be grouped._@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public KeyedStream<T, Tuple> keyBy(int... fields) {_		if (getType() instanceof BasicArrayTypeInfo || getType() instanceof PrimitiveArrayTypeInfo) {_			return keyBy(KeySelectorUtil.getSelectorForArray(fields, getType()))__		} else {_			return keyBy(new Keys.ExpressionKeys<>(fields, getType()))__		}_	};partitions,the,operator,state,of,a,link,data,stream,by,the,given,key,positions,param,fields,the,position,of,the,fields,on,which,the,link,data,stream,will,be,grouped,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,keyed,stream,t,tuple,key,by,int,fields,if,get,type,instanceof,basic,array,type,info,get,type,instanceof,primitive,array,type,info,return,key,by,key,selector,util,get,selector,for,array,fields,get,type,else,return,key,by,new,keys,expression,keys,fields,get,type
DataStream -> @Experimental 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1454679829;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @Experimental 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1454933011;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @Experimental 	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1454933011;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;@Experimental_	public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;experimental,public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455101486;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455634373;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455640938;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455703064;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455704943;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1455718153;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1456347641;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1456508941;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1456774151;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1456778239;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1461851300;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1465991918;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1466613129;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1488304750;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1488799576;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1489165080;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1493195810;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1495484544;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1496911361;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1497693649;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1509723634;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1516028607;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1518008865;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public DataStream<T> rescale();1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are distributed evenly to a subset of instances of the next operation in a round-robin_fashion.__<p>The subset of downstream operations to which the upstream operation sends_elements depends on the degree of parallelism of both the upstream and downstream operation._For example, if the upstream operation has parallelism 2 and the downstream operation_has parallelism 4, then one upstream operation would distribute elements to two_downstream operations while the other upstream operation would distribute to the other_two downstream operations. If, on the other hand, the downstream operation has parallelism_2 while the upstream operation has parallelism 4 then two upstream operations will_distribute to one downstream operation while the other two upstream operations will_distribute to the other downstream operations.__<p>In cases where the different parallelisms are not multiples of each other one or several_downstream operations will have a differing number of inputs from upstream operations.__@return The DataStream with rescale partitioning set.;@PublicEvolving_	public DataStream<T> rescale() {_		return setConnectionType(new RescalePartitioner<T>())__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,distributed,evenly,to,a,subset,of,instances,of,the,next,operation,in,a,round,robin,fashion,p,the,subset,of,downstream,operations,to,which,the,upstream,operation,sends,elements,depends,on,the,degree,of,parallelism,of,both,the,upstream,and,downstream,operation,for,example,if,the,upstream,operation,has,parallelism,2,and,the,downstream,operation,has,parallelism,4,then,one,upstream,operation,would,distribute,elements,to,two,downstream,operations,while,the,other,upstream,operation,would,distribute,to,the,other,two,downstream,operations,if,on,the,other,hand,the,downstream,operation,has,parallelism,2,while,the,upstream,operation,has,parallelism,4,then,two,upstream,operations,will,distribute,to,one,downstream,operation,while,the,other,two,upstream,operations,will,distribute,to,the,other,downstream,operations,p,in,cases,where,the,different,parallelisms,are,not,multiples,of,each,other,one,or,several,downstream,operations,will,have,a,differing,number,of,inputs,from,upstream,operations,return,the,data,stream,with,rescale,partitioning,set;public,evolving,public,data,stream,t,rescale,return,set,connection,type,new,rescale,partitioner,t
DataStream -> @PublicEvolving 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455101486;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@PublicEvolving_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,evolving,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @PublicEvolving 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455634373;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@PublicEvolving_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,evolving,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @PublicEvolving 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455640938;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@PublicEvolving_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,evolving,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> @PublicEvolving 	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor);1455703064;Extracts a timestamp from an element and assigns it as the internal timestamp of that element._The internal timestamps are, for example, used to to event-time window operations.__<p>_If you know that the timestamps are strictly increasing you can use an_{@link org.apache.flink.streaming.api.functions.AscendingTimestampExtractor}. Otherwise,_you should provide a {@link TimestampExtractor} that also implements_{@link TimestampExtractor#getCurrentWatermark()} to keep track of watermarks.__@see org.apache.flink.streaming.api.watermark.Watermark__@param extractor The TimestampExtractor that is called for each element of the DataStream.;@PublicEvolving_	public SingleOutputStreamOperator<T, ?> assignTimestamps(TimestampExtractor<T> extractor) {_		_		_		_		int inputParallelism = getTransformation().getParallelism()__		ExtractTimestampsOperator<T> operator = new ExtractTimestampsOperator<>(clean(extractor))__		return transform("ExtractTimestamps", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};extracts,a,timestamp,from,an,element,and,assigns,it,as,the,internal,timestamp,of,that,element,the,internal,timestamps,are,for,example,used,to,to,event,time,window,operations,p,if,you,know,that,the,timestamps,are,strictly,increasing,you,can,use,an,link,org,apache,flink,streaming,api,functions,ascending,timestamp,extractor,otherwise,you,should,provide,a,link,timestamp,extractor,that,also,implements,link,timestamp,extractor,get,current,watermark,to,keep,track,of,watermarks,see,org,apache,flink,streaming,api,watermark,watermark,param,extractor,the,timestamp,extractor,that,is,called,for,each,element,of,the,data,stream;public,evolving,public,single,output,stream,operator,t,assign,timestamps,timestamp,extractor,t,extractor,int,input,parallelism,get,transformation,get,parallelism,extract,timestamps,operator,t,operator,new,extract,timestamps,operator,clean,extractor,return,transform,extract,timestamps,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1445418103;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1446112342;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1448637843;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1449051578;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1450713543;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1453742891;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1454428544;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1454679829;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1454933011;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1454933011;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455101486;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<K, T>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,k,t,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455634373;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455640938;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455703064;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455704943;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455718153;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1455718153;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1456347641;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1456508941;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1456774151;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1456778239;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1461851300;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1465991918;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1466613129;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1488304750;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1488304750;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1488799576;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1489165080;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1493195810;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type._<p>_Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1493195810;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1493195810;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1493195810;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1495484544;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1496911361;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1497693649;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1509723634;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1516028607;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1518008865;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1518008932;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1518196458;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1518989075;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1520268868;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1523971392;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1532066767;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1534492343;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector);1547196539;Partitions a DataStream on the key returned by the selector, using a custom partitioner._This method takes the key selector to get the key to partition on, and a partitioner that_accepts the key type.__<p>Note: This method works only on single field keys, i.e. the selector cannot return tuples_of fields.__@param partitioner_The partitioner to assign partitions to keys._@param keySelector_The KeySelector with which the DataStream is partitioned._@return The partitioned DataStream._@see KeySelector;public <K> DataStream<T> partitionCustom(Partitioner<K> partitioner, KeySelector<T, K> keySelector) {_		return setConnectionType(new CustomPartitionerWrapper<>(clean(partitioner),_				clean(keySelector)))__	};partitions,a,data,stream,on,the,key,returned,by,the,selector,using,a,custom,partitioner,this,method,takes,the,key,selector,to,get,the,key,to,partition,on,and,a,partitioner,that,accepts,the,key,type,p,note,this,method,works,only,on,single,field,keys,i,e,the,selector,cannot,return,tuples,of,fields,param,partitioner,the,partitioner,to,assign,partitions,to,keys,param,key,selector,the,key,selector,with,which,the,data,stream,is,partitioned,return,the,partitioned,data,stream,see,key,selector;public,k,data,stream,t,partition,custom,partitioner,k,partitioner,key,selector,t,k,key,selector,return,set,connection,type,new,custom,partitioner,wrapper,clean,partitioner,clean,key,selector
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1445418103;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1446112342;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1448637843;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1449051578;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1450713543;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1453742891;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1454428544;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1454679829;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1454933011;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1454933011;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455101486;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<T, R>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,t,r,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455634373;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455640938;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455703064;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455704943;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455718153;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1455718153;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1456347641;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1456508941;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1456774151;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1456778239;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1461851300;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1465991918;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1466613129;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1488304750;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1488304750;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1488799576;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1489165080;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1493195810;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1493195810;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1493195810;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1493195810;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1495484544;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1496911361;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1497693649;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1509723634;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1516028607;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1518008865;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1518008932;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1518196458;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1518989075;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1520268868;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1523971392;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1532066767;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1534492343;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream);1547196539;Creates a new {@link ConnectedStreams} by connecting_{@link DataStream} outputs of (possible) different types with each other._The DataStreams connected using this operator can be used with_CoFunctions to apply joint transformations.__@param dataStream_The DataStream with which this stream will be connected._@return The {@link ConnectedStreams}.;public <R> ConnectedStreams<T, R> connect(DataStream<R> dataStream) {_		return new ConnectedStreams<>(environment, this, dataStream)__	};creates,a,new,link,connected,streams,by,connecting,link,data,stream,outputs,of,possible,different,types,with,each,other,the,data,streams,connected,using,this,operator,can,be,used,with,co,functions,to,apply,joint,transformations,param,data,stream,the,data,stream,with,which,this,stream,will,be,connected,return,the,link,connected,streams;public,r,connected,streams,t,r,connect,data,stream,r,data,stream,return,new,connected,streams,environment,this,data,stream
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1518008932;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly creates a {@link org.apache.flink.api.common.state.BroadcastState broadcast state}_which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,creates,a,link,org,apache,flink,api,common,state,broadcast,state,broadcast,state,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1518196458;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1518989075;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1520268868;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1523971392;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1532066767;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1534492343;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @PublicEvolving 	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors);1547196539;Sets the partitioning of the {@link DataStream} so that the output elements_are broadcasted to every parallel instance of the next operation. In addition,_it implicitly as many {@link org.apache.flink.api.common.state.BroadcastState broadcast states}_as the specified descriptors which can be used to store the element of the stream.__@param broadcastStateDescriptors the descriptors of the broadcast states to create._@return A {@link BroadcastStream} which can be used in the {@link #connect(BroadcastStream)} to_create a {@link BroadcastConnectedStream} for further processing of the elements.;@PublicEvolving_	public BroadcastStream<T> broadcast(final MapStateDescriptor<?, ?>... broadcastStateDescriptors) {_		Preconditions.checkNotNull(broadcastStateDescriptors)__		final DataStream<T> broadcastStream = setConnectionType(new BroadcastPartitioner<>())__		return new BroadcastStream<>(environment, broadcastStream, broadcastStateDescriptors)__	};sets,the,partitioning,of,the,link,data,stream,so,that,the,output,elements,are,broadcasted,to,every,parallel,instance,of,the,next,operation,in,addition,it,implicitly,as,many,link,org,apache,flink,api,common,state,broadcast,state,broadcast,states,as,the,specified,descriptors,which,can,be,used,to,store,the,element,of,the,stream,param,broadcast,state,descriptors,the,descriptors,of,the,broadcast,states,to,create,return,a,link,broadcast,stream,which,can,be,used,in,the,link,connect,broadcast,stream,to,create,a,link,broadcast,connected,stream,for,further,processing,of,the,elements;public,evolving,public,broadcast,stream,t,broadcast,final,map,state,descriptor,broadcast,state,descriptors,preconditions,check,not,null,broadcast,state,descriptors,final,data,stream,t,broadcast,stream,set,connection,type,new,broadcast,partitioner,return,new,broadcast,stream,environment,broadcast,stream,broadcast,state,descriptors
DataStream -> @Internal 	public Integer getId();1454679829;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1454933011;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1454933011;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455101486;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455634373;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455640938;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455703064;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455704943;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455718153;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1455718153;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> @Internal 	public Integer getId();1456347641;Returns the ID of the {@link DataStream} in the current {@link StreamExecutionEnvironment}.__@return ID of the DataStream;@Internal_	public Integer getId() {_		return transformation.getId()__	};returns,the,id,of,the,link,data,stream,in,the,current,link,stream,execution,environment,return,id,of,the,data,stream;internal,public,integer,get,id,return,transformation,get,id
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1445418103;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1446112342;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1448637843;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1449051578;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1450713543;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1453742891;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1454428544;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1454679829;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1454933011;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1454933011;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455101486;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<T, R>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,t,r,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455634373;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455640938;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455703064;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455704943;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455718153;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1455718153;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1456347641;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1456508941;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper);1456774151;Applies a FlatMap transformation on a {@link DataStream}. The_transformation calls a {@link FlatMapFunction} for each element of the_DataStream. Each FlatMapFunction call can return any number of elements_including none. The user can also extend {@link RichFlatMapFunction} to_gain access to other features provided by the_{@link org.apache.flink.api.common.functions.RichFunction} interface.__@param flatMapper_The FlatMapFunction that is called for each element of the_DataStream__@param <R>_output type_@return The transformed {@link DataStream}.;public <R> SingleOutputStreamOperator<R, ?> flatMap(FlatMapFunction<T, R> flatMapper) {__		TypeInformation<R> outType = TypeExtractor.getFlatMapReturnTypes(clean(flatMapper),_				getType(), Utils.getCallLocationName(), true)___		return transform("Flat Map", outType, new StreamFlatMap<>(clean(flatMapper)))___	};applies,a,flat,map,transformation,on,a,link,data,stream,the,transformation,calls,a,link,flat,map,function,for,each,element,of,the,data,stream,each,flat,map,function,call,can,return,any,number,of,elements,including,none,the,user,can,also,extend,link,rich,flat,map,function,to,gain,access,to,other,features,provided,by,the,link,org,apache,flink,api,common,functions,rich,function,interface,param,flat,mapper,the,flat,map,function,that,is,called,for,each,element,of,the,data,stream,param,r,output,type,return,the,transformed,link,data,stream;public,r,single,output,stream,operator,r,flat,map,flat,map,function,t,r,flat,mapper,type,information,r,out,type,type,extractor,get,flat,map,return,types,clean,flat,mapper,get,type,utils,get,call,location,name,true,return,transform,flat,map,out,type,new,stream,flat,map,clean,flat,mapper
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1445418103;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1446112342;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1448637843;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1449051578;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1450713543;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1453742891;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1454428544;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1454679829;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1454933011;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1454933011;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455101486;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<T, K>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,t,k,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455634373;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455640938;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455703064;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455704943;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455718153;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1455718153;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1456347641;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1456508941;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1456774151;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1456778239;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1461851300;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1465991918;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1466613129;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1488304750;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1488304750;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1488799576;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1489165080;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1493195810;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1493195810;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1493195810;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1493195810;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1495484544;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1496911361;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1497693649;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1509723634;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1516028607;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1518008865;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1518008932;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1518196458;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1518989075;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1520268868;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1523971392;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1532066767;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		Preconditions.checkNotNull(key)__		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,preconditions,check,not,null,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1534492343;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		Preconditions.checkNotNull(key)__		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,preconditions,check,not,null,key,return,new,keyed,stream,this,clean,key
DataStream -> public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key);1547196539;It creates a new {@link KeyedStream} that uses the provided key for partitioning_its operator states.__@param key_The KeySelector to be used for extracting the key for partitioning_@return The {@link DataStream} with partitioned state (i.e. KeyedStream);public <K> KeyedStream<T, K> keyBy(KeySelector<T, K> key) {_		Preconditions.checkNotNull(key)__		return new KeyedStream<>(this, clean(key))__	};it,creates,a,new,link,keyed,stream,that,uses,the,provided,key,for,partitioning,its,operator,states,param,key,the,key,selector,to,be,used,for,extracting,the,key,for,partitioning,return,the,link,data,stream,with,partitioned,state,i,e,keyed,stream;public,k,keyed,stream,t,k,key,by,key,selector,t,k,key,preconditions,check,not,null,key,return,new,keyed,stream,this,clean,key
DataStream -> public IterativeStream<T> iterate();1445418103;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1446112342;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1448637843;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1449051578;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1450713543;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1453742891;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public IterativeStream<T> iterate();1454428544;Initiates an iterative part of the program that feeds back data streams._The iterative part needs to be closed by calling_{@link IterativeStream#closeWith(DataStream)}. The transformation of_this IterativeStream will be the iteration head. The data stream_given to the {@link IterativeStream#closeWith(DataStream)} method is_the data stream that will be fed back and used as the input for the_iteration head. The user can also use different feedback type than the_input of the iteration and treat the input and feedback streams as a_{@link ConnectedStreams} be calling_{@link IterativeStream#withFeedbackType(TypeInformation)}_<p>_A common usage pattern for streaming iterations is to use output_splitting to send a part of the closing data stream to the head. Refer to_{@link #split(OutputSelector)} for more information._<p>_The iteration edge will be partitioned the same way as the first input of_the iteration head unless it is changed in the_{@link IterativeStream#closeWith(DataStream)} call._<p>_By default a DataStream with iteration will never terminate, but the user_can use the maxWaitTime parameter to set a max waiting time for the_iteration head. If no data received in the set time, the stream_terminates.__@return The iterative data stream created.;public IterativeStream<T> iterate() {_		return new IterativeStream<T>(this, 0)__	};initiates,an,iterative,part,of,the,program,that,feeds,back,data,streams,the,iterative,part,needs,to,be,closed,by,calling,link,iterative,stream,close,with,data,stream,the,transformation,of,this,iterative,stream,will,be,the,iteration,head,the,data,stream,given,to,the,link,iterative,stream,close,with,data,stream,method,is,the,data,stream,that,will,be,fed,back,and,used,as,the,input,for,the,iteration,head,the,user,can,also,use,different,feedback,type,than,the,input,of,the,iteration,and,treat,the,input,and,feedback,streams,as,a,link,connected,streams,be,calling,link,iterative,stream,with,feedback,type,type,information,p,a,common,usage,pattern,for,streaming,iterations,is,to,use,output,splitting,to,send,a,part,of,the,closing,data,stream,to,the,head,refer,to,link,split,output,selector,for,more,information,p,the,iteration,edge,will,be,partitioned,the,same,way,as,the,first,input,of,the,iteration,head,unless,it,is,changed,in,the,link,iterative,stream,close,with,data,stream,call,p,by,default,a,data,stream,with,iteration,will,never,terminate,but,the,user,can,use,the,max,wait,time,parameter,to,set,a,max,waiting,time,for,the,iteration,head,if,no,data,received,in,the,set,time,the,stream,terminates,return,the,iterative,data,stream,created;public,iterative,stream,t,iterate,return,new,iterative,stream,t,this,0
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1448637843;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1449051578;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1450713543;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1453742891;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema);1454428544;Writes the DataStream to a socket as a byte array. The format of the_output is specified by a {@link SerializationSchema}.__@param hostName_host of the socket_@param port_port of the socket_@param schema_schema for serialization_@return the closed DataStream;public DataStreamSink<T> writeToSocket(String hostName, int port, SerializationSchema<T> schema) {_		DataStreamSink<T> returnStream = addSink(new SocketClientSink<T>(hostName, port, schema, 0))__		returnStream.setParallelism(1)_ _		return returnStream__	};writes,the,data,stream,to,a,socket,as,a,byte,array,the,format,of,the,output,is,specified,by,a,link,serialization,schema,param,host,name,host,of,the,socket,param,port,port,of,the,socket,param,schema,schema,for,serialization,return,the,closed,data,stream;public,data,stream,sink,t,write,to,socket,string,host,name,int,port,serialization,schema,t,schema,data,stream,sink,t,return,stream,add,sink,new,socket,client,sink,t,host,name,port,schema,0,return,stream,set,parallelism,1,return,return,stream
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1454679829;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1454933011;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1454933011;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455101486;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455634373;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455640938;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455703064;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455704943;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455718153;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1455718153;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1456347641;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1456508941;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1456774151;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1456778239;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1461851300;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1465991918;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1466613129;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1488304750;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1488304750;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1488799576;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1489165080;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1493195810;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1493195810;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1493195810;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1493195810;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1495484544;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1496911361;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1497693649;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1509723634;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1516028607;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1518008865;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1518008932;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1518196458;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1518989075;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1520268868;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1523971392;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1532066767;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1534492343;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> @Internal 	public StreamTransformation<T> getTransformation();1547196539;Returns the {@link StreamTransformation} that represents the operation that logically creates_this {@link DataStream}.__@return The Transformation;@Internal_	public StreamTransformation<T> getTransformation() {_		return transformation__	};returns,the,link,stream,transformation,that,represents,the,operation,that,logically,creates,this,link,data,stream,return,the,transformation;internal,public,stream,transformation,t,get,transformation,return,transformation
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1456778239;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1461851300;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1465991918;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1466613129;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1488304750;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1488304750;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1488799576;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1489165080;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator = _				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1493195810;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1495484544;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1496911361;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1497693649;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1509723634;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1516028607;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1518008865;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1518008932;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1518196458;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1518989075;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1520268868;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1523971392;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1532066767;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1534492343;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks( 			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner);1547196539;Assigns timestamps to the elements in the data stream and creates watermarks to_signal event time progress based on the elements themselves.__<p>This method creates watermarks based purely on stream elements. For each element_that is handled via {@link AssignerWithPunctuatedWatermarks#extractTimestamp(Object, long)},_the {@link AssignerWithPunctuatedWatermarks#checkAndGetNextWatermark(Object, long)}_method is called, and a new watermark is emitted, if the returned watermark value is_non-negative and greater than the previous watermark.__<p>This method is useful when the data stream embeds watermark elements, or certain elements_carry a marker that can be used to determine the current event time watermark._This operation gives the programmer full control over the watermark generation. Users_should be aware that too aggressive watermark generation (i.e., generating hundreds of_watermarks every second) can cost some performance.__<p>For cases where watermarks should be created in a regular fashion, for example_every x milliseconds, use the {@link AssignerWithPeriodicWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPunctuatedWatermarks_@see AssignerWithPeriodicWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPeriodicWatermarks);public SingleOutputStreamOperator<T> assignTimestampsAndWatermarks(_			AssignerWithPunctuatedWatermarks<T> timestampAndWatermarkAssigner) {__		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPunctuatedWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)___		TimestampsAndPunctuatedWatermarksOperator<T> operator =_				new TimestampsAndPunctuatedWatermarksOperator<>(cleanedAssigner)___		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,creates,watermarks,to,signal,event,time,progress,based,on,the,elements,themselves,p,this,method,creates,watermarks,based,purely,on,stream,elements,for,each,element,that,is,handled,via,link,assigner,with,punctuated,watermarks,extract,timestamp,object,long,the,link,assigner,with,punctuated,watermarks,check,and,get,next,watermark,object,long,method,is,called,and,a,new,watermark,is,emitted,if,the,returned,watermark,value,is,non,negative,and,greater,than,the,previous,watermark,p,this,method,is,useful,when,the,data,stream,embeds,watermark,elements,or,certain,elements,carry,a,marker,that,can,be,used,to,determine,the,current,event,time,watermark,this,operation,gives,the,programmer,full,control,over,the,watermark,generation,users,should,be,aware,that,too,aggressive,watermark,generation,i,e,generating,hundreds,of,watermarks,every,second,can,cost,some,performance,p,for,cases,where,watermarks,should,be,created,in,a,regular,fashion,for,example,every,x,milliseconds,use,the,link,assigner,with,periodic,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,punctuated,watermarks,see,assigner,with,periodic,watermarks,see,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,punctuated,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,punctuated,watermarks,operator,t,operator,new,timestamps,and,punctuated,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1455704943;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1455718153;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1455718153;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1456347641;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1456508941;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks( 			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner);1456774151;Assigns timestamps to the elements in the data stream and periodically creates_watermarks to signal event time progress.__<p>This method creates watermarks periodically (for example every second), based_on the watermarks indicated by the given watermark generator. Even when no new elements_in the stream arrive, the given watermark generator will be periodically checked for_new watermarks. The interval in which watermarks are generated is defined in_{@link ExecutionConfig#setAutoWatermarkInterval(long)}.__<p>Use this method for the common cases, where some characteristic over all elements_should generate the watermarks, or where watermarks are simply trailing behind the_wall clock time by a certain amount.__<p>For cases where watermarks should be created in an irregular fashion, for example_based on certain markers that some element carry, use the_{@link AssignerWithPunctuatedWatermarks}.__@param timestampAndWatermarkAssigner The implementation of the timestamp assigner and_watermark generator._@return The stream after the transformation, with assigned timestamps and watermarks.__@see AssignerWithPeriodicWatermarks_@see AssignerWithPunctuatedWatermarks_@see #assignTimestampsAndWatermarks(AssignerWithPunctuatedWatermarks);public SingleOutputStreamOperator<T, ?> assignTimestampsAndWatermarks(_			AssignerWithPeriodicWatermarks<T> timestampAndWatermarkAssigner) {_		_		_		_		_		final int inputParallelism = getTransformation().getParallelism()__		final AssignerWithPeriodicWatermarks<T> cleanedAssigner = clean(timestampAndWatermarkAssigner)__		_		TimestampsAndPeriodicWatermarksOperator<T> operator = _				new TimestampsAndPeriodicWatermarksOperator<>(cleanedAssigner)__		_		return transform("Timestamps/Watermarks", getTransformation().getOutputType(), operator)_				.setParallelism(inputParallelism)__	};assigns,timestamps,to,the,elements,in,the,data,stream,and,periodically,creates,watermarks,to,signal,event,time,progress,p,this,method,creates,watermarks,periodically,for,example,every,second,based,on,the,watermarks,indicated,by,the,given,watermark,generator,even,when,no,new,elements,in,the,stream,arrive,the,given,watermark,generator,will,be,periodically,checked,for,new,watermarks,the,interval,in,which,watermarks,are,generated,is,defined,in,link,execution,config,set,auto,watermark,interval,long,p,use,this,method,for,the,common,cases,where,some,characteristic,over,all,elements,should,generate,the,watermarks,or,where,watermarks,are,simply,trailing,behind,the,wall,clock,time,by,a,certain,amount,p,for,cases,where,watermarks,should,be,created,in,an,irregular,fashion,for,example,based,on,certain,markers,that,some,element,carry,use,the,link,assigner,with,punctuated,watermarks,param,timestamp,and,watermark,assigner,the,implementation,of,the,timestamp,assigner,and,watermark,generator,return,the,stream,after,the,transformation,with,assigned,timestamps,and,watermarks,see,assigner,with,periodic,watermarks,see,assigner,with,punctuated,watermarks,see,assign,timestamps,and,watermarks,assigner,with,punctuated,watermarks;public,single,output,stream,operator,t,assign,timestamps,and,watermarks,assigner,with,periodic,watermarks,t,timestamp,and,watermark,assigner,final,int,input,parallelism,get,transformation,get,parallelism,final,assigner,with,periodic,watermarks,t,cleaned,assigner,clean,timestamp,and,watermark,assigner,timestamps,and,periodic,watermarks,operator,t,operator,new,timestamps,and,periodic,watermarks,operator,cleaned,assigner,return,transform,timestamps,watermarks,get,transformation,get,output,type,operator,set,parallelism,input,parallelism
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1450713543;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1453742891;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode);1454428544;Writes a DataStream to the file specified by the path parameter.__<p>_For every field of an element of the DataStream the result of {@link Object#toString()}_is written. This method can only be used on data streams of tuples.__@param path_the path pointing to the location the text file is written to_@param writeMode_Controls the behavior for existing files. Options are_NO_OVERWRITE and OVERWRITE.__@return the closed DataStream;public DataStreamSink<T> writeAsCsv(String path, WriteMode writeMode) {_		return writeAsCsv(path, writeMode, 0L, CsvOutputFormat.DEFAULT_LINE_DELIMITER, CsvOutputFormat.DEFAULT_FIELD_DELIMITER)__	};writes,a,data,stream,to,the,file,specified,by,the,path,parameter,p,for,every,field,of,an,element,of,the,data,stream,the,result,of,link,object,to,string,is,written,this,method,can,only,be,used,on,data,streams,of,tuples,param,path,the,path,pointing,to,the,location,the,text,file,is,written,to,param,write,mode,controls,the,behavior,for,existing,files,options,are,and,overwrite,return,the,closed,data,stream;public,data,stream,sink,t,write,as,csv,string,path,write,mode,write,mode,return,write,as,csv,path,write,mode,0l,csv,output,format,csv,output,format
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1488304750;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1488799576;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1489165080;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1493195810;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1493195810;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1493195810;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1493195810;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1495484544;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1496911361;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1497693649;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1509723634;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1516028607;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1518008865;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1518008932;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1518196458;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1518989075;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1520268868;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1523971392;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1532066767;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1534492343;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> @PublicEvolving 	public ResourceSpec getMinResources();1547196539;Gets the minimum resources for this operator.__@return The minimum resources set for this operator.;@PublicEvolving_	public ResourceSpec getMinResources() {_		return transformation.getMinResources()__	};gets,the,minimum,resources,for,this,operator,return,the,minimum,resources,set,for,this,operator;public,evolving,public,resource,spec,get,min,resources,return,transformation,get,min,resources
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1445418103;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1446112342;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1448637843;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1449051578;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1450713543;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1453742891;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1454428544;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1454679829;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1454933011;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1454933011;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455101486;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<T>(this.getExecutionEnvironment(), new PartitionTransformation<T>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,t,this,get,execution,environment,new,partition,transformation,t,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455634373;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455640938;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455703064;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455704943;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455718153;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1455718153;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1456347641;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1456508941;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1456774151;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1456778239;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1461851300;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1465991918;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1466613129;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1488304750;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1488304750;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1488799576;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1489165080;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1493195810;Internal function for setting the partitioner for the DataStream__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1493195810;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1493195810;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1493195810;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1495484544;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1496911361;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1497693649;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1509723634;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1516028607;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1518008865;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1518008932;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1518196458;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1518989075;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1520268868;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1523971392;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1532066767;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1534492343;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
DataStream -> protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner);1547196539;Internal function for setting the partitioner for the DataStream.__@param partitioner_Partitioner to set._@return The modified DataStream.;protected DataStream<T> setConnectionType(StreamPartitioner<T> partitioner) {_		return new DataStream<>(this.getExecutionEnvironment(), new PartitionTransformation<>(this.getTransformation(), partitioner))__	};internal,function,for,setting,the,partitioner,for,the,data,stream,param,partitioner,partitioner,to,set,return,the,modified,data,stream;protected,data,stream,t,set,connection,type,stream,partitioner,t,partitioner,return,new,data,stream,this,get,execution,environment,new,partition,transformation,this,get,transformation,partitioner
