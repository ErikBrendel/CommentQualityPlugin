# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1442944546;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1444312509;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1458823423;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1466152678;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1495778594;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1499683297;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1515770044;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1519249744;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1519249745;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1522681180;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1524124694;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> public void setDefaultParallelism(int defaultParallelism);1538135826;Sets the parallelism that will be used when neither the program does not define_any parallelism at all.__@param defaultParallelism The default parallelism for the executor.;public void setDefaultParallelism(int defaultParallelism) {_		if (defaultParallelism < 1) {_			throw new IllegalArgumentException("The default parallelism must be at least one")__		}_		this.defaultParallelism = defaultParallelism__	};sets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,param,default,parallelism,the,default,parallelism,for,the,executor;public,void,set,default,parallelism,int,default,parallelism,if,default,parallelism,1,throw,new,illegal,argument,exception,the,default,parallelism,must,be,at,least,one,this,default,parallelism,default,parallelism
RemoteExecutor -> private static InetSocketAddress getInetFromHostport(String hostport);1429705186;Utility method that converts a string of the form "host:port" into an {@link InetSocketAddress}._The returned InetSocketAddress may be unresolved!__@param hostport The "host:port" string._@return The converted InetSocketAddress.;private static InetSocketAddress getInetFromHostport(String hostport) {_		_		URI uri__		try {_			uri = new URI("my://" + hostport)__		} catch (URISyntaxException e) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.", e)__		}_		String host = uri.getHost()__		int port = uri.getPort()__		if (host == null || port == -1) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.")__		}_		return new InetSocketAddress(host, port)__	};utility,method,that,converts,a,string,of,the,form,host,port,into,an,link,inet,socket,address,the,returned,inet,socket,address,may,be,unresolved,param,hostport,the,host,port,string,return,the,converted,inet,socket,address;private,static,inet,socket,address,get,inet,from,hostport,string,hostport,uri,uri,try,uri,new,uri,my,hostport,catch,urisyntax,exception,e,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,e,string,host,uri,get,host,int,port,uri,get,port,if,host,null,port,1,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,return,new,inet,socket,address,host,port
RemoteExecutor -> private static InetSocketAddress getInetFromHostport(String hostport);1441011751;Utility method that converts a string of the form "host:port" into an {@link InetSocketAddress}._The returned InetSocketAddress may be unresolved!__@param hostport The "host:port" string._@return The converted InetSocketAddress.;private static InetSocketAddress getInetFromHostport(String hostport) {_		_		URI uri__		try {_			uri = new URI("my://" + hostport)__		} catch (URISyntaxException e) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.", e)__		}_		String host = uri.getHost()__		int port = uri.getPort()__		if (host == null || port == -1) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.")__		}_		return new InetSocketAddress(host, port)__	};utility,method,that,converts,a,string,of,the,form,host,port,into,an,link,inet,socket,address,the,returned,inet,socket,address,may,be,unresolved,param,hostport,the,host,port,string,return,the,converted,inet,socket,address;private,static,inet,socket,address,get,inet,from,hostport,string,hostport,uri,uri,try,uri,new,uri,my,hostport,catch,urisyntax,exception,e,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,e,string,host,uri,get,host,int,port,uri,get,port,if,host,null,port,1,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,return,new,inet,socket,address,host,port
RemoteExecutor -> private static InetSocketAddress getInetFromHostport(String hostport);1442312344;Utility method that converts a string of the form "host:port" into an {@link InetSocketAddress}._The returned InetSocketAddress may be unresolved!__@param hostport The "host:port" string._@return The converted InetSocketAddress.;private static InetSocketAddress getInetFromHostport(String hostport) {_		_		URI uri__		try {_			uri = new URI("my://" + hostport)__		} catch (URISyntaxException e) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.", e)__		}_		String host = uri.getHost()__		int port = uri.getPort()__		if (host == null || port == -1) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.")__		}_		return new InetSocketAddress(host, port)__	};utility,method,that,converts,a,string,of,the,form,host,port,into,an,link,inet,socket,address,the,returned,inet,socket,address,may,be,unresolved,param,hostport,the,host,port,string,return,the,converted,inet,socket,address;private,static,inet,socket,address,get,inet,from,hostport,string,hostport,uri,uri,try,uri,new,uri,my,hostport,catch,urisyntax,exception,e,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,e,string,host,uri,get,host,int,port,uri,get,port,if,host,null,port,1,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,return,new,inet,socket,address,host,port
RemoteExecutor -> private static InetSocketAddress getInetFromHostport(String hostport);1442944546;Utility method that converts a string of the form "host:port" into an {@link InetSocketAddress}._The returned InetSocketAddress may be unresolved!__@param hostport The "host:port" string._@return The converted InetSocketAddress.;private static InetSocketAddress getInetFromHostport(String hostport) {_		_		URI uri__		try {_			uri = new URI("my://" + hostport)__		} catch (URISyntaxException e) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.", e)__		}_		String host = uri.getHost()__		int port = uri.getPort()__		if (host == null || port == -1) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.")__		}_		return new InetSocketAddress(host, port)__	};utility,method,that,converts,a,string,of,the,form,host,port,into,an,link,inet,socket,address,the,returned,inet,socket,address,may,be,unresolved,param,hostport,the,host,port,string,return,the,converted,inet,socket,address;private,static,inet,socket,address,get,inet,from,hostport,string,hostport,uri,uri,try,uri,new,uri,my,hostport,catch,urisyntax,exception,e,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,e,string,host,uri,get,host,int,port,uri,get,port,if,host,null,port,1,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,return,new,inet,socket,address,host,port
RemoteExecutor -> private static InetSocketAddress getInetFromHostport(String hostport);1444312509;Utility method that converts a string of the form "host:port" into an {@link InetSocketAddress}._The returned InetSocketAddress may be unresolved!__@param hostport The "host:port" string._@return The converted InetSocketAddress.;private static InetSocketAddress getInetFromHostport(String hostport) {_		_		URI uri__		try {_			uri = new URI("my://" + hostport)__		} catch (URISyntaxException e) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.", e)__		}_		String host = uri.getHost()__		int port = uri.getPort()__		if (host == null || port == -1) {_			throw new RuntimeException("Could not identify hostname and port in '" + hostport + "'.")__		}_		return new InetSocketAddress(host, port)__	};utility,method,that,converts,a,string,of,the,form,host,port,into,an,link,inet,socket,address,the,returned,inet,socket,address,may,be,unresolved,param,hostport,the,host,port,string,return,the,converted,inet,socket,address;private,static,inet,socket,address,get,inet,from,hostport,string,hostport,uri,uri,try,uri,new,uri,my,hostport,catch,urisyntax,exception,e,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,e,string,host,uri,get,host,int,port,uri,get,port,if,host,null,port,1,throw,new,runtime,exception,could,not,identify,hostname,and,port,in,hostport,return,new,inet,socket,address,host,port
RemoteExecutor -> public int getDefaultParallelism();1442944546;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1444312509;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1458823423;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1466152678;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1495778594;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1499683297;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1515770044;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1519249744;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1519249745;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1522681180;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1524124694;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
RemoteExecutor -> public int getDefaultParallelism();1538135826;Gets the parallelism that will be used when neither the program does not define_any parallelism at all.__@return The default parallelism for the executor.;public int getDefaultParallelism() {_		return defaultParallelism__	};gets,the,parallelism,that,will,be,used,when,neither,the,program,does,not,define,any,parallelism,at,all,return,the,default,parallelism,for,the,executor;public,int,get,default,parallelism,return,default,parallelism
