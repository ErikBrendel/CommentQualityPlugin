# id;timestamp;commentText;codeText;commentWords;codeWords
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1477570902;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.")__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1478068438;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.")__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1495778594;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.")__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1518862302;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.")__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1519052658;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.")__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1529046538;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1531303506;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1531497661;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithoutJars() throws ProgramInvocationException;1548927384;Returns the plan without the required jars when the files are already provided by the cluster.__@return The plan without attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithoutJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), Collections.<URL>emptyList(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_				" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,without,the,required,jars,when,the,files,are,already,provided,by,the,cluster,return,the,plan,without,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,without,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,collections,url,empty,list,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1519052658;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1529046538;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1531303506;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1531497661;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1548927384;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1405024514;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1405090423;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1411473593;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1415097076;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1416258468;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1422397885;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1426843273;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1426843274;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1442944546;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1443682842;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1444312509;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1450435839;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1452526263;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1464705596;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1468854249;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1474652895;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1477319634;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1477570902;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1478068438;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}_		_		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1495778594;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1518862302;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1519052658;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1529046538;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1531303506;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1531497661;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> private Plan getPlan() throws ProgramInvocationException;1548927384;Returns the plan as generated from the Pact Assembler.__@return The program's plan._@throws ProgramInvocationException Thrown, if an error occurred in the program while_creating the program's {@link Plan}.;private Plan getPlan() throws ProgramInvocationException {_		if (this.plan == null) {_			Thread.currentThread().setContextClassLoader(this.userCodeClassLoader)__			this.plan = createPlanFromProgram(this.program, this.args)__		}__		return this.plan__	};returns,the,plan,as,generated,from,the,pact,assembler,return,the,program,s,plan,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,program,while,creating,the,program,s,link,plan;private,plan,get,plan,throws,program,invocation,exception,if,this,plan,null,thread,current,thread,set,context,class,loader,this,user,code,class,loader,this,plan,create,plan,from,program,this,program,this,args,return,this,plan
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1444312509;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libaries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1450435839;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libaries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1452526263;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libaries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1464705596;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libaries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1468854249;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1474652895;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1477319634;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1477570902;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1478068438;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}_		_		checkJarFile(jarFileUrl)__		_		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}_		_		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1495778594;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException;1518862302;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException;1444312509;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException;1450435839;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException;1452526263;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException;1464705596;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public List<URL> getClasspaths();1444312509;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1450435839;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1452526263;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1464705596;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1468854249;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1474652895;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1477319634;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1477570902;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1478068438;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1495778594;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1518862302;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1519052658;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1529046538;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1531303506;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1531497661;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public List<URL> getClasspaths();1548927384;Returns the classpaths that are required by the program.__@return List of {@link java.net.URL}s.;public List<URL> getClasspaths() {_		return this.classpaths__	};returns,the,classpaths,that,are,required,by,the,program,return,list,of,link,java,net,url,s;public,list,url,get,classpaths,return,this,classpaths
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1405024514;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1405090423;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1411473593;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1415097076;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1416258468;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1422397885;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1426843273;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1426843274;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1442944546;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1443682842;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}_		_		checkJarFile(jarFile)__		_		this.jarFile = jarFile__		this.args = args == null ? new String[0] : args__		_		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFile)__		}_		_		_		this.extractedTempLibraries = extractContainedLibaries(jarFile)__		this.userCodeClassLoader = buildUserCodeClassLoader(jarFile, extractedTempLibraries, getClass().getClassLoader())__		_		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)__		_		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " + _							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " + _					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,check,jar,file,jar,file,this,jar,file,jar,file,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,this,extracted,temp,libraries,extract,contained,libaries,jar,file,this,user,code,class,loader,build,user,code,class,loader,jar,file,extracted,temp,libraries,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1444312509;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1450435839;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1452526263;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1464705596;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1468854249;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1474652895;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1477319634;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1477570902;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1478068438;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1495778594;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException;1518862302;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String entryPointClassName, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), entryPointClassName, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,entry,point,class,name,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,entry,point,class,name,args
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1405024514;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.disableLocalExecution()__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan =  env.previewPlan__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}_		_		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()__	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,disable,local,execution,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1405090423;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.disableLocalExecution()__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan =  env.previewPlan__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}_		_		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()__	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,disable,local,execution,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1411473593;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.disableLocalExecution()__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan =  env.previewPlan__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}_		_		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()__	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,disable,local,execution,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1415097076;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.disableLocalExecution()__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan =  env.previewPlan__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}_		_		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()__	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,disable,local,execution,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1416258468;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.enableLocalExecution(false)__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan =  env.previewPlan__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				ContextEnvironment.enableLocalExecution(true)__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}_		_		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()__	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,enable,local,execution,false,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,context,environment,enable,local,execution,true,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1422397885;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.enableLocalExecution(false)__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				ContextEnvironment.enableLocalExecution(true)__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,enable,local,execution,false,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,context,environment,enable,local,execution,true,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1426843273;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = PactCompiler.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.enableLocalExecution(false)__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				ContextEnvironment.enableLocalExecution(true)__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,pact,compiler,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,enable,local,execution,false,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,context,environment,enable,local,execution,true,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1426843274;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.enableLocalExecution(false)__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				ContextEnvironment.enableLocalExecution(true)__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,enable,local,execution,false,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,context,environment,enable,local,execution,true,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1442944546;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				ContextEnvironment.enableLocalExecution(false)__				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				ContextEnvironment.enableLocalExecution(true)__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		PrintWriter pw = null__		try {_			pw = new PrintWriter(string)__			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		} finally {_			pw.close()__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,context,environment,enable,local,execution,false,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,context,environment,enable,local,execution,true,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,print,writer,pw,null,try,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,finally,pw,close,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1443682842;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1444312509;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1450435839;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1452526263;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1464705596;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1468854249;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1474652895;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1477319634;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan__		_		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}_			_			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1477570902;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1478068438;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1495778594;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1518862302;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1519052658;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan != null) {_					previewPlan = env.previewPlan__				} else if (env.preview != null) {_					return env.preview__				} else {_					throw new ProgramInvocationException("The program caused an error: ", t)__				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_						"The program plan could not be fetched. The program silently swallowed the control flow exceptions.")__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,preview,plan,env,preview,plan,else,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1529046538;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan == null) {_					if (env.preview != null) {_						return env.preview__					} else {_						throw new ProgramInvocationException("The program caused an error: ", getPlan().getJobId(), t)__					}_				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_					"The program plan could not be fetched. The program silently swallowed the control flow exceptions.",_					getPlan().getJobId())__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,get,plan,get,job,id,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,get,plan,get,job,id,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1531303506;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan == null) {_					if (env.preview != null) {_						return env.preview__					} else {_						throw new ProgramInvocationException("The program caused an error: ", getPlan().getJobId(), t)__					}_				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_					"The program plan could not be fetched. The program silently swallowed the control flow exceptions.",_					getPlan().getJobId())__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,get,plan,get,job,id,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,get,plan,get,job,id,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1531497661;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan == null) {_					if (env.preview != null) {_						return env.preview__					} else {_						throw new ProgramInvocationException("The program caused an error: ", getPlan().getJobId(), t)__					}_				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_					"The program plan could not be fetched. The program silently swallowed the control flow exceptions.",_					getPlan().getJobId())__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,get,plan,get,job,id,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,get,plan,get,job,id,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public String getPreviewPlan() throws ProgramInvocationException;1548927384;Returns the analyzed plan without any optimizations.__@return_the analyzed plan without any optimizations._@throws ProgramInvocationException Thrown if an error occurred in the_user-provided pact assembler. This may indicate_missing parameters for generation.;public String getPreviewPlan() throws ProgramInvocationException {_		Thread.currentThread().setContextClassLoader(this.getUserCodeClassLoader())__		List<DataSinkNode> previewPlan___		if (isUsingProgramEntryPoint()) {_			previewPlan = Optimizer.createPreOptimizedPlan(getPlan())__		}_		else if (isUsingInteractiveMode()) {_			_			PreviewPlanEnvironment env = new PreviewPlanEnvironment()__			env.setAsContext()__			try {_				invokeInteractiveModeForExecution()__			}_			catch (ProgramInvocationException e) {_				throw e__			}_			catch (Throwable t) {_				_				if (env.previewPlan == null) {_					if (env.preview != null) {_						return env.preview__					} else {_						throw new ProgramInvocationException("The program caused an error: ", getPlan().getJobId(), t)__					}_				}_			}_			finally {_				env.unsetAsContext()__			}__			if (env.previewPlan != null) {_				previewPlan =  env.previewPlan__			} else {_				throw new ProgramInvocationException(_					"The program plan could not be fetched. The program silently swallowed the control flow exceptions.",_					getPlan().getJobId())__			}_		}_		else {_			throw new RuntimeException()__		}__		PlanJSONDumpGenerator jsonGen = new PlanJSONDumpGenerator()__		StringWriter string = new StringWriter(1024)__		try (PrintWriter pw = new PrintWriter(string)) {_			jsonGen.dumpPactPlanAsJSON(previewPlan, pw)__		}_		return string.toString()___	};returns,the,analyzed,plan,without,any,optimizations,return,the,analyzed,plan,without,any,optimizations,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler,this,may,indicate,missing,parameters,for,generation;public,string,get,preview,plan,throws,program,invocation,exception,thread,current,thread,set,context,class,loader,this,get,user,code,class,loader,list,data,sink,node,preview,plan,if,is,using,program,entry,point,preview,plan,optimizer,create,pre,optimized,plan,get,plan,else,if,is,using,interactive,mode,preview,plan,environment,env,new,preview,plan,environment,env,set,as,context,try,invoke,interactive,mode,for,execution,catch,program,invocation,exception,e,throw,e,catch,throwable,t,if,env,preview,plan,null,if,env,preview,null,return,env,preview,else,throw,new,program,invocation,exception,the,program,caused,an,error,get,plan,get,job,id,t,finally,env,unset,as,context,if,env,preview,plan,null,preview,plan,env,preview,plan,else,throw,new,program,invocation,exception,the,program,plan,could,not,be,fetched,the,program,silently,swallowed,the,control,flow,exceptions,get,plan,get,job,id,else,throw,new,runtime,exception,plan,jsondump,generator,json,gen,new,plan,jsondump,generator,string,writer,string,new,string,writer,1024,try,print,writer,pw,new,print,writer,string,json,gen,dump,pact,plan,as,json,preview,plan,pw,return,string,to,string
PackagedProgram -> public List<URL> getAllLibraries();1477570902;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1478068438;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1495778594;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1518862302;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1519052658;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1529046538;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1531303506;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1531497661;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> public List<URL> getAllLibraries();1548927384;Returns all provided libraries needed to run the program.;public List<URL> getAllLibraries() {_		List<URL> libs = new ArrayList<URL>(this.extractedTempLibraries.size() + 1)___		if (jarFile != null) {_			libs.add(jarFile)__		}_		for (File tmpLib : this.extractedTempLibraries) {_			try {_				libs.add(tmpLib.getAbsoluteFile().toURI().toURL())__			}_			catch (MalformedURLException e) {_				throw new RuntimeException("URL is invalid. This should not happen.", e)__			}_		}__		return libs__	};returns,all,provided,libraries,needed,to,run,the,program;public,list,url,get,all,libraries,list,url,libs,new,array,list,url,this,extracted,temp,libraries,size,1,if,jar,file,null,libs,add,jar,file,for,file,tmp,lib,this,extracted,temp,libraries,try,libs,add,tmp,lib,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,runtime,exception,url,is,invalid,this,should,not,happen,e,return,libs
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1405024514;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1405090423;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1411473593;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1415097076;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1416258468;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1422397885;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1426843273;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1426843274;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1442944546;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1443682842;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1444312509;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1450435839;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1452526263;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1464705596;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1468854249;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1474652895;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1477319634;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1477570902;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1478068438;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1495778594;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1518862302;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1519052658;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1529046538;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1531303506;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1531497661;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException;1548927384;Takes the jar described by the given file and invokes its pact assembler class to_assemble a plan. The assembler class name is either passed through a parameter,_or it is read from the manifest of the jar. The assembler is handed the given options_for its assembly.__@param program The program to create the plan for._@param options_The options for the assembler._@return The plan created by the program._@throws ProgramInvocationException_Thrown, if an error occurred in the user-provided pact assembler.;private static Plan createPlanFromProgram(Program program, String[] options) throws ProgramInvocationException {_		try {_			return program.getPlan(options)__		} catch (Throwable t) {_			throw new ProgramInvocationException("Error while calling the program: " + t.getMessage(), t)__		}_	};takes,the,jar,described,by,the,given,file,and,invokes,its,pact,assembler,class,to,assemble,a,plan,the,assembler,class,name,is,either,passed,through,a,parameter,or,it,is,read,from,the,manifest,of,the,jar,the,assembler,is,handed,the,given,options,for,its,assembly,param,program,the,program,to,create,the,plan,for,param,options,the,options,for,the,assembler,return,the,plan,created,by,the,program,throws,program,invocation,exception,thrown,if,an,error,occurred,in,the,user,provided,pact,assembler;private,static,plan,create,plan,from,program,program,program,string,options,throws,program,invocation,exception,try,return,program,get,plan,options,catch,throwable,t,throw,new,program,invocation,exception,error,while,calling,the,program,t,get,message,t
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1405024514;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1405090423;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1411473593;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1415097076;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1416258468;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1422397885;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1426843273;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1426843274;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1442944546;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1443682842;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1444312509;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1450435839;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1452526263;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1464705596;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1468854249;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1474652895;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1477319634;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1477570902;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1478068438;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1495778594;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1518862302;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1519052658;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1529046538;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1531303506;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1531497661;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public void invokeInteractiveModeForExecution() throws ProgramInvocationException;1548927384;This method assumes that the context environment is prepared, or the execution_will be a local execution by default.;public void invokeInteractiveModeForExecution() throws ProgramInvocationException{_		if (isUsingInteractiveMode()) {_			callMainMethod(mainClass, args)__		} else {_			throw new ProgramInvocationException("Cannot invoke a plan-based program directly.")__		}_	};this,method,assumes,that,the,context,environment,is,prepared,or,the,execution,will,be,a,local,execution,by,default;public,void,invoke,interactive,mode,for,execution,throws,program,invocation,exception,if,is,using,interactive,mode,call,main,method,main,class,args,else,throw,new,program,invocation,exception,cannot,invoke,a,plan,based,program,directly
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1405024514;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1405090423;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1411473593;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1415097076;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1416258468;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1422397885;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1426843273;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1426843274;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1442944546;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1443682842;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1444312509;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1450435839;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1452526263;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1464705596;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1468854249;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1474652895;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1477319634;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1477570902;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1478068438;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1495778594;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1518862302;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1519052658;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1529046538;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1531303506;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1531497661;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException;1548927384;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, String... args) throws ProgramInvocationException {_		this(jarFile, Collections.<URL>emptyList(), null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,string,args,throws,program,invocation,exception,this,jar,file,collections,url,empty,list,null,args
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1405024514;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			allJars.add(jarFile)__			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1405090423;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			allJars.add(jarFile)__			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1411473593;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			allJars.add(jarFile)__			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1415097076;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1416258468;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1422397885;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1426843273;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1426843274;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1442944546;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1443682842;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			List<File> allJars = new ArrayList<File>()__			_			if (this.jarFile != null) {_				allJars.add(jarFile)__			}_			allJars.addAll(extractedTempLibraries)__			_			return new JobWithJars(getPlan(), allJars, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,list,file,all,jars,new,array,list,file,if,this,jar,file,null,all,jars,add,jar,file,all,jars,add,all,extracted,temp,libraries,return,new,job,with,jars,get,plan,all,jars,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1444312509;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1450435839;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1452526263;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1464705596;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1468854249;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1474652895;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1477319634;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() + _					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1477570902;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1478068438;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1495778594;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1518862302;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1519052658;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.")__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1529046538;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1531303506;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1531497661;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> public JobWithJars getPlanWithJars() throws ProgramInvocationException;1548927384;Returns the plan with all required jars.__@return The plan with attached jar files._@throws ProgramInvocationException;public JobWithJars getPlanWithJars() throws ProgramInvocationException {_		if (isUsingProgramEntryPoint()) {_			return new JobWithJars(getPlan(), getAllLibraries(), classpaths, userCodeClassLoader)__		} else {_			throw new ProgramInvocationException("Cannot create a " + JobWithJars.class.getSimpleName() +_					" for a program that is using the interactive mode.", getPlan().getJobId())__		}_	};returns,the,plan,with,all,required,jars,return,the,plan,with,attached,jar,files,throws,program,invocation,exception;public,job,with,jars,get,plan,with,jars,throws,program,invocation,exception,if,is,using,program,entry,point,return,new,job,with,jars,get,plan,get,all,libraries,classpaths,user,code,class,loader,else,throw,new,program,invocation,exception,cannot,create,a,job,with,jars,class,get,simple,name,for,a,program,that,is,using,the,interactive,mode,get,plan,get,job,id
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1405024514;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1405090423;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1411473593;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1415097076;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1416258468;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1422397885;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1426843273;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1426843274;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1442944546;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException;1443682842;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;private static List<File> extractContainedLibaries(File jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(jarFile)__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;private,static,list,file,extract,contained,libaries,file,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,jar,file,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1519052658;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1529046538;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1531303506;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1531497661;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException;1548927384;Creates an instance that wraps the plan defined in the jar file using the given_arguments. For generating the plan the class defined in the className parameter_is used.__@param jarFile_The jar file which contains the plan._@param classpaths_Additional classpath URLs needed by the Program._@param entryPointClassName_Name of the class which generates the plan. Overrides the class defined_in the jar file manifest_@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, @Nullable String entryPointClassName, String... args) throws ProgramInvocationException {_		if (jarFile == null) {_			throw new IllegalArgumentException("The jar file must not be null.")__		}__		URL jarFileUrl__		try {_			jarFileUrl = jarFile.getAbsoluteFile().toURI().toURL()__		} catch (MalformedURLException e1) {_			throw new IllegalArgumentException("The jar file path is invalid.")__		}__		checkJarFile(jarFileUrl)___		this.jarFile = jarFileUrl__		this.args = args == null ? new String[0] : args___		_		if (entryPointClassName == null) {_			entryPointClassName = getEntryPointClassNameFromJar(jarFileUrl)__		}__		_		this.extractedTempLibraries = extractContainedLibraries(jarFileUrl)__		this.classpaths = classpaths__		this.userCodeClassLoader = JobWithJars.buildUserCodeClassLoader(getAllLibraries(), classpaths, getClass().getClassLoader())___		_		this.mainClass = loadMainClass(entryPointClassName, userCodeClassLoader)___		_		if (Program.class.isAssignableFrom(this.mainClass)) {_			Program prg = null__			try {_				prg = InstantiationUtil.instantiate(this.mainClass.asSubclass(Program.class), Program.class)__			} catch (Exception e) {_				_				_				if (!hasMainMethod(mainClass)) {_					throw new ProgramInvocationException("The given program class implements the " +_							Program.class.getName() + " interface, but cannot be instantiated. " +_							"It also declares no main(String[]) method as alternative entry point", e)__				}_			} catch (Throwable t) {_				throw new ProgramInvocationException("Error while trying to instantiate program class.", t)__			}_			this.program = prg__		} else if (hasMainMethod(mainClass)) {_			this.program = null__		} else {_			throw new ProgramInvocationException("The given program class neither has a main(String[]) method, nor does it implement the " +_					Program.class.getName() + " interface.")__		}_	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,arguments,for,generating,the,plan,the,class,defined,in,the,class,name,parameter,is,used,param,jar,file,the,jar,file,which,contains,the,plan,param,classpaths,additional,classpath,urls,needed,by,the,program,param,entry,point,class,name,name,of,the,class,which,generates,the,plan,overrides,the,class,defined,in,the,jar,file,manifest,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,nullable,string,entry,point,class,name,string,args,throws,program,invocation,exception,if,jar,file,null,throw,new,illegal,argument,exception,the,jar,file,must,not,be,null,url,jar,file,url,try,jar,file,url,jar,file,get,absolute,file,to,uri,to,url,catch,malformed,urlexception,e1,throw,new,illegal,argument,exception,the,jar,file,path,is,invalid,check,jar,file,jar,file,url,this,jar,file,jar,file,url,this,args,args,null,new,string,0,args,if,entry,point,class,name,null,entry,point,class,name,get,entry,point,class,name,from,jar,jar,file,url,this,extracted,temp,libraries,extract,contained,libraries,jar,file,url,this,classpaths,classpaths,this,user,code,class,loader,job,with,jars,build,user,code,class,loader,get,all,libraries,classpaths,get,class,get,class,loader,this,main,class,load,main,class,entry,point,class,name,user,code,class,loader,if,program,class,is,assignable,from,this,main,class,program,prg,null,try,prg,instantiation,util,instantiate,this,main,class,as,subclass,program,class,program,class,catch,exception,e,if,has,main,method,main,class,throw,new,program,invocation,exception,the,given,program,class,implements,the,program,class,get,name,interface,but,cannot,be,instantiated,it,also,declares,no,main,string,method,as,alternative,entry,point,e,catch,throwable,t,throw,new,program,invocation,exception,error,while,trying,to,instantiate,program,class,t,this,program,prg,else,if,has,main,method,main,class,this,program,null,else,throw,new,program,invocation,exception,the,given,program,class,neither,has,a,main,string,method,nor,does,it,implement,the,program,class,get,name,interface
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1405024514;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1405090423;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1411473593;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1415097076;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1416258468;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1422397885;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1426843273;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1426843274;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1442944546;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1443682842;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1444312509;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1450435839;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1452526263;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1464705596;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1468854249;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1474652895;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1477319634;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1477570902;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1478068438;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1495778594;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1518862302;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1519052658;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1529046538;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1531303506;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1531497661;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public ClassLoader getUserCodeClassLoader();1548927384;Gets the {@link java.lang.ClassLoader} that must be used to load user code classes.__@return The user code ClassLoader.;public ClassLoader getUserCodeClassLoader() {_		return this.userCodeClassLoader__	};gets,the,link,java,lang,class,loader,that,must,be,used,to,load,user,code,classes,return,the,user,code,class,loader;public,class,loader,get,user,code,class,loader,return,this,user,code,class,loader
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1468854249;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(String.valueOf(Math.abs(rnd.nextInt()) + "_"), name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,string,value,of,math,abs,rnd,next,int,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1474652895;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1477319634;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1477570902;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1478068438;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {_		_		Random rnd = new Random()__		_		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()__			_			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()__				_				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}_			_			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]__				_				boolean incomplete = true__				_				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')__					_						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" + _										entry.getName() + "'.", e)__						}_						_						extractedTempLibraries.add(tempFile)__						_						_						OutputStream out = null__						InputStream in = null_ _						try {_							_							_							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))__							_							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}_					_					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}_				_				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1495778594;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1518862302;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1519052658;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1529046538;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						name = name.replace(File.separatorChar, '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,separator,char,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1531303506;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						_						_						name = name.replace('/', '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1531497661;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						_						_						name = name.replace('/', '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException;1548927384;Takes all JAR files that are contained in this program's JAR file and extracts them_to the system's temp directory.__@return The file names of the extracted temporary files._@throws ProgramInvocationException Thrown, if the extraction process failed.;public static List<File> extractContainedLibraries(URL jarFile) throws ProgramInvocationException {__		Random rnd = new Random()___		JarFile jar = null__		try {_			jar = new JarFile(new File(jarFile.toURI()))__			final List<JarEntry> containedJarFileEntries = new ArrayList<JarEntry>()___			Enumeration<JarEntry> entries = jar.entries()__			while (entries.hasMoreElements()) {_				JarEntry entry = entries.nextElement()__				String name = entry.getName()___				if (name.length() > 8 && name.startsWith("lib/") && name.endsWith(".jar")) {_					containedJarFileEntries.add(entry)__				}_			}__			if (containedJarFileEntries.isEmpty()) {_				return Collections.emptyList()__			}_			else {_				_				final List<File> extractedTempLibraries = new ArrayList<File>(containedJarFileEntries.size())__				final byte[] buffer = new byte[4096]___				boolean incomplete = true___				try {_					for (int i = 0_ i < containedJarFileEntries.size()_ i++) {_						final JarEntry entry = containedJarFileEntries.get(i)__						String name = entry.getName()__						_						_						name = name.replace('/', '_')___						File tempFile__						try {_							tempFile = File.createTempFile(rnd.nextInt(Integer.MAX_VALUE) + "_", name)__							tempFile.deleteOnExit()__						}_						catch (IOException e) {_							throw new ProgramInvocationException(_								"An I/O error occurred while creating temporary file to extract nested library '" +_										entry.getName() + "'.", e)__						}__						extractedTempLibraries.add(tempFile)___						_						OutputStream out = null__						InputStream in = null__						try {__							out = new FileOutputStream(tempFile)__							in = new BufferedInputStream(jar.getInputStream(entry))___							int numRead = 0__							while ((numRead = in.read(buffer)) != -1) {_								out.write(buffer, 0, numRead)__							}_						}_						catch (IOException e) {_							throw new ProgramInvocationException("An I/O error occurred while extracting nested library '"_									+ entry.getName() + "' to temporary file '" + tempFile.getAbsolutePath() + "'.")__						}_						finally {_							if (out != null) {_								out.close()__							}_							if (in != null) {_								in.close()__							}_						}_					}__					incomplete = false__				}_				finally {_					if (incomplete) {_						deleteExtractedLibraries(extractedTempLibraries)__					}_				}__				return extractedTempLibraries__			}_		}_		catch (Throwable t) {_			throw new ProgramInvocationException("Unknown I/O error while extracting contained jar files.", t)__		}_		finally {_			if (jar != null) {_				try {_					jar.close()__				} catch (Throwable t) {}_			}_		}_	};takes,all,jar,files,that,are,contained,in,this,program,s,jar,file,and,extracts,them,to,the,system,s,temp,directory,return,the,file,names,of,the,extracted,temporary,files,throws,program,invocation,exception,thrown,if,the,extraction,process,failed;public,static,list,file,extract,contained,libraries,url,jar,file,throws,program,invocation,exception,random,rnd,new,random,jar,file,jar,null,try,jar,new,jar,file,new,file,jar,file,to,uri,final,list,jar,entry,contained,jar,file,entries,new,array,list,jar,entry,enumeration,jar,entry,entries,jar,entries,while,entries,has,more,elements,jar,entry,entry,entries,next,element,string,name,entry,get,name,if,name,length,8,name,starts,with,lib,name,ends,with,jar,contained,jar,file,entries,add,entry,if,contained,jar,file,entries,is,empty,return,collections,empty,list,else,final,list,file,extracted,temp,libraries,new,array,list,file,contained,jar,file,entries,size,final,byte,buffer,new,byte,4096,boolean,incomplete,true,try,for,int,i,0,i,contained,jar,file,entries,size,i,final,jar,entry,entry,contained,jar,file,entries,get,i,string,name,entry,get,name,name,name,replace,file,temp,file,try,temp,file,file,create,temp,file,rnd,next,int,integer,name,temp,file,delete,on,exit,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,creating,temporary,file,to,extract,nested,library,entry,get,name,e,extracted,temp,libraries,add,temp,file,output,stream,out,null,input,stream,in,null,try,out,new,file,output,stream,temp,file,in,new,buffered,input,stream,jar,get,input,stream,entry,int,num,read,0,while,num,read,in,read,buffer,1,out,write,buffer,0,num,read,catch,ioexception,e,throw,new,program,invocation,exception,an,i,o,error,occurred,while,extracting,nested,library,entry,get,name,to,temporary,file,temp,file,get,absolute,path,finally,if,out,null,out,close,if,in,null,in,close,incomplete,false,finally,if,incomplete,delete,extracted,libraries,extracted,temp,libraries,return,extracted,temp,libraries,catch,throwable,t,throw,new,program,invocation,exception,unknown,i,o,error,while,extracting,contained,jar,files,t,finally,if,jar,null,try,jar,close,catch,throwable,t
PackagedProgram -> public void deleteExtractedLibraries();1405024514;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1405090423;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1411473593;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1415097076;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1416258468;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1422397885;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1426843273;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1426843274;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1442944546;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1443682842;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1444312509;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1450435839;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1452526263;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1464705596;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1468854249;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1474652895;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1477319634;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1477570902;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1478068438;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1495778594;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1518862302;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1519052658;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1529046538;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1531303506;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1531497661;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public void deleteExtractedLibraries();1548927384;Deletes all temporary files created for contained packaged libraries.;public void deleteExtractedLibraries() {_		deleteExtractedLibraries(this.extractedTempLibraries)__		this.extractedTempLibraries.clear()__	};deletes,all,temporary,files,created,for,contained,packaged,libraries;public,void,delete,extracted,libraries,delete,extracted,libraries,this,extracted,temp,libraries,this,extracted,temp,libraries,clear
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1444312509;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1450435839;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1452526263;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1464705596;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1468854249;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1474652895;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1477319634;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1477570902;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1478068438;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1495778594;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1518862302;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1519052658;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1529046538;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1531303506;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1531497661;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException;1548927384;Creates an instance that wraps the plan defined in the jar file using the given_argument.__@param jarFile_The jar file which contains the plan and a Manifest which defines_the program-class_@param classpaths_Additional classpath URLs needed by the Program._@param args_Optional. The arguments used to create the pact plan, depend on_implementation of the pact plan. See getDescription()._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public PackagedProgram(File jarFile, List<URL> classpaths, String... args) throws ProgramInvocationException {_		this(jarFile, classpaths, null, args)__	};creates,an,instance,that,wraps,the,plan,defined,in,the,jar,file,using,the,given,argument,param,jar,file,the,jar,file,which,contains,the,plan,and,a,manifest,which,defines,the,program,class,param,classpaths,additional,classpath,urls,needed,by,the,program,param,args,optional,the,arguments,used,to,create,the,pact,plan,depend,on,implementation,of,the,pact,plan,see,get,description,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,packaged,program,file,jar,file,list,url,classpaths,string,args,throws,program,invocation,exception,this,jar,file,classpaths,null,args
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1518862302;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1519052658;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1529046538;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1531303506;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1531497661;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> @Nullable 	public String getDescription() throws ProgramInvocationException;1548927384;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;@Nullable_	public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;nullable,public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1405024514;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1405090423;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1411473593;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1415097076;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1416258468;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1422397885;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1426843273;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1426843274;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1442944546;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1443682842;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1444312509;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1450435839;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1452526263;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1464705596;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1468854249;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1474652895;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1477319634;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {_			_			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}_			_			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" + _						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}_			_		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1477570902;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1478068438;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
PackagedProgram -> public String getDescription() throws ProgramInvocationException;1495778594;Returns the description provided by the Program class. This_may contain a description of the plan itself and its arguments.__@return The description of the PactProgram's input parameters._@throws ProgramInvocationException_This invocation is thrown if the Program can't be properly loaded. Causes_may be a missing / wrong class or manifest files.;public String getDescription() throws ProgramInvocationException {_		if (ProgramDescription.class.isAssignableFrom(this.mainClass)) {__			ProgramDescription descr__			if (this.program != null) {_				descr = (ProgramDescription) this.program__			} else {_				try {_					descr =  InstantiationUtil.instantiate(_						this.mainClass.asSubclass(ProgramDescription.class), ProgramDescription.class)__				} catch (Throwable t) {_					return null__				}_			}__			try {_				return descr.getDescription()__			}_			catch (Throwable t) {_				throw new ProgramInvocationException("Error while getting the program description" +_						(t.getMessage() == null ? "." : ": " + t.getMessage()), t)__			}__		} else {_			return null__		}_	};returns,the,description,provided,by,the,program,class,this,may,contain,a,description,of,the,plan,itself,and,its,arguments,return,the,description,of,the,pact,program,s,input,parameters,throws,program,invocation,exception,this,invocation,is,thrown,if,the,program,can,t,be,properly,loaded,causes,may,be,a,missing,wrong,class,or,manifest,files;public,string,get,description,throws,program,invocation,exception,if,program,description,class,is,assignable,from,this,main,class,program,description,descr,if,this,program,null,descr,program,description,this,program,else,try,descr,instantiation,util,instantiate,this,main,class,as,subclass,program,description,class,program,description,class,catch,throwable,t,return,null,try,return,descr,get,description,catch,throwable,t,throw,new,program,invocation,exception,error,while,getting,the,program,description,t,get,message,null,t,get,message,t,else,return,null
