# id;timestamp;commentText;codeText;commentWords;codeWords
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1515770044;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1517324056;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1517914183;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1517944847;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1518680659;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1519052658;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1519057653;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1519317159;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1519674120;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1521396720;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1522132482;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1522681180;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1523906273;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1524124694;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1525116069;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1527250470;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1528796078;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1528796078;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1530717177;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1537436047;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1537963459;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1537963459;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException;1538135826;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient<?> clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath)___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515699581;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515699597;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515699606;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515770042;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515770043;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515770043;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1515770044;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1517324056;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1517914183;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1517944847;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1518680659;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1519052658;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1519057653;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1519317159;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1519674120;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1521396720;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1522132482;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1522681180;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1523906273;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1524124694;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1525116069;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1527250470;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1528796078;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1528796078;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1530717177;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1537436047;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1537963459;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1537963459;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private static int handleParametrizationException(ProgramParametrizationException e);1538135826;Displays an optional exception message for incorrect program parametrization.__@param e The exception to display._@return The return code for the process.;private static int handleParametrizationException(ProgramParametrizationException e) {_		LOG.error("Program has not been parametrized properly.", e)__		System.err.println(e.getMessage())__		return 1__	};displays,an,optional,exception,message,for,incorrect,program,parametrization,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,parametrization,exception,program,parametrization,exception,e,log,error,program,has,not,been,parametrized,properly,e,system,err,println,e,get,message,return,1
CliFrontend -> private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException;1515699606;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException;1515770042;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException;1515770043;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException;1515770043;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private void disposeSavepoint(ClusterClient clusterClient, String savepointPath) throws FlinkException {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))___		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			throw new FlinkException("Disposing the savepoint '" + savepointPath + "' failed.", e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,void,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,throws,flink,exception,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,throw,new,flink,exception,disposing,the,savepoint,savepoint,path,failed,e,log,and,sysout,savepoint,savepoint,path,disposed
CliFrontend -> private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1515699606;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1515770042;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1515770043;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1515770043;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1515770044;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1517324056;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1517914183;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1517944847;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1518680659;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1519052658;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1519057653;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1519317159;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1519674120;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1521396720;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1522132482;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1522681180;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1523906273;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1524124694;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1525116069;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1527250470;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1528796078;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1528796078;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1530717177;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1537436047;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1537963459;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1537963459;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException;1538135826;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private String triggerSavepoint(ClusterClient<?> clusterClient, JobID jobId, String savepointDirectory) throws FlinkException {_		logAndSysout("Triggering savepoint for job " + jobId + '.')__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		logAndSysout("Waiting for response...")___		final String savepointPath___		try {_			savepointPath = savepointPathFuture.get()__		}_		catch (Exception e) {_			Throwable cause = ExceptionUtils.stripExecutionException(e)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return savepointPath__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,string,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,flink,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,log,and,sysout,waiting,for,response,final,string,savepoint,path,try,savepoint,path,savepoint,path,future,get,catch,exception,e,throwable,cause,exception,utils,strip,execution,exception,e,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,savepoint,path
CliFrontend -> public Configuration getConfiguration();1515699581;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(config)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,config,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515699597;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515699606;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515770042;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515770043;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515770043;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1515770044;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1517324056;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1517914183;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1517944847;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1518680659;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1519052658;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1519057653;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1519317159;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1519674120;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1521396720;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1522132482;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1522681180;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1523906273;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1524124694;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1525116069;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1527250470;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1528796078;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1528796078;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1530717177;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1537436047;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1537963459;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1537963459;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public Configuration getConfiguration();1538135826;Getter which returns a copy of the associated configuration.__@return Copy of the associated configuration;public Configuration getConfiguration() {_		Configuration copiedConfiguration = new Configuration()___		copiedConfiguration.addAll(configuration)___		return copiedConfiguration__	};getter,which,returns,a,copy,of,the,associated,configuration,return,copy,of,the,associated,configuration;public,configuration,get,configuration,configuration,copied,configuration,new,configuration,copied,configuration,add,all,configuration,return,copied,configuration
CliFrontend -> public static void main(final String[] args);1515699581;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		try {_			final CliFrontend cli = new CliFrontend()__			SecurityUtils.install(new SecurityConfiguration(cli.config))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,try,final,cli,frontend,cli,new,cli,frontend,security,utils,install,new,security,configuration,cli,config,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515699597;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines()___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines,_				configurationDirectory)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,configuration,directory,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515699606;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines()___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines,_				configurationDirectory)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,configuration,directory,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515770042;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515770043;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515770043;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(new Callable<Integer>() {_						@Override_						public Integer call() {_							return cli.parseParameters(args)__						}_					})__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,return,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1515770044;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1517324056;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1517914183;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1517944847;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1518680659;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1519052658;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1519057653;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1519317159;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1519674120;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1521396720;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1522132482;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1522681180;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1523906273;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1524124694;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1525116069;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1527250470;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1528796078;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1528796078;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1530717177;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			LOG.error("Fatal error while running command line interface.", t)__			t.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,log,error,fatal,error,while,running,command,line,interface,t,t,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1537436047;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			LOG.error("Fatal error while running command line interface.", strippedThrowable)__			strippedThrowable.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,fatal,error,while,running,command,line,interface,stripped,throwable,stripped,throwable,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1537963459;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			LOG.error("Fatal error while running command line interface.", strippedThrowable)__			strippedThrowable.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,fatal,error,while,running,command,line,interface,stripped,throwable,stripped,throwable,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1537963459;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			LOG.error("Fatal error while running command line interface.", strippedThrowable)__			strippedThrowable.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,fatal,error,while,running,command,line,interface,stripped,throwable,stripped,throwable,print,stack,trace,system,exit,31
CliFrontend -> public static void main(final String[] args);1538135826;Submits the job based on the arguments.;public static void main(final String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "Command Line Client", args)___		_		final String configurationDirectory = getConfigurationDirectoryFromEnv()___		_		final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory)___		_		final List<CustomCommandLine<?>> customCommandLines = loadCustomCommandLines(_			configuration,_			configurationDirectory)___		try {_			final CliFrontend cli = new CliFrontend(_				configuration,_				customCommandLines)___			SecurityUtils.install(new SecurityConfiguration(cli.configuration))__			int retCode = SecurityUtils.getInstalledContext()_					.runSecured(() -> cli.parseParameters(args))__			System.exit(retCode)__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			LOG.error("Fatal error while running command line interface.", strippedThrowable)__			strippedThrowable.printStackTrace()__			System.exit(31)__		}_	};submits,the,job,based,on,the,arguments;public,static,void,main,final,string,args,environment,information,log,environment,info,log,command,line,client,args,final,string,configuration,directory,get,configuration,directory,from,env,final,configuration,configuration,global,configuration,load,configuration,configuration,directory,final,list,custom,command,line,custom,command,lines,load,custom,command,lines,configuration,configuration,directory,try,final,cli,frontend,cli,new,cli,frontend,configuration,custom,command,lines,security,utils,install,new,security,configuration,cli,configuration,int,ret,code,security,utils,get,installed,context,run,secured,cli,parse,parameters,args,system,exit,ret,code,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,fatal,error,while,running,command,line,interface,stripped,throwable,stripped,throwable,print,stack,trace,system,exit,31
CliFrontend -> protected ClusterClient retrieveClient(CommandLineOptions options);1515699581;Updates the associated configuration with the given command line options.__@param options Command line options;protected ClusterClient retrieveClient(CommandLineOptions options) {_		CustomCommandLine customCLI = getActiveCustomCommandLine(options.getCommandLine())__		try {_			ClusterClient client = customCLI.retrieveCluster(options.getCommandLine(), config, configurationDirectory)__			logAndSysout("Using address " + client.getJobManagerAddress() + " to connect to JobManager.")__			return client__		} catch (Exception e) {_			LOG.error("Couldn't retrieve {} cluster.", customCLI.getId(), e)__			throw new IllegalConfigurationException("Couldn't retrieve client for cluster", e)__		}_	};updates,the,associated,configuration,with,the,given,command,line,options,param,options,command,line,options;protected,cluster,client,retrieve,client,command,line,options,options,custom,command,line,custom,cli,get,active,custom,command,line,options,get,command,line,try,cluster,client,client,custom,cli,retrieve,cluster,options,get,command,line,config,configuration,directory,log,and,sysout,using,address,client,get,job,manager,address,to,connect,to,job,manager,return,client,catch,exception,e,log,error,couldn,t,retrieve,cluster,custom,cli,get,id,e,throw,new,illegal,configuration,exception,couldn,t,retrieve,client,for,cluster,e
CliFrontend -> protected ClusterClient retrieveClient(CommandLineOptions options);1515699597;Updates the associated configuration with the given command line options.__@param options Command line options;protected ClusterClient retrieveClient(CommandLineOptions options) {_		CustomCommandLine customCLI = getActiveCustomCommandLine(options.getCommandLine())__		try {_			ClusterClient client = customCLI.retrieveCluster(options.getCommandLine(), configuration, configurationDirectory)__			logAndSysout("Using address " + client.getJobManagerAddress() + " to connect to JobManager.")__			return client__		} catch (Exception e) {_			LOG.error("Couldn't retrieve {} cluster.", customCLI.getId(), e)__			throw new IllegalConfigurationException("Couldn't retrieve client for cluster", e)__		}_	};updates,the,associated,configuration,with,the,given,command,line,options,param,options,command,line,options;protected,cluster,client,retrieve,client,command,line,options,options,custom,command,line,custom,cli,get,active,custom,command,line,options,get,command,line,try,cluster,client,client,custom,cli,retrieve,cluster,options,get,command,line,configuration,configuration,directory,log,and,sysout,using,address,client,get,job,manager,address,to,connect,to,job,manager,return,client,catch,exception,e,log,error,couldn,t,retrieve,cluster,custom,cli,get,id,e,throw,new,illegal,configuration,exception,couldn,t,retrieve,client,for,cluster,e
CliFrontend -> public int parseParameters(String[] args);1515699581;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp()__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					return run(params)__				case ACTION_LIST:_					return list(params)__				case ACTION_INFO:_					return info(params)__				case ACTION_CANCEL:_					return cancel(params)__				case ACTION_STOP:_					return stop(params)__				case ACTION_SAVEPOINT:_					return savepoint(params)__				case "-h":_				case "--help":_					CliFrontendParser.printHelp()__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,return,run,params,case,return,list,params,case,return,info,params,case,return,cancel,params,case,return,stop,params,case,return,savepoint,params,case,h,case,help,cli,frontend,parser,print,help,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515699597;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					return run(params)__				case ACTION_LIST:_					return list(params)__				case ACTION_INFO:_					return info(params)__				case ACTION_CANCEL:_					return cancel(params)__				case ACTION_STOP:_					return stop(params)__				case ACTION_SAVEPOINT:_					return savepoint(params)__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,return,run,params,case,return,list,params,case,return,info,params,case,return,cancel,params,case,return,stop,params,case,return,savepoint,params,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515699606;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515770042;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515770043;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515770043;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1515770044;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1517324056;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1517914183;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1517944847;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1518680659;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1519052658;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1519057653;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1519317159;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1519674120;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1521396720;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1522132482;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1522681180;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1523906273;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1524124694;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1525116069;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1527250470;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1528796078;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1528796078;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1530717177;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1537436047;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1537963459;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1537963459;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> public int parseParameters(String[] args);1538135826;Parses the command line arguments and starts the requested action.__@param args command line arguments of the client._@return The return code of the program;public int parseParameters(String[] args) {__		_		if (args.length < 1) {_			CliFrontendParser.printHelp(customCommandLines)__			System.out.println("Please specify an action.")__			return 1__		}__		_		String action = args[0]___		_		final String[] params = Arrays.copyOfRange(args, 1, args.length)___		try {_			_			switch (action) {_				case ACTION_RUN:_					run(params)__					return 0__				case ACTION_LIST:_					list(params)__					return 0__				case ACTION_INFO:_					info(params)__					return 0__				case ACTION_CANCEL:_					cancel(params)__					return 0__				case ACTION_STOP:_					stop(params)__					return 0__				case ACTION_SAVEPOINT:_					savepoint(params)__					return 0__				case ACTION_MODIFY:_					modify(params)__					return 0__				case "-h":_				case "--help":_					CliFrontendParser.printHelp(customCommandLines)__					return 0__				case "-v":_				case "--version":_					String version = EnvironmentInformation.getVersion()__					String commitID = EnvironmentInformation.getRevisionInformation().commitId__					System.out.print("Version: " + version)__					System.out.println(commitID.equals(EnvironmentInformation.UNKNOWN) ? "" : ", Commit ID: " + commitID)__					return 0__				default:_					System.out.printf("\"%s\" is not a valid action.\n", action)__					System.out.println()__					System.out.println("Valid actions are \"run\", \"list\", \"info\", \"savepoint\", \"stop\", or \"cancel\".")__					System.out.println()__					System.out.println("Specify the version option (-v or --version) to print Flink version.")__					System.out.println()__					System.out.println("Specify the help option (-h or --help) to get help on the command.")__					return 1__			}_		} catch (CliArgsException ce) {_			return handleArgException(ce)__		} catch (ProgramParametrizationException ppe) {_			return handleParametrizationException(ppe)__		} catch (ProgramMissingJobException pmje) {_			return handleMissingJobException()__		} catch (Exception e) {_			return handleError(e)__		}_	};parses,the,command,line,arguments,and,starts,the,requested,action,param,args,command,line,arguments,of,the,client,return,the,return,code,of,the,program;public,int,parse,parameters,string,args,if,args,length,1,cli,frontend,parser,print,help,custom,command,lines,system,out,println,please,specify,an,action,return,1,string,action,args,0,final,string,params,arrays,copy,of,range,args,1,args,length,try,switch,action,case,run,params,return,0,case,list,params,return,0,case,info,params,return,0,case,cancel,params,return,0,case,stop,params,return,0,case,savepoint,params,return,0,case,modify,params,return,0,case,h,case,help,cli,frontend,parser,print,help,custom,command,lines,return,0,case,v,case,version,string,version,environment,information,get,version,string,commit,id,environment,information,get,revision,information,commit,id,system,out,print,version,version,system,out,println,commit,id,equals,environment,information,unknown,commit,id,commit,id,return,0,default,system,out,printf,s,is,not,a,valid,action,n,action,system,out,println,system,out,println,valid,actions,are,run,list,info,savepoint,stop,or,cancel,system,out,println,system,out,println,specify,the,version,option,v,or,version,to,print,flink,version,system,out,println,system,out,println,specify,the,help,option,h,or,help,to,get,help,on,the,command,return,1,catch,cli,args,exception,ce,return,handle,arg,exception,ce,catch,program,parametrization,exception,ppe,return,handle,parametrization,exception,ppe,catch,program,missing,job,exception,pmje,return,handle,missing,job,exception,catch,exception,e,return,handle,error,e
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515699606;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515770042;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515770043;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515770043;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515770044;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1517324056;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1517914183;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1517944847;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1518680659;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1519052658;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1519057653;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1519317159;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1519674120;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1521396720;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1522132482;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1522681180;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1523906273;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1524124694;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1525116069;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1527250470;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1528796078;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1528796078;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1530717177;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1537436047;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1537963459;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1537963459;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1538135826;Executes the info action.__@param args Command line arguments for the info action.;protected void info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return__		}__		if (infoOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,void,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,if,info,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,finally,program,delete,extracted,libraries
CliFrontend -> private int triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws Exception;1515699581;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private int triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws Exception {_		logAndSysout("Triggering savepoint for job " + jobId + ".")__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		String savepointPath__		try {_			logAndSysout("Waiting for response...")__			savepointPath = savepointPathFuture.get()__		}_		catch (ExecutionException ee) {_			Throwable cause = ExceptionUtils.stripExecutionException(ee)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return 0__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,int,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,string,savepoint,path,try,log,and,sysout,waiting,for,response,savepoint,path,savepoint,path,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,0
CliFrontend -> private int triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws Exception;1515699597;Sends a {@link org.apache.flink.runtime.messages.JobManagerMessages.TriggerSavepoint}_message to the job manager.;private int triggerSavepoint(ClusterClient clusterClient, JobID jobId, String savepointDirectory) throws Exception {_		logAndSysout("Triggering savepoint for job " + jobId + ".")__		CompletableFuture<String> savepointPathFuture = clusterClient.triggerSavepoint(jobId, savepointDirectory)___		String savepointPath__		try {_			logAndSysout("Waiting for response...")__			savepointPath = savepointPathFuture.get()__		}_		catch (ExecutionException ee) {_			Throwable cause = ExceptionUtils.stripExecutionException(ee)__			throw new FlinkException("Triggering a savepoint for the job " + jobId + " failed.", cause)__		}__		logAndSysout("Savepoint completed. Path: " + savepointPath)__		logAndSysout("You can resume your program from this savepoint with the run command.")___		return 0__	};sends,a,link,org,apache,flink,runtime,messages,job,manager,messages,trigger,savepoint,message,to,the,job,manager;private,int,trigger,savepoint,cluster,client,cluster,client,job,id,job,id,string,savepoint,directory,throws,exception,log,and,sysout,triggering,savepoint,for,job,job,id,completable,future,string,savepoint,path,future,cluster,client,trigger,savepoint,job,id,savepoint,directory,string,savepoint,path,try,log,and,sysout,waiting,for,response,savepoint,path,savepoint,path,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,flink,exception,triggering,a,savepoint,for,the,job,job,id,failed,cause,log,and,sysout,savepoint,completed,path,savepoint,path,log,and,sysout,you,can,resume,your,program,from,this,savepoint,with,the,run,command,return,0
CliFrontend -> protected int cancel(String[] args) throws Exception;1515699581;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected int cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel()__			return 0__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, config, configurationDirectory)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}__			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,int,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,return,0,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,config,configuration,directory,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected int cancel(String[] args) throws Exception;1515699597;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected int cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return 0__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, configuration, configurationDirectory)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}__			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,int,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,0,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,configuration,configuration,directory,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> private static CustomCommandLine loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515770043;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515770043;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> PackagedProgram buildProgram(ProgramOptions options) throws FileNotFoundException, ProgramInvocationException;1537963459;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success);PackagedProgram buildProgram(ProgramOptions options) throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success;packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> PackagedProgram buildProgram(ProgramOptions options) throws FileNotFoundException, ProgramInvocationException;1538135826;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success);PackagedProgram buildProgram(ProgramOptions options) throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success;packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected int run(String[] args) throws Exception;1515699581;Executions the run action.__@param args Command line arguments for the run action.;protected int run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun()__			return 0__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		ClusterClient client = null___		try {_			final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)__			client = createClient(customCommandLine, commandLine, program)___			client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__			client.setDetached(runOptions.getDetachedMode())__			LOG.debug("Client slots is set to {}", client.getMaxSlots())___			LOG.debug(runOptions.getSavepointRestoreSettings().toString())___			int userParallelism = runOptions.getParallelism()__			LOG.debug("User parallelism is set to {}", userParallelism)__			if (client.getMaxSlots() != -1 && userParallelism == -1) {_				logAndSysout("Using the parallelism provided by the remote cluster ("_					+ client.getMaxSlots() + "). "_					+ "To use another parallelism, set it at the ./bin/flink client.")__				userParallelism = client.getMaxSlots()__			} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_				userParallelism = defaultParallelism__			}__			return executeProgram(program, client, userParallelism)__		}_		finally {_			program.deleteExtractedLibraries()___			if (client != null) {_				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,int,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,return,0,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,cluster,client,client,null,try,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,client,create,client,custom,command,line,command,line,program,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,return,execute,program,program,client,user,parallelism,finally,program,delete,extracted,libraries,if,client,null,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected int run(String[] args) throws Exception;1515699597;Executions the run action.__@param args Command line arguments for the run action.;protected int run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return 0__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		ClusterClient client = null___		try {_			final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)__			client = createClient(customCommandLine, commandLine, program)___			client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__			client.setDetached(runOptions.getDetachedMode())__			LOG.debug("Client slots is set to {}", client.getMaxSlots())___			LOG.debug(runOptions.getSavepointRestoreSettings().toString())___			int userParallelism = runOptions.getParallelism()__			LOG.debug("User parallelism is set to {}", userParallelism)__			if (client.getMaxSlots() != -1 && userParallelism == -1) {_				logAndSysout("Using the parallelism provided by the remote cluster ("_					+ client.getMaxSlots() + "). "_					+ "To use another parallelism, set it at the ./bin/flink client.")__				userParallelism = client.getMaxSlots()__			} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_				userParallelism = defaultParallelism__			}__			return executeProgram(program, client, userParallelism)__		}_		finally {_			program.deleteExtractedLibraries()___			if (client != null) {_				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,int,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,0,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,cluster,client,client,null,try,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,client,create,client,custom,command,line,command,line,program,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,return,execute,program,program,client,user,parallelism,finally,program,delete,extracted,libraries,if,client,null,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected int stop(String[] args) throws Exception;1515699581;Executes the STOP action.__@param args Command line arguments for the stop action.;protected int stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, false)___		StopOptions options = new StopOptions(commandLine)___		_		if (options.isPrintHelp()) {_			CliFrontendParser.printHelpForStop()__			return 0__		}__		String[] stopArgs = options.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, config, configurationDirectory)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')___			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,int,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,false,stop,options,options,new,stop,options,command,line,if,options,is,print,help,cli,frontend,parser,print,help,for,stop,return,0,string,stop,args,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,config,configuration,directory,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected int stop(String[] args) throws Exception;1515699597;Executes the STOP action.__@param args Command line arguments for the stop action.;protected int stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return 0__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, configuration, configurationDirectory)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')___			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,int,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,0,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,configuration,configuration,directory,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> private static int handleMissingJobException();1515699581;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515699597;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515699606;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515770042;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515770043;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515770043;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1515770044;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1517324056;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1517914183;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1517944847;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1518680659;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1519052658;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1519057653;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1519317159;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1519674120;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1521396720;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1522132482;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1522681180;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1523906273;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1524124694;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1525116069;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1527250470;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1528796078;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1528796078;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1530717177;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1537436047;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1537963459;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1537963459;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static int handleMissingJobException();1538135826;Displays a message for a program without a job to execute.__@return The return code for the process.;private static int handleMissingJobException() {_		System.err.println()__		System.err.println("The program didn't contain a Flink job. " +_			"Perhaps you forgot to call execute() on the execution environment.")__		return 1__	};displays,a,message,for,a,program,without,a,job,to,execute,return,the,return,code,for,the,process;private,static,int,handle,missing,job,exception,system,err,println,system,err,println,the,program,didn,t,contain,a,flink,job,perhaps,you,forgot,to,call,execute,on,the,execution,environment,return,1
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515699581;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515699597;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515699606;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515770042;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1515770044;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1517324056;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1517914183;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1517944847;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1518680659;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1519052658;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1519057653;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1519317159;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1519674120;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1521396720;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1522132482;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1522681180;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1523906273;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1524124694;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1525116069;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1527250470;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1528796078;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1528796078;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1530717177;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1537436047;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1537963459;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1537963459;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException;1538135826;Loads a class from the classpath that implements the CustomCommandLine interface._@param className The fully-qualified class name to load._@param params The constructor parameters;private static CustomCommandLine<?> loadCustomCommandLine(String className, Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException {__		Class<? extends CustomCommandLine> customCliClass =_			Class.forName(className).asSubclass(CustomCommandLine.class)___		_		Class<?>[] types = new Class<?>[params.length]__		for (int i = 0_ i < params.length_ i++) {_			Preconditions.checkNotNull(params[i], "Parameters for custom command-lines may not be null.")__			types[i] = params[i].getClass()__		}__		Constructor<? extends CustomCommandLine> constructor = customCliClass.getConstructor(types)___		return constructor.newInstance(params)__	};loads,a,class,from,the,classpath,that,implements,the,custom,command,line,interface,param,class,name,the,fully,qualified,class,name,to,load,param,params,the,constructor,parameters;private,static,custom,command,line,load,custom,command,line,string,class,name,object,params,throws,illegal,access,exception,invocation,target,exception,instantiation,exception,class,not,found,exception,no,such,method,exception,class,extends,custom,command,line,custom,cli,class,class,for,name,class,name,as,subclass,custom,command,line,class,class,types,new,class,params,length,for,int,i,0,i,params,length,i,preconditions,check,not,null,params,i,parameters,for,custom,command,lines,may,not,be,null,types,i,params,i,get,class,constructor,extends,custom,command,line,constructor,custom,cli,class,get,constructor,types,return,constructor,new,instance,params
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1515770044;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1517324056;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1517914183;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1517944847;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1518680659;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1519052658;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1519057653;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1519317159;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1519674120;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1521396720;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1522132482;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1522681180;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1523906273;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1524124694;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1525116069;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1527250470;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1528796078;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1528796078;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1530717177;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1537436047;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1537963459;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1537963459;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> ClusterAction -> void runAction(ClusterClient<T> clusterClient) throws FlinkException_;1538135826;Run the cluster action with the given {@link ClusterClient}.__@param clusterClient to run the cluster action against_@throws FlinkException if something goes wrong;void runAction(ClusterClient<T> clusterClient) throws FlinkException_;run,the,cluster,action,with,the,given,link,cluster,client,param,cluster,client,to,run,the,cluster,action,against,throws,flink,exception,if,something,goes,wrong;void,run,action,cluster,client,t,cluster,client,throws,flink,exception
CliFrontend -> protected void cancel(String[] args) throws Exception;1515699606;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(_			configuration,_			configurationDirectory,_			commandLine)___		final String clusterId = activeCommandLine.getClusterId(configuration, commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,configuration,configuration,directory,command,line,final,string,cluster,id,active,command,line,get,cluster,id,configuration,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void cancel(String[] args) throws Exception;1515770042;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void cancel(String[] args) throws Exception;1515770043;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void cancel(String[] args) throws Exception;1515770043;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		String[] cleanedArgs = cancelOptions.getArgs()___		boolean withSavepoint = cancelOptions.isWithSavepoint()__		String targetDirectory = cancelOptions.getSavepointTargetDirectory()___		JobID jobId___		_		_		_		_		_		if (cleanedArgs.length > 0) {_			String jobIdString = cleanedArgs[0]___			jobId = parseJobId(jobIdString)__		} else if (targetDirectory != null)  {_			_			String jobIdString = targetDirectory__			targetDirectory = null___			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID in the command line arguments.")__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			if (withSavepoint) {_				if (targetDirectory == null) {_					logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__				} else {_					logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__				}_				String savepointPath = client.cancelWithSavepoint(jobId, targetDirectory)__				logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__			} else {_				logAndSysout("Cancelling job " + jobId + '.')__				client.cancel(jobId)__				logAndSysout("Cancelled job " + jobId + '.')__			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,string,cleaned,args,cancel,options,get,args,boolean,with,savepoint,cancel,options,is,with,savepoint,string,target,directory,cancel,options,get,savepoint,target,directory,job,id,job,id,if,cleaned,args,length,0,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,if,target,directory,null,string,job,id,string,target,directory,target,directory,null,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,in,the,command,line,arguments,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,if,with,savepoint,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,string,savepoint,path,client,cancel,with,savepoint,job,id,target,directory,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,log,and,sysout,cancelling,job,job,id,client,cancel,job,id,log,and,sysout,cancelled,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void cancel(String[] args) throws Exception;1515770044;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1517324056;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1517914183;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1517944847;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1518680659;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1519052658;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1519057653;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1519317159;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1519674120;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1521396720;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1522132482;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1522681180;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1523906273;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1524124694;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1525116069;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1527250470;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1528796078;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1528796078;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1530717177;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1537436047;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1537963459;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1537963459;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected void cancel(String[] args) throws Exception;1538135826;Executes the CANCEL action.__@param args Command line arguments for the cancel action.;protected void cancel(String[] args) throws Exception {_		LOG.info("Running 'cancel' command.")___		final Options commandOptions = CliFrontendParser.getCancelCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		CancelOptions cancelOptions = new CancelOptions(commandLine)___		_		if (cancelOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForCancel(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final String[] cleanedArgs = cancelOptions.getArgs()___		if (cancelOptions.isWithSavepoint()) {_			final JobID jobId__			final String targetDirectory___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__				targetDirectory = cancelOptions.getSavepointTargetDirectory()__			} else {_				jobId = parseJobId(cancelOptions.getSavepointTargetDirectory())__				targetDirectory = null__			}__			if (targetDirectory == null) {_				logAndSysout("Cancelling job " + jobId + " with savepoint to default savepoint directory.")__			} else {_				logAndSysout("Cancelling job " + jobId + " with savepoint to " + targetDirectory + '.')__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					final String savepointPath__					try {_						savepointPath = clusterClient.cancelWithSavepoint(jobId, targetDirectory)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_					logAndSysout("Cancelled job " + jobId + ". Savepoint stored in " + savepointPath + '.')__				})__		} else {_			final JobID jobId___			if (cleanedArgs.length > 0) {_				jobId = parseJobId(cleanedArgs[0])__			} else {_				throw new CliArgsException("Missing JobID. Specify a JobID to cancel a job.")__			}__			logAndSysout("Cancelling job " + jobId + '.')___			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> {_					try {_						clusterClient.cancel(jobId)__					} catch (Exception e) {_						throw new FlinkException("Could not cancel job " + jobId + '.', e)__					}_				})___			logAndSysout("Cancelled job " + jobId + '.')__		}_	};executes,the,cancel,action,param,args,command,line,arguments,for,the,cancel,action;protected,void,cancel,string,args,throws,exception,log,info,running,cancel,command,final,options,command,options,cli,frontend,parser,get,cancel,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,cancel,options,cancel,options,new,cancel,options,command,line,if,cancel,options,is,print,help,cli,frontend,parser,print,help,for,cancel,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,string,cleaned,args,cancel,options,get,args,if,cancel,options,is,with,savepoint,final,job,id,job,id,final,string,target,directory,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,target,directory,cancel,options,get,savepoint,target,directory,else,job,id,parse,job,id,cancel,options,get,savepoint,target,directory,target,directory,null,if,target,directory,null,log,and,sysout,cancelling,job,job,id,with,savepoint,to,default,savepoint,directory,else,log,and,sysout,cancelling,job,job,id,with,savepoint,to,target,directory,run,cluster,action,active,command,line,command,line,cluster,client,final,string,savepoint,path,try,savepoint,path,cluster,client,cancel,with,savepoint,job,id,target,directory,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id,savepoint,stored,in,savepoint,path,else,final,job,id,job,id,if,cleaned,args,length,0,job,id,parse,job,id,cleaned,args,0,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,cancel,a,job,log,and,sysout,cancelling,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,cancel,job,id,catch,exception,e,throw,new,flink,exception,could,not,cancel,job,job,id,e,log,and,sysout,cancelled,job,job,id
CliFrontend -> protected int list(String[] args) throws Exception;1515699581;Executes the list action.__@param args Command line arguments for the list action.;protected int list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, false)___		ListOptions options = new ListOptions(commandLine)___		_		if (options.isPrintHelp()) {_			CliFrontendParser.printHelpForList()__			return 0__		}__		boolean running = options.getRunning()__		boolean scheduled = options.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, config, configurationDirectory)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}__			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,int,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,false,list,options,options,new,list,options,command,line,if,options,is,print,help,cli,frontend,parser,print,help,for,list,return,0,boolean,running,options,get,running,boolean,scheduled,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,config,configuration,directory,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected int list(String[] args) throws Exception;1515699597;Executes the list action.__@param args Command line arguments for the list action.;protected int list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return 0__		}__		boolean running = listOptions.getRunning()__		boolean scheduled = listOptions.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterClient client = activeCommandLine.retrieveCluster(commandLine, configuration, configurationDirectory)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}__			return 0__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,int,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,0,boolean,running,list,options,get,running,boolean,scheduled,list,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,client,client,active,command,line,retrieve,cluster,command,line,configuration,configuration,directory,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,return,0,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e
CliFrontend -> protected void list(String[] args) throws Exception;1515699606;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		boolean running = listOptions.getRunning()__		boolean scheduled = listOptions.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(_			configuration,_			configurationDirectory,_			commandLine)___		final String clusterId = activeCommandLine.getClusterId(_			configuration,_			commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,boolean,running,list,options,get,running,boolean,scheduled,list,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,configuration,configuration,directory,command,line,final,string,cluster,id,active,command,line,get,cluster,id,configuration,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void list(String[] args) throws Exception;1515770042;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		boolean running = listOptions.getRunning()__		boolean scheduled = listOptions.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,boolean,running,list,options,get,running,boolean,scheduled,list,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void list(String[] args) throws Exception;1515770043;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		boolean running = listOptions.getRunning()__		boolean scheduled = listOptions.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,boolean,running,list,options,get,running,boolean,scheduled,list,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void list(String[] args) throws Exception;1515770043;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		boolean running = listOptions.getRunning()__		boolean scheduled = listOptions.getScheduled()___		_		if (!running && !scheduled) {_			running = true__			scheduled = true__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)__		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			Collection<JobStatusMessage> jobDetails__			try {_				CompletableFuture<Collection<JobStatusMessage>> jobDetailsFuture = client.listJobs()___				try {_					logAndSysout("Waiting for response...")__					jobDetails = jobDetailsFuture.get()__				}_				catch (ExecutionException ee) {_					Throwable cause = ExceptionUtils.stripExecutionException(ee)__					throw new Exception("Failed to retrieve job list.", cause)__				}_			} finally {_				client.shutdown()__			}__			LOG.info("Successfully retrieved list of jobs")___			SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")__			Comparator<JobStatusMessage> startTimeComparator = (o1, o2) -> (int) (o1.getStartTime() - o2.getStartTime())___			final List<JobStatusMessage> runningJobs = new ArrayList<>()__			final List<JobStatusMessage> scheduledJobs = new ArrayList<>()__			jobDetails.forEach(details -> {_				if (details.getJobState() == JobStatus.CREATED) {_					scheduledJobs.add(details)__				} else {_					runningJobs.add(details)__				}_			})___			if (running) {_				if (runningJobs.size() == 0) {_					System.out.println("No running jobs.")__				}_				else {_					runningJobs.sort(startTimeComparator)___					System.out.println("------------------ Running/Restarting Jobs -------------------")__					for (JobStatusMessage runningJob : runningJobs) {_						System.out.println(dateFormat.format(new Date(runningJob.getStartTime()))_							+ " : " + runningJob.getJobId() + " : " + runningJob.getJobName() + " (" + runningJob.getJobState() + ")")__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_			if (scheduled) {_				if (scheduledJobs.size() == 0) {_					System.out.println("No scheduled jobs.")__				}_				else {_					scheduledJobs.sort(startTimeComparator)___					System.out.println("----------------------- Scheduled Jobs -----------------------")__					for (JobStatusMessage scheduledJob : scheduledJobs) {_						System.out.println(dateFormat.format(new Date(scheduledJob.getStartTime()))_							+ " : " + scheduledJob.getJobId() + " : " + scheduledJob.getJobName())__					}_					System.out.println("--------------------------------------------------------------")__				}_			}_		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,boolean,running,list,options,get,running,boolean,scheduled,list,options,get,scheduled,if,running,scheduled,running,true,scheduled,true,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,collection,job,status,message,job,details,try,completable,future,collection,job,status,message,job,details,future,client,list,jobs,try,log,and,sysout,waiting,for,response,job,details,job,details,future,get,catch,execution,exception,ee,throwable,cause,exception,utils,strip,execution,exception,ee,throw,new,exception,failed,to,retrieve,job,list,cause,finally,client,shutdown,log,info,successfully,retrieved,list,of,jobs,simple,date,format,date,format,new,simple,date,format,dd,mm,yyyy,hh,mm,ss,comparator,job,status,message,start,time,comparator,o1,o2,int,o1,get,start,time,o2,get,start,time,final,list,job,status,message,running,jobs,new,array,list,final,list,job,status,message,scheduled,jobs,new,array,list,job,details,for,each,details,if,details,get,job,state,job,status,created,scheduled,jobs,add,details,else,running,jobs,add,details,if,running,if,running,jobs,size,0,system,out,println,no,running,jobs,else,running,jobs,sort,start,time,comparator,system,out,println,running,restarting,jobs,for,job,status,message,running,job,running,jobs,system,out,println,date,format,format,new,date,running,job,get,start,time,running,job,get,job,id,running,job,get,job,name,running,job,get,job,state,system,out,println,if,scheduled,if,scheduled,jobs,size,0,system,out,println,no,scheduled,jobs,else,scheduled,jobs,sort,start,time,comparator,system,out,println,scheduled,jobs,for,job,status,message,scheduled,job,scheduled,jobs,system,out,println,date,format,format,new,date,scheduled,job,get,start,time,scheduled,job,get,job,id,scheduled,job,get,job,name,system,out,println,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void list(String[] args) throws Exception;1515770044;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1517324056;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1517914183;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1517944847;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1518680659;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1519052658;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1519057653;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1519317159;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1519674120;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1521396720;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1522132482;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1522681180;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1523906273;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1524124694;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1525116069;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1527250470;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1528796078;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean running__		final boolean scheduled___		_		if (!listOptions.getRunning() && !listOptions.getScheduled()) {_			running = true__			scheduled = true__		} else {_			running = listOptions.getRunning()__			scheduled = listOptions.getScheduled()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, running, scheduled))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,running,final,boolean,scheduled,if,list,options,get,running,list,options,get,scheduled,running,true,scheduled,true,else,running,list,options,get,running,scheduled,list,options,get,scheduled,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,running,scheduled
CliFrontend -> protected void list(String[] args) throws Exception;1528796078;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void list(String[] args) throws Exception;1530717177;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void list(String[] args) throws Exception;1537436047;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void list(String[] args) throws Exception;1537963459;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void list(String[] args) throws Exception;1537963459;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void list(String[] args) throws Exception;1538135826;Executes the list action.__@param args Command line arguments for the list action.;protected void list(String[] args) throws Exception {_		LOG.info("Running 'list' command.")___		final Options commandOptions = CliFrontendParser.getListCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		ListOptions listOptions = new ListOptions(commandLine)___		_		if (listOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForList(customCommandLines)__			return__		}__		final boolean showRunning__		final boolean showScheduled__		final boolean showAll___		_		if (!listOptions.showRunning() && !listOptions.showScheduled() && !listOptions.showAll()) {_			showRunning = true__			showScheduled = true__			showAll = false__		} else {_			showRunning = listOptions.showRunning()__			showScheduled = listOptions.showScheduled()__			showAll = listOptions.showAll()__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> listJobs(clusterClient, showRunning, showScheduled, showAll))___	};executes,the,list,action,param,args,command,line,arguments,for,the,list,action;protected,void,list,string,args,throws,exception,log,info,running,list,command,final,options,command,options,cli,frontend,parser,get,list,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,list,options,list,options,new,list,options,command,line,if,list,options,is,print,help,cli,frontend,parser,print,help,for,list,custom,command,lines,return,final,boolean,show,running,final,boolean,show,scheduled,final,boolean,show,all,if,list,options,show,running,list,options,show,scheduled,list,options,show,all,show,running,true,show,scheduled,true,show,all,false,else,show,running,list,options,show,running,show,scheduled,list,options,show,scheduled,show,all,list,options,show,all,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,run,cluster,action,active,command,line,command,line,cluster,client,list,jobs,cluster,client,show,running,show,scheduled,show,all
CliFrontend -> protected void stop(String[] args) throws Exception;1515699606;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(_			configuration,_			configurationDirectory,_			commandLine)___		final String clusterId = activeCommandLine.getClusterId(configuration, commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,configuration,configuration,directory,command,line,final,string,cluster,id,active,command,line,get,cluster,id,configuration,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void stop(String[] args) throws Exception;1515770042;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void stop(String[] args) throws Exception;1515770043;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void stop(String[] args) throws Exception;1515770043;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		}_		else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine activeCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient client = clusterDescriptor.retrieve(clusterId)___		try {_			logAndSysout("Stopping job " + jobId + '.')__			client.stop(jobId)__			logAndSysout("Stopped job " + jobId + '.')__		} finally {_			try {_				client.shutdown()__			} catch (Exception e) {_				LOG.info("Could not properly shut down the client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,client,cluster,descriptor,retrieve,cluster,id,try,log,and,sysout,stopping,job,job,id,client,stop,job,id,log,and,sysout,stopped,job,job,id,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void stop(String[] args) throws Exception;1515770044;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1517324056;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1517914183;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1517944847;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1518680659;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1519052658;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1519057653;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1519317159;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1519674120;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1521396720;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1522132482;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1522681180;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1523906273;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1524124694;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1525116069;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1527250470;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1528796078;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1528796078;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1530717177;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1537436047;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1537963459;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1537963459;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> protected void stop(String[] args) throws Exception;1538135826;Executes the STOP action.__@param args Command line arguments for the stop action.;protected void stop(String[] args) throws Exception {_		LOG.info("Running 'stop' command.")___		final Options commandOptions = CliFrontendParser.getStopCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		StopOptions stopOptions = new StopOptions(commandLine)___		_		if (stopOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForStop(customCommandLines)__			return__		}__		String[] stopArgs = stopOptions.getArgs()__		JobID jobId___		if (stopArgs.length > 0) {_			String jobIdString = stopArgs[0]__			jobId = parseJobId(jobIdString)__		} else {_			throw new CliArgsException("Missing JobID")__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		logAndSysout("Stopping job " + jobId + '.')___		runClusterAction(_			activeCommandLine,_			commandLine,_			clusterClient -> {_				try {_					clusterClient.stop(jobId)__				} catch (Exception e) {_					throw new FlinkException("Could not stop the job " + jobId + '.', e)__				}_			})___		logAndSysout("Stopped job " + jobId + '.')__	};executes,the,stop,action,param,args,command,line,arguments,for,the,stop,action;protected,void,stop,string,args,throws,exception,log,info,running,stop,command,final,options,command,options,cli,frontend,parser,get,stop,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,stop,options,stop,options,new,stop,options,command,line,if,stop,options,is,print,help,cli,frontend,parser,print,help,for,stop,custom,command,lines,return,string,stop,args,stop,options,get,args,job,id,job,id,if,stop,args,length,0,string,job,id,string,stop,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,log,and,sysout,stopping,job,job,id,run,cluster,action,active,command,line,command,line,cluster,client,try,cluster,client,stop,job,id,catch,exception,e,throw,new,flink,exception,could,not,stop,the,job,job,id,e,log,and,sysout,stopped,job,job,id
CliFrontend -> private static int handleArgException(CliArgsException e);1515699606;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1515770042;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1515770043;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1515770043;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1515770044;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1517324056;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1517914183;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1517944847;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1518680659;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1519052658;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1519057653;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1519317159;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1519674120;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1521396720;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1522132482;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1522681180;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1523906273;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1524124694;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1525116069;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1527250470;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1528796078;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1528796078;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1530717177;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1537436047;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1537963459;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1537963459;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(CliArgsException e);1538135826;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(CliArgsException e) {_		LOG.error("Invalid command line arguments.", e)___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,cli,args,exception,e,log,error,invalid,command,line,arguments,e,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515699581;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine, config)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,config,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515699597;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine, configuration)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,configuration,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515699606;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine, configuration)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,configuration,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515770042;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515770043;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine);1515770043;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public String getConfigurationDirectory();1515699581;Returns the configuration directory for the CLI frontend.__@return Configuration directory;public String getConfigurationDirectory() {_		return configurationDirectory__	};returns,the,configuration,directory,for,the,cli,frontend,return,configuration,directory;public,string,get,configuration,directory,return,configuration,directory
CliFrontend -> public String getConfigurationDirectory();1515699597;Returns the configuration directory for the CLI frontend.__@return Configuration directory;public String getConfigurationDirectory() {_		return configurationDirectory__	};returns,the,configuration,directory,for,the,cli,frontend,return,configuration,directory;public,string,get,configuration,directory,return,configuration,directory
CliFrontend -> public String getConfigurationDirectory();1515699606;Returns the configuration directory for the CLI frontend.__@return Configuration directory;public String getConfigurationDirectory() {_		return configurationDirectory__	};returns,the,configuration,directory,for,the,cli,frontend,return,configuration,directory;public,string,get,configuration,directory,return,configuration,directory
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1515770044;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1517324056;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1517914183;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1517944847;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1518680659;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1519052658;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1519057653;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1519317159;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1519674120;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1521396720;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1522132482;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1522681180;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1523906273;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1524124694;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1525116069;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1527250470;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1528796078;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1528796078;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1530717177;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1537436047;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1537963459;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1537963459;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException;1538135826;Retrieves the {@link ClusterClient} from the given {@link CustomCommandLine} and runs the given_{@link ClusterAction} against it.__@param activeCommandLine to create the {@link ClusterDescriptor} from_@param commandLine containing the parsed command line options_@param clusterAction the cluster action to run against the retrieved {@link ClusterClient}._@param <T> type of the cluster id_@throws FlinkException if something goes wrong;private <T> void runClusterAction(CustomCommandLine<T> activeCommandLine, CommandLine commandLine, ClusterAction<T> clusterAction) throws FlinkException {_		final ClusterDescriptor<T> clusterDescriptor = activeCommandLine.createClusterDescriptor(commandLine)___		final T clusterId = activeCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		} else {_			try {_				final ClusterClient<T> clusterClient = clusterDescriptor.retrieve(clusterId)___				try {_					clusterAction.runAction(clusterClient)__				} finally {_					try {_						clusterClient.shutdown()__					} catch (Exception e) {_						LOG.info("Could not properly shut down the cluster client.", e)__					}_				}_			} finally {_				try {_					clusterDescriptor.close()__				} catch (Exception e) {_					LOG.info("Could not properly close the cluster descriptor.", e)__				}_			}_		}_	};retrieves,the,link,cluster,client,from,the,given,link,custom,command,line,and,runs,the,given,link,cluster,action,against,it,param,active,command,line,to,create,the,link,cluster,descriptor,from,param,command,line,containing,the,parsed,command,line,options,param,cluster,action,the,cluster,action,to,run,against,the,retrieved,link,cluster,client,param,t,type,of,the,cluster,id,throws,flink,exception,if,something,goes,wrong;private,t,void,run,cluster,action,custom,command,line,t,active,command,line,command,line,command,line,cluster,action,t,cluster,action,throws,flink,exception,final,cluster,descriptor,t,cluster,descriptor,active,command,line,create,cluster,descriptor,command,line,final,t,cluster,id,active,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,else,try,final,cluster,client,t,cluster,client,cluster,descriptor,retrieve,cluster,id,try,cluster,action,run,action,cluster,client,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,cluster,client,e,finally,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void run(String[] args) throws Exception;1515699606;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = customCommandLine.createClusterDescriptor(_			configuration,_			configurationDirectory,_			commandLine)___		try {_			final String clusterId = customCommandLine.getClusterId(configuration, commandLine)___			final ClusterClient client___			if (clusterId != null) {_				client = clusterDescriptor.retrieve(clusterId)__			} else {_				final ClusterSpecification clusterSpecification = customCommandLine.getClusterSpecification(configuration, commandLine)__				client = clusterDescriptor.deploySessionCluster(clusterSpecification)__			}__			try {_				client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__				client.setDetached(runOptions.getDetachedMode())__				LOG.debug("Client slots is set to {}", client.getMaxSlots())___				LOG.debug(runOptions.getSavepointRestoreSettings().toString())___				int userParallelism = runOptions.getParallelism()__				LOG.debug("User parallelism is set to {}", userParallelism)__				if (client.getMaxSlots() != -1 && userParallelism == -1) {_					logAndSysout("Using the parallelism provided by the remote cluster ("_						+ client.getMaxSlots() + "). "_						+ "To use another parallelism, set it at the ./bin/flink client.")__					userParallelism = client.getMaxSlots()__				} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_					userParallelism = defaultParallelism__				}__				executeProgram(program, client, userParallelism)__			} finally {_				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		} finally {_			program.deleteExtractedLibraries()___			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,configuration,configuration,directory,command,line,try,final,string,cluster,id,custom,command,line,get,cluster,id,configuration,command,line,final,cluster,client,client,if,cluster,id,null,client,cluster,descriptor,retrieve,cluster,id,else,final,cluster,specification,cluster,specification,custom,command,line,get,cluster,specification,configuration,command,line,client,cluster,descriptor,deploy,session,cluster,cluster,specification,try,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,execute,program,program,client,user,parallelism,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,finally,program,delete,extracted,libraries,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void run(String[] args) throws Exception;1515770042;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		try {_			final String clusterId = customCommandLine.getClusterId(commandLine)___			final ClusterClient client___			if (clusterId != null) {_				client = clusterDescriptor.retrieve(clusterId)__			} else {_				final ClusterSpecification clusterSpecification = customCommandLine.getClusterSpecification(commandLine)__				client = clusterDescriptor.deploySessionCluster(clusterSpecification)__			}__			try {_				client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__				client.setDetached(runOptions.getDetachedMode())__				LOG.debug("Client slots is set to {}", client.getMaxSlots())___				LOG.debug(runOptions.getSavepointRestoreSettings().toString())___				int userParallelism = runOptions.getParallelism()__				LOG.debug("User parallelism is set to {}", userParallelism)__				if (client.getMaxSlots() != -1 && userParallelism == -1) {_					logAndSysout("Using the parallelism provided by the remote cluster ("_						+ client.getMaxSlots() + "). "_						+ "To use another parallelism, set it at the ./bin/flink client.")__					userParallelism = client.getMaxSlots()__				} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_					userParallelism = defaultParallelism__				}__				executeProgram(program, client, userParallelism)__			} finally {_				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		} finally {_			program.deleteExtractedLibraries()___			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,try,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,final,cluster,client,client,if,cluster,id,null,client,cluster,descriptor,retrieve,cluster,id,else,final,cluster,specification,cluster,specification,custom,command,line,get,cluster,specification,command,line,client,cluster,descriptor,deploy,session,cluster,cluster,specification,try,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,execute,program,program,client,user,parallelism,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,finally,program,delete,extracted,libraries,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void run(String[] args) throws Exception;1515770043;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		try {_			final String clusterId = customCommandLine.getClusterId(commandLine)___			final ClusterClient client___			if (clusterId != null) {_				client = clusterDescriptor.retrieve(clusterId)__			} else {_				final ClusterSpecification clusterSpecification = customCommandLine.getClusterSpecification(commandLine)__				client = clusterDescriptor.deploySessionCluster(clusterSpecification)__			}__			try {_				client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__				client.setDetached(runOptions.getDetachedMode())__				LOG.debug("Client slots is set to {}", client.getMaxSlots())___				LOG.debug(runOptions.getSavepointRestoreSettings().toString())___				int userParallelism = runOptions.getParallelism()__				LOG.debug("User parallelism is set to {}", userParallelism)__				if (client.getMaxSlots() != -1 && userParallelism == -1) {_					logAndSysout("Using the parallelism provided by the remote cluster ("_						+ client.getMaxSlots() + "). "_						+ "To use another parallelism, set it at the ./bin/flink client.")__					userParallelism = client.getMaxSlots()__				} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_					userParallelism = defaultParallelism__				}__				executeProgram(program, client, userParallelism)__			} finally {_				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		} finally {_			program.deleteExtractedLibraries()___			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,try,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,final,cluster,client,client,if,cluster,id,null,client,cluster,descriptor,retrieve,cluster,id,else,final,cluster,specification,cluster,specification,custom,command,line,get,cluster,specification,command,line,client,cluster,descriptor,deploy,session,cluster,cluster,specification,try,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,execute,program,program,client,user,parallelism,finally,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,finally,program,delete,extracted,libraries,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void run(String[] args) throws Exception;1515770043;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		try {_			final String clusterId = customCommandLine.getClusterId(commandLine)___			final ClusterClient client___			if (clusterId != null) {_				client = clusterDescriptor.retrieve(clusterId)__			} else {_				final ClusterSpecification clusterSpecification = customCommandLine.getClusterSpecification(commandLine)__				client = clusterDescriptor.deploySessionCluster(clusterSpecification)__			}__			try {_				client.setPrintStatusDuringExecution(runOptions.getStdoutLogging())__				client.setDetached(runOptions.getDetachedMode())__				LOG.debug("Client slots is set to {}", client.getMaxSlots())___				LOG.debug(runOptions.getSavepointRestoreSettings().toString())___				int userParallelism = runOptions.getParallelism()__				LOG.debug("User parallelism is set to {}", userParallelism)__				if (client.getMaxSlots() != -1 && userParallelism == -1) {_					logAndSysout("Using the parallelism provided by the remote cluster ("_						+ client.getMaxSlots() + "). "_						+ "To use another parallelism, set it at the ./bin/flink client.")__					userParallelism = client.getMaxSlots()__				} else if (ExecutionConfig.PARALLELISM_DEFAULT == userParallelism) {_					userParallelism = defaultParallelism__				}__				executeProgram(program, client, userParallelism)__			} finally {_				if (clusterId == null && !client.isDetached()) {_					_					try {_						clusterDescriptor.terminateCluster(client.getClusterIdentifier())__					} catch (FlinkException e) {_						LOG.info("Could not properly terminate the Flink cluster.", e)__					}_				}__				try {_					client.shutdown()__				} catch (Exception e) {_					LOG.info("Could not properly shut down the client.", e)__				}_			}_		} finally {_			program.deleteExtractedLibraries()___			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,try,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,final,cluster,client,client,if,cluster,id,null,client,cluster,descriptor,retrieve,cluster,id,else,final,cluster,specification,cluster,specification,custom,command,line,get,cluster,specification,command,line,client,cluster,descriptor,deploy,session,cluster,cluster,specification,try,client,set,print,status,during,execution,run,options,get,stdout,logging,client,set,detached,run,options,get,detached,mode,log,debug,client,slots,is,set,to,client,get,max,slots,log,debug,run,options,get,savepoint,restore,settings,to,string,int,user,parallelism,run,options,get,parallelism,log,debug,user,parallelism,is,set,to,user,parallelism,if,client,get,max,slots,1,user,parallelism,1,log,and,sysout,using,the,parallelism,provided,by,the,remote,cluster,client,get,max,slots,to,use,another,parallelism,set,it,at,the,bin,flink,client,user,parallelism,client,get,max,slots,else,if,execution,config,user,parallelism,user,parallelism,default,parallelism,execute,program,program,client,user,parallelism,finally,if,cluster,id,null,client,is,detached,try,cluster,descriptor,terminate,cluster,client,get,cluster,identifier,catch,flink,exception,e,log,info,could,not,properly,terminate,the,flink,cluster,e,try,client,shutdown,catch,exception,e,log,info,could,not,properly,shut,down,the,client,e,finally,program,delete,extracted,libraries,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void run(String[] args) throws Exception;1515770044;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		runProgram(customCommandLine, commandLine, runOptions, program)__	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,run,program,custom,command,line,command,line,run,options,program
CliFrontend -> protected void run(String[] args) throws Exception;1517324056;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		runProgram(customCommandLine, commandLine, runOptions, program)__	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,run,program,custom,command,line,command,line,run,options,program
CliFrontend -> protected void run(String[] args) throws Exception;1517914183;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		runProgram(customCommandLine, commandLine, runOptions, program)__	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,run,program,custom,command,line,command,line,run,options,program
CliFrontend -> protected void run(String[] args) throws Exception;1517944847;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		runProgram(customCommandLine, commandLine, runOptions, program)__	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,run,program,custom,command,line,command,line,run,options,program
CliFrontend -> protected void run(String[] args) throws Exception;1518680659;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1519052658;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1519057653;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1519317159;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1519674120;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1521396720;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1522132482;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1522681180;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1523906273;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1524124694;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1525116069;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1527250470;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1528796078;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1528796078;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1530717177;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1537436047;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1537963459;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1537963459;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> protected void run(String[] args) throws Exception;1538135826;Executions the run action.__@param args Command line arguments for the run action.;protected void run(String[] args) throws Exception {_		LOG.info("Running 'run' command.")___		final Options commandOptions = CliFrontendParser.getRunCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, true)___		final RunOptions runOptions = new RunOptions(commandLine)___		_		if (runOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForRun(customCommandLines)__			return__		}__		if (runOptions.getJarFilePath() == null) {_			throw new CliArgsException("The program JAR file was not specified.")__		}__		final PackagedProgram program__		try {_			LOG.info("Building program from JAR file")__			program = buildProgram(runOptions)__		}_		catch (FileNotFoundException e) {_			throw new CliArgsException("Could not build the program from JAR file.", e)__		}__		final CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		try {_			runProgram(customCommandLine, commandLine, runOptions, program)__		} finally {_			program.deleteExtractedLibraries()__		}_	};executions,the,run,action,param,args,command,line,arguments,for,the,run,action;protected,void,run,string,args,throws,exception,log,info,running,run,command,final,options,command,options,cli,frontend,parser,get,run,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,true,final,run,options,run,options,new,run,options,command,line,if,run,options,is,print,help,cli,frontend,parser,print,help,for,run,custom,command,lines,return,if,run,options,get,jar,file,path,null,throw,new,cli,args,exception,the,program,jar,file,was,not,specified,final,packaged,program,program,try,log,info,building,program,from,jar,file,program,build,program,run,options,catch,file,not,found,exception,e,throw,new,cli,args,exception,could,not,build,the,program,from,jar,file,e,final,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,try,run,program,custom,command,line,command,line,run,options,program,finally,program,delete,extracted,libraries
CliFrontend -> private static int handleError(Throwable t);1515699581;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515699597;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515699606;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515770042;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515770043;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515770043;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele.toString())__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,to,string,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1515770044;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1517324056;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1517914183;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1517944847;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1518680659;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1519052658;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1519057653;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1519317159;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1519674120;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1521396720;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1522132482;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1522681180;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1523906273;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1524124694;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1525116069;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1527250470;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1528796078;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1528796078;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1530717177;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1537436047;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1537963459;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1537963459;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> private static int handleError(Throwable t);1538135826;Displays an exception message.__@param t The exception to display._@return The return code for the process.;private static int handleError(Throwable t) {_		LOG.error("Error while running the command.", t)___		System.err.println()__		System.err.println("------------------------------------------------------------")__		System.err.println(" The program finished with the following exception:")__		System.err.println()___		if (t.getCause() instanceof InvalidProgramException) {_			System.err.println(t.getCause().getMessage())__			StackTraceElement[] trace = t.getCause().getStackTrace()__			for (StackTraceElement ele: trace) {_				System.err.println("\t" + ele)__				if (ele.getMethodName().equals("main")) {_					break__				}_			}_		} else {_			t.printStackTrace()__		}_		return 1__	};displays,an,exception,message,param,t,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,error,throwable,t,log,error,error,while,running,the,command,t,system,err,println,system,err,println,system,err,println,the,program,finished,with,the,following,exception,system,err,println,if,t,get,cause,instanceof,invalid,program,exception,system,err,println,t,get,cause,get,message,stack,trace,element,trace,t,get,cause,get,stack,trace,for,stack,trace,element,ele,trace,system,err,println,t,ele,if,ele,get,method,name,equals,main,break,else,t,print,stack,trace,return,1
CliFrontend -> protected void savepoint(String[] args) throws Exception;1515699606;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = customCommandLine.createClusterDescriptor(_			configuration,_			configurationDirectory,_			commandLine)___		final String clusterId = customCommandLine.getClusterId(_			configuration,_			commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient clusterClient = clusterDescriptor.retrieve(clusterId)___		try {_			if (savepointOptions.isDispose()) {_				_				disposeSavepoint(clusterClient, savepointOptions.getSavepointPath())__			} else {_				_				String[] cleanedArgs = savepointOptions.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,configuration,configuration,directory,command,line,final,string,cluster,id,custom,command,line,get,cluster,id,configuration,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,cluster,client,cluster,descriptor,retrieve,cluster,id,try,if,savepoint,options,is,dispose,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void savepoint(String[] args) throws Exception;1515770042;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor<?> clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = customCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient clusterClient = clusterDescriptor.retrieve(clusterId)___		try {_			if (savepointOptions.isDispose()) {_				_				disposeSavepoint(clusterClient, savepointOptions.getSavepointPath())__			} else {_				_				String[] cleanedArgs = savepointOptions.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,cluster,client,cluster,descriptor,retrieve,cluster,id,try,if,savepoint,options,is,dispose,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void savepoint(String[] args) throws Exception;1515770043;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		CustomCommandLine customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = customCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient clusterClient = clusterDescriptor.retrieve(clusterId)___		try {_			if (savepointOptions.isDispose()) {_				_				disposeSavepoint(clusterClient, savepointOptions.getSavepointPath())__			} else {_				_				String[] cleanedArgs = savepointOptions.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,cluster,client,cluster,descriptor,retrieve,cluster,id,try,if,savepoint,options,is,dispose,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void savepoint(String[] args) throws Exception;1515770043;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		CustomCommandLine customCommandLine = getActiveCustomCommandLine(commandLine)___		final ClusterDescriptor clusterDescriptor = customCommandLine.createClusterDescriptor(commandLine)___		final String clusterId = customCommandLine.getClusterId(commandLine)___		if (clusterId == null) {_			throw new FlinkException("No cluster id was specified. Please specify a cluster to which " +_				"you would like to connect.")__		}__		final ClusterClient clusterClient = clusterDescriptor.retrieve(clusterId)___		try {_			if (savepointOptions.isDispose()) {_				_				disposeSavepoint(clusterClient, savepointOptions.getSavepointPath())__			} else {_				_				String[] cleanedArgs = savepointOptions.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}__			try {_				clusterDescriptor.close()__			} catch (Exception e) {_				LOG.info("Could not properly close the cluster descriptor.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,final,cluster,descriptor,cluster,descriptor,custom,command,line,create,cluster,descriptor,command,line,final,string,cluster,id,custom,command,line,get,cluster,id,command,line,if,cluster,id,null,throw,new,flink,exception,no,cluster,id,was,specified,please,specify,a,cluster,to,which,you,would,like,to,connect,final,cluster,client,cluster,client,cluster,descriptor,retrieve,cluster,id,try,if,savepoint,options,is,dispose,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e,try,cluster,descriptor,close,catch,exception,e,log,info,could,not,properly,close,the,cluster,descriptor,e
CliFrontend -> protected void savepoint(String[] args) throws Exception;1515770044;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1517324056;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1517914183;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1517944847;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1518680659;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1519052658;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1519057653;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1519317159;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1519674120;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1521396720;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1522132482;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1522681180;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1523906273;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1524124694;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1525116069;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1527250470;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1528796078;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1528796078;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1530717177;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1537436047;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1537963459;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1537963459;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> protected void savepoint(String[] args) throws Exception;1538135826;Executes the SAVEPOINT action.__@param args Command line arguments for the savepoint action.;protected void savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return__		}__		final CustomCommandLine<?> activeCommandLine = getActiveCustomCommandLine(commandLine)___		if (savepointOptions.isDispose()) {_			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> disposeSavepoint(clusterClient, savepointOptions.getSavepointPath()))__		} else {_			String[] cleanedArgs = savepointOptions.getArgs()___			final JobID jobId___			if (cleanedArgs.length >= 1) {_				String jobIdString = cleanedArgs[0]___				jobId = parseJobId(jobIdString)__			} else {_				throw new CliArgsException("Missing JobID. " +_					"Specify a Job ID to trigger a savepoint.")__			}__			final String savepointDirectory__			if (cleanedArgs.length >= 2) {_				savepointDirectory = cleanedArgs[1]__			} else {_				savepointDirectory = null__			}__			_			if (cleanedArgs.length >= 3) {_				logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__			}__			runClusterAction(_				activeCommandLine,_				commandLine,_				clusterClient -> triggerSavepoint(clusterClient, jobId, savepointDirectory))__		}__	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,savepoint,action;protected,void,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,final,custom,command,line,active,command,line,get,active,custom,command,line,command,line,if,savepoint,options,is,dispose,run,cluster,action,active,command,line,command,line,cluster,client,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,final,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,missing,job,id,specify,a,job,id,to,trigger,a,savepoint,final,string,savepoint,directory,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,else,savepoint,directory,null,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,run,cluster,action,active,command,line,command,line,cluster,client,trigger,savepoint,cluster,client,job,id,savepoint,directory
CliFrontend -> static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1537963459;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1538135826;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515699581;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The config to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,config,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515699597;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515699606;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515770042;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515770043;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515770043;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1515770044;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1517324056;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1517914183;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1517944847;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1518680659;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1519052658;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1519057653;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1519317159;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1519674120;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1521396720;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1522132482;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1522681180;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1523906273;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.REST_ADDRESS, address.getHostString())__		config.setInteger(RestOptions.REST_PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,get,host,string,config,set,integer,rest,options,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1524124694;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1525116069;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1527250470;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1528796078;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1528796078;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1530717177;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1537436047;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address);1537963459;Writes the given job manager address to the associated configuration object.__@param address Address to write to the configuration_@param config The configuration to write to;public static void setJobManagerAddressInConfig(Configuration config, InetSocketAddress address) {_		config.setString(JobManagerOptions.ADDRESS, address.getHostString())__		config.setInteger(JobManagerOptions.PORT, address.getPort())__		config.setString(RestOptions.ADDRESS, address.getHostString())__		config.setInteger(RestOptions.PORT, address.getPort())__	};writes,the,given,job,manager,address,to,the,associated,configuration,object,param,address,address,to,write,to,the,configuration,param,config,the,configuration,to,write,to;public,static,void,set,job,manager,address,in,config,configuration,config,inet,socket,address,address,config,set,string,job,manager,options,address,address,get,host,string,config,set,integer,job,manager,options,port,address,get,port,config,set,string,rest,options,address,address,get,host,string,config,set,integer,rest,options,port,address,get,port
CliFrontend -> protected int info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515699581;Executes the info action.__@param args Command line arguments for the info action.;protected int info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions options = new InfoOptions(commandLine)___		_		if (options.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return 0__		}__		if (options.getJarFilePath() == null) {_			return handleArgException(new CliArgsException("The program JAR file was not specified."))__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(options)___		try {_			int parallelism = options.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), config)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_			return 0__		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,int,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,options,new,info,options,command,line,if,options,is,print,help,cli,frontend,parser,print,help,for,info,return,0,if,options,get,jar,file,path,null,return,handle,arg,exception,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,options,try,int,parallelism,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,config,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,return,0,finally,program,delete,extracted,libraries
CliFrontend -> protected int info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException;1515699597;Executes the info action.__@param args Command line arguments for the info action.;protected int info(String[] args) throws CliArgsException, FileNotFoundException, ProgramInvocationException {_		LOG.info("Running 'info' command.")___		final Options commandOptions = CliFrontendParser.getInfoCommandOptions()___		final CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true)___		InfoOptions infoOptions = new InfoOptions(commandLine)___		_		if (infoOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForInfo()__			return 0__		}__		if (infoOptions.getJarFilePath() == null) {_			return handleArgException(new CliArgsException("The program JAR file was not specified."))__		}__		__		LOG.info("Building program from JAR file")__		final PackagedProgram program = buildProgram(infoOptions)___		try {_			int parallelism = infoOptions.getParallelism()__			if (ExecutionConfig.PARALLELISM_DEFAULT == parallelism) {_				parallelism = defaultParallelism__			}__			LOG.info("Creating program plan dump")___			Optimizer compiler = new Optimizer(new DataStatistics(), new DefaultCostEstimator(), configuration)__			FlinkPlan flinkPlan = ClusterClient.getOptimizedPlan(compiler, program, parallelism)___			String jsonPlan = null__			if (flinkPlan instanceof OptimizedPlan) {_				jsonPlan = new PlanJSONDumpGenerator().getOptimizerPlanAsJSON((OptimizedPlan) flinkPlan)__			} else if (flinkPlan instanceof StreamingPlan) {_				jsonPlan = ((StreamingPlan) flinkPlan).getStreamingPlanAsJSON()__			}__			if (jsonPlan != null) {_				System.out.println("----------------------- Execution Plan -----------------------")__				System.out.println(jsonPlan)__				System.out.println("--------------------------------------------------------------")__			}_			else {_				System.out.println("JSON plan could not be generated.")__			}__			String description = program.getDescription()__			if (description != null) {_				System.out.println()__				System.out.println(description)__			}_			else {_				System.out.println()__				System.out.println("No description provided.")__			}_			return 0__		}_		finally {_			program.deleteExtractedLibraries()__		}_	};executes,the,info,action,param,args,command,line,arguments,for,the,info,action;protected,int,info,string,args,throws,cli,args,exception,file,not,found,exception,program,invocation,exception,log,info,running,info,command,final,options,command,options,cli,frontend,parser,get,info,command,options,final,command,line,command,line,cli,frontend,parser,parse,command,options,args,true,info,options,info,options,new,info,options,command,line,if,info,options,is,print,help,cli,frontend,parser,print,help,for,info,return,0,if,info,options,get,jar,file,path,null,return,handle,arg,exception,new,cli,args,exception,the,program,jar,file,was,not,specified,log,info,building,program,from,jar,file,final,packaged,program,program,build,program,info,options,try,int,parallelism,info,options,get,parallelism,if,execution,config,parallelism,parallelism,default,parallelism,log,info,creating,program,plan,dump,optimizer,compiler,new,optimizer,new,data,statistics,new,default,cost,estimator,configuration,flink,plan,flink,plan,cluster,client,get,optimized,plan,compiler,program,parallelism,string,json,plan,null,if,flink,plan,instanceof,optimized,plan,json,plan,new,plan,jsondump,generator,get,optimizer,plan,as,json,optimized,plan,flink,plan,else,if,flink,plan,instanceof,streaming,plan,json,plan,streaming,plan,flink,plan,get,streaming,plan,as,json,if,json,plan,null,system,out,println,execution,plan,system,out,println,json,plan,system,out,println,else,system,out,println,json,plan,could,not,be,generated,string,description,program,get,description,if,description,null,system,out,println,system,out,println,description,else,system,out,println,system,out,println,no,description,provided,return,0,finally,program,delete,extracted,libraries
CliFrontend -> protected ClusterClient createClient( 			CustomCommandLine<?> customCommandLine, 			CommandLine commandLine, 			PackagedProgram program) throws Exception;1515699581;Creates a {@link ClusterClient} object from the given command line options and other parameters._@param customCommandLine custom command line to use to retrieve the client_@param commandLine command line to use_@param program The program for which to create the client._@throws Exception;protected ClusterClient createClient(_			CustomCommandLine<?> customCommandLine,_			CommandLine commandLine,_			PackagedProgram program) throws Exception {__		ClusterClient client__		try {_			client = customCommandLine.retrieveCluster(commandLine, config, configurationDirectory)__			logAndSysout("Cluster configuration: " + client.getClusterIdentifier())__		} catch (UnsupportedOperationException e) {_			try {_				String applicationName = "Flink Application: " + program.getMainClassName()__				client = customCommandLine.createCluster(_					applicationName,_					commandLine,_					config,_					configurationDirectory,_					program.getAllLibraries())__				logAndSysout("Cluster started: " + client.getClusterIdentifier())__			} catch (UnsupportedOperationException e2) {_				throw new IllegalConfigurationException(_					"The JobManager address is neither provided at the command-line, " +_						"nor configured in flink-conf.yaml.")__			}_		}__		_		final InetSocketAddress jobManagerAddress = client.getJobManagerAddress()__		logAndSysout("Using address " + jobManagerAddress.getHostString() + ":" + jobManagerAddress.getPort() + " to connect to JobManager.")__		try {_			logAndSysout("JobManager web interface address " + client.getWebInterfaceURL())__		} catch (UnsupportedOperationException uoe) {_			logAndSysout("JobManager web interface not active.")__		}_		return client__	};creates,a,link,cluster,client,object,from,the,given,command,line,options,and,other,parameters,param,custom,command,line,custom,command,line,to,use,to,retrieve,the,client,param,command,line,command,line,to,use,param,program,the,program,for,which,to,create,the,client,throws,exception;protected,cluster,client,create,client,custom,command,line,custom,command,line,command,line,command,line,packaged,program,program,throws,exception,cluster,client,client,try,client,custom,command,line,retrieve,cluster,command,line,config,configuration,directory,log,and,sysout,cluster,configuration,client,get,cluster,identifier,catch,unsupported,operation,exception,e,try,string,application,name,flink,application,program,get,main,class,name,client,custom,command,line,create,cluster,application,name,command,line,config,configuration,directory,program,get,all,libraries,log,and,sysout,cluster,started,client,get,cluster,identifier,catch,unsupported,operation,exception,e2,throw,new,illegal,configuration,exception,the,job,manager,address,is,neither,provided,at,the,command,line,nor,configured,in,flink,conf,yaml,final,inet,socket,address,job,manager,address,client,get,job,manager,address,log,and,sysout,using,address,job,manager,address,get,host,string,job,manager,address,get,port,to,connect,to,job,manager,try,log,and,sysout,job,manager,web,interface,address,client,get,web,interface,url,catch,unsupported,operation,exception,uoe,log,and,sysout,job,manager,web,interface,not,active,return,client
CliFrontend -> protected ClusterClient createClient( 			CustomCommandLine<?> customCommandLine, 			CommandLine commandLine, 			PackagedProgram program) throws Exception;1515699597;Creates a {@link ClusterClient} object from the given command line options and other parameters._@param customCommandLine custom command line to use to retrieve the client_@param commandLine command line to use_@param program The program for which to create the client._@throws Exception;protected ClusterClient createClient(_			CustomCommandLine<?> customCommandLine,_			CommandLine commandLine,_			PackagedProgram program) throws Exception {__		ClusterClient client__		try {_			client = customCommandLine.retrieveCluster(commandLine, configuration, configurationDirectory)__			logAndSysout("Cluster configuration: " + client.getClusterIdentifier())__		} catch (UnsupportedOperationException e) {_			try {_				String applicationName = "Flink Application: " + program.getMainClassName()__				client = customCommandLine.createCluster(_					applicationName,_					commandLine,_					configuration,_					configurationDirectory,_					program.getAllLibraries())__				logAndSysout("Cluster started: " + client.getClusterIdentifier())__			} catch (UnsupportedOperationException e2) {_				throw new IllegalConfigurationException(_					"The JobManager address is neither provided at the command-line, " +_						"nor configured in flink-conf.yaml.")__			}_		}__		_		final InetSocketAddress jobManagerAddress = client.getJobManagerAddress()__		logAndSysout("Using address " + jobManagerAddress.getHostString() + ":" + jobManagerAddress.getPort() + " to connect to JobManager.")__		try {_			logAndSysout("JobManager web interface address " + client.getWebInterfaceURL())__		} catch (UnsupportedOperationException uoe) {_			logAndSysout("JobManager web interface not active.")__		}_		return client__	};creates,a,link,cluster,client,object,from,the,given,command,line,options,and,other,parameters,param,custom,command,line,custom,command,line,to,use,to,retrieve,the,client,param,command,line,command,line,to,use,param,program,the,program,for,which,to,create,the,client,throws,exception;protected,cluster,client,create,client,custom,command,line,custom,command,line,command,line,command,line,packaged,program,program,throws,exception,cluster,client,client,try,client,custom,command,line,retrieve,cluster,command,line,configuration,configuration,directory,log,and,sysout,cluster,configuration,client,get,cluster,identifier,catch,unsupported,operation,exception,e,try,string,application,name,flink,application,program,get,main,class,name,client,custom,command,line,create,cluster,application,name,command,line,configuration,configuration,directory,program,get,all,libraries,log,and,sysout,cluster,started,client,get,cluster,identifier,catch,unsupported,operation,exception,e2,throw,new,illegal,configuration,exception,the,job,manager,address,is,neither,provided,at,the,command,line,nor,configured,in,flink,conf,yaml,final,inet,socket,address,job,manager,address,client,get,job,manager,address,log,and,sysout,using,address,job,manager,address,get,host,string,job,manager,address,get,port,to,connect,to,job,manager,try,log,and,sysout,job,manager,web,interface,address,client,get,web,interface,url,catch,unsupported,operation,exception,uoe,log,and,sysout,job,manager,web,interface,not,active,return,client
CliFrontend -> private int disposeSavepoint(ClusterClient clusterClient, String savepointPath);1515699581;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private int disposeSavepoint(ClusterClient clusterClient, String savepointPath) {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture__		try {_			disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))__		} catch (Exception e) {_			return handleError(new FlinkException("Could not dispose savepoint", e))__		}__		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			return handleError(e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__		return 0__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,int,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,try,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,catch,exception,e,return,handle,error,new,flink,exception,could,not,dispose,savepoint,e,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,return,handle,error,e,log,and,sysout,savepoint,savepoint,path,disposed,return,0
CliFrontend -> private int disposeSavepoint(ClusterClient clusterClient, String savepointPath);1515699597;Sends a {@link JobManagerMessages.DisposeSavepoint} message to the job manager.;private int disposeSavepoint(ClusterClient clusterClient, String savepointPath) {_		Preconditions.checkNotNull(savepointPath, "Missing required argument: savepoint path. " +_			"Usage: bin/flink savepoint -d <savepoint-path>")___		logAndSysout("Disposing savepoint '" + savepointPath + "'.")___		final CompletableFuture<Acknowledge> disposeFuture__		try {_			disposeFuture = clusterClient.disposeSavepoint(savepointPath, FutureUtils.toTime(clientTimeout))__		} catch (Exception e) {_			return handleError(new FlinkException("Could not dispose savepoint", e))__		}__		logAndSysout("Waiting for response...")___		try {_			disposeFuture.get(clientTimeout.toMillis(), TimeUnit.MILLISECONDS)__		} catch (Exception e) {_			return handleError(e)__		}__		logAndSysout("Savepoint '" + savepointPath + "' disposed.")__		return 0__	};sends,a,link,job,manager,messages,dispose,savepoint,message,to,the,job,manager;private,int,dispose,savepoint,cluster,client,cluster,client,string,savepoint,path,preconditions,check,not,null,savepoint,path,missing,required,argument,savepoint,path,usage,bin,flink,savepoint,d,savepoint,path,log,and,sysout,disposing,savepoint,savepoint,path,final,completable,future,acknowledge,dispose,future,try,dispose,future,cluster,client,dispose,savepoint,savepoint,path,future,utils,to,time,client,timeout,catch,exception,e,return,handle,error,new,flink,exception,could,not,dispose,savepoint,e,log,and,sysout,waiting,for,response,try,dispose,future,get,client,timeout,to,millis,time,unit,milliseconds,catch,exception,e,return,handle,error,e,log,and,sysout,savepoint,savepoint,path,disposed,return,0
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515699581;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515699597;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515699606;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515770042;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515770043;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515770043;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1515770044;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1517324056;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1517914183;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1517944847;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1518680659;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1519052658;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1519057653;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1519317159;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1519674120;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1521396720;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1522132482;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1522681180;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1523906273;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1524124694;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1525116069;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1527250470;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1528796078;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1528796078;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1530717177;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1537436047;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> protected PackagedProgram buildProgram(ProgramOptions options) 			throws FileNotFoundException, ProgramInvocationException;1537963459;Creates a Packaged program from the given command line options.__@return A PackagedProgram (upon success)_@throws java.io.FileNotFoundException_@throws org.apache.flink.client.program.ProgramInvocationException;protected PackagedProgram buildProgram(ProgramOptions options)_			throws FileNotFoundException, ProgramInvocationException {_		String[] programArgs = options.getProgramArgs()__		String jarFilePath = options.getJarFilePath()__		List<URL> classpaths = options.getClasspaths()___		if (jarFilePath == null) {_			throw new IllegalArgumentException("The program JAR file was not specified.")__		}__		File jarFile = new File(jarFilePath)___		_		if (!jarFile.exists()) {_			throw new FileNotFoundException("JAR file does not exist: " + jarFile)__		}_		else if (!jarFile.isFile()) {_			throw new FileNotFoundException("JAR file is not a file: " + jarFile)__		}__		_		String entryPointClass = options.getEntryPointClassName()___		PackagedProgram program = entryPointClass == null ?_				new PackagedProgram(jarFile, classpaths, programArgs) :_				new PackagedProgram(jarFile, classpaths, entryPointClass, programArgs)___		program.setSavepointRestoreSettings(options.getSavepointRestoreSettings())___		return program__	};creates,a,packaged,program,from,the,given,command,line,options,return,a,packaged,program,upon,success,throws,java,io,file,not,found,exception,throws,org,apache,flink,client,program,program,invocation,exception;protected,packaged,program,build,program,program,options,options,throws,file,not,found,exception,program,invocation,exception,string,program,args,options,get,program,args,string,jar,file,path,options,get,jar,file,path,list,url,classpaths,options,get,classpaths,if,jar,file,path,null,throw,new,illegal,argument,exception,the,program,jar,file,was,not,specified,file,jar,file,new,file,jar,file,path,if,jar,file,exists,throw,new,file,not,found,exception,jar,file,does,not,exist,jar,file,else,if,jar,file,is,file,throw,new,file,not,found,exception,jar,file,is,not,a,file,jar,file,string,entry,point,class,options,get,entry,point,class,name,packaged,program,program,entry,point,class,null,new,packaged,program,jar,file,classpaths,program,args,new,packaged,program,jar,file,classpaths,entry,point,class,program,args,program,set,savepoint,restore,settings,options,get,savepoint,restore,settings,return,program
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1515770044;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1517324056;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1517914183;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1517944847;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1518680659;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1519052658;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1519057653;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1519317159;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1519674120;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1521396720;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1522132482;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1522681180;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1523906273;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1524124694;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1525116069;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1527250470;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1528796078;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1528796078;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1530717177;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1537436047;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1537963459;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1537963459;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine);1538135826;Gets the custom command-line for the arguments._@param commandLine The input to the command-line._@return custom command-line which is active (may only be one at a time);public CustomCommandLine<?> getActiveCustomCommandLine(CommandLine commandLine) {_		for (CustomCommandLine<?> cli : customCommandLines) {_			if (cli.isActive(commandLine)) {_				return cli__			}_		}_		throw new IllegalStateException("No command-line ran.")__	};gets,the,custom,command,line,for,the,arguments,param,command,line,the,input,to,the,command,line,return,custom,command,line,which,is,active,may,only,be,one,at,a,time;public,custom,command,line,get,active,custom,command,line,command,line,command,line,for,custom,command,line,cli,custom,command,lines,if,cli,is,active,command,line,return,cli,throw,new,illegal,state,exception,no,command,line,ran
CliFrontend -> protected int savepoint(String[] args) throws Exception;1515699581;Executes the SAVEPOINT action.__@param args Command line arguments for the cancel action.;protected int savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		SavepointOptions options = CliFrontendParser.parseSavepointCommand(args)___		_		if (options.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint()__			return 0__		}__		CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(options.getCommandLine())___		ClusterClient clusterClient = customCommandLine.retrieveCluster(options.getCommandLine(), config, configurationDirectory)___		try {_			if (options.isDispose()) {_				_				return disposeSavepoint(clusterClient, options.getSavepointPath())__			} else {_				_				String[] cleanedArgs = options.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				return triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,cancel,action;protected,int,savepoint,string,args,throws,exception,log,info,running,savepoint,command,savepoint,options,options,cli,frontend,parser,parse,savepoint,command,args,if,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,return,0,custom,command,line,custom,command,line,get,active,custom,command,line,options,get,command,line,cluster,client,cluster,client,custom,command,line,retrieve,cluster,options,get,command,line,config,configuration,directory,try,if,options,is,dispose,return,dispose,savepoint,cluster,client,options,get,savepoint,path,else,string,cleaned,args,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,return,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e
CliFrontend -> protected int savepoint(String[] args) throws Exception;1515699597;Executes the SAVEPOINT action.__@param args Command line arguments for the cancel action.;protected int savepoint(String[] args) throws Exception {_		LOG.info("Running 'savepoint' command.")___		final Options commandOptions = CliFrontendParser.getSavepointCommandOptions()___		final Options commandLineOptions = CliFrontendParser.mergeOptions(commandOptions, customCommandLineOptions)___		final CommandLine commandLine = CliFrontendParser.parse(commandLineOptions, args, false)___		final SavepointOptions savepointOptions = new SavepointOptions(commandLine)___		_		if (savepointOptions.isPrintHelp()) {_			CliFrontendParser.printHelpForSavepoint(customCommandLines)__			return 0__		}__		CustomCommandLine<?> customCommandLine = getActiveCustomCommandLine(commandLine)___		ClusterClient clusterClient = customCommandLine.retrieveCluster(_			commandLine,_			configuration,_			configurationDirectory)___		try {_			if (savepointOptions.isDispose()) {_				_				return disposeSavepoint(clusterClient, savepointOptions.getSavepointPath())__			} else {_				_				String[] cleanedArgs = savepointOptions.getArgs()__				JobID jobId___				if (cleanedArgs.length >= 1) {_					String jobIdString = cleanedArgs[0]___					jobId = parseJobId(jobIdString)__				} else {_					throw new CliArgsException("Error: The value for the Job ID is not a valid ID. " +_						"Specify a Job ID to trigger a savepoint.")__				}__				String savepointDirectory = null__				if (cleanedArgs.length >= 2) {_					savepointDirectory = cleanedArgs[1]__				}__				_				if (cleanedArgs.length >= 3) {_					logAndSysout("Provided more arguments than required. Ignoring not needed arguments.")__				}__				return triggerSavepoint(clusterClient, jobId, savepointDirectory)__			}_		} finally {_			try {_				clusterClient.shutdown()__			} catch (Exception e) {_				LOG.info("Could not shutdown the cluster client.", e)__			}_		}_	};executes,the,savepoint,action,param,args,command,line,arguments,for,the,cancel,action;protected,int,savepoint,string,args,throws,exception,log,info,running,savepoint,command,final,options,command,options,cli,frontend,parser,get,savepoint,command,options,final,options,command,line,options,cli,frontend,parser,merge,options,command,options,custom,command,line,options,final,command,line,command,line,cli,frontend,parser,parse,command,line,options,args,false,final,savepoint,options,savepoint,options,new,savepoint,options,command,line,if,savepoint,options,is,print,help,cli,frontend,parser,print,help,for,savepoint,custom,command,lines,return,0,custom,command,line,custom,command,line,get,active,custom,command,line,command,line,cluster,client,cluster,client,custom,command,line,retrieve,cluster,command,line,configuration,configuration,directory,try,if,savepoint,options,is,dispose,return,dispose,savepoint,cluster,client,savepoint,options,get,savepoint,path,else,string,cleaned,args,savepoint,options,get,args,job,id,job,id,if,cleaned,args,length,1,string,job,id,string,cleaned,args,0,job,id,parse,job,id,job,id,string,else,throw,new,cli,args,exception,error,the,value,for,the,job,id,is,not,a,valid,id,specify,a,job,id,to,trigger,a,savepoint,string,savepoint,directory,null,if,cleaned,args,length,2,savepoint,directory,cleaned,args,1,if,cleaned,args,length,3,log,and,sysout,provided,more,arguments,than,required,ignoring,not,needed,arguments,return,trigger,savepoint,cluster,client,job,id,savepoint,directory,finally,try,cluster,client,shutdown,catch,exception,e,log,info,could,not,shutdown,the,cluster,client,e
CliFrontend -> private static int handleArgException(Exception e);1515699581;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(Exception e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
CliFrontend -> private static int handleArgException(Exception e);1515699597;Displays an exception message for incorrect command line arguments.__@param e The exception to display._@return The return code for the process.;private static int handleArgException(Exception e) {_		LOG.error("Invalid command line arguments. " + (e.getMessage() == null ? "" : e.getMessage()))___		System.out.println(e.getMessage())__		System.out.println()__		System.out.println("Use the help option (-h or --help) to get help on the command.")__		return 1__	};displays,an,exception,message,for,incorrect,command,line,arguments,param,e,the,exception,to,display,return,the,return,code,for,the,process;private,static,int,handle,arg,exception,exception,e,log,error,invalid,command,line,arguments,e,get,message,null,e,get,message,system,out,println,e,get,message,system,out,println,system,out,println,use,the,help,option,h,or,help,to,get,help,on,the,command,return,1
