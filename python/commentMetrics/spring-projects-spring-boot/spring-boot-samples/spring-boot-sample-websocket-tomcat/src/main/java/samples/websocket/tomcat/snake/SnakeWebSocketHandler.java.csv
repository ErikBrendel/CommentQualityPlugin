commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;public static String getRandomHexColor() {     float hue = random.nextFloat().     // sat between 0.1 and 0.3     float saturation = (random.nextInt(2000) + 1000) / 10000f.     float luminance = 0.9f.     Color color = Color.getHSBColor(hue, saturation, luminance).     return '#' + Integer.toHexString((color.getRGB() & 0xffffff) | 0x1000000).substring(1). }
false;public,static;0;5;;public static Location getRandomLocation() {     int x = roundByGridSize(random.nextInt(SnakeUtils.PLAYFIELD_WIDTH)).     int y = roundByGridSize(random.nextInt(SnakeUtils.PLAYFIELD_HEIGHT)).     return new Location(x, y). }
false;private,static;1;6;;private static int roundByGridSize(int value) {     value = value + (SnakeUtils.GRID_SIZE / 2).     value = value / SnakeUtils.GRID_SIZE.     value = value * SnakeUtils.GRID_SIZE.     return value. }
false;public;1;17;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     this.snake = new Snake(this.id, session).     SnakeTimer.addSnake(this.snake).     StringBuilder sb = new StringBuilder().     for (Iterator<Snake> iterator = SnakeTimer.getSnakes().iterator(). iterator.hasNext(). ) {         Snake snake = iterator.next().         sb.append(String.format("{id: %d, color: '%s'}", Integer.valueOf(snake.getId()), snake.getHexColor())).         if (iterator.hasNext()) {             sb.append(',').         }     }     SnakeTimer.broadcast(String.format("{'type': 'join','data':[%s]}", sb.toString())). }
false;protected;2;17;;@Override protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {     String payload = message.getPayload().     if ("west".equals(payload)) {         this.snake.setDirection(Direction.WEST).     } else if ("north".equals(payload)) {         this.snake.setDirection(Direction.NORTH).     } else if ("east".equals(payload)) {         this.snake.setDirection(Direction.EAST).     } else if ("south".equals(payload)) {         this.snake.setDirection(Direction.SOUTH).     } }
false;public;2;7;;@Override public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {     SnakeTimer.removeSnake(this.snake).     SnakeTimer.broadcast(String.format("{'type': 'leave', 'id': %d}", Integer.valueOf(this.id))). }
