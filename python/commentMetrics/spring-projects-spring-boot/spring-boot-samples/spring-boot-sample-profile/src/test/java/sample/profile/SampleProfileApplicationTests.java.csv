commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void before() {     this.profiles = System.getProperty("spring.profiles.active"). }
false;public;0;9;;@After public void after() {     if (this.profiles != null) {         System.setProperty("spring.profiles.active", this.profiles).     } else {         System.clearProperty("spring.profiles.active").     } }
false;public;0;5;;@Test public void testDefaultProfile() throws Exception {     SampleProfileApplication.main(new String[0]).     assertThat(this.output.toString()).contains("Hello Phil"). }
false;public;0;6;;@Test public void testGoodbyeProfile() throws Exception {     System.setProperty("spring.profiles.active", "goodbye").     SampleProfileApplication.main(new String[0]).     assertThat(this.output.toString()).contains("Goodbye Everyone"). }
false;public;0;12;;@Test public void testGenericProfile() throws Exception {     /* 		 * This is a profile that requires a new environment property, and one which is 		 * only overridden in the current working directory. That file also only contains 		 * partial overrides, and the default application.yml should still supply the 		 * "name" property. 		 */     System.setProperty("spring.profiles.active", "generic").     SampleProfileApplication.main(new String[0]).     assertThat(this.output.toString()).contains("Bonjour Phil"). }
false;public;0;6;;@Test public void testGoodbyeProfileFromCommandline() throws Exception {     SampleProfileApplication.main(new String[] { "--spring.profiles.active=goodbye" }).     assertThat(this.output.toString()).contains("Goodbye Everyone"). }
