commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testHome() {     this.webClient.get().uri("http://localhost:" + this.port, String.class).header("Authorization", "basic " + getBasicAuth()).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Hello user"). }
false;public;0;9;;@Test public void actuatorPathOnMainPortShouldNotMatch() {     this.webClient.get().uri("http://localhost:" + this.port + "/actuator", String.class).exchange().expectStatus().isUnauthorized().     this.webClient.get().uri("http://localhost:" + this.port + "/actuator/health", String.class).exchange().expectStatus().isUnauthorized(). }
false;public;0;7;;@Test public void testSecureActuator() {     this.webClient.get().uri("http://localhost:" + this.managementPort + "/actuator/env", String.class).exchange().expectStatus().isUnauthorized(). }
false;public;0;9;;@Test public void testInsecureActuator() {     String responseBody = this.webClient.get().uri("http://localhost:" + this.managementPort + "/actuator/health", String.class).exchange().expectStatus().isOk().expectBody(String.class).returnResult().getResponseBody().     Assertions.assertThat(responseBody).contains("\"status\":\"UP\""). }
false;private;0;3;;private String getBasicAuth() {     return new String(Base64.getEncoder().encode(("user:password").getBytes())). }
false;public;1;11;;@Bean public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {     return http.authorizeExchange().matchers(EndpointRequest.to("health", "info")).permitAll().matchers(EndpointRequest.toAnyEndpoint().excluding(MappingsEndpoint.class)).hasRole("ACTUATOR").matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll().pathMatchers("/login").permitAll().anyExchange().authenticated().and().httpBasic().and().build(). }
