commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testTransactionRollback() throws Exception {     SampleAtomikosApplication.main(new String[] {}).     assertThat(this.output.toString()).has(substring(1, "---->")).     assertThat(this.output.toString()).has(substring(1, "----> josh")).     assertThat(this.output.toString()).has(substring(2, "Count is 1")).     assertThat(this.output.toString()).has(substring(1, "Simulated error")). }
false;public;1;10;;@Override public boolean matches(String value) {     int i = 0.     while (value.contains(substring)) {         int beginIndex = value.indexOf(substring) + substring.length().         value = value.substring(beginIndex).         i++.     }     return i == times. }
false;private;2;17;;private Condition<String> substring(int times, String substring) {     return new Condition<String>("containing '" + substring + "' " + times + " times") {          @Override         public boolean matches(String value) {             int i = 0.             while (value.contains(substring)) {                 int beginIndex = value.indexOf(substring) + substring.length().                 value = value.substring(beginIndex).                 i++.             }             return i == times.         }     }. }
