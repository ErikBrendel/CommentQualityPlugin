commented;modifiers;parameterAmount;loc;comment;code
false;private;0;6;;private void resetState() {     this.direction = Direction.NONE.     this.head = SnakeUtils.getRandomLocation().     this.tail.clear().     this.length = DEFAULT_LENGTH. }
false;private;0;6;;private void kill() throws Exception {     synchronized (this.monitor) {         resetState().         sendMessage("{'type': 'dead'}").     } }
false;private;0;6;;private void reward() throws Exception {     synchronized (this.monitor) {         this.length++.         sendMessage("{'type': 'kill'}").     } }
false;protected;1;3;;protected void sendMessage(String msg) throws Exception {     this.session.sendMessage(new TextMessage(msg)). }
false;public;1;26;;public void update(Collection<Snake> snakes) throws Exception {     synchronized (this.monitor) {         Location nextLocation = this.head.getAdjacentLocation(this.direction).         if (nextLocation.x >= SnakeUtils.PLAYFIELD_WIDTH) {             nextLocation.x = 0.         }         if (nextLocation.y >= SnakeUtils.PLAYFIELD_HEIGHT) {             nextLocation.y = 0.         }         if (nextLocation.x < 0) {             nextLocation.x = SnakeUtils.PLAYFIELD_WIDTH.         }         if (nextLocation.y < 0) {             nextLocation.y = SnakeUtils.PLAYFIELD_HEIGHT.         }         if (this.direction != Direction.NONE) {             this.tail.addFirst(this.head).             if (this.tail.size() > this.length) {                 this.tail.removeLast().             }             this.head = nextLocation.         }         handleCollisions(snakes).     } }
false;private;1;13;;private void handleCollisions(Collection<Snake> snakes) throws Exception {     for (Snake snake : snakes) {         boolean headCollision = this.id != snake.id && snake.getHead().equals(this.head).         boolean tailCollision = snake.getTail().contains(this.head).         if (headCollision || tailCollision) {             kill().             if (this.id != snake.id) {                 snake.reward().             }         }     } }
false;public;0;5;;public Location getHead() {     synchronized (this.monitor) {         return this.head.     } }
false;public;0;5;;public Collection<Location> getTail() {     synchronized (this.monitor) {         return this.tail.     } }
false;public;1;5;;public void setDirection(Direction direction) {     synchronized (this.monitor) {         this.direction = direction.     } }
false;public;0;14;;public String getLocationsJson() {     synchronized (this.monitor) {         StringBuilder sb = new StringBuilder().         sb.append(String.format("{x: %d, y: %d}", Integer.valueOf(this.head.x), Integer.valueOf(this.head.y))).         for (Location location : this.tail) {             sb.append(',').             sb.append(String.format("{x: %d, y: %d}", Integer.valueOf(location.x), Integer.valueOf(location.y))).         }         return String.format("{'id':%d,'body':[%s]}", Integer.valueOf(this.id), sb.toString()).     } }
false;public;0;3;;public int getId() {     return this.id. }
false;public;0;3;;public String getHexColor() {     return this.hexColor. }
