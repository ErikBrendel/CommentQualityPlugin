commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testHomeIsSecure() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)).     ResponseEntity<String> entity = this.restTemplate.exchange("/", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;7;;@Test public void testHome() {     ResponseEntity<String> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).isEqualTo("Hello World"). }
false;private;0;3;;private String getPassword() {     return "password". }
