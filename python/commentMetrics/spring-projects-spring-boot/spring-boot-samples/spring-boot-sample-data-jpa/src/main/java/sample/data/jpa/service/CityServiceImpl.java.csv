commented;modifiers;parameterAmount;loc;comment;code
false;public;2;22;;@Override public Page<City> findCities(CitySearchCriteria criteria, Pageable pageable) {     Assert.notNull(criteria, "Criteria must not be null").     String name = criteria.getName().     if (!StringUtils.hasLength(name)) {         return this.cityRepository.findAll(null).     }     String country = "".     int splitPos = name.lastIndexOf(",").     if (splitPos >= 0) {         country = name.substring(splitPos + 1).         name = name.substring(0, splitPos).     }     return this.cityRepository.findByNameContainingAndCountryContainingAllIgnoringCase(name.trim(), country.trim(), pageable). }
false;public;2;6;;@Override public City getCity(String name, String country) {     Assert.notNull(name, "Name must not be null").     Assert.notNull(country, "Country must not be null").     return this.cityRepository.findByNameAndCountryAllIgnoringCase(name, country). }
false;public;2;5;;@Override public Page<HotelSummary> getHotels(City city, Pageable pageable) {     Assert.notNull(city, "City must not be null").     return this.hotelRepository.findByCity(city, pageable). }
