commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHome() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = new TestRestTemplate("user", getPassword()).getForEntity("http://localhost:" + this.port, Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("message")).isEqualTo("Hello Phil"). }
false;public;0;8;;@Test public void testMetrics() {     // makes sure some requests have been made     testHome().     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity("http://localhost:" + this.managementPort + "/admin/metrics", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;9;;@Test public void testHealth() {     ResponseEntity<String> entity = new TestRestTemplate().withBasicAuth("user", getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/health", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).isEqualTo("{\"status\":\"UP\"}"). }
false;public;0;10;;@Test public void testEnvNotFound() {     String unknownProperty = "test-does-not-exist".     assertThat(this.environment.containsProperty(unknownProperty)).isFalse().     ResponseEntity<String> entity = new TestRestTemplate().withBasicAuth("user", getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/env/" + unknownProperty, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;public;0;9;;@Test public void testMissing() {     ResponseEntity<String> entity = new TestRestTemplate("user", getPassword()).getForEntity("http://localhost:" + this.managementPort + "/admin/missing", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     assertThat(entity.getBody()).contains("\"status\":404"). }
false;public;0;10;;@Test public void testErrorPage() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = new TestRestTemplate("user", getPassword()).getForEntity("http://localhost:" + this.port + "/error", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("status")).isEqualTo(999). }
false;public;0;11;;@Test public void testManagementErrorPage() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = new TestRestTemplate("user", getPassword()).getForEntity("http://localhost:" + this.managementPort + "/error", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("status")).isEqualTo(999). }
false;private;0;3;;private String getPassword() {     return "password". }
