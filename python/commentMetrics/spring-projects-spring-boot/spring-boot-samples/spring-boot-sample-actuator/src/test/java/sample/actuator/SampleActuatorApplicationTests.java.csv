commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHomeIsSecure() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.getForEntity("/", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("error")).isEqualTo("Unauthorized").     assertThat(entity.getHeaders()).doesNotContainKey("Set-Cookie"). }
false;public;0;13;;@Test public void testMetricsIsSecure() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.getForEntity("/actuator/metrics", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     entity = this.restTemplate.getForEntity("/actuator/metrics/", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     entity = this.restTemplate.getForEntity("/actuator/metrics/foo", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     entity = this.restTemplate.getForEntity("/actuator/metrics.json", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;10;;@Test public void testHome() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("message")).isEqualTo("Hello Phil"). }
false;public;0;14;;@SuppressWarnings("unchecked") @Test public void testMetrics() {     // makes sure some requests have been made     testHome().     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/actuator/metrics", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     Map<String, Object> body = entity.getBody().     assertThat(body).containsKey("names").     assertThat((List<String>) body.get("names")).contains("jvm.buffer.count"). }
false;public;0;11;;@Test public void testEnv() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/actuator/env", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body).containsKey("propertySources"). }
false;public;0;8;;@Test public void healthInsecureByDefault() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/actuator/health", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("\"status\":\"UP\"").     assertThat(entity.getBody()).doesNotContain("\"hello\":\"1\""). }
false;public;0;13;;@Test public void infoInsecureByDefault() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/actuator/info", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("\"artifact\":\"spring-boot-sample-actuator\"").     assertThat(entity.getBody()).contains("\"someKey\":\"someValue\"").     assertThat(entity.getBody()).contains("\"java\":{", "\"source\":\"1.8\"", "\"target\":\"1.8\"").     assertThat(entity.getBody()).contains("\"encoding\":{", "\"source\":\"UTF-8\"", "\"reporting\":\"UTF-8\""). }
false;public;0;8;;@Test public void testErrorPage() {     ResponseEntity<String> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/foo", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     String body = entity.getBody().     assertThat(body).contains("\"error\":"). }
false;public;0;13;;@Test public void testHtmlErrorPage() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     HttpEntity<?> request = new HttpEntity<Void>(headers).     ResponseEntity<String> entity = this.restTemplate.withBasicAuth("user", getPassword()).exchange("/foo", HttpMethod.GET, request, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     String body = entity.getBody().     assertThat(body).as("Body was null").isNotNull().     assertThat(body).contains("This application has no explicit mapping for /error"). }
false;public;0;11;;@Test public void testErrorPageDirectAccess() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/error", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("error")).isEqualTo("None").     assertThat(body.get("status")).isEqualTo(999). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void testBeans() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/actuator/beans", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).containsOnlyKeys("contexts"). }
false;public;0;16;;@SuppressWarnings("unchecked") @Test public void testConfigProps() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.withBasicAuth("user", getPassword()).getForEntity("/actuator/configprops", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     Map<String, Object> body = entity.getBody().     Map<String, Object> contexts = (Map<String, Object>) body.get("contexts").     Map<String, Object> context = (Map<String, Object>) contexts.get(this.applicationContext.getId()).     Map<String, Object> beans = (Map<String, Object>) context.get("beans").     assertThat(beans).containsKey("spring.datasource-" + DataSourceProperties.class.getName()). }
false;private;0;3;;private String getPassword() {     return "password". }
