commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHome() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     ResponseEntity<String> entity = this.restTemplate.exchange("/", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FOUND).     assertThat(entity.getHeaders().getLocation().toString()).endsWith(this.port + "/login"). }
false;public;0;9;;@Test public void testLoginPage() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     ResponseEntity<String> entity = this.restTemplate.exchange("/login", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("_csrf"). }
false;public;0;15;;@Test public void testLogin() {     HttpHeaders headers = getHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED).     MultiValueMap<String, String> form = new LinkedMultiValueMap<>().     form.set("username", "user").     form.set("password", "user").     ResponseEntity<String> entity = this.restTemplate.exchange("/login", HttpMethod.POST, new HttpEntity<>(form, headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FOUND).     assertThat(entity.getHeaders().getLocation().toString()).endsWith(this.port + "/").     assertThat(entity.getHeaders().get("Set-Cookie")).isNotNull(). }
false;private;0;13;;private HttpHeaders getHeaders() {     HttpHeaders headers = new HttpHeaders().     ResponseEntity<String> page = this.restTemplate.getForEntity("/login", String.class).     assertThat(page.getStatusCode()).isEqualTo(HttpStatus.OK).     String cookie = page.getHeaders().getFirst("Set-Cookie").     headers.set("Cookie", cookie).     Pattern pattern = Pattern.compile("(?s).*name=\"_csrf\".*?value=\"([^\"]+).*").     Matcher matcher = pattern.matcher(page.getBody()).     assertThat(matcher.matches()).as(page.getBody()).isTrue().     headers.set("X-CSRF-TOKEN", matcher.group(1)).     return headers. }
false;public;0;7;;@Test public void testCss() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/css/bootstrap.min.css", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("body"). }
