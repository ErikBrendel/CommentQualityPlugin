commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testDefaultSettings() throws Exception {     try {         SampleLiquibaseApplication.main(new String[] { "--server.port=0" }).     } catch (IllegalStateException ex) {         if (serverNotRunning(ex)) {             return.         }     }     assertThat(this.output.toString()).contains("Successfully acquired change log lock").contains("Creating database history " + "table with name: PUBLIC.DATABASECHANGELOG").contains("Table person created").contains("ChangeSet classpath:/db/" + "changelog/db.changelog-master.yaml::1::" + "marceloverdijk ran successfully").contains("New row inserted into person").contains("ChangeSet classpath:/db/changelog/" + "db.changelog-master.yaml::2::" + "marceloverdijk ran successfully").contains("Successfully released change log lock"). }
false;private;1;12;;@SuppressWarnings("serial") private boolean serverNotRunning(IllegalStateException ex) {     NestedCheckedException nested = new NestedCheckedException("failed", ex) {     }.     if (nested.contains(ConnectException.class)) {         Throwable root = nested.getRootCause().         if (root.getMessage().contains("Connection refused")) {             return true.         }     }     return false. }
