commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testVanillaExchange() throws Exception {     File inputDir = new File(this.temp.getRoot(), "input").     File outputDir = new File(this.temp.getRoot(), "output").     ConfigurableApplicationContext app = SpringApplication.run(SampleParentContextApplication.class, "--service.input-dir=" + inputDir, "--service.output-dir=" + outputDir).     try {         ConfigurableApplicationContext producer = SpringApplication.run(ProducerApplication.class, "--service.input-dir=" + inputDir, "--service.output-dir=" + outputDir, "World").         try {             awaitOutputContaining(outputDir, "Hello World").         } finally {             producer.close().         }     } finally {         app.close().     } }
false;private;2;24;;private void awaitOutputContaining(File outputDir, String requiredContents) throws Exception {     long endTime = System.currentTimeMillis() + 30000.     String output = null.     while (System.currentTimeMillis() < endTime) {         Resource[] resources = findResources(outputDir).         if (resources.length == 0) {             Thread.sleep(200).             resources = findResources(outputDir).         } else {             output = readResources(resources).             if (output != null && output.contains(requiredContents)) {                 return.             } else {                 Thread.sleep(200).                 output = readResources(resources).             }         }     }     fail("Timed out awaiting output containing '" + requiredContents + "'. Output was '" + output + "'"). }
false;private;1;5;;private Resource[] findResources(File outputDir) throws IOException {     return ResourcePatternUtils.getResourcePatternResolver(new DefaultResourceLoader()).getResources("file:" + outputDir.getAbsolutePath() + "/*.txt"). }
false;private;1;8;;private String readResources(Resource[] resources) throws IOException {     StringBuilder builder = new StringBuilder().     for (Resource resource : resources) {         builder.append(new String(StreamUtils.copyToByteArray(resource.getInputStream()))).     }     return builder.toString(). }
