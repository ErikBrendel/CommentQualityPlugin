commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void stop() {     if (this.context != null) {         this.context.close().     } }
false;public;0;11;;@Test public void testVanillaExchange() throws Exception {     File inputDir = new File(this.temp.getRoot(), "input").     File outputDir = new File(this.temp.getRoot(), "output").     this.context = SpringApplication.run(SampleIntegrationApplication.class, "--service.input-dir=" + inputDir, "--service.output-dir=" + outputDir).     SpringApplication.run(ProducerApplication.class, "World", "--service.input-dir=" + inputDir, "--service.output-dir=" + outputDir).     String output = getOutput(outputDir).     assertThat(output).contains("Hello World"). }
false;public;0;11;;@Test public void testMessageGateway() throws Exception {     File inputDir = new File(this.temp.getRoot(), "input").     File outputDir = new File(this.temp.getRoot(), "output").     this.context = SpringApplication.run(SampleIntegrationApplication.class, "testviamg", "--service.input-dir=" + inputDir, "--service.output-dir=" + outputDir).     String output = getOutput(this.context.getBean(ServiceProperties.class).getOutputDir()).     assertThat(output).contains("testviamg"). }
false;public;0;16;;@Override public String call() throws Exception {     Resource[] resources = getResourcesWithContent(outputDir).     while (resources.length == 0) {         Thread.sleep(200).         resources = getResourcesWithContent(outputDir).     }     StringBuilder builder = new StringBuilder().     for (Resource resource : resources) {         try (InputStream inputStream = resource.getInputStream()) {             builder.append(new String(StreamUtils.copyToByteArray(inputStream))).         }     }     return builder.toString(). }
false;private;1;22;;private String getOutput(File outputDir) throws Exception {     Future<String> future = Executors.newSingleThreadExecutor().submit(new Callable<String>() {          @Override         public String call() throws Exception {             Resource[] resources = getResourcesWithContent(outputDir).             while (resources.length == 0) {                 Thread.sleep(200).                 resources = getResourcesWithContent(outputDir).             }             StringBuilder builder = new StringBuilder().             for (Resource resource : resources) {                 try (InputStream inputStream = resource.getInputStream()) {                     builder.append(new String(StreamUtils.copyToByteArray(inputStream))).                 }             }             return builder.toString().         }     }).     return future.get(30, TimeUnit.SECONDS). }
false;private;1;13;;private Resource[] getResourcesWithContent(File outputDir) throws IOException {     Resource[] candidates = ResourcePatternUtils.getResourcePatternResolver(new DefaultResourceLoader()).getResources("file:" + outputDir.getAbsolutePath() + "/**").     for (Resource candidate : candidates) {         if ((candidate.getFilename() != null && candidate.getFilename().endsWith(".writing")) || candidate.contentLength() == 0) {             return new Resource[0].         }     }     return candidates. }
