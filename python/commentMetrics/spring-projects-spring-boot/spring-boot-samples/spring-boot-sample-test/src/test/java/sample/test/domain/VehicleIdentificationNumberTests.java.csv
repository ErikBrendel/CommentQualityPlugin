commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenVinIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new VehicleIdentificationNumber(null)).withMessage("VIN must not be null"). }
false;public;0;6;;@Test public void createWhenVinIsMoreThan17CharsShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new VehicleIdentificationNumber("012345678901234567")).withMessage("VIN must be exactly 17 characters"). }
false;public;0;6;;@Test public void createWhenVinIsLessThan17CharsShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new VehicleIdentificationNumber("0123456789012345")).withMessage("VIN must be exactly 17 characters"). }
false;public;0;5;;@Test public void toStringShouldReturnVin() {     VehicleIdentificationNumber vin = new VehicleIdentificationNumber(SAMPLE_VIN).     assertThat(vin.toString()).isEqualTo(SAMPLE_VIN). }
false;public;0;9;;@Test public void equalsAndHashCodeShouldBeBasedOnVin() {     VehicleIdentificationNumber vin1 = new VehicleIdentificationNumber(SAMPLE_VIN).     VehicleIdentificationNumber vin2 = new VehicleIdentificationNumber(SAMPLE_VIN).     VehicleIdentificationNumber vin3 = new VehicleIdentificationNumber("00000000000000000").     assertThat(vin1.hashCode()).isEqualTo(vin2.hashCode()).     assertThat(vin1).isEqualTo(vin1).isEqualTo(vin2).isNotEqualTo(vin3). }
