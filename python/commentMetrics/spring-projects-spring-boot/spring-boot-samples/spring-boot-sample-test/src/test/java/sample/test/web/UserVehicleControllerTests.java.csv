commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void getVehicleWhenRequestingTextShouldReturnMakeAndModel() throws Exception {     given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda", "Civic")).     this.mvc.perform(get("/sboot/vehicle").accept(MediaType.TEXT_PLAIN)).andExpect(status().isOk()).andExpect(content().string("Honda Civic")). }
false;public;0;8;;@Test public void getVehicleWhenRequestingJsonShouldReturnMakeAndModel() throws Exception {     given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda", "Civic")).     this.mvc.perform(get("/sboot/vehicle").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(content().json("{'make':'Honda','model':'Civic'}")). }
false;public;0;8;;@Test public void getVehicleWhenRequestingHtmlShouldReturnMakeAndModel() throws Exception {     given(this.userVehicleService.getVehicleDetails("sboot")).willReturn(new VehicleDetails("Honda", "Civic")).     this.mvc.perform(get("/sboot/vehicle.html").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(content().string(containsString("<h1>Honda Civic</h1>"))). }
false;public;0;6;;@Test public void getVehicleWhenUserNotFoundShouldReturnNotFound() throws Exception {     given(this.userVehicleService.getVehicleDetails("sboot")).willThrow(new UserNameNotFoundException("sboot")).     this.mvc.perform(get("/sboot/vehicle")).andExpect(status().isNotFound()). }
false;public;0;6;;@Test public void getVehicleWhenVinNotFoundShouldReturnNotFound() throws Exception {     given(this.userVehicleService.getVehicleDetails("sboot")).willThrow(new VehicleIdentificationNumberNotFoundException(VIN)).     this.mvc.perform(get("/sboot/vehicle")).andExpect(status().isNotFound()). }
false;public;0;7;;@Test public void welcomeCommandLineRunnerShouldBeAvailable() {     // Since we're a @WebMvcTest WelcomeCommandLineRunner should not be available.     Assertions.assertThatThrownBy(() -> this.applicationContext.getBean(WelcomeCommandLineRunner.class)).isInstanceOf(NoSuchBeanDefinitionException.class). }
