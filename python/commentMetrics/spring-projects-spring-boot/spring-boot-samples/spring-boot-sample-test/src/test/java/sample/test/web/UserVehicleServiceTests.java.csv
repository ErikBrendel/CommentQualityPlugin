commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.service = new UserVehicleService(this.userRepository, this.vehicleDetailsService). }
false;public;0;6;;@Test public void getVehicleDetailsWhenUsernameIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.service.getVehicleDetails(null)).withMessage("Username must not be null"). }
false;public;0;6;;@Test public void getVehicleDetailsWhenUsernameNotFoundShouldThrowException() {     given(this.userRepository.findByUsername(anyString())).willReturn(null).     assertThatExceptionOfType(UserNameNotFoundException.class).isThrownBy(() -> this.service.getVehicleDetails("sboot")). }
false;public;0;9;;@Test public void getVehicleDetailsShouldReturnMakeAndModel() {     given(this.userRepository.findByUsername(anyString())).willReturn(new User("sboot", VIN)).     VehicleDetails details = new VehicleDetails("Honda", "Civic").     given(this.vehicleDetailsService.getVehicleDetails(VIN)).willReturn(details).     VehicleDetails actual = this.service.getVehicleDetails("sboot").     assertThat(actual).isEqualTo(details). }
