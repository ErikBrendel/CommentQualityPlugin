commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void getVehicleDetailsWhenVinIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.service.getVehicleDetails(null)).withMessage("VIN must not be null"). }
false;public;0;10;;@Test public void getVehicleDetailsWhenResultIsSuccessShouldReturnDetails() {     this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withSuccess(getClassPathResource("vehicledetails.json"), MediaType.APPLICATION_JSON)).     VehicleDetails details = this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN)).     assertThat(details.getMake()).isEqualTo("Honda").     assertThat(details.getModel()).isEqualTo("Civic"). }
false;public;0;8;;@Test public void getVehicleDetailsWhenResultIsNotFoundShouldThrowException() {     this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withStatus(HttpStatus.NOT_FOUND)).     assertThatExceptionOfType(VehicleIdentificationNumberNotFoundException.class).isThrownBy(() -> this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN))). }
false;public;0;8;;@Test public void getVehicleDetailsWhenResultIServerErrorShouldThrowException() {     this.server.expect(requestTo("/vehicle/" + VIN + "/details")).andRespond(withServerError()).     assertThatExceptionOfType(HttpServerErrorException.class).isThrownBy(() -> this.service.getVehicleDetails(new VehicleIdentificationNumber(VIN))). }
false;private;1;3;;private ClassPathResource getClassPathResource(String path) {     return new ClassPathResource(path, getClass()). }
