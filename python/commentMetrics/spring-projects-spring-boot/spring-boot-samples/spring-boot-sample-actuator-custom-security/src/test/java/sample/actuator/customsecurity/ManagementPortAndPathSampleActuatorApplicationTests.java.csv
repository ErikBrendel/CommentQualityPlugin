commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testHome() {     ResponseEntity<String> entity = new TestRestTemplate("user", "password").getForEntity("http://localhost:" + this.port, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("Hello World"). }
false;public;0;6;;@Test public void actuatorPathOnMainPortShouldNotMatch() {     ResponseEntity<String> entity = new TestRestTemplate().getForEntity("http://localhost:" + this.port + "/actuator/health", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;7;;@Test public void testSecureActuator() {     ResponseEntity<String> entity = new TestRestTemplate().getForEntity("http://localhost:" + this.managementPort + "/management/actuator/env", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;8;;@Test public void testInsecureActuator() {     ResponseEntity<String> entity = new TestRestTemplate().getForEntity("http://localhost:" + this.managementPort + "/management/actuator/health", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("\"status\":\"UP\""). }
false;public;0;8;;@Test public void testMissing() {     ResponseEntity<String> entity = new TestRestTemplate("admin", "admin").getForEntity("http://localhost:" + this.managementPort + "/management/actuator/missing", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     assertThat(entity.getBody()).contains("\"status\":404"). }
