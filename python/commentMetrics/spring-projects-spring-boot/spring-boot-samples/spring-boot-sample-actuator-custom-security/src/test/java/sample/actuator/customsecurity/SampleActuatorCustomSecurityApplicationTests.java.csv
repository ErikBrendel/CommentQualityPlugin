commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void homeIsSecure() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = restTemplate().getForEntity("/", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat(body.get("error")).isEqualTo("Unauthorized").     assertThat(entity.getHeaders()).doesNotContainKey("Set-Cookie"). }
false;public;0;10;;@Test public void testInsecureApplicationPath() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = restTemplate().getForEntity("/foo", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     @SuppressWarnings("unchecked")     Map<String, Object> body = entity.getBody().     assertThat((String) body.get("message")).contains("Expected exception in controller"). }
false;public;0;7;;@Test public void testInsecureStaticResources() {     ResponseEntity<String> entity = restTemplate().getForEntity("/css/bootstrap.min.css", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("body"). }
false;public;0;7;;@Test public void actuatorInsecureEndpoint() {     ResponseEntity<String> entity = restTemplate().getForEntity("/actuator/health", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("\"status\":\"UP\""). }
false;public;0;8;;@Test public void actuatorLinksIsSecure() {     ResponseEntity<Object> entity = restTemplate().getForEntity("/actuator", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED).     entity = adminRestTemplate().getForEntity("/actuator", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;6;;@Test public void actuatorSecureEndpointWithAnonymous() {     ResponseEntity<Object> entity = restTemplate().getForEntity("/actuator/env", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;6;;@Test public void actuatorSecureEndpointWithUnauthorizedUser() {     ResponseEntity<Object> entity = userRestTemplate().getForEntity("/actuator/env", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN). }
false;public;0;6;;@Test public void actuatorSecureEndpointWithAuthorizedUser() {     ResponseEntity<Object> entity = adminRestTemplate().getForEntity("/actuator/env", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;6;;@Test public void actuatorCustomMvcSecureEndpointWithAnonymous() {     ResponseEntity<String> entity = restTemplate().getForEntity("/actuator/example/echo?text={t}", String.class, "test").     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;6;;@Test public void actuatorCustomMvcSecureEndpointWithUnauthorizedUser() {     ResponseEntity<String> entity = userRestTemplate().getForEntity("/actuator/example/echo?text={t}", String.class, "test").     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN). }
false;public;0;8;;@Test public void actuatorCustomMvcSecureEndpointWithAuthorizedUser() {     ResponseEntity<String> entity = adminRestTemplate().getForEntity("/actuator/example/echo?text={t}", String.class, "test").     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).isEqualTo("test").     assertThat(entity.getHeaders().getFirst("echo")).isEqualTo("test"). }
false;public;0;6;;@Test public void actuatorExcludedFromEndpointRequestMatcher() {     ResponseEntity<Object> entity = userRestTemplate().getForEntity("/actuator/mappings", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;8;;@Test public void mvcMatchersCanBeUsedToSecureActuators() {     ResponseEntity<Object> entity = beansRestTemplate().getForEntity("/actuator/beans", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     entity = beansRestTemplate().getForEntity("/actuator/beans/", Object.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;private;0;3;;private TestRestTemplate restTemplate() {     return configure(new TestRestTemplate()). }
false;private;0;3;;private TestRestTemplate adminRestTemplate() {     return configure(new TestRestTemplate("admin", "admin")). }
false;private;0;3;;private TestRestTemplate userRestTemplate() {     return configure(new TestRestTemplate("user", "password")). }
false;private;0;3;;private TestRestTemplate beansRestTemplate() {     return configure(new TestRestTemplate("beans", "beans")). }
false;private;1;5;;private TestRestTemplate configure(TestRestTemplate restTemplate) {     restTemplate.setUriTemplateHandler(new LocalHostUriTemplateHandler(this.environment)).     return restTemplate. }
