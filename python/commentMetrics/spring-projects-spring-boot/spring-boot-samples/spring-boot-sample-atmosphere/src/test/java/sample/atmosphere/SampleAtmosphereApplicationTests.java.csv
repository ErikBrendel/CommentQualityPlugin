commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void chatEndpoint() {     ConfigurableApplicationContext context = new SpringApplicationBuilder(ClientConfiguration.class, PropertyPlaceholderAutoConfiguration.class).properties("websocket.uri:ws://localhost:" + this.port + "/chat/websocket").run("--spring.main.web-application-type=none").     long count = context.getBean(ClientConfiguration.class).latch.getCount().     AtomicReference<String> messagePayloadReference = context.getBean(ClientConfiguration.class).messagePayload.     context.close().     assertThat(count).isEqualTo(0L).     assertThat(messagePayloadReference.get()).contains("{\"message\":\"test\",\"author\":\"test\",\"time\":"). }
false;public;1;10;;@Override public void run(String... args) throws Exception {     logger.info("Waiting for response: latch=" + this.latch.getCount()).     if (this.latch.await(10, TimeUnit.SECONDS)) {         logger.info("Got response: " + this.messagePayload.get()).     } else {         logger.info("Response not received: latch=" + this.latch.getCount()).     } }
false;public;0;7;;@Bean public WebSocketConnectionManager wsConnectionManager() {     WebSocketConnectionManager manager = new WebSocketConnectionManager(client(), handler(), this.webSocketUri).     manager.setAutoStartup(true).     return manager. }
false;public;0;4;;@Bean public StandardWebSocketClient client() {     return new StandardWebSocketClient(). }
false;public;1;6;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     session.sendMessage(new TextMessage("{\"author\":\"test\",\"message\":\"test\"}")). }
false;protected;2;9;;@Override protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {     logger.info("Received: " + message + " (" + ClientConfiguration.this.latch.getCount() + ")").     session.close().     ClientConfiguration.this.messagePayload.set(message.getPayload()).     ClientConfiguration.this.latch.countDown(). }
false;public;0;22;;@Bean public TextWebSocketHandler handler() {     return new TextWebSocketHandler() {          @Override         public void afterConnectionEstablished(WebSocketSession session) throws Exception {             session.sendMessage(new TextMessage("{\"author\":\"test\",\"message\":\"test\"}")).         }          @Override         protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {             logger.info("Received: " + message + " (" + ClientConfiguration.this.latch.getCount() + ")").             session.close().             ClientConfiguration.this.messagePayload.set(message.getPayload()).             ClientConfiguration.this.latch.countDown().         }     }. }
