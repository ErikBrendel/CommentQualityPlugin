commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Bean public EmbeddedAtmosphereInitializer atmosphereInitializer() {     return new EmbeddedAtmosphereInitializer(). }
false;public;0;16;;@Bean public ServletRegistrationBean<AtmosphereServlet> atmosphereServlet() {     // Dispatcher servlet is mapped to '/home' to allow the AtmosphereServlet     // to be mapped to '/chat'     AtmosphereServlet atmosphereServlet = new AtmosphereServlet().     atmosphereServlet.framework().setHandlersPath("/").     ServletRegistrationBean<AtmosphereServlet> registration = new ServletRegistrationBean<>(atmosphereServlet, "/chat/*").     registration.addInitParameter("org.atmosphere.cpr.packages", "sample").     registration.addInitParameter("org.atmosphere.interceptor.HeartbeatInterceptor" + ".clientHeartbeatFrequencyInSeconds", "10").     registration.setLoadOnStartup(0).     // Need to occur before the EmbeddedAtmosphereInitializer     registration.setOrder(Ordered.HIGHEST_PRECEDENCE).     return registration. }
false;public,static;1;3;;public static void main(String[] args) throws Exception {     SpringApplication.run(SampleAtmosphereApplication.class, args). }
false;public;1;4;;@Override public void addViewControllers(ViewControllerRegistry registry) {     registry.addViewController("/").setViewName("forward:/home/home.html"). }
false;public;1;4;;@Override public void onStartup(ServletContext servletContext) throws ServletException {     onStartup(Collections.emptySet(), servletContext). }
