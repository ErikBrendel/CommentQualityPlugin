commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSsl() {     assertThat(this.webServerFactory.getSsl().isEnabled()).isTrue(). }
false;public;0;13;;@Test public void testHello() {     assertThat(this.ports.getHttpsPort()).isEqualTo(this.port).     assertThat(this.ports.getHttpPort()).isNotEqualTo(this.port).     ResponseEntity<String> entity = this.restTemplate.getForEntity("http://localhost:" + this.ports.getHttpPort() + "/hello", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).isEqualTo("hello").     ResponseEntity<String> httpsEntity = this.restTemplate.getForEntity("https://localhost:" + this.port + "/hello", String.class).     assertThat(httpsEntity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(httpsEntity.getBody()).isEqualTo("hello"). }
false;public;1;13;;@Override public void onApplicationEvent(WebServerInitializedEvent event) {     Service service = ((TomcatWebServer) event.getWebServer()).getTomcat().getService().     for (Connector connector : service.findConnectors()) {         if (connector.getSecure()) {             this.httpsPort = connector.getLocalPort().         } else {             this.httpPort = connector.getLocalPort().         }     } }
false;;0;3;;int getHttpPort() {     return this.httpPort. }
false;;0;3;;int getHttpsPort() {     return this.httpsPort. }
