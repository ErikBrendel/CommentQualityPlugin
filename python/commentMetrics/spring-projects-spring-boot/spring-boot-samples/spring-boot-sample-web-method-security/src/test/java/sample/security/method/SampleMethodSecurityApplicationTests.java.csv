commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testHome() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     ResponseEntity<String> entity = this.restTemplate.exchange("/", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("<title>Login"). }
false;public;0;14;;@Test public void testLogin() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     MultiValueMap<String, String> form = new LinkedMultiValueMap<>().     form.set("username", "admin").     form.set("password", "admin").     getCsrf(form, headers).     ResponseEntity<String> entity = this.restTemplate.exchange("/login", HttpMethod.POST, new HttpEntity<>(form, headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FOUND).     assertThat(entity.getHeaders().getLocation().toString()).isEqualTo("http://localhost:" + this.port + "/"). }
false;public;0;19;;@Test public void testDenied() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     MultiValueMap<String, String> form = new LinkedMultiValueMap<>().     form.set("username", "user").     form.set("password", "user").     getCsrf(form, headers).     ResponseEntity<String> entity = this.restTemplate.exchange("/login", HttpMethod.POST, new HttpEntity<>(form, headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.FOUND).     String cookie = entity.getHeaders().getFirst("Set-Cookie").     headers.set("Cookie", cookie).     ResponseEntity<String> page = this.restTemplate.exchange(entity.getHeaders().getLocation(), HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(page.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN).     assertThat(page.getBody()).contains("Access denied"). }
false;public;0;8;;@Test public void testManagementProtected() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON)).     ResponseEntity<String> entity = this.restTemplate.exchange("/actuator/beans", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;15;;@Test public void testManagementAuthorizedAccess() {     BasicAuthenticationInterceptor basicAuthInterceptor = new BasicAuthenticationInterceptor("admin", "admin").     this.restTemplate.getRestTemplate().getInterceptors().add(basicAuthInterceptor).     try {         ResponseEntity<String> entity = this.restTemplate.getForEntity("/actuator/beans", String.class).         assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     } finally {         this.restTemplate.getRestTemplate().getInterceptors().remove(basicAuthInterceptor).     } }
false;private;2;11;;private void getCsrf(MultiValueMap<String, String> form, HttpHeaders headers) {     ResponseEntity<String> page = this.restTemplate.getForEntity("/login", String.class).     String cookie = page.getHeaders().getFirst("Set-Cookie").     headers.set("Cookie", cookie).     String body = page.getBody().     Matcher matcher = Pattern.compile("(?s).*name=\"_csrf\".*?value=\"([^\"]+).*").matcher(body).     matcher.find().     form.set("_csrf", matcher.group(1)). }
