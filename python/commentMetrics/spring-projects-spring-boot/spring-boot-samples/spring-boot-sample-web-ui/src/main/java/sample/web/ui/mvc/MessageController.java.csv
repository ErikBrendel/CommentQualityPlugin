commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@GetMapping public ModelAndView list() {     Iterable<Message> messages = this.messageRepository.findAll().     return new ModelAndView("messages/list", "messages", messages). }
false;public;1;4;;@GetMapping("{id}") public ModelAndView view(@PathVariable("id") Message message) {     return new ModelAndView("messages/view", "message", message). }
false;public;1;4;;@GetMapping(params = "form") public String createForm(@ModelAttribute Message message) {     return "messages/form". }
false;public;3;10;;@PostMapping public ModelAndView create(@Valid Message message, BindingResult result, RedirectAttributes redirect) {     if (result.hasErrors()) {         return new ModelAndView("messages/form", "formErrors", result.getAllErrors()).     }     message = this.messageRepository.save(message).     redirect.addFlashAttribute("globalMessage", "view.success").     return new ModelAndView("redirect:/{message.id}", "message.id", message.getId()). }
false;public;0;4;;@RequestMapping("foo") public String foo() {     throw new RuntimeException("Expected exception in controller"). }
false;public;1;6;;@GetMapping("delete/{id}") public ModelAndView delete(@PathVariable("id") Long id) {     this.messageRepository.deleteMessage(id).     Iterable<Message> messages = this.messageRepository.findAll().     return new ModelAndView("messages/list", "messages", messages). }
false;public;1;4;;@GetMapping("modify/{id}") public ModelAndView modifyForm(@PathVariable("id") Message message) {     return new ModelAndView("messages/form", "message", message). }
