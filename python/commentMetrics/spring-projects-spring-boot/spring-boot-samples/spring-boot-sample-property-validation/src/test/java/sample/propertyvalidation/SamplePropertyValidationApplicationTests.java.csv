commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void closeContext() {     this.context.close(). }
false;public;0;10;;@Test public void bindValidProperties() {     this.context.register(SamplePropertyValidationApplication.class).     TestPropertyValues.of("sample.host:192.168.0.1", "sample.port:9090").applyTo(this.context).     this.context.refresh().     SampleProperties properties = this.context.getBean(SampleProperties.class).     assertThat(properties.getHost()).isEqualTo("192.168.0.1").     assertThat(properties.getPort()).isEqualTo(Integer.valueOf(9090)). }
false;public;0;9;;@Test public void bindInvalidHost() {     this.context.register(SamplePropertyValidationApplication.class).     TestPropertyValues.of("sample.host:xxxxxx", "sample.port:9090").applyTo(this.context).     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> this.context.refresh()).withMessageContaining("Failed to bind properties under 'sample'"). }
false;public;0;7;;@Test public void bindNullHost() {     this.context.register(SamplePropertyValidationApplication.class).     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> this.context.refresh()).withMessageContaining("Failed to bind properties under 'sample'"). }
false;public;0;11;;@Test public void validatorOnlyCalledOnSupportedClass() {     this.context.register(SamplePropertyValidationApplication.class).     // our validator will not apply     this.context.register(ServerProperties.class).     TestPropertyValues.of("sample.host:192.168.0.1", "sample.port:9090").applyTo(this.context).     this.context.refresh().     SampleProperties properties = this.context.getBean(SampleProperties.class).     assertThat(properties.getHost()).isEqualTo("192.168.0.1").     assertThat(properties.getPort()).isEqualTo(Integer.valueOf(9090)). }
