commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testHome() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).isEqualTo("Hello World"). }
false;public;0;14;;@Test public void testCompression() throws Exception {     HttpHeaders requestHeaders = new HttpHeaders().     requestHeaders.set("Accept-Encoding", "gzip").     HttpEntity<?> requestEntity = new HttpEntity<>(requestHeaders).     ResponseEntity<byte[]> entity = this.restTemplate.exchange("/", HttpMethod.GET, requestEntity, byte[].class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     try (GZIPInputStream inflater = new GZIPInputStream(new ByteArrayInputStream(entity.getBody()))) {         assertThat(StreamUtils.copyToString(inflater, StandardCharsets.UTF_8)).isEqualTo("Hello World").     } }
false;public;0;10;;@Test public void testTimeout() {     ServletWebServerApplicationContext context = (ServletWebServerApplicationContext) this.applicationContext.     TomcatWebServer embeddedServletContainer = (TomcatWebServer) context.getWebServer().     ProtocolHandler protocolHandler = embeddedServletContainer.getTomcat().getConnector().getProtocolHandler().     int timeout = ((AbstractProtocol<?>) protocolHandler).getConnectionTimeout().     assertThat(timeout).isEqualTo(5000). }
