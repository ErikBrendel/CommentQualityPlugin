commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@GetMapping public ModelAndView list() {     Iterable<Message> messages = this.messageRepository.findAll().     return new ModelAndView("messages/list", "messages", messages). }
false;public;1;4;;@GetMapping("{id}") public ModelAndView view(@PathVariable("id") Message message) {     return new ModelAndView("messages/view", "message", message). }
false;public;1;4;;@GetMapping(params = "form") public String createForm(@ModelAttribute Message message) {     return "messages/form". }
false;public;3;13;;@PostMapping public ModelAndView create(@Valid Message message, BindingResult result, RedirectAttributes redirect) {     if (result.hasErrors()) {         ModelAndView mav = new ModelAndView("messages/form").         mav.addObject("formErrors", result.getAllErrors()).         mav.addObject("fieldErrors", getFieldErrors(result)).         return mav.     }     message = this.messageRepository.save(message).     redirect.addFlashAttribute("globalMessage", "Successfully created a new message").     return new ModelAndView("redirect:/{message.id}", "message.id", message.getId()). }
false;private;1;7;;private Map<String, ObjectError> getFieldErrors(BindingResult result) {     Map<String, ObjectError> map = new HashMap<>().     for (FieldError error : result.getFieldErrors()) {         map.put(error.getField(), error).     }     return map. }
false;public;0;4;;@RequestMapping("foo") public String foo() {     throw new RuntimeException("Expected exception in controller"). }
