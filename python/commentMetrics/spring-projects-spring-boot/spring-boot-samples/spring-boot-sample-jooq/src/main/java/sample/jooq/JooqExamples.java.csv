commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void run(String... args) throws Exception {     jooqFetch().     jooqSql(). }
false;private;0;9;;private void jooqFetch() {     Result<Record> results = this.dsl.select().from(AUTHOR).fetch().     for (Record result : results) {         Integer id = result.getValue(AUTHOR.ID).         String firstName = result.getValue(AUTHOR.FIRST_NAME).         String lastName = result.getValue(AUTHOR.LAST_NAME).         System.out.println("jOOQ Fetch " + id + " " + firstName + " " + lastName).     } }
false;public;2;5;;@Override public String mapRow(ResultSet rs, int rowNum) throws SQLException {     return rs.getString(1) + " : " + rs.getString(2) + " " + rs.getString(3). }
false;private;0;15;;private void jooqSql() {     Query query = this.dsl.select(BOOK.TITLE, AUTHOR.FIRST_NAME, AUTHOR.LAST_NAME).from(BOOK).join(AUTHOR).on(BOOK.AUTHOR_ID.equal(AUTHOR.ID)).where(BOOK.PUBLISHED_IN.equal(2015)).     Object[] bind = query.getBindValues().toArray(new Object[0]).     List<String> list = this.jdbc.query(query.getSQL(), bind, new RowMapper<String>() {          @Override         public String mapRow(ResultSet rs, int rowNum) throws SQLException {             return rs.getString(1) + " : " + rs.getString(2) + " " + rs.getString(3).         }     }).     System.out.println("jOOQ SQL " + list). }
