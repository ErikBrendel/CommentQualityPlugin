commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * The class holding records for this type  */ ;/**  * The class holding records for this type  */ @Override public Class<Record> getRecordType() {     return Record.class. }
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public Schema getSchema() {     return Public.PUBLIC. }
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public UniqueKey<Record> getPrimaryKey() {     return Keys.CONSTRAINT_1. }
true;public;0;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public List<UniqueKey<Record>> getKeys() {     return Arrays.<UniqueKey<Record>>asList(Keys.CONSTRAINT_1). }
true;public;0;5;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public List<ForeignKey<Record, ?>> getReferences() {     return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_BOOK_AUTHOR, Keys.FK_BOOK_LANGUAGE). }
true;public;1;4;/**  * {@inheritDoc}  */ ;/**  * {@inheritDoc}  */ @Override public Book as(String alias) {     return new Book(alias, this). }
true;public;1;4;/**  * Rename this table  */ ;/**  * Rename this table  */ @Override public Book rename(String name) {     return new Book(name, null). }
