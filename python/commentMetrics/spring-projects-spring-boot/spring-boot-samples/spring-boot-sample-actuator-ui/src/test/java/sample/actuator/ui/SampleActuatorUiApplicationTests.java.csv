commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHome() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     ResponseEntity<String> entity = this.restTemplate.withBasicAuth("user", getPassword()).exchange("/", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("<title>Hello"). }
false;public;0;7;;@Test public void testCss() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/css/bootstrap.min.css", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("body"). }
false;public;0;7;;@Test public void testMetrics() {     @SuppressWarnings("rawtypes")     ResponseEntity<Map> entity = this.restTemplate.getForEntity("/actuator/metrics", Map.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;11;;@Test public void testError() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     ResponseEntity<String> entity = this.restTemplate.withBasicAuth("user", getPassword()).exchange("/error", HttpMethod.GET, new HttpEntity<Void>(headers), String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     assertThat(entity.getBody()).contains("<html>").contains("<body>").contains("Please contact the operator with the above information"). }
false;private;0;3;;private String getPassword() {     return "password". }
