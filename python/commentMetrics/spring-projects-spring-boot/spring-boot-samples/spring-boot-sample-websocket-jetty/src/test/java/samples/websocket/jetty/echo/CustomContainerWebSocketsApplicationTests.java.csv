commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void echoEndpoint() {     ConfigurableApplicationContext context = new SpringApplicationBuilder(ClientConfiguration.class, PropertyPlaceholderAutoConfiguration.class).properties("websocket.uri:ws://localhost:" + this.port + "/ws/echo/websocket").run("--spring.main.web-application-type=none").     long count = context.getBean(ClientConfiguration.class).latch.getCount().     AtomicReference<String> messagePayloadReference = context.getBean(ClientConfiguration.class).messagePayload.     context.close().     assertThat(count).isEqualTo(0).     assertThat(messagePayloadReference.get()).isEqualTo("Did you say \"Hello world!\"?"). }
false;public;0;14;;@Test public void reverseEndpoint() {     ConfigurableApplicationContext context = new SpringApplicationBuilder(ClientConfiguration.class, PropertyPlaceholderAutoConfiguration.class).properties("websocket.uri:ws://localhost:" + this.port + "/ws/reverse").run("--spring.main.web-application-type=none").     long count = context.getBean(ClientConfiguration.class).latch.getCount().     AtomicReference<String> messagePayloadReference = context.getBean(ClientConfiguration.class).messagePayload.     context.close().     assertThat(count).isEqualTo(0).     assertThat(messagePayloadReference.get()).isEqualTo("Reversed: !dlrow olleH"). }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new JettyServletWebServerFactory("/ws", 0). }
false;public;1;10;;@Override public void run(String... args) throws Exception {     logger.info("Waiting for response: latch=" + this.latch.getCount()).     if (this.latch.await(10, TimeUnit.SECONDS)) {         logger.info("Got response: " + this.messagePayload.get()).     } else {         logger.info("Response not received: latch=" + this.latch.getCount()).     } }
false;public;0;9;;@Bean public WebSocketConnectionManager wsConnectionManager() {     WebSocketConnectionManager manager = new WebSocketConnectionManager(client(), handler(), this.webSocketUri).     manager.setAutoStartup(true).     return manager. }
false;public;0;4;;@Bean public StandardWebSocketClient client() {     return new StandardWebSocketClient(). }
false;public;0;5;;@Bean public SimpleClientWebSocketHandler handler() {     return new SimpleClientWebSocketHandler(greetingService(), this.latch, this.messagePayload). }
false;public;0;4;;@Bean public GreetingService greetingService() {     return new SimpleGreetingService(). }
