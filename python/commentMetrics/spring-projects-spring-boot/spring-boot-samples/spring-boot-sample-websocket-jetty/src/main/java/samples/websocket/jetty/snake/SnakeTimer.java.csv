commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static void addSnake(Snake snake) {     synchronized (MONITOR) {         if (snakes.isEmpty()) {             startTimer().         }         snakes.put(Integer.valueOf(snake.getId()), snake).     } }
false;public,static;0;3;;public static Collection<Snake> getSnakes() {     return Collections.unmodifiableCollection(snakes.values()). }
false;public,static;1;8;;public static void removeSnake(Snake snake) {     synchronized (MONITOR) {         snakes.remove(Integer.valueOf(snake.getId())).         if (snakes.isEmpty()) {             stopTimer().         }     } }
false;public,static;0;13;;public static void tick() throws Exception {     StringBuilder sb = new StringBuilder().     for (Iterator<Snake> iterator = SnakeTimer.getSnakes().iterator(). iterator.hasNext(). ) {         Snake snake = iterator.next().         snake.update(SnakeTimer.getSnakes()).         sb.append(snake.getLocationsJson()).         if (iterator.hasNext()) {             sb.append(',').         }     }     broadcast(String.format("{'type': 'update', 'data' : [%s]}", sb.toString())). }
false;public,static;1;12;;public static void broadcast(String message) throws Exception {     Collection<Snake> snakes = new CopyOnWriteArrayList<>(SnakeTimer.getSnakes()).     for (Snake snake : snakes) {         try {             snake.sendMessage(message).         } catch (Throwable ex) {             // if Snake#sendMessage fails the client is removed             removeSnake(snake).         }     } }
false;public;0;9;;@Override public void run() {     try {         tick().     } catch (Throwable ex) {         logger.error("Caught to prevent timer from shutting down", ex).     } }
false;public,static;0;14;;public static void startTimer() {     gameTimer = new Timer(SnakeTimer.class.getSimpleName() + " Timer").     gameTimer.scheduleAtFixedRate(new TimerTask() {          @Override         public void run() {             try {                 tick().             } catch (Throwable ex) {                 logger.error("Caught to prevent timer from shutting down", ex).             }         }     }, TICK_DELAY, TICK_DELAY). }
false;public,static;0;5;;public static void stopTimer() {     if (gameTimer != null) {         gameTimer.cancel().     } }
