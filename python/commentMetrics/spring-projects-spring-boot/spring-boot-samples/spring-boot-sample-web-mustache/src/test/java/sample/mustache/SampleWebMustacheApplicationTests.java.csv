commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testMustacheTemplate() {     ResponseEntity<String> entity = this.restTemplate.getForEntity("/", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(entity.getBody()).contains("Hello, Andy"). }
false;public;0;11;;@Test public void testMustacheErrorTemplate() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     HttpEntity<String> requestEntity = new HttpEntity<>(headers).     ResponseEntity<String> responseEntity = this.restTemplate.exchange("/does-not-exist", HttpMethod.GET, requestEntity, String.class).     assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     assertThat(responseEntity.getBody()).contains("Something went wrong: 404 Not Found"). }
false;public;0;10;;@Test public void test503HtmlResource() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     HttpEntity<String> requestEntity = new HttpEntity<>(headers).     ResponseEntity<String> entity = this.restTemplate.exchange("/serviceUnavailable", HttpMethod.GET, requestEntity, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE).     assertThat(entity.getBody()).contains("I'm a 503"). }
false;public;0;10;;@Test public void test5xxHtmlResource() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     HttpEntity<String> requestEntity = new HttpEntity<>(headers).     ResponseEntity<String> entity = this.restTemplate.exchange("/bang", HttpMethod.GET, requestEntity, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).     assertThat(entity.getBody()).contains("I'm a 5xx"). }
false;public;0;10;;@Test public void test507Template() {     HttpHeaders headers = new HttpHeaders().     headers.setAccept(Arrays.asList(MediaType.TEXT_HTML)).     HttpEntity<String> requestEntity = new HttpEntity<>(headers).     ResponseEntity<String> entity = this.restTemplate.exchange("/insufficientStorage", HttpMethod.GET, requestEntity, String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.INSUFFICIENT_STORAGE).     assertThat(entity.getBody()).contains("I'm a 507"). }
