commented;modifiers;parameterAmount;loc;comment;code
false;;0;7;;File buildApplication() throws Exception {     File containerFolder = new File(this.temp.getRoot(), this.container).     if (containerFolder.exists()) {         return new File(containerFolder, "app/target/app-0.0.1." + this.packaging).     }     return doBuildApplication(containerFolder). }
false;private;1;11;;private File doBuildApplication(File containerFolder) throws IOException, MavenInvocationException {     File resourcesJar = createResourcesJar().     File appFolder = new File(containerFolder, "app").     appFolder.mkdirs().     File settingsXml = writeSettingsXml(appFolder).     writePom(appFolder, resourcesJar).     copyApplicationSource(appFolder).     packageApplication(appFolder, settingsXml).     return new File(appFolder, "target/app-0.0.1." + this.packaging). }
false;private;0;16;;private File createResourcesJar() throws IOException {     File resourcesJar = new File(this.temp.getRoot(), "resources.jar").     if (resourcesJar.exists()) {         return resourcesJar.     }     try (JarOutputStream resourcesJarStream = new JarOutputStream(new FileOutputStream(resourcesJar))) {         resourcesJarStream.putNextEntry(new ZipEntry("META-INF/resources/")).         resourcesJarStream.closeEntry().         resourcesJarStream.putNextEntry(new ZipEntry("META-INF/resources/nested-meta-inf-resource.txt")).         resourcesJarStream.write("nested".getBytes()).         resourcesJarStream.closeEntry().         return resourcesJar.     } }
false;private;2;13;;private void writePom(File appFolder, File resourcesJar) throws IOException {     Map<String, Object> context = new HashMap<>().     context.put("packaging", this.packaging).     context.put("container", this.container).     context.put("bootVersion", Versions.getBootVersion()).     context.put("resourcesJarPath", resourcesJar.getAbsolutePath()).     try (FileWriter out = new FileWriter(new File(appFolder, "pom.xml")).         FileReader templateReader = new FileReader("src/test/resources/pom-template.xml")) {         Mustache.compiler().escapeHTML(false).compile(templateReader).execute(context, out).     } }
false;private;1;16;;private File writeSettingsXml(File appFolder) throws IOException {     String repository = System.getProperty("repository").     if (!StringUtils.hasText(repository)) {         return null.     }     Map<String, Object> context = new HashMap<>().     context.put("repository", repository).     File settingsXml = new File(appFolder, "settings.xml").     try (FileWriter out = new FileWriter(settingsXml).         FileReader templateReader = new FileReader("src/test/resources/settings-template.xml")) {         Mustache.compiler().escapeHTML(false).compile(templateReader).execute(context, out).     }     return settingsXml. }
false;private;1;13;;private void copyApplicationSource(File appFolder) throws IOException {     File examplePackage = new File(appFolder, "src/main/java/com/example").     examplePackage.mkdirs().     FileCopyUtils.copy(new File("src/test/java/com/example/ResourceHandlingApplication.java"), new File(examplePackage, "ResourceHandlingApplication.java")).     if ("war".equals(this.packaging)) {         File srcMainWebapp = new File(appFolder, "src/main/webapp").         srcMainWebapp.mkdirs().         FileCopyUtils.copy("webapp resource", new FileWriter(new File(srcMainWebapp, "webapp-resource.txt"))).     } }
false;private;2;11;;private void packageApplication(File appFolder, File settingsXml) throws MavenInvocationException {     InvocationRequest invocation = new DefaultInvocationRequest().     invocation.setBaseDirectory(appFolder).     invocation.setGoals(Collections.singletonList("package")).     if (settingsXml != null) {         invocation.setUserSettingsFile(settingsXml).     }     InvocationResult execute = new DefaultInvoker().execute(invocation).     assertThat(execute.getExitCode()).isEqualTo(0). }
