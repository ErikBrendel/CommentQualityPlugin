commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;0;4;;@Override protected final void before() throws Throwable {     this.process = startApplication(). }
false;protected,final;0;4;;@Override protected final void after() {     this.process.destroy(). }
false;public,final;0;3;;public final int getHttpPort() {     return this.httpPort. }
false;protected,abstract;2;1;;protected abstract List<String> getArguments(File archive, File serverPortFile).
false;protected,abstract;0;1;;protected abstract File getWorkingDirectory().
false;protected,abstract;1;1;;protected abstract String getDescription(String packaging).
false;private;0;19;;private Process startApplication() throws Exception {     File workingDirectory = getWorkingDirectory().     File serverPortFile = new File(this.buildOutput.getRootLocation(), "server.port").     serverPortFile.delete().     File archive = this.applicationBuilder.buildApplication().     List<String> arguments = new ArrayList<>().     arguments.add(System.getProperty("java.home") + "/bin/java").     arguments.addAll(getArguments(archive, serverPortFile)).     ProcessBuilder processBuilder = new ProcessBuilder(StringUtils.toStringArray(arguments)).     if (workingDirectory != null) {         processBuilder.directory(workingDirectory).     }     Process process = processBuilder.start().     new ConsoleCopy(process.getInputStream(), System.out).start().     new ConsoleCopy(process.getErrorStream(), System.err).start().     this.httpPort = awaitServerPort(process, serverPortFile).     return process. }
false;private;2;15;;private int awaitServerPort(Process process, File serverPortFile) throws Exception {     long end = System.currentTimeMillis() + 30000.     while (serverPortFile.length() == 0) {         if (System.currentTimeMillis() > end) {             throw new IllegalStateException("server.port file was not written within 30 seconds").         }         if (!process.isAlive()) {             throw new IllegalStateException("Application failed to launch").         }         Thread.sleep(100).     }     return Integer.parseInt(FileCopyUtils.copyToString(new FileReader(serverPortFile))). }
false;public;0;8;;@Override public void run() {     try {         StreamUtils.copy(this.input, this.output).     } catch (IOException ex) {     } }
