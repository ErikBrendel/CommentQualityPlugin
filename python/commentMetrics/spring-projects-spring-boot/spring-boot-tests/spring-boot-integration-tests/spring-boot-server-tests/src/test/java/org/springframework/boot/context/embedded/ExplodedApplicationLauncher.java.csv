commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected File getWorkingDirectory() {     return this.exploded.get(). }
false;protected;1;4;;@Override protected String getDescription(String packaging) {     return "exploded " + packaging. }
false;protected;2;14;;@Override protected List<String> getArguments(File archive, File serverPortFile) {     String mainClass = (archive.getName().endsWith(".war") ? "org.springframework.boot.loader.WarLauncher" : "org.springframework.boot.loader.JarLauncher").     try {         explodeArchive(archive).         return Arrays.asList("-cp", this.exploded.get().getAbsolutePath(), mainClass, serverPortFile.getAbsolutePath()).     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
false;private;1;18;;private void explodeArchive(File archive) throws IOException {     FileSystemUtils.deleteRecursively(this.exploded.get()).     JarFile jarFile = new JarFile(archive).     Enumeration<JarEntry> entries = jarFile.entries().     while (entries.hasMoreElements()) {         JarEntry jarEntry = entries.nextElement().         File extracted = new File(this.exploded.get(), jarEntry.getName()).         if (jarEntry.isDirectory()) {             extracted.mkdirs().         } else {             FileOutputStream extractedOutputStream = new FileOutputStream(extracted).             StreamUtils.copy(jarFile.getInputStream(jarEntry), extractedOutputStream).             extractedOutputStream.close().         }     }     jarFile.close(). }
