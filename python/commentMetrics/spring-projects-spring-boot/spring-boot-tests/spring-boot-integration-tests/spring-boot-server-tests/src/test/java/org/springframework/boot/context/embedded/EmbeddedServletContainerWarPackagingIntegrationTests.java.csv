commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@Parameters(name = "{0}") public static Object[] parameters() {     return AbstractEmbeddedServletContainerIntegrationTests.parameters("war", Arrays.asList(PackagedApplicationLauncher.class, ExplodedApplicationLauncher.class)). }
false;public;0;6;;@Test public void nestedMetaInfResourceIsAvailableViaHttp() {     ResponseEntity<String> entity = this.rest.getForEntity("/nested-meta-inf-resource.txt", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;6;;@Test public void nestedMetaInfResourceIsAvailableViaServletContext() {     ResponseEntity<String> entity = this.rest.getForEntity("/servletContext?/nested-meta-inf-resource.txt", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;6;;@Test public void nestedJarIsNotAvailableViaHttp() {     ResponseEntity<String> entity = this.rest.getForEntity("/WEB-INF/lib/resources-1.0.jar", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;public;0;7;;@Test public void applicationClassesAreNotAvailableViaHttp() {     ResponseEntity<String> entity = this.rest.getForEntity("/WEB-INF/classes/com/example/ResourceHandlingApplication.class", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;public;0;6;;@Test public void webappResourcesAreAvailableViaHttp() {     ResponseEntity<String> entity = this.rest.getForEntity("/webapp-resource.txt", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK). }
false;public;0;10;;@Test public void loaderClassesAreNotAvailableViaHttp() {     ResponseEntity<String> entity = this.rest.getForEntity("/org/springframework/boot/loader/Launcher.class", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     entity = this.rest.getForEntity("/org/springframework/../springframework/boot/loader/Launcher.class", String.class).     assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
