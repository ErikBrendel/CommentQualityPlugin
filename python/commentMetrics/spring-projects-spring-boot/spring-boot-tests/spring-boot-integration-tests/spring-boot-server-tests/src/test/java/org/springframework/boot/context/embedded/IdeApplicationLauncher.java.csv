commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected File getWorkingDirectory() {     return this.exploded. }
false;protected;1;4;;@Override protected String getDescription(String packaging) {     return "IDE run " + packaging + " project". }
false;protected;2;27;;@Override protected List<String> getArguments(File archive, File serverPortFile) {     try {         explodeArchive(archive, this.exploded).         deleteLauncherClasses().         File builtClasses = populateBuiltClasses(archive).         File dependencies = populateDependencies(archive).         File resourcesProject = explodedResourcesProject(dependencies).         if (archive.getName().endsWith(".war")) {             populateSrcMainWebapp().         }         List<String> classpath = new ArrayList<>().         classpath.add(builtClasses.getAbsolutePath()).         for (File dependency : dependencies.listFiles()) {             classpath.add(dependency.getAbsolutePath()).         }         classpath.add(resourcesProject.getAbsolutePath()).         return Arrays.asList("-cp", StringUtils.collectionToDelimitedString(classpath, File.pathSeparator), "com.example.ResourceHandlingApplication", serverPortFile.getAbsolutePath()).     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
false;private;1;8;;private File populateBuiltClasses(File archive) throws IOException {     File builtClasses = new File(this.exploded, "built/classes").     builtClasses.mkdirs().     File source = new File(this.exploded, getClassesPath(archive)).     FileSystemUtils.copyRecursively(source, builtClasses).     FileSystemUtils.deleteRecursively(source).     return builtClasses. }
false;private;1;13;;private File populateDependencies(File archive) throws IOException {     File dependencies = new File(this.exploded, "dependencies").     dependencies.mkdirs().     List<String> libPaths = getLibPaths(archive).     for (String libPath : libPaths) {         File libDirectory = new File(this.exploded, libPath).         for (File jar : libDirectory.listFiles()) {             FileCopyUtils.copy(jar, new File(dependencies, jar.getName())).         }         FileSystemUtils.deleteRecursively(libDirectory).     }     return dependencies. }
false;private;1;8;;private File explodedResourcesProject(File dependencies) throws IOException {     File resourcesProject = new File(this.exploded, "resources-project/built/classes").     File resourcesJar = new File(dependencies, "resources-1.0.jar").     explodeArchive(resourcesJar, resourcesProject).     resourcesJar.delete().     return resourcesProject. }
false;private;0;7;;private void populateSrcMainWebapp() throws IOException {     File srcMainWebapp = new File(this.exploded, "src/main/webapp").     srcMainWebapp.mkdirs().     File source = new File(this.exploded, "webapp-resource.txt").     FileCopyUtils.copy(source, new File(srcMainWebapp, "webapp-resource.txt")).     source.delete(). }
false;private;0;3;;private void deleteLauncherClasses() {     FileSystemUtils.deleteRecursively(new File(this.exploded, "org")). }
false;private;1;4;;private String getClassesPath(File archive) {     return (archive.getName().endsWith(".jar") ? "BOOT-INF/classes" : "WEB-INF/classes"). }
false;private;1;5;;private List<String> getLibPaths(File archive) {     return (archive.getName().endsWith(".jar") ? Collections.singletonList("BOOT-INF/lib") : Arrays.asList("WEB-INF/lib", "WEB-INF/lib-provided")). }
false;private;2;18;;private void explodeArchive(File archive, File destination) throws IOException {     FileSystemUtils.deleteRecursively(destination).     JarFile jarFile = new JarFile(archive).     Enumeration<JarEntry> entries = jarFile.entries().     while (entries.hasMoreElements()) {         JarEntry jarEntry = entries.nextElement().         File extracted = new File(destination, jarEntry.getName()).         if (jarEntry.isDirectory()) {             extracted.mkdirs().         } else {             FileOutputStream extractedOutputStream = new FileOutputStream(extracted).             StreamUtils.copy(jarFile.getInputStream(jarEntry), extractedOutputStream).             extractedOutputStream.close().         }     }     jarFile.close(). }
