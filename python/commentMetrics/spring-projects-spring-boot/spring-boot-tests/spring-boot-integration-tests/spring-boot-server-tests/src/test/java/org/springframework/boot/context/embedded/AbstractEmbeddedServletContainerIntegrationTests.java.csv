commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void delete() { }
false;public,static;2;8;;public static Object[] parameters(String packaging, List<Class<? extends AbstractApplicationLauncher>> applicationLaunchers) {     List<Object> parameters = new ArrayList<>().     parameters.addAll(createParameters(packaging, "jetty", applicationLaunchers)).     parameters.addAll(createParameters(packaging, "tomcat", applicationLaunchers)).     parameters.addAll(createParameters(packaging, "undertow", applicationLaunchers)).     return parameters.toArray(new Object[0]). }
false;private,static;3;21;;private static List<Object> createParameters(String packaging, String container, List<Class<? extends AbstractApplicationLauncher>> applicationLaunchers) {     List<Object> parameters = new ArrayList<>().     ApplicationBuilder applicationBuilder = new ApplicationBuilder(temporaryFolder, packaging, container).     for (Class<? extends AbstractApplicationLauncher> launcherClass : applicationLaunchers) {         try {             AbstractApplicationLauncher launcher = launcherClass.getDeclaredConstructor(ApplicationBuilder.class, BuildOutput.class).newInstance(applicationBuilder, buildOutput).             String name = StringUtils.capitalize(container) + ": " + launcher.getDescription(packaging).             parameters.add(new Object[] { name, launcher }).         } catch (Exception ex) {             throw new RuntimeException(ex).         }     }     return parameters. }
false;public;1;4;;@Override public boolean hasError(ClientHttpResponse response) throws IOException {     return false. }
false;public;1;4;;@Override public void handleError(ClientHttpResponse response) throws IOException { }
false;public;2;5;;@Override public URI expand(String uriTemplate, Object... uriVariables) {     return URI.create("http://localhost:" + launcher.getHttpPort() + uriTemplate). }
false;public;2;5;;@Override public URI expand(String uriTemplate, Map<String, ?> uriVariables) {     return URI.create("http://localhost:" + launcher.getHttpPort() + uriTemplate). }
