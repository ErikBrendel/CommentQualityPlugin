commented;modifiers;parameterAmount;loc;comment;code
false;public;2;15;;@Override public LaunchedApplication launchApplication(JvmLauncher javaLauncher, File serverPortFile) throws Exception {     LaunchedJvm applicationJvm = javaLauncher.launch("app", createApplicationClassPath(), "com.example.DevToolsTestApplication", serverPortFile.getAbsolutePath(), "--server.port=0", "--spring.devtools.remote.secret=secret").     int port = awaitServerPort(applicationJvm.getStandardOut(), serverPortFile).     BiFunction<Integer, File, Process> remoteRestarter = getRemoteRestarter(javaLauncher).     return new LaunchedApplication(getDirectories().getRemoteAppDirectory(), applicationJvm.getStandardOut(), applicationJvm.getStandardError(), applicationJvm.getProcess(), remoteRestarter.apply(port, null), remoteRestarter). }
false;private;1;18;;private BiFunction<Integer, File, Process> getRemoteRestarter(JvmLauncher javaLauncher) {     return (port, classesDirectory) -> {         try {             LaunchedJvm remoteSpringApplicationJvm = javaLauncher.launch("remote-spring-application", createRemoteSpringApplicationClassPath(classesDirectory), RemoteSpringApplication.class.getName(), "--spring.devtools.remote.secret=secret", "http://localhost:" + port).             awaitRemoteSpringApplication(remoteSpringApplicationJvm.getStandardOut()).             return remoteSpringApplicationJvm.getProcess().         } catch (Exception ex) {             throw new IllegalStateException(ex).         }     }. }
false;protected,abstract;0;1;;protected abstract String createApplicationClassPath() throws Exception.
false;private;1;11;;private String createRemoteSpringApplicationClassPath(File classesDirectory) throws Exception {     File remoteAppDirectory = getDirectories().getRemoteAppDirectory().     if (classesDirectory == null) {         copyApplicationTo(remoteAppDirectory).     }     List<String> entries = new ArrayList<>().     entries.add(remoteAppDirectory.getAbsolutePath()).     entries.addAll(getDependencyJarPaths()).     return StringUtils.collectionToDelimitedString(entries, File.pathSeparator). }
false;private;2;15;;private int awaitServerPort(File standardOut, File serverPortFile) throws Exception {     long end = System.currentTimeMillis() + 30000.     while (serverPortFile.length() == 0) {         if (System.currentTimeMillis() > end) {             throw new IllegalStateException(String.format("server.port file was not written within 30 seconds. " + "Application output:%n%s", FileCopyUtils.copyToString(new FileReader(standardOut)))).         }         Thread.sleep(100).     }     FileReader portReader = new FileReader(serverPortFile).     int port = Integer.valueOf(FileCopyUtils.copyToString(portReader)).     return port. }
false;private;1;18;;private void awaitRemoteSpringApplication(File standardOut) throws Exception {     long end = System.currentTimeMillis() + 30000.     while (!standardOut.exists()) {         if (System.currentTimeMillis() > end) {             throw new IllegalStateException("Standard out file was not written " + "within 30 seconds").         }         Thread.sleep(100).     }     while (!FileCopyUtils.copyToString(new FileReader(standardOut)).contains("Started RemoteSpringApplication")) {         if (System.currentTimeMillis() > end) {             throw new IllegalStateException("RemoteSpringApplication did not start within 30 seconds").         }         Thread.sleep(100).     } }
