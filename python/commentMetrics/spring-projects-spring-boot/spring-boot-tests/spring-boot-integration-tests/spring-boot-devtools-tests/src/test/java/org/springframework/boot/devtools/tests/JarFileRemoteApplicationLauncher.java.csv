commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected String createApplicationClassPath() throws Exception {     File appDirectory = getDirectories().getAppDirectory().     copyApplicationTo(appDirectory).     Manifest manifest = new Manifest().     manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0").     File appJar = new File(appDirectory, "app.jar").     JarOutputStream output = new JarOutputStream(new FileOutputStream(appJar), manifest).     addToJar(output, appDirectory, appDirectory).     output.close().     List<String> entries = new ArrayList<>().     entries.add(appJar.getAbsolutePath()).     entries.addAll(getDependencyJarPaths()).     String classpath = StringUtils.collectionToDelimitedString(entries, File.pathSeparator).     return classpath. }
false;private;3;17;;private void addToJar(JarOutputStream output, File root, File current) throws IOException {     for (File file : current.listFiles()) {         if (file.isDirectory()) {             addToJar(output, root, file).         }         output.putNextEntry(new ZipEntry(file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace("\\", "/") + (file.isDirectory() ? "/" : ""))).         if (file.isFile()) {             try (FileInputStream input = new FileInputStream(file)) {                 StreamUtils.copy(input, output).             }         }         output.closeEntry().     } }
false;public;0;4;;@Override public String toString() {     return "jar file remote". }
