commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void launchApplication() throws Exception {     this.serverPortFile.delete().     this.launchedApplication = this.applicationLauncher.launchApplication(this.javaLauncher, this.serverPortFile). }
false;public;0;4;;@After public void stopApplication() throws InterruptedException {     this.launchedApplication.stop(). }
false;public;0;16;;@Test public void addARequestMappingToAnExistingController() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     controller("com.example.ControllerOne").withRequestMapping("one").withRequestMapping("two").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two"). }
false;public;0;11;;@Test public void removeARequestMappingFromAnExistingController() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     controller("com.example.ControllerOne").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForEntity(urlBase + "/one", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;public;0;16;;@Test public void createAController() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     controller("com.example.ControllerTwo").withRequestMapping("two").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two"). }
false;public;0;20;;@Test public void createAControllerAndThenAddARequestMapping() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     controller("com.example.ControllerTwo").withRequestMapping("two").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two").     controller("com.example.ControllerTwo").withRequestMapping("two").withRequestMapping("three").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/three", String.class)).isEqualTo("three"). }
false;public;0;25;;@Test public void createAControllerAndThenAddARequestMappingToAnExistingController() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     controller("com.example.ControllerTwo").withRequestMapping("two").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two").     controller("com.example.ControllerOne").withRequestMapping("one").withRequestMapping("three").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two").     assertThat(template.getForObject(urlBase + "/three", String.class)).isEqualTo("three"). }
false;public;0;13;;@Test public void deleteAController() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(new File(this.launchedApplication.getClassesDirectory(), "com/example/ControllerOne.class").delete()).isTrue().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForEntity(urlBase + "/one", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;public;0;20;;@Test public void createAControllerAndThenDeleteIt() throws Exception {     TestRestTemplate template = new TestRestTemplate().     String urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND).     controller("com.example.ControllerTwo").withRequestMapping("two").build().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForObject(urlBase + "/one", String.class)).isEqualTo("one").     assertThat(template.getForObject(urlBase + "/two", String.class)).isEqualTo("two").     assertThat(new File(this.launchedApplication.getClassesDirectory(), "com/example/ControllerTwo.class").delete()).isTrue().     urlBase = "http://localhost:" + awaitServerPort().     assertThat(template.getForEntity(urlBase + "/two", String.class).getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND). }
false;private;0;25;;private int awaitServerPort() throws Exception {     Duration timeToWait = Duration.ofSeconds(40).     long end = System.currentTimeMillis() + timeToWait.toMillis().     System.out.println("Reading server port from '" + this.serverPortFile + "'").     while (this.serverPortFile.length() == 0) {         if (System.currentTimeMillis() > end) {             throw new IllegalStateException(String.format("server.port file '" + this.serverPortFile + "' was not written within " + timeToWait.toMillis() + "ms. " + "Application output:%n%s%s", FileCopyUtils.copyToString(new FileReader(this.launchedApplication.getStandardOut())), FileCopyUtils.copyToString(new FileReader(this.launchedApplication.getStandardError())))).         }         Thread.sleep(100).     }     FileReader portReader = new FileReader(this.serverPortFile).     int port = Integer.valueOf(FileCopyUtils.copyToString(portReader)).     this.serverPortFile.delete().     System.out.println("Got port " + port).     this.launchedApplication.restartRemote(port).     Thread.sleep(1000).     return port. }
false;private;1;4;;private ControllerBuilder controller(String name) {     return new ControllerBuilder(name, this.launchedApplication.getClassesDirectory()). }
false;public,static;0;7;;@Parameters(name = "{0}") public static Object[] parameters() throws IOException {     Directories directories = new Directories(buildOutput, temp).     return new Object[] { new Object[] { new LocalApplicationLauncher(directories) }, new Object[] { new ExplodedRemoteApplicationLauncher(directories) }, new Object[] { new JarFileRemoteApplicationLauncher(directories) } }. }
false;public;1;4;;public ControllerBuilder withRequestMapping(String mapping) {     this.mappings.add(mapping).     return this. }
false;public;0;12;;public void build() throws Exception {     Builder<Object> builder = new ByteBuddy().subclass(Object.class).name(this.name).annotateType(AnnotationDescription.Builder.ofType(RestController.class).build()).     for (String mapping : this.mappings) {         builder = builder.defineMethod(mapping, String.class, Visibility.PUBLIC).intercept(FixedValue.value(mapping)).annotateMethod(AnnotationDescription.Builder.ofType(RequestMapping.class).defineArray("value", mapping).build()).     }     builder.make().saveIn(this.classesDirectory). }
