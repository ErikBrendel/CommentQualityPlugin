commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the status of the health.  * @return the status (never {@code null})  */ ;/**  * Return the status of the health.  * @return the status (never {@code null})  */ @JsonUnwrapped public Status getStatus() {     return this.status. }
true;public;0;3;/**  * Return the details of the health.  * @return the details (or an empty map)  */ ;/**  * Return the details of the health.  * @return the details (or an empty map)  */ public Map<String, Object> getDetails() {     return this.details. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj != null && obj instanceof Health) {         Health other = (Health) obj.         return this.status.equals(other.status) && this.details.equals(other.details).     }     return false. }
false;public;0;5;;@Override public int hashCode() {     int hashCode = this.status.hashCode().     return 13 * hashCode + this.details.hashCode(). }
false;public;0;4;;@Override public String toString() {     return getStatus() + " " + getDetails(). }
true;public,static;0;3;/**  * Create a new {@link Builder} instance with an {@link Status#UNKNOWN} status.  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with an {@link Status#UNKNOWN} status.  * @return a new {@link Builder} instance  */ public static Builder unknown() {     return status(Status.UNKNOWN). }
true;public,static;0;3;/**  * Create a new {@link Builder} instance with an {@link Status#UP} status.  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with an {@link Status#UP} status.  * @return a new {@link Builder} instance  */ public static Builder up() {     return status(Status.UP). }
true;public,static;1;3;/**  * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the  * specified exception details.  * @param ex the exception  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with an {@link Status#DOWN} status and the  * specified exception details.  * @param ex the exception  * @return a new {@link Builder} instance  */ public static Builder down(Exception ex) {     return down().withException(ex). }
true;public,static;0;3;/**  * Create a new {@link Builder} instance with a {@link Status#DOWN} status.  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with a {@link Status#DOWN} status.  * @return a new {@link Builder} instance  */ public static Builder down() {     return status(Status.DOWN). }
true;public,static;0;3;/**  * Create a new {@link Builder} instance with an {@link Status#OUT_OF_SERVICE} status.  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with an {@link Status#OUT_OF_SERVICE} status.  * @return a new {@link Builder} instance  */ public static Builder outOfService() {     return status(Status.OUT_OF_SERVICE). }
true;public,static;1;3;/**  * Create a new {@link Builder} instance with a specific status code.  * @param statusCode the status code  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with a specific status code.  * @param statusCode the status code  * @return a new {@link Builder} instance  */ public static Builder status(String statusCode) {     return status(new Status(statusCode)). }
true;public,static;1;3;/**  * Create a new {@link Builder} instance with a specific {@link Status}.  * @param status the status  * @return a new {@link Builder} instance  */ ;/**  * Create a new {@link Builder} instance with a specific {@link Status}.  * @param status the status  * @return a new {@link Builder} instance  */ public static Builder status(Status status) {     return new Builder(status). }
true;public;1;4;/**  * Record detail for given {@link Exception}.  * @param ex the exception  * @return this {@link Builder} instance  */ ;/**  * Record detail for given {@link Exception}.  * @param ex the exception  * @return this {@link Builder} instance  */ public Builder withException(Throwable ex) {     Assert.notNull(ex, "Exception must not be null").     return withDetail("error", ex.getClass().getName() + ": " + ex.getMessage()). }
true;public;2;6;/**  * Record detail using given {@code key} and {@code value}.  * @param key the detail key  * @param value the detail value  * @return this {@link Builder} instance  */ ;/**  * Record detail using given {@code key} and {@code value}.  * @param key the detail key  * @param value the detail value  * @return this {@link Builder} instance  */ public Builder withDetail(String key, Object value) {     Assert.notNull(key, "Key must not be null").     Assert.notNull(value, "Value must not be null").     this.details.put(key, value).     return this. }
true;public;1;5;/**  * Record details from the given {@code details} map. Keys from the given map  * replace any existing keys if there are duplicates.  * @param details map of details  * @return this {@link Builder} instance  * @since 2.1.0  */ ;/**  * Record details from the given {@code details} map. Keys from the given map  * replace any existing keys if there are duplicates.  * @param details map of details  * @return this {@link Builder} instance  * @since 2.1.0  */ public Builder withDetails(Map<String, ?> details) {     Assert.notNull(details, "Details must not be null").     this.details.putAll(details).     return this. }
true;public;0;3;/**  * Set status to {@link Status#UNKNOWN} status.  * @return this {@link Builder} instance  */ ;/**  * Set status to {@link Status#UNKNOWN} status.  * @return this {@link Builder} instance  */ public Builder unknown() {     return status(Status.UNKNOWN). }
true;public;0;3;/**  * Set status to {@link Status#UP} status.  * @return this {@link Builder} instance  */ ;/**  * Set status to {@link Status#UP} status.  * @return this {@link Builder} instance  */ public Builder up() {     return status(Status.UP). }
true;public;1;3;/**  * Set status to {@link Status#DOWN} and add details for given {@link Throwable}.  * @param ex the exception  * @return this {@link Builder} instance  */ ;/**  * Set status to {@link Status#DOWN} and add details for given {@link Throwable}.  * @param ex the exception  * @return this {@link Builder} instance  */ public Builder down(Throwable ex) {     return down().withException(ex). }
true;public;0;3;/**  * Set status to {@link Status#DOWN}.  * @return this {@link Builder} instance  */ ;/**  * Set status to {@link Status#DOWN}.  * @return this {@link Builder} instance  */ public Builder down() {     return status(Status.DOWN). }
true;public;0;3;/**  * Set status to {@link Status#OUT_OF_SERVICE}.  * @return this {@link Builder} instance  */ ;/**  * Set status to {@link Status#OUT_OF_SERVICE}.  * @return this {@link Builder} instance  */ public Builder outOfService() {     return status(Status.OUT_OF_SERVICE). }
true;public;1;3;/**  * Set status to given {@code statusCode}.  * @param statusCode the status code  * @return this {@link Builder} instance  */ ;/**  * Set status to given {@code statusCode}.  * @param statusCode the status code  * @return this {@link Builder} instance  */ public Builder status(String statusCode) {     return status(new Status(statusCode)). }
true;public;1;4;/**  * Set status to given {@link Status} instance.  * @param status the status  * @return this {@link Builder} instance  */ ;/**  * Set status to given {@link Status} instance.  * @param status the status  * @return this {@link Builder} instance  */ public Builder status(Status status) {     this.status = status.     return this. }
true;public;0;3;/**  * Create a new {@link Health} instance with the previously specified code and  * details.  * @return a new {@link Health} instance  */ ;/**  * Create a new {@link Health} instance with the previously specified code and  * details.  * @return a new {@link Health} instance  */ public Health build() {     return new Health(this). }
