commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;protected;3;26;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     if (!isRequestValid(request)) {         filterChain.doFilter(request, response).         return.     }     TraceableHttpServletRequest traceableRequest = new TraceableHttpServletRequest(request).     HttpTrace trace = this.tracer.receivedRequest(traceableRequest).     int status = HttpStatus.INTERNAL_SERVER_ERROR.value().     try {         filterChain.doFilter(request, response).         status = response.getStatus().     } finally {         TraceableHttpServletResponse traceableResponse = new TraceableHttpServletResponse((status != response.getStatus()) ? new CustomStatusResponseWrapper(response, status) : response).         this.tracer.sendingResponse(trace, traceableResponse, request::getUserPrincipal, () -> getSessionId(request)).         this.repository.add(trace).     } }
false;private;1;9;;private boolean isRequestValid(HttpServletRequest request) {     try {         new URI(request.getRequestURL().toString()).         return true.     } catch (URISyntaxException ex) {         return false.     } }
false;private;1;4;;private String getSessionId(HttpServletRequest request) {     HttpSession session = request.getSession(false).     return (session != null) ? session.getId() : null. }
false;public;0;4;;@Override public int getStatus() {     return this.status. }
