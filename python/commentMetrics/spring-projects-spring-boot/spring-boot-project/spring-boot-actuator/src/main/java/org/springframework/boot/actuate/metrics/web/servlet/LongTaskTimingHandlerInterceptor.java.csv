commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {     LongTaskTimingContext timingContext = LongTaskTimingContext.get(request).     if (timingContext == null) {         startAndAttachTimingContext(request, handler).     }     return true. }
false;public;4;7;;@Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {     if (!request.isAsyncStarted()) {         stopLongTaskTimers(LongTaskTimingContext.get(request)).     } }
false;private;2;8;;private void startAndAttachTimingContext(HttpServletRequest request, Object handler) {     Set<Timed> annotations = getTimedAnnotations(handler).     Collection<LongTaskTimer.Sample> longTaskTimerSamples = getLongTaskTimerSamples(request, handler, annotations).     LongTaskTimingContext timingContext = new LongTaskTimingContext(longTaskTimerSamples).     timingContext.attachTo(request). }
false;private;3;11;;private Collection<LongTaskTimer.Sample> getLongTaskTimerSamples(HttpServletRequest request, Object handler, Set<Timed> annotations) {     List<LongTaskTimer.Sample> samples = new ArrayList<>().     annotations.stream().filter(Timed::longTask).forEach((annotation) -> {         Iterable<Tag> tags = this.tagsProvider.getLongRequestTags(request, handler).         LongTaskTimer.Builder builder = LongTaskTimer.builder(annotation).tags(tags).         LongTaskTimer timer = builder.register(this.registry).         samples.add(timer.start()).     }).     return samples. }
false;private;1;6;;private Set<Timed> getTimedAnnotations(Object handler) {     if (!(handler instanceof HandlerMethod)) {         return Collections.emptySet().     }     return getTimedAnnotations((HandlerMethod) handler). }
false;private;1;7;;private Set<Timed> getTimedAnnotations(HandlerMethod handler) {     Set<Timed> timed = findTimedAnnotations(handler.getMethod()).     if (timed.isEmpty()) {         return findTimedAnnotations(handler.getBeanType()).     }     return timed. }
false;private;1;3;;private Set<Timed> findTimedAnnotations(AnnotatedElement element) {     return AnnotationUtils.getDeclaredRepeatableAnnotations(element, Timed.class). }
false;private;1;5;;private void stopLongTaskTimers(LongTaskTimingContext timingContext) {     for (LongTaskTimer.Sample sample : timingContext.getLongTaskTimerSamples()) {         sample.stop().     } }
false;;0;3;;Collection<LongTaskTimer.Sample> getLongTaskTimerSamples() {     return this.longTaskTimerSamples. }
false;;1;3;;void attachTo(HttpServletRequest request) {     request.setAttribute(ATTRIBUTE, this). }
false;static;1;3;;static LongTaskTimingContext get(HttpServletRequest request) {     return (LongTaskTimingContext) request.getAttribute(ATTRIBUTE). }
