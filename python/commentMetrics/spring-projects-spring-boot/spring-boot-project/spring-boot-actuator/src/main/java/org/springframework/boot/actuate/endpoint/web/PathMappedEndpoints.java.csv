commented;modifiers;parameterAmount;loc;comment;code
false;private;1;13;;private Map<EndpointId, PathMappedEndpoint> getEndpoints(Collection<EndpointsSupplier<?>> suppliers) {     Map<EndpointId, PathMappedEndpoint> endpoints = new LinkedHashMap<>().     suppliers.forEach((supplier) -> {         supplier.getEndpoints().forEach((endpoint) -> {             if (endpoint instanceof PathMappedEndpoint) {                 endpoints.put(endpoint.getEndpointId(), (PathMappedEndpoint) endpoint).             }         }).     }).     return Collections.unmodifiableMap(endpoints). }
true;public;0;3;/**  * Return the base path for the endpoints.  * @return the base path  */ ;/**  * Return the base path for the endpoints.  * @return the base path  */ public String getBasePath() {     return this.basePath. }
true;public;1;4;/**  * Return the root path for the endpoint with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the root path or {@code null}  */ ;/**  * Return the root path for the endpoint with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the root path or {@code null}  */ public String getRootPath(EndpointId endpointId) {     PathMappedEndpoint endpoint = getEndpoint(endpointId).     return (endpoint != null) ? endpoint.getRootPath() : null. }
true;public;1;3;/**  * Return the full path for the endpoint with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the full path or {@code null}  */ ;/**  * Return the full path for the endpoint with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the full path or {@code null}  */ public String getPath(EndpointId endpointId) {     return getPath(getEndpoint(endpointId)). }
true;public;0;3;/**  * Return the root paths for each mapped endpoint.  * @return all root paths  */ ;/**  * Return the root paths for each mapped endpoint.  * @return all root paths  */ public Collection<String> getAllRootPaths() {     return asList(stream().map(PathMappedEndpoint::getRootPath)). }
true;public;0;3;/**  * Return the full paths for each mapped endpoint.  * @return all root paths  */ ;/**  * Return the full paths for each mapped endpoint.  * @return all root paths  */ public Collection<String> getAllPaths() {     return asList(stream().map(this::getPath)). }
true;public;1;3;/**  * Return the {@link PathMappedEndpoint} with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the path mapped endpoint or {@code null}  */ ;/**  * Return the {@link PathMappedEndpoint} with the given ID or {@code null} if the  * endpoint cannot be found.  * @param endpointId the endpoint ID  * @return the path mapped endpoint or {@code null}  */ public PathMappedEndpoint getEndpoint(EndpointId endpointId) {     return this.endpoints.get(endpointId). }
true;public;0;3;/**  * Stream all {@link PathMappedEndpoint path mapped endpoints}.  * @return a stream of endpoints  */ ;/**  * Stream all {@link PathMappedEndpoint path mapped endpoints}.  * @return a stream of endpoints  */ public Stream<PathMappedEndpoint> stream() {     return this.endpoints.values().stream(). }
false;public;0;4;;@Override public Iterator<PathMappedEndpoint> iterator() {     return this.endpoints.values().iterator(). }
false;private;1;3;;private String getPath(PathMappedEndpoint endpoint) {     return (endpoint != null) ? this.basePath + "/" + endpoint.getRootPath() : null. }
false;private;1;4;;private <T> List<T> asList(Stream<T> stream) {     return stream.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)). }
