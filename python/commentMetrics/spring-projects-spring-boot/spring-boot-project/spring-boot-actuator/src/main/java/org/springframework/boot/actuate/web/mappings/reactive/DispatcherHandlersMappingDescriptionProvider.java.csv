commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMappingName() {     return "dispatcherHandlers". }
false;public;1;8;;@Override public Map<String, List<DispatcherHandlerMappingDescription>> describeMappings(ApplicationContext context) {     Map<String, List<DispatcherHandlerMappingDescription>> mappings = new HashMap<>().     context.getBeansOfType(DispatcherHandler.class).forEach((name, handler) -> mappings.put(name, describeMappings(handler))).     return mappings. }
false;private;1;5;;private List<DispatcherHandlerMappingDescription> describeMappings(DispatcherHandler dispatcherHandler) {     return dispatcherHandler.getHandlerMappings().stream().flatMap(this::describe).collect(Collectors.toList()). }
false;private;1;12;;@SuppressWarnings("unchecked") private <T extends HandlerMapping> Stream<DispatcherHandlerMappingDescription> describe(T handlerMapping) {     for (HandlerMappingDescriptionProvider<?> descriptionProvider : descriptionProviders) {         if (descriptionProvider.getMappingClass().isInstance(handlerMapping)) {             return ((HandlerMappingDescriptionProvider<T>) descriptionProvider).describe(handlerMapping).stream().         }     }     return Stream.empty(). }
false;;0;1;;Class<T> getMappingClass().
false;;1;1;;List<DispatcherHandlerMappingDescription> describe(T handlerMapping).
false;public;0;4;;@Override public Class<RequestMappingInfoHandlerMapping> getMappingClass() {     return RequestMappingInfoHandlerMapping.class. }
false;public;1;8;;@Override public List<DispatcherHandlerMappingDescription> describe(RequestMappingInfoHandlerMapping handlerMapping) {     Map<RequestMappingInfo, HandlerMethod> handlerMethods = handlerMapping.getHandlerMethods().     return handlerMethods.entrySet().stream().map(this::describe).collect(Collectors.toList()). }
false;private;1;10;;private DispatcherHandlerMappingDescription describe(Entry<RequestMappingInfo, HandlerMethod> mapping) {     DispatcherHandlerMappingDetails handlerMapping = new DispatcherHandlerMappingDetails().     handlerMapping.setHandlerMethod(new HandlerMethodDescription(mapping.getValue())).     handlerMapping.setRequestMappingConditions(new RequestMappingConditionsDescription(mapping.getKey())).     return new DispatcherHandlerMappingDescription(mapping.getKey().toString(), mapping.getValue().toString(), handlerMapping). }
false;public;0;4;;@Override public Class<AbstractUrlHandlerMapping> getMappingClass() {     return AbstractUrlHandlerMapping.class. }
false;public;1;6;;@Override public List<DispatcherHandlerMappingDescription> describe(AbstractUrlHandlerMapping handlerMapping) {     return handlerMapping.getHandlerMap().entrySet().stream().map(this::describe).collect(Collectors.toList()). }
false;private;1;6;;private DispatcherHandlerMappingDescription describe(Entry<PathPattern, Object> mapping) {     return new DispatcherHandlerMappingDescription(mapping.getKey().getPatternString(), mapping.getValue().toString(), null). }
false;public;0;4;;@Override public Class<RouterFunctionMapping> getMappingClass() {     return RouterFunctionMapping.class. }
false;public;1;10;;@Override public List<DispatcherHandlerMappingDescription> describe(RouterFunctionMapping handlerMapping) {     MappingDescriptionVisitor visitor = new MappingDescriptionVisitor().     RouterFunction<?> routerFunction = handlerMapping.getRouterFunction().     if (routerFunction != null) {         routerFunction.accept(visitor).     }     return visitor.descriptions. }
false;public;1;3;;@Override public void startNested(RequestPredicate predicate) { }
false;public;1;3;;@Override public void endNested(RequestPredicate predicate) { }
false;public;2;8;;@Override public void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction) {     DispatcherHandlerMappingDetails details = new DispatcherHandlerMappingDetails().     details.setHandlerFunction(new HandlerFunctionDescription(handlerFunction)).     this.descriptions.add(new DispatcherHandlerMappingDescription(predicate.toString(), handlerFunction.toString(), details)). }
false;public;1;3;;@Override public void resources(Function<ServerRequest, Mono<Resource>> lookupFunction) { }
false;public;1;3;;@Override public void unknown(RouterFunction<?> routerFunction) { }
