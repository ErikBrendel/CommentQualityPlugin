commented;modifiers;parameterAmount;loc;comment;code
false;private;1;10;;private String getAlphaNumerics(String value) {     StringBuilder result = new StringBuilder(value.length()).     for (int i = 0. i < value.length(). i++) {         char ch = value.charAt(i).         if (ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9') {             result.append(ch).         }     }     return result.toString(). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return this.lowerCaseAlphaNumeric.equals(((EndpointId) obj).lowerCaseAlphaNumeric). }
false;public;0;4;;@Override public int hashCode() {     return this.lowerCaseAlphaNumeric.hashCode(). }
true;public;0;3;/**  * Return a lower-case version of the endpoint ID.  * @return the lower-case endpoint ID  */ ;/**  * Return a lower-case version of the endpoint ID.  * @return the lower-case endpoint ID  */ public String toLowerCaseString() {     return this.lowerCaseValue. }
false;public;0;4;;@Override public String toString() {     return this.value. }
true;public,static;1;3;/**  * Factory method to create a new {@link EndpointId} of the specified value.  * @param value the endpoint ID value  * @return an {@link EndpointId} instance  */ ;/**  * Factory method to create a new {@link EndpointId} of the specified value.  * @param value the endpoint ID value  * @return an {@link EndpointId} instance  */ public static EndpointId of(String value) {     return new EndpointId(value). }
true;public,static;1;3;/**  * Factory method to create a new {@link EndpointId} from a property value. More  * lenient than {@link #of(String)} to allow for common "relaxed" property variants.  * @param value the property value to convert  * @return an {@link EndpointId} instance  */ ;/**  * Factory method to create a new {@link EndpointId} from a property value. More  * lenient than {@link #of(String)} to allow for common "relaxed" property variants.  * @param value the property value to convert  * @return an {@link EndpointId} instance  */ public static EndpointId fromPropertyValue(String value) {     return new EndpointId(value.replace("-", "")). }
false;static;0;3;;static void resetLoggedWarnings() {     loggedWarnings.clear(). }
false;private,static;1;6;;private static void logWarning(String value) {     if (logger.isWarnEnabled() && loggedWarnings.add(value)) {         logger.warn("Endpoint ID '" + value + "' contains invalid characters, please migrate to a valid format.").     } }
