commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getMappingName() {     return "dispatcherServlets". }
false;public;1;8;;@Override public Map<String, List<DispatcherServletMappingDescription>> describeMappings(ApplicationContext context) {     if (context instanceof WebApplicationContext) {         return describeMappings((WebApplicationContext) context).     }     return Collections.emptyMap(). }
false;private;1;8;;private Map<String, List<DispatcherServletMappingDescription>> describeMappings(WebApplicationContext context) {     Map<String, List<DispatcherServletMappingDescription>> mappings = new HashMap<>().     determineDispatcherServlets(context).forEach((name, dispatcherServlet) -> mappings.put(name, describeMappings(new DispatcherServletHandlerMappings(name, dispatcherServlet, context)))).     return mappings. }
false;private;1;20;;private Map<String, DispatcherServlet> determineDispatcherServlets(WebApplicationContext context) {     Map<String, DispatcherServlet> dispatcherServlets = new LinkedHashMap<>().     context.getBeansOfType(ServletRegistrationBean.class).values().forEach((registration) -> {         Servlet servlet = registration.getServlet().         if (servlet instanceof DispatcherServlet && !dispatcherServlets.containsValue(servlet)) {             dispatcherServlets.put(registration.getServletName(), (DispatcherServlet) servlet).         }     }).     context.getBeansOfType(DispatcherServlet.class).forEach((name, dispatcherServlet) -> {         if (!dispatcherServlets.containsValue(dispatcherServlet)) {             dispatcherServlets.put(name, dispatcherServlet).         }     }).     return dispatcherServlets. }
false;private;1;5;;private List<DispatcherServletMappingDescription> describeMappings(DispatcherServletHandlerMappings mappings) {     return mappings.getHandlerMappings().stream().flatMap(this::describe).collect(Collectors.toList()). }
false;private;1;4;;private <T extends HandlerMapping> Stream<DispatcherServletMappingDescription> describe(T handlerMapping) {     return describe(handlerMapping, descriptionProviders).stream(). }
false;private,static;2;12;;@SuppressWarnings("unchecked") private static <T extends HandlerMapping> List<DispatcherServletMappingDescription> describe(T handlerMapping, List<HandlerMappingDescriptionProvider<?>> descriptionProviders) {     for (HandlerMappingDescriptionProvider<?> descriptionProvider : descriptionProviders) {         if (descriptionProvider.getMappingClass().isInstance(handlerMapping)) {             return ((HandlerMappingDescriptionProvider<T>) descriptionProvider).describe(handlerMapping).         }     }     return Collections.emptyList(). }
false;;0;1;;Class<T> getMappingClass().
false;;1;1;;List<DispatcherServletMappingDescription> describe(T handlerMapping).
false;public;0;4;;@Override public Class<RequestMappingInfoHandlerMapping> getMappingClass() {     return RequestMappingInfoHandlerMapping.class. }
false;public;1;8;;@Override public List<DispatcherServletMappingDescription> describe(RequestMappingInfoHandlerMapping handlerMapping) {     Map<RequestMappingInfo, HandlerMethod> handlerMethods = handlerMapping.getHandlerMethods().     return handlerMethods.entrySet().stream().map(this::describe).collect(Collectors.toList()). }
false;private;1;10;;private DispatcherServletMappingDescription describe(Entry<RequestMappingInfo, HandlerMethod> mapping) {     DispatcherServletMappingDetails mappingDetails = new DispatcherServletMappingDetails().     mappingDetails.setHandlerMethod(new HandlerMethodDescription(mapping.getValue())).     mappingDetails.setRequestMappingConditions(new RequestMappingConditionsDescription(mapping.getKey())).     return new DispatcherServletMappingDescription(mapping.getKey().toString(), mapping.getValue().toString(), mappingDetails). }
false;public;0;4;;@Override public Class<AbstractUrlHandlerMapping> getMappingClass() {     return AbstractUrlHandlerMapping.class. }
false;public;1;6;;@Override public List<DispatcherServletMappingDescription> describe(AbstractUrlHandlerMapping handlerMapping) {     return handlerMapping.getHandlerMap().entrySet().stream().map(this::describe).collect(Collectors.toList()). }
false;private;1;5;;private DispatcherServletMappingDescription describe(Entry<String, Object> mapping) {     return new DispatcherServletMappingDescription(mapping.getKey(), mapping.getValue().toString(), null). }
false;public;0;4;;@Override public Class<DelegatingHandlerMapping> getMappingClass() {     return DelegatingHandlerMapping.class. }
false;public;1;10;;@Override public List<DispatcherServletMappingDescription> describe(DelegatingHandlerMapping handlerMapping) {     List<DispatcherServletMappingDescription> descriptions = new ArrayList<>().     for (HandlerMapping delegate : handlerMapping.getDelegates()) {         descriptions.addAll(DispatcherServletsMappingDescriptionProvider.describe(delegate, this.descriptionProviders)).     }     return descriptions. }
