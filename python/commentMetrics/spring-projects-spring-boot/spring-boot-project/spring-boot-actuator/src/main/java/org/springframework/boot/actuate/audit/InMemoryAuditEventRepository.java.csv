commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the capacity of this event repository.  * @param capacity the capacity  */ ;/**  * Set the capacity of this event repository.  * @param capacity the capacity  */ public void setCapacity(int capacity) {     synchronized (this.monitor) {         this.events = new AuditEvent[capacity].     } }
false;public;1;8;;@Override public void add(AuditEvent event) {     Assert.notNull(event, "AuditEvent must not be null").     synchronized (this.monitor) {         this.tail = (this.tail + 1) % this.events.length.         this.events[this.tail] = event.     } }
false;public;3;13;;@Override public List<AuditEvent> find(String principal, Instant after, String type) {     LinkedList<AuditEvent> events = new LinkedList<>().     synchronized (this.monitor) {         for (int i = 0. i < this.events.length. i++) {             AuditEvent event = resolveTailEvent(i).             if (event != null && isMatch(principal, after, type, event)) {                 events.addFirst(event).             }         }     }     return events. }
false;private;4;8;;private boolean isMatch(String principal, Instant after, String type, AuditEvent event) {     boolean match = true.     match = match && (principal == null || event.getPrincipal().equals(principal)).     match = match && (after == null || event.getTimestamp().isAfter(after)).     match = match && (type == null || event.getType().equals(type)).     return match. }
false;private;1;4;;private AuditEvent resolveTailEvent(int offset) {     int index = ((this.tail + this.events.length - offset) % this.events.length).     return this.events[index]. }
