commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Resolve the root path for the specified {@code endpointId}.  * @param endpointId the id of an endpoint  * @return the path of the endpoint or {@code null} if this mapper doesn't support the  * given endpoint ID  */ ;/**  * Resolve the root path for the specified {@code endpointId}.  * @param endpointId the id of an endpoint  * @return the path of the endpoint or {@code null} if this mapper doesn't support the  * given endpoint ID  */ String getRootPath(EndpointId endpointId).
true;static;2;12;/**  * Resolve the root path for the specified {@code endpointId} from the given path  * mappers. If no mapper matches then the ID itself is returned.  * @param pathMappers the path mappers (may be {@code null})  * @param endpointId the id of an endpoint  * @return the path of the endpoint  */ ;/**  * Resolve the root path for the specified {@code endpointId} from the given path  * mappers. If no mapper matches then the ID itself is returned.  * @param pathMappers the path mappers (may be {@code null})  * @param endpointId the id of an endpoint  * @return the path of the endpoint  */ static String getRootPath(List<PathMapper> pathMappers, EndpointId endpointId) {     Assert.notNull(endpointId, "EndpointId must not be null").     if (pathMappers != null) {         for (PathMapper mapper : pathMappers) {             String path = mapper.getRootPath(endpointId).             if (StringUtils.hasText(path)) {                 return path.             }         }     }     return endpointId.toString(). }
