commented;modifiers;parameterAmount;loc;comment;code
false;private;2;7;;private String getDescription(Method method, Supplier<String> fallback) {     ManagedOperation managed = jmxAttributeSource.getManagedOperation(method).     if (managed != null && StringUtils.hasText(managed.getDescription())) {         return managed.getDescription().     }     return fallback.get(). }
false;private;1;13;;private List<JmxOperationParameter> getParameters(OperationMethod operationMethod) {     if (!operationMethod.getParameters().hasParameters()) {         return Collections.emptyList().     }     Method method = operationMethod.getMethod().     ManagedOperationParameter[] managed = jmxAttributeSource.getManagedOperationParameters(method).     if (managed.length == 0) {         return asList(operationMethod.getParameters().stream().map(DiscoveredJmxOperationParameter::new)).     }     return mergeParameters(operationMethod.getParameters(), managed). }
false;private;2;10;;private List<JmxOperationParameter> mergeParameters(OperationParameters operationParameters, ManagedOperationParameter[] managedParameters) {     List<JmxOperationParameter> merged = new ArrayList<>(managedParameters.length).     for (int i = 0. i < managedParameters.length. i++) {         merged.add(new DiscoveredJmxOperationParameter(managedParameters[i], operationParameters.get(i))).     }     return Collections.unmodifiableList(merged). }
false;private;1;4;;private <T> List<T> asList(Stream<T> stream) {     return stream.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)). }
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;0;4;;@Override public Class<?> getOutputType() {     return this.outputType. }
false;public;0;4;;@Override public String getDescription() {     return this.description. }
false;public;0;4;;@Override public List<JmxOperationParameter> getParameters() {     return this.parameters. }
false;protected;1;6;;@Override protected void appendFields(ToStringCreator creator) {     creator.append("name", this.name).append("outputType", this.outputType).append("description", this.description).append("parameters", this.parameters). }
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;0;4;;@Override public Class<?> getType() {     return this.type. }
false;public;0;4;;@Override public String getDescription() {     return this.description. }
false;public;0;9;;@Override public String toString() {     StringBuilder result = new StringBuilder(this.name).     if (this.description != null) {         result.append(" (").append(this.description).append(")").     }     result.append(":").append(this.type).     return result.toString(). }
false;public,static;1;16;;public static Class<?> get(Class<?> source) {     if (source.isEnum()) {         return String.class.     }     if (Date.class.isAssignableFrom(source) || Instant.class.isAssignableFrom(source)) {         return String.class.     }     if (source.getName().startsWith("java.")) {         return source.     }     if (source.equals(Void.TYPE)) {         return source.     }     return Object.class. }
