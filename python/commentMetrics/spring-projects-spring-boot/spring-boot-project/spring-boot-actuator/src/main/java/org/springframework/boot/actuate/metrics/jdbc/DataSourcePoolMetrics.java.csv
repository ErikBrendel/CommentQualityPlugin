commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void bindTo(MeterRegistry registry) {     if (this.metadataProvider.getDataSourcePoolMetadata(this.dataSource) != null) {         bindPoolMetadata(registry, "active", DataSourcePoolMetadata::getActive).         bindPoolMetadata(registry, "max", DataSourcePoolMetadata::getMax).         bindPoolMetadata(registry, "min", DataSourcePoolMetadata::getMin).     } }
false;private;3;5;;private <N extends Number> void bindPoolMetadata(MeterRegistry registry, String metricName, Function<DataSourcePoolMetadata, N> function) {     bindDataSource(registry, metricName, this.metadataProvider.getValueFunction(function)). }
false;private;3;7;;private <N extends Number> void bindDataSource(MeterRegistry registry, String metricName, Function<DataSource, N> function) {     if (function.apply(this.dataSource) != null) {         registry.gauge("jdbc.connections." + metricName, this.tags, this.dataSource, (m) -> function.apply(m).doubleValue()).     } }
false;public;1;4;;public <N extends Number> Function<DataSource, N> getValueFunction(Function<DataSourcePoolMetadata, N> function) {     return (dataSource) -> function.apply(getDataSourcePoolMetadata(dataSource)). }
false;public;1;9;;@Override public DataSourcePoolMetadata getDataSourcePoolMetadata(DataSource dataSource) {     DataSourcePoolMetadata metadata = cache.get(dataSource).     if (metadata == null) {         metadata = this.metadataProvider.getDataSourcePoolMetadata(dataSource).         cache.put(dataSource, metadata).     }     return metadata. }
