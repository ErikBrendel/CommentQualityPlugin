commented;modifiers;parameterAmount;loc;comment;code
true;public;2;8;/**  * Attempt to bind the specified {@link Cache} to the registry. Return {@code true} if  * the cache is supported and was bound to the registry, {@code false} otherwise.  * @param cache the cache to handle  * @param tags the tags to associate with the metrics of that cache  * @return {@code true} if the {@code cache} is supported and was registered  */ ;/**  * Attempt to bind the specified {@link Cache} to the registry. Return {@code true} if  * the cache is supported and was bound to the registry, {@code false} otherwise.  * @param cache the cache to handle  * @param tags the tags to associate with the metrics of that cache  * @return {@code true} if the {@code cache} is supported and was registered  */ public boolean bindCacheToRegistry(Cache cache, Tag... tags) {     MeterBinder meterBinder = getMeterBinder(unwrapIfNecessary(cache), Tags.of(tags)).     if (meterBinder != null) {         meterBinder.bindTo(this.registry).         return true.     }     return false. }
false;private;2;10;;@SuppressWarnings({ "unchecked" }) private MeterBinder getMeterBinder(Cache cache, Tags tags) {     Tags cacheTags = tags.and(getAdditionalTags(cache)).     return LambdaSafe.callbacks(CacheMeterBinderProvider.class, this.binderProviders, cache).withLogger(CacheMetricsRegistrar.class).invokeAnd((binderProvider) -> binderProvider.getMeterBinder(cache, cacheTags)).filter(Objects::nonNull).findFirst().orElse(null). }
true;protected;1;3;/**  * Return additional {@link Tag tags} to be associated with the given {@link Cache}.  * @param cache the cache  * @return a list of additional tags to associate to that {@code cache}.  */ ;/**  * Return additional {@link Tag tags} to be associated with the given {@link Cache}.  * @param cache the cache  * @return a list of additional tags to associate to that {@code cache}.  */ protected Iterable<Tag> getAdditionalTags(Cache cache) {     return Tags.of("name", cache.getName()). }
false;private;1;8;;private Cache unwrapIfNecessary(Cache cache) {     if (ClassUtils.isPresent("org.springframework.cache.transaction.TransactionAwareCacheDecorator", getClass().getClassLoader())) {         return TransactionAwareCacheDecoratorHandler.unwrapIfNecessary(cache).     }     return cache. }
false;private,static;1;11;;private static Cache unwrapIfNecessary(Cache cache) {     try {         if (cache instanceof TransactionAwareCacheDecorator) {             return ((TransactionAwareCacheDecorator) cache).getTargetCache().         }     } catch (NoClassDefFoundError ex) {     // Ignore     }     return cache. }
