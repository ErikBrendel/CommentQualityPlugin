commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a {@code method} {@code Tag} for the {@link HttpRequest#getMethod() method}  * of the given {@code request}.  * @param request the request  * @return the method tag  */ ;/**  * Creates a {@code method} {@code Tag} for the {@link HttpRequest#getMethod() method}  * of the given {@code request}.  * @param request the request  * @return the method tag  */ public static Tag method(HttpRequest request) {     return Tag.of("method", request.getMethod().name()). }
true;public,static;1;3;/**  * Creates a {@code uri} {@code Tag} for the URI of the given {@code request}.  * @param request the request  * @return the uri tag  */ ;/**  * Creates a {@code uri} {@code Tag} for the URI of the given {@code request}.  * @param request the request  * @return the uri tag  */ public static Tag uri(HttpRequest request) {     return Tag.of("uri", ensureLeadingSlash(stripUri(request.getURI().toString()))). }
true;public,static;1;4;/**  * Creates a {@code uri} {@code Tag} from the given {@code uriTemplate}.  * @param uriTemplate the template  * @return the uri tag  */ ;/**  * Creates a {@code uri} {@code Tag} from the given {@code uriTemplate}.  * @param uriTemplate the template  * @return the uri tag  */ public static Tag uri(String uriTemplate) {     String uri = (StringUtils.hasText(uriTemplate) ? uriTemplate : "none").     return Tag.of("uri", ensureLeadingSlash(stripUri(uri))). }
false;private,static;1;3;;private static String stripUri(String uri) {     return STRIP_URI_PATTERN.matcher(uri).replaceAll(""). }
false;private,static;1;3;;private static String ensureLeadingSlash(String url) {     return (url == null || url.startsWith("/")) ? url : "/" + url. }
true;public,static;1;3;/**  * Creates a {@code status} {@code Tag} derived from the  * {@link ClientHttpResponse#getRawStatusCode() status} of the given {@code response}.  * @param response the response  * @return the status tag  */ ;/**  * Creates a {@code status} {@code Tag} derived from the  * {@link ClientHttpResponse#getRawStatusCode() status} of the given {@code response}.  * @param response the response  * @return the status tag  */ public static Tag status(ClientHttpResponse response) {     return Tag.of("status", getStatusMessage(response)). }
false;private,static;1;11;;private static String getStatusMessage(ClientHttpResponse response) {     try {         if (response == null) {             return "CLIENT_ERROR".         }         return String.valueOf(response.getRawStatusCode()).     } catch (IOException ex) {         return "IO_ERROR".     } }
true;public,static;1;7;/**  * Create a {@code clientName} {@code Tag} derived from the {@link URI#getHost host}  * of the {@link HttpRequest#getURI() URI} of the given {@code request}.  * @param request the request  * @return the clientName tag  */ ;/**  * Create a {@code clientName} {@code Tag} derived from the {@link URI#getHost host}  * of the {@link HttpRequest#getURI() URI} of the given {@code request}.  * @param request the request  * @return the clientName tag  */ public static Tag clientName(HttpRequest request) {     String host = request.getURI().getHost().     if (host == null) {         host = "none".     }     return Tag.of("clientName", host). }
true;public,static;1;26;/**  * Creates an {@code outcome} {@code Tag} derived from the  * {@link ClientHttpResponse#getStatusCode() status} of the given {@code response}.  * @param response the response  * @return the outcome tag  * @since 2.2.0  */ ;/**  * Creates an {@code outcome} {@code Tag} derived from the  * {@link ClientHttpResponse#getStatusCode() status} of the given {@code response}.  * @param response the response  * @return the outcome tag  * @since 2.2.0  */ public static Tag outcome(ClientHttpResponse response) {     try {         if (response != null) {             HttpStatus statusCode = response.getStatusCode().             if (statusCode.is1xxInformational()) {                 return OUTCOME_INFORMATIONAL.             }             if (statusCode.is2xxSuccessful()) {                 return OUTCOME_SUCCESS.             }             if (statusCode.is3xxRedirection()) {                 return OUTCOME_REDIRECTION.             }             if (statusCode.is4xxClientError()) {                 return OUTCOME_CLIENT_ERROR.             }             if (statusCode.is5xxServerError()) {                 return OUTCOME_SERVER_ERROR.             }         }         return OUTCOME_UNKNOWN.     } catch (IOException | IllegalArgumentException ex) {         return OUTCOME_UNKNOWN.     } }
