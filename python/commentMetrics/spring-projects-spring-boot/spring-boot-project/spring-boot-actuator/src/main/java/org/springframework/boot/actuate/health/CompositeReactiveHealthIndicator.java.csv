commented;modifiers;parameterAmount;loc;comment;code
true;public;2;7;/**  * Specify an alternative timeout {@link Health} if a {@link HealthIndicator} failed  * to reply after specified {@code timeout}.  * @param timeout number of milliseconds to wait before using the  * {@code timeoutHealth}  * @param timeoutHealth the {@link Health} to use if an health indicator reached the  * {@code timeout}  * @return this instance  */ ;/**  * Specify an alternative timeout {@link Health} if a {@link HealthIndicator} failed  * to reply after specified {@code timeout}.  * @param timeout number of milliseconds to wait before using the  * {@code timeoutHealth}  * @param timeoutHealth the {@link Health} to use if an health indicator reached the  * {@code timeout}  * @return this instance  */ public CompositeReactiveHealthIndicator timeoutStrategy(long timeout, Health timeoutHealth) {     this.timeout = timeout.     this.timeoutHealth = (timeoutHealth != null) ? timeoutHealth : Health.unknown().build().     return this. }
false;public;0;8;;@Override public Mono<Health> health() {     return Flux.fromIterable(this.registry.getAll().entrySet()).flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose))).collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate). }
