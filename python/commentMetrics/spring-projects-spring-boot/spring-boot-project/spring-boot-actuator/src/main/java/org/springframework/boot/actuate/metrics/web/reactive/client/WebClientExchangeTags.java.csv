commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a {@code method} {@code Tag} for the {@link ClientHttpRequest#getMethod()  * method} of the given {@code request}.  * @param request the request  * @return the method tag  */ ;/**  * Creates a {@code method} {@code Tag} for the {@link ClientHttpRequest#getMethod()  * method} of the given {@code request}.  * @param request the request  * @return the method tag  */ public static Tag method(ClientRequest request) {     return Tag.of("method", request.method().name()). }
true;public,static;1;5;/**  * Creates a {@code uri} {@code Tag} for the URI path of the given {@code request}.  * @param request the request  * @return the uri tag  */ ;/**  * Creates a {@code uri} {@code Tag} for the URI path of the given {@code request}.  * @param request the request  * @return the uri tag  */ public static Tag uri(ClientRequest request) {     String uri = (String) request.attribute(URI_TEMPLATE_ATTRIBUTE).orElseGet(() -> request.url().getPath()).     return Tag.of("uri", extractPath(uri)). }
false;private,static;1;4;;private static String extractPath(String url) {     String path = PATTERN_BEFORE_PATH.matcher(url).replaceFirst("").     return (path.startsWith("/") ? path : "/" + path). }
true;public,static;1;3;/**  * Creates a {@code status} {@code Tag} derived from the  * {@link ClientResponse#statusCode()} of the given {@code response}.  * @param response the response  * @return the status tag  */ ;/**  * Creates a {@code status} {@code Tag} derived from the  * {@link ClientResponse#statusCode()} of the given {@code response}.  * @param response the response  * @return the status tag  */ public static Tag status(ClientResponse response) {     return Tag.of("status", String.valueOf(response.statusCode().value())). }
true;public,static;1;3;/**  * Creates a {@code status} {@code Tag} derived from the exception thrown by the  * client.  * @param throwable the exception  * @return the status tag  */ ;/**  * Creates a {@code status} {@code Tag} derived from the exception thrown by the  * client.  * @param throwable the exception  * @return the status tag  */ public static Tag status(Throwable throwable) {     return (throwable instanceof IOException) ? IO_ERROR : CLIENT_ERROR. }
true;public,static;1;7;/**  * Create a {@code clientName} {@code Tag} derived from the  * {@link java.net.URI#getHost host} of the {@link ClientRequest#url() URL} of the  * given {@code request}.  * @param request the request  * @return the clientName tag  */ ;/**  * Create a {@code clientName} {@code Tag} derived from the  * {@link java.net.URI#getHost host} of the {@link ClientRequest#url() URL} of the  * given {@code request}.  * @param request the request  * @return the clientName tag  */ public static Tag clientName(ClientRequest request) {     String host = request.url().getHost().     if (host == null) {         return CLIENT_NAME_NONE.     }     return Tag.of("clientName", host). }
true;public,static;1;26;/**  * Creates an {@code outcome} {@code Tag} derived from the  * {@link ClientResponse#statusCode() status} of the given {@code response}.  * @param response the response  * @return the outcome tag  * @since 2.2.0  */ ;/**  * Creates an {@code outcome} {@code Tag} derived from the  * {@link ClientResponse#statusCode() status} of the given {@code response}.  * @param response the response  * @return the outcome tag  * @since 2.2.0  */ public static Tag outcome(ClientResponse response) {     try {         if (response != null) {             HttpStatus status = response.statusCode().             if (status.is1xxInformational()) {                 return OUTCOME_INFORMATIONAL.             }             if (status.is2xxSuccessful()) {                 return OUTCOME_SUCCESS.             }             if (status.is3xxRedirection()) {                 return OUTCOME_REDIRECTION.             }             if (status.is4xxClientError()) {                 return OUTCOME_CLIENT_ERROR.             }             if (status.is5xxServerError()) {                 return OUTCOME_SERVER_ERROR.             }         }         return OUTCOME_UNKNOWN.     } catch (IllegalArgumentException exc) {         return OUTCOME_UNKNOWN.     } }
