commented;modifiers;parameterAmount;loc;comment;code
false;public;3;15;;@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {     long startTime = System.nanoTime().     ClientHttpResponse response = null.     try {         response = execution.execute(request, body).         return response.     } finally {         getTimeBuilder(request, response).register(this.meterRegistry).record(System.nanoTime() - startTime, TimeUnit.NANOSECONDS).         urlTemplate.remove().     } }
false;public;2;5;;@Override public URI expand(String url, Map<String, ?> arguments) {     urlTemplate.set(url).     return delegate.expand(url, arguments). }
false;public;2;5;;@Override public URI expand(String url, Object... arguments) {     urlTemplate.set(url).     return delegate.expand(url, arguments). }
false;;1;17;;UriTemplateHandler createUriTemplateHandler(UriTemplateHandler delegate) {     return new UriTemplateHandler() {          @Override         public URI expand(String url, Map<String, ?> arguments) {             urlTemplate.set(url).             return delegate.expand(url, arguments).         }          @Override         public URI expand(String url, Object... arguments) {             urlTemplate.set(url).             return delegate.expand(url, arguments).         }     }. }
false;private;2;6;;private Timer.Builder getTimeBuilder(HttpRequest request, ClientHttpResponse response) {     return Timer.builder(this.metricName).tags(this.tagProvider.getTags(urlTemplate.get(), request, response)).description("Timer of RestTemplate operation"). }
