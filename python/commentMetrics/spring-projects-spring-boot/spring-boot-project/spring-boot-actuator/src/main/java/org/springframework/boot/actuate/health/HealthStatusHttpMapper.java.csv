commented;modifiers;parameterAmount;loc;comment;code
false;private;0;5;;private void setupDefaultStatusMapping() {     addStatusMapping(Status.DOWN, WebEndpointResponse.STATUS_SERVICE_UNAVAILABLE).     addStatusMapping(Status.OUT_OF_SERVICE, WebEndpointResponse.STATUS_SERVICE_UNAVAILABLE). }
true;public;1;4;/**  * Set specific status mappings.  * @param statusMapping a map of health status code to HTTP status code  */ ;/**  * Set specific status mappings.  * @param statusMapping a map of health status code to HTTP status code  */ public void setStatusMapping(Map<String, Integer> statusMapping) {     Assert.notNull(statusMapping, "StatusMapping must not be null").     this.statusMapping = new HashMap<>(statusMapping). }
true;public;1;4;/**  * Add specific status mappings to the existing set.  * @param statusMapping a map of health status code to HTTP status code  */ ;/**  * Add specific status mappings to the existing set.  * @param statusMapping a map of health status code to HTTP status code  */ public void addStatusMapping(Map<String, Integer> statusMapping) {     Assert.notNull(statusMapping, "StatusMapping must not be null").     this.statusMapping.putAll(statusMapping). }
true;public;2;5;/**  * Add a status mapping to the existing set.  * @param status the status to map  * @param httpStatus the http status  */ ;/**  * Add a status mapping to the existing set.  * @param status the status to map  * @param httpStatus the http status  */ public void addStatusMapping(Status status, Integer httpStatus) {     Assert.notNull(status, "Status must not be null").     Assert.notNull(httpStatus, "HttpStatus must not be null").     addStatusMapping(status.getCode(), httpStatus). }
true;public;2;5;/**  * Add a status mapping to the existing set.  * @param statusCode the status code to map  * @param httpStatus the http status  */ ;/**  * Add a status mapping to the existing set.  * @param statusCode the status code to map  * @param httpStatus the http status  */ public void addStatusMapping(String statusCode, Integer httpStatus) {     Assert.notNull(statusCode, "StatusCode must not be null").     Assert.notNull(httpStatus, "HttpStatus must not be null").     this.statusMapping.put(statusCode, httpStatus). }
true;public;0;3;/**  * Return an immutable view of the status mapping.  * @return the http status codes mapped by status name  */ ;/**  * Return an immutable view of the status mapping.  * @return the http status codes mapped by status name  */ public Map<String, Integer> getStatusMapping() {     return Collections.unmodifiableMap(this.statusMapping). }
true;public;1;10;/**  * Map the specified {@link Status} to an HTTP status code.  * @param status the health {@link Status}  * @return the corresponding HTTP status code  */ ;/**  * Map the specified {@link Status} to an HTTP status code.  * @param status the health {@link Status}  * @return the corresponding HTTP status code  */ public int mapStatus(Status status) {     String code = getUniformValue(status.getCode()).     if (code != null) {         return this.statusMapping.entrySet().stream().filter((entry) -> code.equals(getUniformValue(entry.getKey()))).map(Map.Entry::getValue).findFirst().orElse(WebEndpointResponse.STATUS_OK).     }     return WebEndpointResponse.STATUS_OK. }
false;private;1;12;;private String getUniformValue(String code) {     if (code == null) {         return null.     }     StringBuilder builder = new StringBuilder().     for (char ch : code.toCharArray()) {         if (Character.isAlphabetic(ch) || Character.isDigit(ch)) {             builder.append(Character.toLowerCase(ch)).         }     }     return builder.toString(). }
