commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;2;12;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     Mono<?> principal = (this.includes.contains(Include.PRINCIPAL) ? exchange.getPrincipal().cast(Object.class).defaultIfEmpty(NONE) : Mono.just(NONE)).     Mono<?> session = (this.includes.contains(Include.SESSION_ID) ? exchange.getSession() : Mono.just(NONE)).     return Mono.zip(principal, session).flatMap((tuple) -> filter(exchange, chain, asType(tuple.getT1(), Principal.class), asType(tuple.getT2(), WebSession.class))). }
false;private;2;6;;private <T> T asType(Object object, Class<T> type) {     if (type.isInstance(object)) {         return type.cast(object).     }     return null. }
false;private;4;15;;private Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain, Principal principal, WebSession session) {     ServerWebExchangeTraceableRequest request = new ServerWebExchangeTraceableRequest(exchange).     final HttpTrace trace = this.tracer.receivedRequest(request).     exchange.getResponse().beforeCommit(() -> {         TraceableServerHttpResponse response = new TraceableServerHttpResponse(exchange.getResponse()).         this.tracer.sendingResponse(trace, response, () -> principal, () -> getStartedSessionId(session)).         this.repository.add(trace).         return Mono.empty().     }).     return chain.filter(exchange). }
false;private;1;3;;private String getStartedSessionId(WebSession session) {     return (session != null && session.isStarted()) ? session.getId() : null. }
