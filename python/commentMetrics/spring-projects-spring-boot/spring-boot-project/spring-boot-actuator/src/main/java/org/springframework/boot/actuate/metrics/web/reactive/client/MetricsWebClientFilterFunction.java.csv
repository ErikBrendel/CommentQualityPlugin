commented;modifiers;parameterAmount;loc;comment;code
false;public;2;18;;@Override public Mono<ClientResponse> filter(ClientRequest clientRequest, ExchangeFunction exchangeFunction) {     return exchangeFunction.exchange(clientRequest).doOnEach((signal) -> {         if (!signal.isOnComplete()) {             Long startTime = signal.getContext().get(METRICS_WEBCLIENT_START_TIME).             ClientResponse clientResponse = signal.get().             Throwable throwable = signal.getThrowable().             Iterable<Tag> tags = this.tagProvider.tags(clientRequest, clientResponse, throwable).             Timer.builder(this.metricName).tags(tags).description("Timer of WebClient operation").register(this.meterRegistry).record(System.nanoTime() - startTime, TimeUnit.NANOSECONDS).         }     }).subscriberContext((context) -> context.put(METRICS_WEBCLIENT_START_TIME, System.nanoTime())). }
