commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the content.  * @return the details of the info or an empty map.  */ ;/**  * Return the content.  * @return the details of the info or an empty map.  */ @JsonAnyGetter public Map<String, Object> getDetails() {     return this.details. }
false;public;1;3;;public Object get(String id) {     return this.details.get(id). }
false;public;2;9;;@SuppressWarnings("unchecked") public <T> T get(String id, Class<T> type) {     Object value = get(id).     if (value != null && type != null && !type.isInstance(value)) {         throw new IllegalStateException("Info entry is not of required type [" + type.getName() + "]: " + value).     }     return (T) value. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj != null && obj instanceof Info) {         Info other = (Info) obj.         return this.details.equals(other.details).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return this.details.hashCode(). }
false;public;0;4;;@Override public String toString() {     return getDetails().toString(). }
true;public;2;4;/**  * Record detail using given {@code key} and {@code value}.  * @param key the detail key  * @param value the detail value  * @return this {@link Builder} instance  */ ;/**  * Record detail using given {@code key} and {@code value}.  * @param key the detail key  * @param value the detail value  * @return this {@link Builder} instance  */ public Builder withDetail(String key, Object value) {     this.content.put(key, value).     return this. }
true;public;1;4;/**  * Record several details.  * @param details the details  * @return this {@link Builder} instance  * @see #withDetail(String, Object)  */ ;/**  * Record several details.  * @param details the details  * @return this {@link Builder} instance  * @see #withDetail(String, Object)  */ public Builder withDetails(Map<String, Object> details) {     this.content.putAll(details).     return this. }
true;public;0;3;/**  * Create a new {@link Info} instance based on the state of this builder.  * @return a new {@link Info} instance  */ ;/**  * Create a new {@link Info} instance based on the state of this builder.  * @return a new {@link Info} instance  */ public Info build() {     return new Info(this). }
