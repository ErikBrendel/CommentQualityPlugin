commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@ReadOperation public ApplicationBeans beans() {     Map<String, ContextBeans> contexts = new HashMap<>().     ConfigurableApplicationContext context = this.context.     while (context != null) {         contexts.put(context.getId(), ContextBeans.describing(context)).         context = getConfigurableParent(context).     }     return new ApplicationBeans(contexts). }
false;private,static;1;8;;private static ConfigurableApplicationContext getConfigurableParent(ConfigurableApplicationContext context) {     ApplicationContext parent = context.getParent().     if (parent instanceof ConfigurableApplicationContext) {         return (ConfigurableApplicationContext) parent.     }     return null. }
false;public;0;3;;public Map<String, ContextBeans> getContexts() {     return this.contexts. }
false;public;0;3;;public String getParentId() {     return this.parentId. }
false;public;0;3;;public Map<String, BeanDescriptor> getBeans() {     return this.beans. }
false;private,static;1;8;;private static ContextBeans describing(ConfigurableApplicationContext context) {     if (context == null) {         return null.     }     ConfigurableApplicationContext parent = getConfigurableParent(context).     return new ContextBeans(describeBeans(context.getBeanFactory()), (parent != null) ? parent.getId() : null). }
false;private,static;1;11;;private static Map<String, BeanDescriptor> describeBeans(ConfigurableListableBeanFactory beanFactory) {     Map<String, BeanDescriptor> beans = new HashMap<>().     for (String beanName : beanFactory.getBeanDefinitionNames()) {         BeanDefinition definition = beanFactory.getBeanDefinition(beanName).         if (isBeanEligible(beanName, definition, beanFactory)) {             beans.put(beanName, describeBean(beanName, definition, beanFactory)).         }     }     return beans. }
false;private,static;3;6;;private static BeanDescriptor describeBean(String name, BeanDefinition definition, ConfigurableListableBeanFactory factory) {     return new BeanDescriptor(factory.getAliases(name), definition.getScope(), factory.getType(name), definition.getResourceDescription(), factory.getDependenciesForBean(name)). }
false;private,static;3;5;;private static boolean isBeanEligible(String beanName, BeanDefinition bd, ConfigurableBeanFactory bf) {     return (bd.getRole() != BeanDefinition.ROLE_INFRASTRUCTURE && (!bd.isLazyInit() || bf.containsSingleton(beanName))). }
false;public;0;3;;public String[] getAliases() {     return this.aliases. }
false;public;0;3;;public String getScope() {     return this.scope. }
false;public;0;3;;public Class<?> getType() {     return this.type. }
false;public;0;3;;public String getResource() {     return this.resource. }
false;public;0;3;;public String[] getDependencies() {     return this.dependencies. }
