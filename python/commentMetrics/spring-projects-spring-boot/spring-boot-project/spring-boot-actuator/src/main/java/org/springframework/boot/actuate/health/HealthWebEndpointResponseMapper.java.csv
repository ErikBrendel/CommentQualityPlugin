commented;modifiers;parameterAmount;loc;comment;code
true;public;2;10;/**  * Maps the given {@code health} details to a {@link WebEndpointResponse}, honouring  * the mapper's default {@link ShowDetails} using the given {@code securityContext}.  * <p>  * If the current user does not have the right to see the details, the  * {@link Supplier} is not invoked and a 404 response is returned instead.  * @param health the provider of health details, invoked if the current user has the  * right to see them  * @param securityContext the security context  * @return the mapped response  */ ;/**  * Maps the given {@code health} details to a {@link WebEndpointResponse}, honouring  * the mapper's default {@link ShowDetails} using the given {@code securityContext}.  * <p>  * If the current user does not have the right to see the details, the  * {@link Supplier} is not invoked and a 404 response is returned instead.  * @param health the provider of health details, invoked if the current user has the  * right to see them  * @param securityContext the security context  * @return the mapped response  */ public WebEndpointResponse<Health> mapDetails(Supplier<Health> health, SecurityContext securityContext) {     if (canSeeDetails(securityContext, this.showDetails)) {         Health healthDetails = health.get().         if (healthDetails != null) {             return createWebEndpointResponse(healthDetails).         }     }     return new WebEndpointResponse<>(WebEndpointResponse.STATUS_NOT_FOUND). }
true;public;2;4;/**  * Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the  * mapper's default {@link ShowDetails} using the given {@code securityContext}.  * @param health the health to map  * @param securityContext the security context  * @return the mapped response  */ ;/**  * Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the  * mapper's default {@link ShowDetails} using the given {@code securityContext}.  * @param health the health to map  * @param securityContext the security context  * @return the mapped response  */ public WebEndpointResponse<Health> map(Health health, SecurityContext securityContext) {     return map(health, securityContext, this.showDetails). }
true;public;3;7;/**  * Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the given  * {@code showDetails} using the given {@code securityContext}.  * @param health the health to map  * @param securityContext the security context  * @param showDetails when to show details in the response  * @return the mapped response  */ ;/**  * Maps the given {@code health} to a {@link WebEndpointResponse}, honouring the given  * {@code showDetails} using the given {@code securityContext}.  * @param health the health to map  * @param securityContext the security context  * @param showDetails when to show details in the response  * @return the mapped response  */ public WebEndpointResponse<Health> map(Health health, SecurityContext securityContext, ShowDetails showDetails) {     if (!canSeeDetails(securityContext, showDetails)) {         health = Health.status(health.getStatus()).build().     }     return createWebEndpointResponse(health). }
false;private;1;4;;private WebEndpointResponse<Health> createWebEndpointResponse(Health health) {     Integer status = this.statusHttpMapper.mapStatus(health.getStatus()).     return new WebEndpointResponse<>(health, status). }
false;private;2;10;;private boolean canSeeDetails(SecurityContext securityContext, ShowDetails showDetails) {     if (showDetails == ShowDetails.NEVER || (showDetails == ShowDetails.WHEN_AUTHORIZED && (securityContext.getPrincipal() == null || !isUserInRole(securityContext)))) {         return false.     }     return true. }
false;private;1;11;;private boolean isUserInRole(SecurityContext securityContext) {     if (CollectionUtils.isEmpty(this.authorizedRoles)) {         return true.     }     for (String role : this.authorizedRoles) {         if (securityContext.isUserInRole(role)) {             return true.         }     }     return false. }
