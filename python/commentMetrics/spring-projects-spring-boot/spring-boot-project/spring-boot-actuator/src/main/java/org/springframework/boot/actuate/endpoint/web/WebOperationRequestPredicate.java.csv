commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the path for the operation.  * @return the path  */ ;/**  * Returns the path for the operation.  * @return the path  */ public String getPath() {     return this.path. }
true;public;0;3;/**  * Returns the HTTP method for the operation.  * @return the HTTP method  */ ;/**  * Returns the HTTP method for the operation.  * @return the HTTP method  */ public WebEndpointHttpMethod getHttpMethod() {     return this.httpMethod. }
true;public;0;3;/**  * Returns the media types that the operation consumes.  * @return the consumed media types  */ ;/**  * Returns the media types that the operation consumes.  * @return the consumed media types  */ public Collection<String> getConsumes() {     return Collections.unmodifiableCollection(this.consumes). }
true;public;0;3;/**  * Returns the media types that the operation produces.  * @return the produced media types  */ ;/**  * Returns the media types that the operation produces.  * @return the produced media types  */ public Collection<String> getProduces() {     return Collections.unmodifiableCollection(this.produces). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     WebOperationRequestPredicate other = (WebOperationRequestPredicate) obj.     boolean result = true.     result = result && this.consumes.equals(other.consumes).     result = result && this.httpMethod == other.httpMethod.     result = result && this.canonicalPath.equals(other.canonicalPath).     result = result && this.produces.equals(other.produces).     return result. }
false;public;0;10;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + this.consumes.hashCode().     result = prime * result + this.httpMethod.hashCode().     result = prime * result + this.canonicalPath.hashCode().     result = prime * result + this.produces.hashCode().     return result. }
false;public;0;14;;@Override public String toString() {     StringBuilder result = new StringBuilder(this.httpMethod + " to path '" + this.path + "'").     if (!CollectionUtils.isEmpty(this.consumes)) {         result.append(" consumes: ").append(StringUtils.collectionToCommaDelimitedString(this.consumes)).     }     if (!CollectionUtils.isEmpty(this.produces)) {         result.append(" produces: ").append(StringUtils.collectionToCommaDelimitedString(this.produces)).     }     return result.toString(). }
