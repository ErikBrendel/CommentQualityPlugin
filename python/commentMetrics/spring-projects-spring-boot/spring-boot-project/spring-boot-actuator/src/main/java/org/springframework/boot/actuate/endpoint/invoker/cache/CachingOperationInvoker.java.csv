commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the maximum time in milliseconds that a response can be cached.  * @return the time to live of a response  */ ;/**  * Return the maximum time in milliseconds that a response can be cached.  * @return the time to live of a response  */ public long getTimeToLive() {     return this.timeToLive. }
false;public;1;14;;@Override public Object invoke(InvocationContext context) {     if (hasInput(context)) {         return this.invoker.invoke(context).     }     long accessTime = System.currentTimeMillis().     CachedResponse cached = this.cachedResponse.     if (cached == null || cached.isStale(accessTime, this.timeToLive)) {         Object response = this.invoker.invoke(context).         this.cachedResponse = new CachedResponse(response, accessTime).         return response.     }     return cached.getResponse(). }
false;private;1;10;;private boolean hasInput(InvocationContext context) {     if (context.getSecurityContext().getPrincipal() != null) {         return true.     }     Map<String, Object> arguments = context.getArguments().     if (!ObjectUtils.isEmpty(arguments)) {         return arguments.values().stream().anyMatch(Objects::nonNull).     }     return false. }
true;public,static;2;6;/**  * Apply caching configuration when appropriate to the given invoker.  * @param invoker the invoker to wrap  * @param timeToLive the maximum time in milliseconds that a response can be cached  * @return a caching version of the invoker or the original instance if caching is not  * required  */ ;/**  * Apply caching configuration when appropriate to the given invoker.  * @param invoker the invoker to wrap  * @param timeToLive the maximum time in milliseconds that a response can be cached  * @return a caching version of the invoker or the original instance if caching is not  * required  */ public static OperationInvoker apply(OperationInvoker invoker, long timeToLive) {     if (timeToLive > 0) {         return new CachingOperationInvoker(invoker, timeToLive).     }     return invoker. }
false;public;2;3;;public boolean isStale(long accessTime, long timeToLive) {     return (accessTime - this.creationTime) >= timeToLive. }
false;public;0;3;;public Object getResponse() {     return this.response. }
