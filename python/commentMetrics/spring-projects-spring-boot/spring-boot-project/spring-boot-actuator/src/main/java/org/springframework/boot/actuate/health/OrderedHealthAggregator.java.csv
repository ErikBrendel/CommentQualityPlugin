commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Set the ordering of the status.  * @param statusOrder an ordered list of the status  */ ;/**  * Set the ordering of the status.  * @param statusOrder an ordered list of the status  */ public void setStatusOrder(Status... statusOrder) {     String[] order = new String[statusOrder.length].     for (int i = 0. i < statusOrder.length. i++) {         order[i] = statusOrder[i].getCode().     }     setStatusOrder(Arrays.asList(order)). }
true;public;1;4;/**  * Set the ordering of the status.  * @param statusOrder an ordered list of the status codes  */ ;/**  * Set the ordering of the status.  * @param statusOrder an ordered list of the status codes  */ public void setStatusOrder(List<String> statusOrder) {     Assert.notNull(statusOrder, "StatusOrder must not be null").     this.statusOrder = statusOrder. }
false;protected;1;17;;@Override protected Status aggregateStatus(List<Status> candidates) {     // Only sort those status instances that we know about     List<Status> filteredCandidates = new ArrayList<>().     for (Status candidate : candidates) {         if (this.statusOrder.contains(candidate.getCode())) {             filteredCandidates.add(candidate).         }     }     // If no status is given return UNKNOWN     if (filteredCandidates.isEmpty()) {         return Status.UNKNOWN.     }     // Sort given Status instances by configured order     filteredCandidates.sort(new StatusComparator(this.statusOrder)).     return filteredCandidates.get(0). }
false;public;2;6;;@Override public int compare(Status s1, Status s2) {     int i1 = this.statusOrder.indexOf(s1.getCode()).     int i2 = this.statusOrder.indexOf(s2.getCode()).     return (i1 < i2) ? -1 : (i1 != i2) ? 1 : s1.getCode().compareTo(s2.getCode()). }
