commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;9;;@Override public final Mono<Health> health() {     try {         return doHealthCheck(new Health.Builder()).onErrorResume(this::handleFailure).     } catch (Exception ex) {         return handleFailure(ex).     } }
false;private;1;3;;private Mono<Health> handleFailure(Throwable ex) {     return Mono.just(new Health.Builder().down(ex).build()). }
true;protected,abstract;1;1;/**  * Actual health check logic. If an error occurs in the pipeline it will be handled  * automatically.  * @param builder the {@link Health.Builder} to report health status and details  * @return a {@link Mono} that provides the {@link Health}  */ ;/**  * Actual health check logic. If an error occurs in the pipeline it will be handled  * automatically.  * @param builder the {@link Health.Builder} to report health status and details  * @return a {@link Mono} that provides the {@link Health}  */ protected abstract Mono<Health> doHealthCheck(Health.Builder builder).
