commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public void register(String name, HealthIndicator healthIndicator) {     Assert.notNull(healthIndicator, "HealthIndicator must not be null").     Assert.notNull(name, "Name must not be null").     synchronized (this.monitor) {         HealthIndicator existing = this.healthIndicators.putIfAbsent(name, healthIndicator).         if (existing != null) {             throw new IllegalStateException("HealthIndicator with name '" + name + "' already registered").         }     } }
false;public;1;7;;@Override public HealthIndicator unregister(String name) {     Assert.notNull(name, "Name must not be null").     synchronized (this.monitor) {         return this.healthIndicators.remove(name).     } }
false;public;1;7;;@Override public HealthIndicator get(String name) {     Assert.notNull(name, "Name must not be null").     synchronized (this.monitor) {         return this.healthIndicators.get(name).     } }
false;public;0;7;;@Override public Map<String, HealthIndicator> getAll() {     synchronized (this.monitor) {         return Collections.unmodifiableMap(new LinkedHashMap<>(this.healthIndicators)).     } }
