commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected O createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker) {     return EndpointDiscoverer.this.createOperation(endpointId, operationMethod, invoker). }
false;private;2;14;;private DiscoveredOperationsFactory<O> getOperationsFactory(ParameterValueMapper parameterValueMapper, Collection<OperationInvokerAdvisor> invokerAdvisors) {     return new DiscoveredOperationsFactory<O>(parameterValueMapper, invokerAdvisors) {          @Override         protected O createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker) {             return EndpointDiscoverer.this.createOperation(endpointId, operationMethod, invoker).         }     }. }
false;public,final;0;7;;@Override public final Collection<E> getEndpoints() {     if (this.endpoints == null) {         this.endpoints = discoverEndpoints().     }     return this.endpoints. }
false;private;0;5;;private Collection<E> discoverEndpoints() {     Collection<EndpointBean> endpointBeans = createEndpointBeans().     addExtensionBeans(endpointBeans).     return convertToEndpoints(endpointBeans). }
false;private;0;17;;private Collection<EndpointBean> createEndpointBeans() {     Map<EndpointId, EndpointBean> byId = new LinkedHashMap<>().     String[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(this.applicationContext, Endpoint.class).     for (String beanName : beanNames) {         if (!ScopedProxyUtils.isScopedTarget(beanName)) {             EndpointBean endpointBean = createEndpointBean(beanName).             EndpointBean previous = byId.putIfAbsent(endpointBean.getId(), endpointBean).             Assert.state(previous == null, () -> "Found two endpoints with the id '" + endpointBean.getId() + "': '" + endpointBean.getBeanName() + "' and '" + previous.getBeanName() + "'").         }     }     return byId.values(). }
false;private;1;4;;private EndpointBean createEndpointBean(String beanName) {     Object bean = this.applicationContext.getBean(beanName).     return new EndpointBean(beanName, bean). }
false;private;1;15;;private void addExtensionBeans(Collection<EndpointBean> endpointBeans) {     Map<EndpointId, EndpointBean> byId = endpointBeans.stream().collect(Collectors.toMap(EndpointBean::getId, Function.identity())).     String[] beanNames = BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(this.applicationContext, EndpointExtension.class).     for (String beanName : beanNames) {         ExtensionBean extensionBean = createExtensionBean(beanName).         EndpointBean endpointBean = byId.get(extensionBean.getEndpointId()).         Assert.state(endpointBean != null, () -> ("Invalid extension '" + extensionBean.getBeanName() + "': no endpoint found with id '" + extensionBean.getEndpointId() + "'")).         addExtensionBean(endpointBean, extensionBean).     } }
false;private;1;4;;private ExtensionBean createExtensionBean(String beanName) {     Object bean = this.applicationContext.getBean(beanName).     return new ExtensionBean(beanName, bean). }
false;private;2;11;;private void addExtensionBean(EndpointBean endpointBean, ExtensionBean extensionBean) {     if (isExtensionExposed(endpointBean, extensionBean)) {         Assert.state(isEndpointExposed(endpointBean) || isEndpointFiltered(endpointBean), () -> "Endpoint bean '" + endpointBean.getBeanName() + "' cannot support the extension bean '" + extensionBean.getBeanName() + "'").         endpointBean.addExtension(extensionBean).     } }
false;private;1;9;;private Collection<E> convertToEndpoints(Collection<EndpointBean> endpointBeans) {     Set<E> endpoints = new LinkedHashSet<>().     for (EndpointBean endpointBean : endpointBeans) {         if (isEndpointExposed(endpointBean)) {             endpoints.add(convertToEndpoint(endpointBean)).         }     }     return Collections.unmodifiableSet(endpoints). }
false;private;1;21;;private E convertToEndpoint(EndpointBean endpointBean) {     MultiValueMap<OperationKey, O> indexed = new LinkedMultiValueMap<>().     EndpointId id = endpointBean.getId().     addOperations(indexed, id, endpointBean.getBean(), false).     if (endpointBean.getExtensions().size() > 1) {         String extensionBeans = endpointBean.getExtensions().stream().map(ExtensionBean::getBeanName).collect(Collectors.joining(", ")).         throw new IllegalStateException("Found multiple extensions for the endpoint bean " + endpointBean.getBeanName() + " (" + extensionBeans + ")").     }     for (ExtensionBean extensionBean : endpointBean.getExtensions()) {         addOperations(indexed, id, extensionBean.getBean(), true).     }     assertNoDuplicateOperations(endpointBean, indexed).     List<O> operations = indexed.values().stream().map(this::getLast).filter(Objects::nonNull).collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)).     return createEndpoint(endpointBean.getBean(), id, endpointBean.isEnabledByDefault(), operations). }
false;private;4;13;;private void addOperations(MultiValueMap<OperationKey, O> indexed, EndpointId id, Object target, boolean replaceLast) {     Set<OperationKey> replacedLast = new HashSet<>().     Collection<O> operations = this.operationsFactory.createOperations(id, target).     for (O operation : operations) {         OperationKey key = createOperationKey(operation).         O last = getLast(indexed.get(key)).         if (replaceLast && replacedLast.add(key) && last != null) {             indexed.get(key).remove(last).         }         indexed.add(key, operation).     } }
false;private;1;3;;private <T> T getLast(List<T> list) {     return CollectionUtils.isEmpty(list) ? null : list.get(list.size() - 1). }
false;private;2;16;;private void assertNoDuplicateOperations(EndpointBean endpointBean, MultiValueMap<OperationKey, O> indexed) {     List<OperationKey> duplicates = indexed.entrySet().stream().filter((entry) -> entry.getValue().size() > 1).map(Map.Entry::getKey).collect(Collectors.toList()).     if (!duplicates.isEmpty()) {         Set<ExtensionBean> extensions = endpointBean.getExtensions().         String extensionBeanNames = extensions.stream().map(ExtensionBean::getBeanName).collect(Collectors.joining(", ")).         throw new IllegalStateException("Unable to map duplicate endpoint operations: " + duplicates.toString() + " to " + endpointBean.getBeanName() + (extensions.isEmpty() ? "" : " (" + extensionBeanNames + ")")).     } }
false;private;2;5;;private boolean isExtensionExposed(EndpointBean endpointBean, ExtensionBean extensionBean) {     return isFilterMatch(extensionBean.getFilter(), endpointBean) && isExtensionExposed(extensionBean.getBean()). }
true;protected;1;3;/**  * Determine if an extension bean should be exposed. Subclasses can override this  * method to provide additional logic.  * @param extensionBean the extension bean  * @return {@code true} if the extension is exposed  */ ;/**  * Determine if an extension bean should be exposed. Subclasses can override this  * method to provide additional logic.  * @param extensionBean the extension bean  * @return {@code true} if the extension is exposed  */ protected boolean isExtensionExposed(Object extensionBean) {     return true. }
false;private;1;5;;private boolean isEndpointExposed(EndpointBean endpointBean) {     return isFilterMatch(endpointBean.getFilter(), endpointBean) && !isEndpointFiltered(endpointBean) && isEndpointExposed(endpointBean.getBean()). }
true;protected;1;3;/**  * Determine if an endpoint bean should be exposed. Subclasses can override this  * method to provide additional logic.  * @param endpointBean the endpoint bean  * @return {@code true} if the endpoint is exposed  */ ;/**  * Determine if an endpoint bean should be exposed. Subclasses can override this  * method to provide additional logic.  * @param endpointBean the endpoint bean  * @return {@code true} if the endpoint is exposed  */ protected boolean isEndpointExposed(Object endpointBean) {     return true. }
false;private;1;8;;private boolean isEndpointFiltered(EndpointBean endpointBean) {     for (EndpointFilter<E> filter : this.filters) {         if (!isFilterMatch(filter, endpointBean)) {             return true.         }     }     return false. }
false;private;2;19;;@SuppressWarnings("unchecked") private boolean isFilterMatch(Class<?> filter, EndpointBean endpointBean) {     if (!isEndpointExposed(endpointBean.getBean())) {         return false.     }     if (filter == null) {         return true.     }     E endpoint = getFilterEndpoint(endpointBean).     Class<?> generic = ResolvableType.forClass(EndpointFilter.class, filter).resolveGeneric(0).     if (generic == null || generic.isInstance(endpoint)) {         EndpointFilter<E> instance = (EndpointFilter<E>) BeanUtils.instantiateClass(filter).         return isFilterMatch(instance, endpoint).     }     return false. }
false;private;2;3;;private boolean isFilterMatch(EndpointFilter<E> filter, EndpointBean endpointBean) {     return isFilterMatch(filter, getFilterEndpoint(endpointBean)). }
false;private;2;6;;@SuppressWarnings("unchecked") private boolean isFilterMatch(EndpointFilter<E> filter, E endpoint) {     return LambdaSafe.callback(EndpointFilter.class, filter, endpoint).withLogger(EndpointDiscoverer.class).invokeAnd((f) -> f.match(endpoint)).get(). }
false;private;1;9;;private E getFilterEndpoint(EndpointBean endpointBean) {     E endpoint = this.filterEndpoints.get(endpointBean).     if (endpoint == null) {         endpoint = createEndpoint(endpointBean.getBean(), endpointBean.getId(), endpointBean.isEnabledByDefault(), Collections.emptySet()).         this.filterEndpoints.put(endpointBean, endpoint).     }     return endpoint. }
false;protected;0;5;;@SuppressWarnings("unchecked") protected Class<? extends E> getEndpointType() {     return (Class<? extends E>) ResolvableType.forClass(EndpointDiscoverer.class, getClass()).resolveGeneric(0). }
true;protected,abstract;4;2;/**  * Factory method called to create the {@link ExposableEndpoint endpoint}.  * @param endpointBean the source endpoint bean  * @param id the ID of the endpoint  * @param enabledByDefault if the endpoint is enabled by default  * @param operations the endpoint operations  * @return a created endpoint (a {@link DiscoveredEndpoint} is recommended)  */ ;/**  * Factory method called to create the {@link ExposableEndpoint endpoint}.  * @param endpointBean the source endpoint bean  * @param id the ID of the endpoint  * @param enabledByDefault if the endpoint is enabled by default  * @param operations the endpoint operations  * @return a created endpoint (a {@link DiscoveredEndpoint} is recommended)  */ protected abstract E createEndpoint(Object endpointBean, EndpointId id, boolean enabledByDefault, Collection<O> operations).
true;protected,abstract;3;2;/**  * Factory method to create an {@link Operation endpoint operation}.  * @param endpointId the endpoint id  * @param operationMethod the operation method  * @param invoker the invoker to use  * @return a created operation  */ ;/**  * Factory method to create an {@link Operation endpoint operation}.  * @param endpointId the endpoint id  * @param operationMethod the operation method  * @param invoker the invoker to use  * @return a created operation  */ protected abstract O createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker).
true;protected,abstract;1;1;/**  * Create an {@link OperationKey} for the given operation.  * @param operation the source operation  * @return the operation key  */ ;/**  * Create an {@link OperationKey} for the given operation.  * @param operation the source operation  * @return the operation key  */ protected abstract OperationKey createOperationKey(O operation).
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return this.key.equals(((OperationKey) obj).key). }
false;public;0;4;;@Override public int hashCode() {     return this.key.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.description.get(). }
false;public;1;3;;public void addExtension(ExtensionBean extensionBean) {     this.extensions.add(extensionBean). }
false;public;0;3;;public Set<ExtensionBean> getExtensions() {     return this.extensions. }
false;private;1;8;;private Class<?> getFilter(Class<?> type) {     AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(type, FilteredEndpoint.class).     if (attributes == null) {         return null.     }     return attributes.getClass("value"). }
false;public;0;3;;public String getBeanName() {     return this.beanName. }
false;public;0;3;;public Object getBean() {     return this.bean. }
false;public;0;3;;public EndpointId getId() {     return this.id. }
false;public;0;3;;public boolean isEnabledByDefault() {     return this.enabledByDefault. }
false;public;0;3;;public Class<?> getFilter() {     return this.filter. }
false;public;0;3;;public String getBeanName() {     return this.beanName. }
false;public;0;3;;public Object getBean() {     return this.bean. }
false;public;0;3;;public EndpointId getEndpointId() {     return this.endpointId. }
false;public;0;3;;public Class<?> getFilter() {     return this.filter. }
