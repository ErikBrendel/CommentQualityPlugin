# id;timestamp;commentText;codeText;commentWords;codeWords
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1525098876;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache, getCacheEntries(_				(name) -> name.equals(cache), safeEqual(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,safe,equal,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1525476995;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), safeEqual(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,safe,equal,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1525500762;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1525697739;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1525856903;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1527317558;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1529063837;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1532738164;Return a {@link CacheDescriptor} for the specified cache._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @ReadOperation 	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager);1540506823;Return a {@link CacheDescriptor} for the specified cache._@param cache the name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return the descriptor of the cache or {@code null} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exists and no_{@code cacheManager} was provided to identify a unique candidate;@ReadOperation_	public CacheEntry cache(@Selector String cache, @Nullable String cacheManager) {_		return extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__	};return,a,link,cache,descriptor,for,the,specified,cache,param,cache,the,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,the,descriptor,of,the,cache,or,code,null,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exists,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;read,operation,public,cache,entry,cache,selector,string,cache,nullable,string,cache,manager,return,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1525098876;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return {@code true} if the cache was cleared or {@code false} if no such cache exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache, getCacheEntries(_				(name) -> name.equals(cache), safeEqual(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,safe,equal,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1525476995;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null}_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), safeEqual(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,safe,equal,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1525500762;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1525697739;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1525856903;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1527317558;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1529063837;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1532738164;Clear the specific {@link Cache}._@param cache then name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exist and no;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,then,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exist,and,no;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> @DeleteOperation 	public boolean clearCache(@Selector String cache, @Nullable String cacheManager);1540506823;Clear the specific {@link Cache}._@param cache the name of the cache_@param cacheManager the name of the cacheManager (can be {@code null} to match all)_@return {@code true} if the cache was cleared or {@code false} if no such cache_exists_@throws NonUniqueCacheException if more than one cache with that name exists and no_{@code cacheManager} was provided to identify a unique candidate;@DeleteOperation_	public boolean clearCache(@Selector String cache, @Nullable String cacheManager) {_		CacheEntry entry = extractUniqueCacheEntry(cache,_				getCacheEntries((name) -> name.equals(cache), isNameMatch(cacheManager)))__		return (entry != null && clearCache(entry))__	};clear,the,specific,link,cache,param,cache,the,name,of,the,cache,param,cache,manager,the,name,of,the,cache,manager,can,be,code,null,to,match,all,return,code,true,if,the,cache,was,cleared,or,code,false,if,no,such,cache,exists,throws,non,unique,cache,exception,if,more,than,one,cache,with,that,name,exists,and,no,code,cache,manager,was,provided,to,identify,a,unique,candidate;delete,operation,public,boolean,clear,cache,selector,string,cache,nullable,string,cache,manager,cache,entry,entry,extract,unique,cache,entry,cache,get,cache,entries,name,name,equals,cache,is,name,match,cache,manager,return,entry,null,clear,cache,entry
CachesEndpoint -> CacheDescriptor -> public String getTarget();1525098876;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1525476995;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1525500762;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1525697739;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1525856903;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1527317558;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1529063837;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1532738164;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> CacheDescriptor -> public String getTarget();1540506823;Return the fully qualified name of the native cache._@return the fully qualified name of the native cache;public String getTarget() {_			return this.target__		};return,the,fully,qualified,name,of,the,native,cache,return,the,fully,qualified,name,of,the,native,cache;public,string,get,target,return,this,target
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1525098876;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1525476995;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1525500762;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1525697739;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1525856903;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1527317558;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1529063837;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1532738164;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> public CachesEndpoint(Map<String, CacheManager> cacheManagers);1540506823;Create a new endpoint with the {@link CacheManager} instances to use._@param cacheManagers the cache managers to use, indexed by name;public CachesEndpoint(Map<String, CacheManager> cacheManagers) {_		this.cacheManagers = new LinkedHashMap<>(cacheManagers)__	};create,a,new,endpoint,with,the,link,cache,manager,instances,to,use,param,cache,managers,the,cache,managers,to,use,indexed,by,name;public,caches,endpoint,map,string,cache,manager,cache,managers,this,cache,managers,new,linked,hash,map,cache,managers
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1525098876;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries((name) -> true, (cacheManager) -> true).forEach((entry) -> {_			Map<String, CacheDescriptor> cmDescriptors = descriptors.computeIfAbsent(_					entry.getCacheManager(), (key) -> new LinkedHashMap<>())__			String cache = entry.getName()__			cmDescriptors.put(cache, new CacheDescriptor(entry.getTarget()))__		})__		return new CachesReport(descriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,name,true,cache,manager,true,for,each,entry,map,string,cache,descriptor,cm,descriptors,descriptors,compute,if,absent,entry,get,cache,manager,key,new,linked,hash,map,string,cache,entry,get,name,cm,descriptors,put,cache,new,cache,descriptor,entry,get,target,return,new,caches,report,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1525476995;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries((name) -> true, (cacheManager) -> true).forEach((entry) -> {_			Map<String, CacheDescriptor> cmDescriptors = descriptors.computeIfAbsent(_					entry.getCacheManager(), (key) -> new LinkedHashMap<>())__			String cache = entry.getName()__			cmDescriptors.put(cache, new CacheDescriptor(entry.getTarget()))__		})__		return new CachesReport(descriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,name,true,cache,manager,true,for,each,entry,map,string,cache,descriptor,cm,descriptors,descriptors,compute,if,absent,entry,get,cache,manager,key,new,linked,hash,map,string,cache,entry,get,name,cm,descriptors,put,cache,new,cache,descriptor,entry,get,target,return,new,caches,report,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1525500762;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		return new CachesReport(descriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,return,new,caches,report,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1525697739;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		return new CachesReport(descriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,return,new,caches,report,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1525856903;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>()__		descriptors.forEach((name, entries) ->_				cacheManagerDescriptors.put(name, new CacheManagerDescriptor(entries)))__		return new CachesReport(cacheManagerDescriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,map,string,cache,manager,descriptor,cache,manager,descriptors,new,linked,hash,map,descriptors,for,each,name,entries,cache,manager,descriptors,put,name,new,cache,manager,descriptor,entries,return,new,caches,report,cache,manager,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1527317558;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>()__		descriptors.forEach((name, entries) -> cacheManagerDescriptors.put(name,_				new CacheManagerDescriptor(entries)))__		return new CachesReport(cacheManagerDescriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,map,string,cache,manager,descriptor,cache,manager,descriptors,new,linked,hash,map,descriptors,for,each,name,entries,cache,manager,descriptors,put,name,new,cache,manager,descriptor,entries,return,new,caches,report,cache,manager,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1529063837;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>()__		descriptors.forEach((name, entries) -> cacheManagerDescriptors.put(name,_				new CacheManagerDescriptor(entries)))__		return new CachesReport(cacheManagerDescriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,map,string,cache,manager,descriptor,cache,manager,descriptors,new,linked,hash,map,descriptors,for,each,name,entries,cache,manager,descriptors,put,name,new,cache,manager,descriptor,entries,return,new,caches,report,cache,manager,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1532738164;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>()__		descriptors.forEach((name, entries) -> cacheManagerDescriptors.put(name,_				new CacheManagerDescriptor(entries)))__		return new CachesReport(cacheManagerDescriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,map,string,cache,manager,descriptor,cache,manager,descriptors,new,linked,hash,map,descriptors,for,each,name,entries,cache,manager,descriptors,put,name,new,cache,manager,descriptor,entries,return,new,caches,report,cache,manager,descriptors
CachesEndpoint -> @ReadOperation 	public CachesReport caches();1540506823;Return a {@link CachesReport} of all available {@link Cache caches}._@return a caches reports;@ReadOperation_	public CachesReport caches() {_		Map<String, Map<String, CacheDescriptor>> descriptors = new LinkedHashMap<>()__		getCacheEntries(matchAll(), matchAll()).forEach((entry) -> {_			String cacheName = entry.getName()__			String cacheManager = entry.getCacheManager()__			Map<String, CacheDescriptor> cacheManagerDescriptors = descriptors_					.computeIfAbsent(cacheManager, (key) -> new LinkedHashMap<>())__			cacheManagerDescriptors.put(cacheName,_					new CacheDescriptor(entry.getTarget()))__		})__		Map<String, CacheManagerDescriptor> cacheManagerDescriptors = new LinkedHashMap<>()__		descriptors.forEach((name, entries) -> cacheManagerDescriptors.put(name,_				new CacheManagerDescriptor(entries)))__		return new CachesReport(cacheManagerDescriptors)__	};return,a,link,caches,report,of,all,available,link,cache,caches,return,a,caches,reports;read,operation,public,caches,report,caches,map,string,map,string,cache,descriptor,descriptors,new,linked,hash,map,get,cache,entries,match,all,match,all,for,each,entry,string,cache,name,entry,get,name,string,cache,manager,entry,get,cache,manager,map,string,cache,descriptor,cache,manager,descriptors,descriptors,compute,if,absent,cache,manager,key,new,linked,hash,map,cache,manager,descriptors,put,cache,name,new,cache,descriptor,entry,get,target,map,string,cache,manager,descriptor,cache,manager,descriptors,new,linked,hash,map,descriptors,for,each,name,entries,cache,manager,descriptors,put,name,new,cache,manager,descriptor,entries,return,new,caches,report,cache,manager,descriptors
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1525098876;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries((name) -> true, (cacheManagerName) -> true)_				.forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,name,true,cache,manager,name,true,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1525476995;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries((name) -> true, (cacheManagerName) -> true)_				.forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,name,true,cache,manager,name,true,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1525500762;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1525697739;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1525856903;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1527317558;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1529063837;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1532738164;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
CachesEndpoint -> @DeleteOperation 	public void clearCaches();1540506823;Clear all the available {@link Cache caches}.;@DeleteOperation_	public void clearCaches() {_		getCacheEntries(matchAll(), matchAll()).forEach(this::clearCache)__	};clear,all,the,available,link,cache,caches;delete,operation,public,void,clear,caches,get,cache,entries,match,all,match,all,for,each,this,clear,cache
