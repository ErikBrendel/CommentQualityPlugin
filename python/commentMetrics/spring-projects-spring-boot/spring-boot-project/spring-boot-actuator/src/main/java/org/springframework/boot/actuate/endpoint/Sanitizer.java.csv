commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Keys that should be sanitized. Keys can be simple strings that the property ends  * with or regular expressions.  * @param keysToSanitize the keys to sanitize  */ ;/**  * Keys that should be sanitized. Keys can be simple strings that the property ends  * with or regular expressions.  * @param keysToSanitize the keys to sanitize  */ public void setKeysToSanitize(String... keysToSanitize) {     Assert.notNull(keysToSanitize, "KeysToSanitize must not be null").     this.keysToSanitize = new Pattern[keysToSanitize.length].     for (int i = 0. i < keysToSanitize.length. i++) {         this.keysToSanitize[i] = getPattern(keysToSanitize[i]).     } }
false;private;1;6;;private Pattern getPattern(String value) {     if (isRegex(value)) {         return Pattern.compile(value, Pattern.CASE_INSENSITIVE).     }     return Pattern.compile(".*" + value + "$", Pattern.CASE_INSENSITIVE). }
false;private;1;8;;private boolean isRegex(String value) {     for (String part : REGEX_PARTS) {         if (value.contains(part)) {             return true.         }     }     return false. }
true;public;2;11;/**  * Sanitize the given value if necessary.  * @param key the key to sanitize  * @param value the value  * @return the potentially sanitized value  */ ;/**  * Sanitize the given value if necessary.  * @param key the key to sanitize  * @param value the value  * @return the potentially sanitized value  */ public Object sanitize(String key, Object value) {     if (value == null) {         return null.     }     for (Pattern pattern : this.keysToSanitize) {         if (pattern.matcher(key).matches()) {             return "******".         }     }     return value. }
