commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;16;;@Override public final Health health() {     Health.Builder builder = new Health.Builder().     try {         doHealthCheck(builder).     } catch (Exception ex) {         if (this.logger.isWarnEnabled()) {             String message = this.healthCheckFailedMessage.apply(ex).             this.logger.warn(StringUtils.hasText(message) ? message : DEFAULT_MESSAGE, ex).         }         builder.down(ex).     }     return builder.build(). }
true;protected,abstract;1;1;/**  * Actual health check logic.  * @param builder the {@link Builder} to report health status and details  * @throws Exception any {@link Exception} that should create a {@link Status#DOWN}  * system status.  */ ;/**  * Actual health check logic.  * @param builder the {@link Builder} to report health status and details  * @throws Exception any {@link Exception} that should create a {@link Status#DOWN}  * system status.  */ protected abstract void doHealthCheck(Health.Builder builder) throws Exception.
