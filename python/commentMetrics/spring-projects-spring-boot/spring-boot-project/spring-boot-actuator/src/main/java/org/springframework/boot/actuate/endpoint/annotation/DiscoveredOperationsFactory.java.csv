commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;public Collection<O> createOperations(EndpointId id, Object target) {     return MethodIntrospector.selectMethods(target.getClass(), (MetadataLookup<O>) (method) -> createOperation(id, target, method)).values(). }
false;private;3;6;;private O createOperation(EndpointId endpointId, Object target, Method method) {     return OPERATION_TYPES.entrySet().stream().map((entry) -> createOperation(endpointId, target, method, entry.getKey(), entry.getValue())).filter(Objects::nonNull).findFirst().orElse(null). }
false;private;5;14;;private O createOperation(EndpointId endpointId, Object target, Method method, OperationType operationType, Class<? extends Annotation> annotationType) {     AnnotationAttributes annotationAttributes = AnnotatedElementUtils.getMergedAnnotationAttributes(method, annotationType).     if (annotationAttributes == null) {         return null.     }     DiscoveredOperationMethod operationMethod = new DiscoveredOperationMethod(method, operationType, annotationAttributes).     OperationInvoker invoker = new ReflectiveOperationInvoker(target, operationMethod, this.parameterValueMapper).     invoker = applyAdvisors(endpointId, operationMethod, invoker).     return createOperation(endpointId, operationMethod, invoker). }
false;private;3;10;;private OperationInvoker applyAdvisors(EndpointId endpointId, OperationMethod operationMethod, OperationInvoker invoker) {     if (this.invokerAdvisors != null) {         for (OperationInvokerAdvisor advisor : this.invokerAdvisors) {             invoker = advisor.apply(endpointId, operationMethod.getOperationType(), operationMethod.getParameters(), invoker).         }     }     return invoker. }
false;protected,abstract;3;2;;protected abstract O createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker).
