commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;6;;private static WebAuditListener maybeCreateWebListener() {     if (ClassUtils.isPresent(WEB_LISTENER_CHECK_CLASS, null)) {         return new WebAuditListener().     }     return null. }
false;public;1;12;;@Override public void onApplicationEvent(AbstractAuthenticationEvent event) {     if (event instanceof AbstractAuthenticationFailureEvent) {         onAuthenticationFailureEvent((AbstractAuthenticationFailureEvent) event).     } else if (this.webListener != null && this.webListener.accepts(event)) {         this.webListener.process(this, event).     } else if (event instanceof AuthenticationSuccessEvent) {         onAuthenticationSuccessEvent((AuthenticationSuccessEvent) event).     } }
false;private;1;10;;private void onAuthenticationFailureEvent(AbstractAuthenticationFailureEvent event) {     Map<String, Object> data = new HashMap<>().     data.put("type", event.getException().getClass().getName()).     data.put("message", event.getException().getMessage()).     if (event.getAuthentication().getDetails() != null) {         data.put("details", event.getAuthentication().getDetails()).     }     publish(new AuditEvent(event.getAuthentication().getName(), AUTHENTICATION_FAILURE, data)). }
false;private;1;8;;private void onAuthenticationSuccessEvent(AuthenticationSuccessEvent event) {     Map<String, Object> data = new HashMap<>().     if (event.getAuthentication().getDetails() != null) {         data.put("details", event.getAuthentication().getDetails()).     }     publish(new AuditEvent(event.getAuthentication().getName(), AUTHENTICATION_SUCCESS, data)). }
false;public;2;16;;public void process(AuthenticationAuditListener listener, AbstractAuthenticationEvent input) {     if (listener != null) {         AuthenticationSwitchUserEvent event = (AuthenticationSwitchUserEvent) input.         Map<String, Object> data = new HashMap<>().         if (event.getAuthentication().getDetails() != null) {             data.put("details", event.getAuthentication().getDetails()).         }         if (event.getTargetUser() != null) {             data.put("target", event.getTargetUser().getUsername()).         }         listener.publish(new AuditEvent(event.getAuthentication().getName(), AUTHENTICATION_SWITCH, data)).     } }
false;public;1;3;;public boolean accepts(AbstractAuthenticationEvent event) {     return event instanceof AuthenticationSwitchUserEvent. }
