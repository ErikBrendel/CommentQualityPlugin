commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;13;;private static Map<String, Object> convert(String[] data) {     Map<String, Object> result = new HashMap<>().     for (String entry : data) {         int index = entry.indexOf('=').         if (index != -1) {             result.put(entry.substring(0, index), entry.substring(index + 1)).         } else {             result.put(entry, null).         }     }     return result. }
true;public;0;3;/**  * Returns the date/time that the event was logged.  * @return the timestamp  */ ;/**  * Returns the date/time that the event was logged.  * @return the timestamp  */ public Instant getTimestamp() {     return this.timestamp. }
true;public;0;3;/**  * Returns the user principal responsible for the event or an empty String if the  * principal is not available.  * @return the principal  */ ;/**  * Returns the user principal responsible for the event or an empty String if the  * principal is not available.  * @return the principal  */ public String getPrincipal() {     return this.principal. }
true;public;0;3;/**  * Returns the type of event.  * @return the event type  */ ;/**  * Returns the type of event.  * @return the event type  */ public String getType() {     return this.type. }
true;public;0;3;/**  * Returns the event data.  * @return the event data  */ ;/**  * Returns the event data.  * @return the event data  */ public Map<String, Object> getData() {     return this.data. }
false;public;0;5;;@Override public String toString() {     return "AuditEvent [timestamp=" + this.timestamp + ", principal=" + this.principal + ", type=" + this.type + ", data=" + this.data + "]". }
