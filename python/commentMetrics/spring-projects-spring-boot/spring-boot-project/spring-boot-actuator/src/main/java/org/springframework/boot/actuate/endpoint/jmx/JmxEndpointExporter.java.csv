commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;public;0;4;;@Override public void afterPropertiesSet() {     this.registered = register(). }
false;public;0;4;;@Override public void destroy() throws Exception {     unregister(this.registered). }
false;private;0;3;;private Collection<ObjectName> register() {     return this.endpoints.stream().map(this::register).collect(Collectors.toList()). }
false;private;1;19;;private ObjectName register(ExposableJmxEndpoint endpoint) {     Assert.notNull(endpoint, "Endpoint must not be null").     try {         ObjectName name = this.objectNameFactory.getObjectName(endpoint).         EndpointMBean mbean = new EndpointMBean(this.responseMapper, this.classLoader, endpoint).         this.mBeanServer.registerMBean(mbean, name).         return name.     } catch (MalformedObjectNameException ex) {         throw new IllegalStateException("Invalid ObjectName for " + getEndpointDescription(endpoint), ex).     } catch (Exception ex) {         throw new MBeanExportException("Failed to register MBean for " + getEndpointDescription(endpoint), ex).     } }
false;private;1;3;;private void unregister(Collection<ObjectName> objectNames) {     objectNames.forEach(this::unregister). }
false;private;1;17;;private void unregister(ObjectName objectName) {     try {         if (logger.isDebugEnabled()) {             logger.debug("Unregister endpoint with ObjectName '" + objectName + "' " + "from the JMX domain").         }         this.mBeanServer.unregisterMBean(objectName).     } catch (InstanceNotFoundException ex) {     // Ignore and continue     } catch (MBeanRegistrationException ex) {         throw new JmxException("Failed to unregister MBean with ObjectName '" + objectName + "'", ex).     } }
false;private;1;3;;private String getEndpointDescription(ExposableJmxEndpoint endpoint) {     return "endpoint '" + endpoint.getEndpointId() + "'". }
