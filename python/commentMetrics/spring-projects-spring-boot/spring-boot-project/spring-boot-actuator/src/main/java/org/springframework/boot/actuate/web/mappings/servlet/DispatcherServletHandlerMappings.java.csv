commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public List<HandlerMapping> getHandlerMappings() {     List<HandlerMapping> handlerMappings = this.dispatcherServlet.getHandlerMappings().     if (handlerMappings == null) {         initializeDispatcherServletIfPossible().         handlerMappings = this.dispatcherServlet.getHandlerMappings().     }     return (handlerMappings != null) ? handlerMappings : Collections.emptyList(). }
false;private;0;15;;private void initializeDispatcherServletIfPossible() {     if (!(this.applicationContext instanceof ServletWebServerApplicationContext)) {         return.     }     WebServer webServer = ((ServletWebServerApplicationContext) this.applicationContext).getWebServer().     if (webServer instanceof UndertowServletWebServer) {         new UndertowServletInitializer((UndertowServletWebServer) webServer).initializeServlet(this.name).     } else if (webServer instanceof TomcatWebServer) {         new TomcatServletInitializer((TomcatWebServer) webServer).initializeServlet(this.name).     } }
false;public;0;3;;public String getName() {     return this.name. }
false;;1;3;;void initializeServlet(String name) {     findContext().ifPresent((context) -> initializeServlet(context, name)). }
false;private;0;5;;private Optional<Context> findContext() {     return Stream.of(this.webServer.getTomcat().getHost().findChildren()).filter(Context.class::isInstance).map(Context.class::cast).findFirst(). }
false;private;2;12;;private void initializeServlet(Context context, String name) {     Container child = context.findChild(name).     if (child instanceof StandardWrapper) {         try {             StandardWrapper wrapper = (StandardWrapper) child.             wrapper.deallocate(wrapper.allocate()).         } catch (ServletException ex) {         // Continue         }     } }
false;;1;9;;void initializeServlet(String name) {     try {         this.webServer.getDeploymentManager().getDeployment().getServlets().getManagedServlet(name).forceInit().     } catch (ServletException ex) {     // Continue     } }
