# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1507173536;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1508852929;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1510433298;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1510775012;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1516096432;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1517564108;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1518040509;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1521460869;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1525416882;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1525476706;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1532738143;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1533719595;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1535026188;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1536043955;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applySerializationModifier(ObjectMapper mapper);1536103517;Ensure only bindable and non-cyclic bean properties are reported._@param mapper the object mapper;private void applySerializationModifier(ObjectMapper mapper) {_		SerializerFactory factory = BeanSerializerFactory.instance_				.withSerializerModifier(new GenericSerializerModifier())__		mapper.setSerializerFactory(factory)__	};ensure,only,bindable,and,non,cyclic,bean,properties,are,reported,param,mapper,the,object,mapper;private,void,apply,serialization,modifier,object,mapper,mapper,serializer,factory,factory,bean,serializer,factory,instance,with,serializer,modifier,new,generic,serializer,modifier,mapper,set,serializer,factory,factory
ConfigurationPropertiesReportEndpoint -> private void applyCglibFilters(ObjectMapper mapper);1507173536;Configure PropertyFilter to make sure Jackson doesn't process CGLIB generated bean_properties._@param mapper the object mapper;private void applyCglibFilters(ObjectMapper mapper) {_		mapper.setAnnotationIntrospector(new CglibAnnotationIntrospector())__		mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,_				new CglibBeanPropertyFilter()))__	};configure,property,filter,to,make,sure,jackson,doesn,t,process,cglib,generated,bean,properties,param,mapper,the,object,mapper;private,void,apply,cglib,filters,object,mapper,mapper,mapper,set,annotation,introspector,new,cglib,annotation,introspector,mapper,set,filter,provider,new,simple,filter,provider,add,filter,new,cglib,bean,property,filter
ConfigurationPropertiesReportEndpoint -> private void applyCglibFilters(ObjectMapper mapper);1508852929;Configure PropertyFilter to make sure Jackson doesn't process CGLIB generated bean_properties._@param mapper the object mapper;private void applyCglibFilters(ObjectMapper mapper) {_		mapper.setAnnotationIntrospector(new CglibAnnotationIntrospector())__		mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,_				new CglibBeanPropertyFilter()))__	};configure,property,filter,to,make,sure,jackson,doesn,t,process,cglib,generated,bean,properties,param,mapper,the,object,mapper;private,void,apply,cglib,filters,object,mapper,mapper,mapper,set,annotation,introspector,new,cglib,annotation,introspector,mapper,set,filter,provider,new,simple,filter,provider,add,filter,new,cglib,bean,property,filter
ConfigurationPropertiesReportEndpoint -> private void applyCglibFilters(ObjectMapper mapper);1510433298;Configure PropertyFilter to make sure Jackson doesn't process CGLIB generated bean_properties._@param mapper the object mapper;private void applyCglibFilters(ObjectMapper mapper) {_		mapper.setAnnotationIntrospector(new CglibAnnotationIntrospector())__		mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,_				new CglibBeanPropertyFilter()))__	};configure,property,filter,to,make,sure,jackson,doesn,t,process,cglib,generated,bean,properties,param,mapper,the,object,mapper;private,void,apply,cglib,filters,object,mapper,mapper,mapper,set,annotation,introspector,new,cglib,annotation,introspector,mapper,set,filter,provider,new,simple,filter,provider,add,filter,new,cglib,bean,property,filter
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName, 			Object bean);1507173536;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@param bean the bean_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,_			Object bean) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,param,bean,the,bean,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,meta,data,bean,factory,meta,data,string,bean,name,object,bean,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName, 			Object bean);1508852929;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@param bean the bean_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,_			Object bean) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,param,bean,the,bean,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,meta,data,bean,factory,meta,data,string,bean,name,object,bean,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName, 			Object bean);1510433298;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@param bean the bean_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,_			Object bean) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,param,bean,the,bean,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,meta,data,bean,factory,meta,data,string,bean,name,object,bean,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName, 			Object bean);1510775012;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@param bean the bean_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,_			Object bean) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,param,bean,the,bean,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,meta,data,bean,factory,meta,data,string,bean,name,object,bean,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName, 			Object bean);1516096432;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@param bean the bean_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetaData beanFactoryMetaData, String beanName,_			Object bean) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,param,bean,the,bean,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,meta,data,bean,factory,meta,data,string,bean,name,object,bean,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1518040509;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1521460869;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1525416882;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1525476706;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1532738143;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1533719595;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1535026188;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1536043955;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> private String extractPrefix(ApplicationContext context, 			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName);1536103517;Extract configuration prefix from {@link ConfigurationProperties} annotation._@param context the application context_@param beanFactoryMetaData the bean factory meta-data_@param beanName the bean name_@return the prefix;private String extractPrefix(ApplicationContext context,_			ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {_		ConfigurationProperties annotation = context.findAnnotationOnBean(beanName,_				ConfigurationProperties.class)__		if (beanFactoryMetaData != null) {_			ConfigurationProperties override = beanFactoryMetaData_					.findFactoryAnnotation(beanName, ConfigurationProperties.class)__			if (override != null) {_				_				_				_				annotation = override__			}_		}_		return annotation.prefix()__	};extract,configuration,prefix,from,link,configuration,properties,annotation,param,context,the,application,context,param,bean,factory,meta,data,the,bean,factory,meta,data,param,bean,name,the,bean,name,return,the,prefix;private,string,extract,prefix,application,context,context,configuration,bean,factory,metadata,bean,factory,meta,data,string,bean,name,configuration,properties,annotation,context,find,annotation,on,bean,bean,name,configuration,properties,class,if,bean,factory,meta,data,null,configuration,properties,override,bean,factory,meta,data,find,factory,annotation,bean,name,configuration,properties,class,if,override,null,annotation,override,return,annotation,prefix
ConfigurationPropertiesReportEndpoint -> GenericSerializerModifier -> private String determineAccessorSuffix(String propertyName);1533719595;Determine the accessor suffix of the specified {@code propertyName}, see_section 8.8 "Capitalization of inferred names" of the JavaBean specs for more_details._@param propertyName the property name to turn into an accessor suffix_@return the accessor suffix for {@code propertyName};private String determineAccessorSuffix(String propertyName) {_			if (propertyName.length() > 1_					&& Character.isUpperCase(propertyName.charAt(1))) {_				return propertyName__			}_			else {_				return StringUtils.capitalize(propertyName)__			}_		};determine,the,accessor,suffix,of,the,specified,code,property,name,see,section,8,8,capitalization,of,inferred,names,of,the,java,bean,specs,for,more,details,param,property,name,the,property,name,to,turn,into,an,accessor,suffix,return,the,accessor,suffix,for,code,property,name;private,string,determine,accessor,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,else,return,string,utils,capitalize,property,name
ConfigurationPropertiesReportEndpoint -> GenericSerializerModifier -> private String determineAccessorSuffix(String propertyName);1535026188;Determine the accessor suffix of the specified {@code propertyName}, see_section 8.8 "Capitalization of inferred names" of the JavaBean specs for more_details._@param propertyName the property name to turn into an accessor suffix_@return the accessor suffix for {@code propertyName};private String determineAccessorSuffix(String propertyName) {_			if (propertyName.length() > 1_					&& Character.isUpperCase(propertyName.charAt(1))) {_				return propertyName__			}_			else {_				return StringUtils.capitalize(propertyName)__			}_		};determine,the,accessor,suffix,of,the,specified,code,property,name,see,section,8,8,capitalization,of,inferred,names,of,the,java,bean,specs,for,more,details,param,property,name,the,property,name,to,turn,into,an,accessor,suffix,return,the,accessor,suffix,for,code,property,name;private,string,determine,accessor,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,else,return,string,utils,capitalize,property,name
ConfigurationPropertiesReportEndpoint -> GenericSerializerModifier -> private String determineAccessorSuffix(String propertyName);1536043955;Determine the accessor suffix of the specified {@code propertyName}, see_section 8.8 "Capitalization of inferred names" of the JavaBean specs for more_details._@param propertyName the property name to turn into an accessor suffix_@return the accessor suffix for {@code propertyName};private String determineAccessorSuffix(String propertyName) {_			if (propertyName.length() > 1_					&& Character.isUpperCase(propertyName.charAt(1))) {_				return propertyName__			}_			else {_				return StringUtils.capitalize(propertyName)__			}_		};determine,the,accessor,suffix,of,the,specified,code,property,name,see,section,8,8,capitalization,of,inferred,names,of,the,java,bean,specs,for,more,details,param,property,name,the,property,name,to,turn,into,an,accessor,suffix,return,the,accessor,suffix,for,code,property,name;private,string,determine,accessor,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,else,return,string,utils,capitalize,property,name
ConfigurationPropertiesReportEndpoint -> GenericSerializerModifier -> private String determineAccessorSuffix(String propertyName);1536103517;Determine the accessor suffix of the specified {@code propertyName}, see_section 8.8 "Capitalization of inferred names" of the JavaBean specs for more_details._@param propertyName the property name to turn into an accessor suffix_@return the accessor suffix for {@code propertyName};private String determineAccessorSuffix(String propertyName) {_			if (propertyName.length() > 1_					&& Character.isUpperCase(propertyName.charAt(1))) {_				return propertyName__			}_			return StringUtils.capitalize(propertyName)__		};determine,the,accessor,suffix,of,the,specified,code,property,name,see,section,8,8,capitalization,of,inferred,names,of,the,java,bean,specs,for,more,details,param,property,name,the,property,name,to,turn,into,an,accessor,suffix,return,the,accessor,suffix,for,code,property,name;private,string,determine,accessor,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1536043955;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;@SuppressWarnings("unchecked")_	private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			return new HashMap<>(mapper.convertValue(bean, Map.class))__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;suppress,warnings,unchecked,private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,return,new,hash,map,mapper,convert,value,bean,map,class,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1536103517;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;@SuppressWarnings("unchecked")_	private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			return new HashMap<>(mapper.convertValue(bean, Map.class))__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;suppress,warnings,unchecked,private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,return,new,hash,map,mapper,convert,value,bean,map,class,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1507173536;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1508852929;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1510433298;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1510775012;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1516096432;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1517564108;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1518040509;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		for (Map.Entry<String, Object> entry : map.entrySet()) {_			String key = entry.getKey()__			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			Object value = entry.getValue()__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		}_		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,for,map,entry,string,object,entry,map,entry,set,string,key,entry,get,key,string,qualified,key,prefix,is,empty,prefix,prefix,key,object,value,entry,get,value,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1521460869;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1525416882;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1525476706;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1532738143;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1533719595;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1535026188;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1536043955;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> @SuppressWarnings("unchecked") 	private Map<String, Object> sanitize(String prefix, Map<String, Object> map);1536103517;Sanitize all unwanted configuration properties to avoid leaking of sensitive_information._@param prefix the property prefix_@param map the source map_@return the sanitized map;@SuppressWarnings("unchecked")_	private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {_		map.forEach((key, value) -> {_			String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key__			if (value instanceof Map) {_				map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value))__			}_			else if (value instanceof List) {_				map.put(key, sanitize(qualifiedKey, (List<Object>) value))__			}_			else {_				value = this.sanitizer.sanitize(key, value)__				value = this.sanitizer.sanitize(qualifiedKey, value)__				map.put(key, value)__			}_		})__		return map__	};sanitize,all,unwanted,configuration,properties,to,avoid,leaking,of,sensitive,information,param,prefix,the,property,prefix,param,map,the,source,map,return,the,sanitized,map;suppress,warnings,unchecked,private,map,string,object,sanitize,string,prefix,map,string,object,map,map,for,each,key,value,string,qualified,key,prefix,is,empty,prefix,prefix,key,if,value,instanceof,map,map,put,key,sanitize,qualified,key,map,string,object,value,else,if,value,instanceof,list,map,put,key,sanitize,qualified,key,list,object,value,else,value,this,sanitizer,sanitize,key,value,value,this,sanitizer,sanitize,qualified,key,value,map,put,key,value,return,map
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1507173536;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyCglibFilters(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,cglib,filters,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1508852929;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyCglibFilters(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,cglib,filters,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1510433298;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyCglibFilters(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,cglib,filters,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1510775012;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1516096432;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1517564108;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1518040509;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1521460869;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1525416882;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1525476706;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1532738143;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1533719595;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,configure,mapper,feature,true,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1535026188;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,configure,mapper,feature,true,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1536043955;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,configure,mapper,feature,true,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> protected void configureObjectMapper(ObjectMapper mapper);1536103517;Configure Jackson's {@link ObjectMapper} to be used to serialize the_{@link ConfigurationProperties} objects into a {@link Map} structure._@param mapper the object mapper;protected void configureObjectMapper(ObjectMapper mapper) {_		mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)__		mapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true)__		mapper.setSerializationInclusion(Include.NON_NULL)__		applyConfigurationPropertiesFilter(mapper)__		applySerializationModifier(mapper)__	};configure,jackson,s,link,object,mapper,to,be,used,to,serialize,the,link,configuration,properties,objects,into,a,link,map,structure,param,mapper,the,object,mapper;protected,void,configure,object,mapper,object,mapper,mapper,mapper,configure,serialization,feature,false,mapper,configure,mapper,feature,true,mapper,set,serialization,inclusion,include,apply,configuration,properties,filter,mapper,apply,serialization,modifier,mapper
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1507173536;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.<String, Object>singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,string,object,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1508852929;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1510433298;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1510775012;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1516096432;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1517564108;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1518040509;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1521460869;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1525416882;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1525476706;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1532738143;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1533719595;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
ConfigurationPropertiesReportEndpoint -> private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, 			String prefix);1535026188;Cautiously serialize the bean to a map (returning a map with an error message_instead of throwing an exception if there is a problem)._@param mapper the object mapper_@param bean the source bean_@param prefix the prefix_@return the serialized instance;private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean,_			String prefix) {_		try {_			@SuppressWarnings("unchecked")_			Map<String, Object> result = new HashMap<>(_					mapper.convertValue(bean, Map.class))__			return result__		}_		catch (Exception ex) {_			return new HashMap<>(Collections.singletonMap("error",_					"Cannot serialize '" + prefix + "'"))__		}_	};cautiously,serialize,the,bean,to,a,map,returning,a,map,with,an,error,message,instead,of,throwing,an,exception,if,there,is,a,problem,param,mapper,the,object,mapper,param,bean,the,source,bean,param,prefix,the,prefix,return,the,serialized,instance;private,map,string,object,safe,serialize,object,mapper,mapper,object,bean,string,prefix,try,suppress,warnings,unchecked,map,string,object,result,new,hash,map,mapper,convert,value,bean,map,class,return,result,catch,exception,ex,return,new,hash,map,collections,singleton,map,error,cannot,serialize,prefix
