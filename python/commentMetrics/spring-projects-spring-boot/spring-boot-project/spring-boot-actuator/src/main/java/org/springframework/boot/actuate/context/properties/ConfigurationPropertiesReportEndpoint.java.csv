commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext context) throws BeansException {     this.context = context. }
false;public;1;3;;public void setKeysToSanitize(String... keysToSanitize) {     this.sanitizer.setKeysToSanitize(keysToSanitize). }
false;public;0;4;;@ReadOperation public ApplicationConfigurationProperties configurationProperties() {     return extract(this.context). }
false;private;1;10;;private ApplicationConfigurationProperties extract(ApplicationContext context) {     Map<String, ContextConfigurationProperties> contextProperties = new HashMap<>().     ApplicationContext target = context.     while (target != null) {         contextProperties.put(target.getId(), describeConfigurationProperties(target, getObjectMapper())).         target = target.getParent().     }     return new ApplicationConfigurationProperties(contextProperties). }
false;private;2;15;;private ContextConfigurationProperties describeConfigurationProperties(ApplicationContext context, ObjectMapper mapper) {     ConfigurationBeanFactoryMetadata beanFactoryMetadata = getBeanFactoryMetadata(context).     Map<String, Object> beans = getConfigurationPropertiesBeans(context, beanFactoryMetadata).     Map<String, ConfigurationPropertiesBeanDescriptor> beanDescriptors = new HashMap<>().     beans.forEach((beanName, bean) -> {         String prefix = extractPrefix(context, beanFactoryMetadata, beanName).         beanDescriptors.put(beanName, new ConfigurationPropertiesBeanDescriptor(prefix, sanitize(prefix, safeSerialize(mapper, bean, prefix)))).     }).     return new ContextConfigurationProperties(beanDescriptors, (context.getParent() != null) ? context.getParent().getId() : null). }
false;private;1;9;;private ConfigurationBeanFactoryMetadata getBeanFactoryMetadata(ApplicationContext context) {     Map<String, ConfigurationBeanFactoryMetadata> beans = context.getBeansOfType(ConfigurationBeanFactoryMetadata.class).     if (beans.size() == 1) {         return beans.values().iterator().next().     }     return null. }
false;private;2;11;;private Map<String, Object> getConfigurationPropertiesBeans(ApplicationContext context, ConfigurationBeanFactoryMetadata beanFactoryMetadata) {     Map<String, Object> beans = new HashMap<>().     beans.putAll(context.getBeansWithAnnotation(ConfigurationProperties.class)).     if (beanFactoryMetadata != null) {         beans.putAll(beanFactoryMetadata.getBeansWithFactoryAnnotation(ConfigurationProperties.class)).     }     return beans. }
true;private;3;11;/**  * Cautiously serialize the bean to a map (returning a map with an error message  * instead of throwing an exception if there is a problem).  * @param mapper the object mapper  * @param bean the source bean  * @param prefix the prefix  * @return the serialized instance  */ ;/**  * Cautiously serialize the bean to a map (returning a map with an error message  * instead of throwing an exception if there is a problem).  * @param mapper the object mapper  * @param bean the source bean  * @param prefix the prefix  * @return the serialized instance  */ @SuppressWarnings("unchecked") private Map<String, Object> safeSerialize(ObjectMapper mapper, Object bean, String prefix) {     try {         return new HashMap<>(mapper.convertValue(bean, Map.class)).     } catch (Exception ex) {         return new HashMap<>(Collections.singletonMap("error", "Cannot serialize '" + prefix + "'")).     } }
true;protected;1;7;/**  * Configure Jackson's {@link ObjectMapper} to be used to serialize the  * {@link ConfigurationProperties} objects into a {@link Map} structure.  * @param mapper the object mapper  */ ;/**  * Configure Jackson's {@link ObjectMapper} to be used to serialize the  * {@link ConfigurationProperties} objects into a {@link Map} structure.  * @param mapper the object mapper  */ protected void configureObjectMapper(ObjectMapper mapper) {     mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false).     mapper.configure(MapperFeature.USE_STD_BEAN_NAMING, true).     mapper.setSerializationInclusion(Include.NON_NULL).     applyConfigurationPropertiesFilter(mapper).     applySerializationModifier(mapper). }
false;private;0;7;;private ObjectMapper getObjectMapper() {     if (this.objectMapper == null) {         this.objectMapper = new ObjectMapper().         configureObjectMapper(this.objectMapper).     }     return this.objectMapper. }
true;private;1;5;/**  * Ensure only bindable and non-cyclic bean properties are reported.  * @param mapper the object mapper  */ ;/**  * Ensure only bindable and non-cyclic bean properties are reported.  * @param mapper the object mapper  */ private void applySerializationModifier(ObjectMapper mapper) {     SerializerFactory factory = BeanSerializerFactory.instance.withSerializerModifier(new GenericSerializerModifier()).     mapper.setSerializerFactory(factory). }
false;private;1;6;;private void applyConfigurationPropertiesFilter(ObjectMapper mapper) {     mapper.setAnnotationIntrospector(new ConfigurationPropertiesAnnotationIntrospector()).     mapper.setFilterProvider(new SimpleFilterProvider().setDefaultFilter(new ConfigurationPropertiesPropertyFilter())). }
true;private;3;16;/**  * Extract configuration prefix from {@link ConfigurationProperties} annotation.  * @param context the application context  * @param beanFactoryMetaData the bean factory meta-data  * @param beanName the bean name  * @return the prefix  */ ;/**  * Extract configuration prefix from {@link ConfigurationProperties} annotation.  * @param context the application context  * @param beanFactoryMetaData the bean factory meta-data  * @param beanName the bean name  * @return the prefix  */ private String extractPrefix(ApplicationContext context, ConfigurationBeanFactoryMetadata beanFactoryMetaData, String beanName) {     ConfigurationProperties annotation = context.findAnnotationOnBean(beanName, ConfigurationProperties.class).     if (beanFactoryMetaData != null) {         ConfigurationProperties override = beanFactoryMetaData.findFactoryAnnotation(beanName, ConfigurationProperties.class).         if (override != null) {             // The @Bean-level @ConfigurationProperties overrides the one at type             // level when binding. Arguably we should render them both, but this one             // might be the most relevant for a starting point.             annotation = override.         }     }     return annotation.prefix(). }
true;private;2;18;/**  * Sanitize all unwanted configuration properties to avoid leaking of sensitive  * information.  * @param prefix the property prefix  * @param map the source map  * @return the sanitized map  */ ;/**  * Sanitize all unwanted configuration properties to avoid leaking of sensitive  * information.  * @param prefix the property prefix  * @param map the source map  * @return the sanitized map  */ @SuppressWarnings("unchecked") private Map<String, Object> sanitize(String prefix, Map<String, Object> map) {     map.forEach((key, value) -> {         String qualifiedKey = (prefix.isEmpty() ? prefix : prefix + ".") + key.         if (value instanceof Map) {             map.put(key, sanitize(qualifiedKey, (Map<String, Object>) value)).         } else if (value instanceof List) {             map.put(key, sanitize(qualifiedKey, (List<Object>) value)).         } else {             value = this.sanitizer.sanitize(key, value).             value = this.sanitizer.sanitize(qualifiedKey, value).             map.put(key, value).         }     }).     return map. }
false;private;2;16;;@SuppressWarnings("unchecked") private List<Object> sanitize(String prefix, List<Object> list) {     List<Object> sanitized = new ArrayList<>().     for (Object item : list) {         if (item instanceof Map) {             sanitized.add(sanitize(prefix, (Map<String, Object>) item)).         } else if (item instanceof List) {             sanitized.add(sanitize(prefix, (List<Object>) item)).         } else {             sanitized.add(this.sanitizer.sanitize(prefix, item)).         }     }     return sanitized. }
false;public;1;8;;@Override public Object findFilterId(Annotated a) {     Object id = super.findFilterId(a).     if (id == null) {         id = CONFIGURATION_PROPERTIES_FILTER_ID.     }     return id. }
false;protected;1;4;;@Override protected boolean include(BeanPropertyWriter writer) {     return include(writer.getFullName().getSimpleName()). }
false;protected;1;4;;@Override protected boolean include(PropertyWriter writer) {     return include(writer.getFullName().getSimpleName()). }
false;private;1;3;;private boolean include(String name) {     return !name.startsWith("$$"). }
false;public;4;25;;@Override public void serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer) throws Exception {     if (writer instanceof BeanPropertyWriter) {         try {             if (pojo == ((BeanPropertyWriter) writer).get(pojo)) {                 if (logger.isDebugEnabled()) {                     logger.debug("Skipping '" + writer.getFullName() + "' on '" + pojo.getClass().getName() + "' as it is self-referential").                 }                 return.             }         } catch (Exception ex) {             if (logger.isDebugEnabled()) {                 logger.debug("Skipping '" + writer.getFullName() + "' on '" + pojo.getClass().getName() + "' as an exception " + "was thrown when retrieving its value", ex).             }             return.         }     }     super.serializeAsField(pojo, jgen, provider, writer). }
false;public;3;12;;@Override public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {     List<BeanPropertyWriter> result = new ArrayList<>().     for (BeanPropertyWriter writer : beanProperties) {         boolean readable = isReadable(beanDesc, writer).         if (readable) {             result.add(writer).         }     }     return result. }
false;private;2;16;;private boolean isReadable(BeanDescription beanDesc, BeanPropertyWriter writer) {     Class<?> parentType = beanDesc.getType().getRawClass().     Class<?> type = writer.getType().getRawClass().     AnnotatedMethod setter = findSetter(beanDesc, writer).     // is JSON metadata for the property, so it's mainly for user-defined beans.     return (setter != null) || ClassUtils.getPackageName(parentType).equals(ClassUtils.getPackageName(type)) || Map.class.isAssignableFrom(type) || Collection.class.isAssignableFrom(type). }
false;private;2;12;;private AnnotatedMethod findSetter(BeanDescription beanDesc, BeanPropertyWriter writer) {     String name = "set" + determineAccessorSuffix(writer.getName()).     Class<?> type = writer.getType().getRawClass().     AnnotatedMethod setter = beanDesc.findMethod(name, new Class<?>[] { type }).     // using a Boolean class     if (setter == null && type.equals(Boolean.TYPE)) {         setter = beanDesc.findMethod(name, new Class<?>[] { Boolean.class }).     }     return setter. }
true;private;1;7;/**  * Determine the accessor suffix of the specified {@code propertyName}, see  * section 8.8 "Capitalization of inferred names" of the JavaBean specs for more  * details.  * @param propertyName the property name to turn into an accessor suffix  * @return the accessor suffix for {@code propertyName}  */ ;/**  * Determine the accessor suffix of the specified {@code propertyName}, see  * section 8.8 "Capitalization of inferred names" of the JavaBean specs for more  * details.  * @param propertyName the property name to turn into an accessor suffix  * @return the accessor suffix for {@code propertyName}  */ private String determineAccessorSuffix(String propertyName) {     if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {         return propertyName.     }     return StringUtils.capitalize(propertyName). }
false;public;0;3;;public Map<String, ContextConfigurationProperties> getContexts() {     return this.contexts. }
false;public;0;3;;public Map<String, ConfigurationPropertiesBeanDescriptor> getBeans() {     return this.beans. }
false;public;0;3;;public String getParentId() {     return this.parentId. }
false;public;0;3;;public String getPrefix() {     return this.prefix. }
false;public;0;3;;public Map<String, Object> getProperties() {     return this.properties. }
