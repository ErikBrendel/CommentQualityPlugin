commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;8;;@Override public final Health aggregate(Map<String, Health> healths) {     List<Status> statusCandidates = healths.values().stream().map(Health::getStatus).collect(Collectors.toList()).     Status status = aggregateStatus(statusCandidates).     Map<String, Object> details = aggregateDetails(healths).     return new Health.Builder(status, details).build(). }
true;protected,abstract;1;1;/**  * Return the single 'aggregate' status that should be used from the specified  * candidates.  * @param candidates the candidates  * @return a single status  */ ;/**  * Return the single 'aggregate' status that should be used from the specified  * candidates.  * @param candidates the candidates  * @return a single status  */ protected abstract Status aggregateStatus(List<Status> candidates).
true;protected;1;3;/**  * Return the map of 'aggregate' details that should be used from the specified  * healths.  * @param healths the health instances to aggregate  * @return a map of details  * @since 1.3.1  */ ;/**  * Return the map of 'aggregate' details that should be used from the specified  * healths.  * @param healths the health instances to aggregate  * @return a map of details  * @since 1.3.1  */ protected Map<String, Object> aggregateDetails(Map<String, Health> healths) {     return new LinkedHashMap<>(healths). }
