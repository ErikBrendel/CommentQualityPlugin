commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;3;/**  * Begins the tracing of the exchange that was initiated by the given {@code request}  * being received.  * @param request the received request  * @return the HTTP trace for the  */ ;/**  * Begins the tracing of the exchange that was initiated by the given {@code request}  * being received.  * @param request the received request  * @return the HTTP trace for the  */ public final HttpTrace receivedRequest(TraceableRequest request) {     return new HttpTrace(new FilteredTraceableRequest(request)). }
true;public,final;4;10;/**  * Ends the tracing of the exchange that is being concluded by sending the given  * {@code response}.  * @param trace the trace for the exchange  * @param response the response that concludes the exchange  * @param principal a supplier for the exchange's principal  * @param sessionId a supplier for the id of the exchange's session  */ ;/**  * Ends the tracing of the exchange that is being concluded by sending the given  * {@code response}.  * @param trace the trace for the exchange  * @param response the response that concludes the exchange  * @param principal a supplier for the exchange's principal  * @param sessionId a supplier for the id of the exchange's session  */ public final void sendingResponse(HttpTrace trace, TraceableResponse response, Supplier<Principal> principal, Supplier<String> sessionId) {     setIfIncluded(Include.TIME_TAKEN, () -> System.currentTimeMillis() - trace.getTimestamp().toEpochMilli(), trace::setTimeTaken).     setIfIncluded(Include.SESSION_ID, sessionId, trace::setSessionId).     setIfIncluded(Include.PRINCIPAL, principal, trace::setPrincipal).     trace.setResponse(new HttpTrace.Response(new FilteredTraceableResponse(response))). }
true;protected;1;3;/**  * Post-process the given mutable map of request {@code headers}.  * @param headers the headers to post-process  */ ;/**  * Post-process the given mutable map of request {@code headers}.  * @param headers the headers to post-process  */ protected void postProcessRequestHeaders(Map<String, List<String>> headers) { }
false;private;2;3;;private <T> T getIfIncluded(Include include, Supplier<T> valueSupplier) {     return this.includes.contains(include) ? valueSupplier.get() : null. }
false;private;3;6;;private <T> void setIfIncluded(Include include, Supplier<T> supplier, Consumer<T> consumer) {     if (this.includes.contains(include)) {         consumer.accept(supplier.get()).     } }
false;private;3;10;;private Map<String, List<String>> getHeadersIfIncluded(Include include, Supplier<Map<String, List<String>>> headersSupplier, Predicate<String> headerPredicate) {     if (!this.includes.contains(include)) {         return new LinkedHashMap<>().     }     return headersSupplier.get().entrySet().stream().filter((entry) -> headerPredicate.test(entry.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)). }
false;public;0;4;;@Override public String getMethod() {     return this.delegate.getMethod(). }
false;public;0;4;;@Override public URI getUri() {     return this.delegate.getUri(). }
false;public;0;8;;@Override public Map<String, List<String>> getHeaders() {     Map<String, List<String>> headers = getHeadersIfIncluded(Include.REQUEST_HEADERS, this.delegate::getHeaders, this::includedHeader).     postProcessRequestHeaders(headers).     return headers. }
false;private;1;10;;private boolean includedHeader(String name) {     if (name.equalsIgnoreCase(HttpHeaders.COOKIE)) {         return HttpExchangeTracer.this.includes.contains(Include.COOKIE_HEADERS).     }     if (name.equalsIgnoreCase(HttpHeaders.AUTHORIZATION)) {         return HttpExchangeTracer.this.includes.contains(Include.AUTHORIZATION_HEADER).     }     return true. }
false;public;0;4;;@Override public String getRemoteAddress() {     return getIfIncluded(Include.REMOTE_ADDRESS, this.delegate::getRemoteAddress). }
false;public;0;4;;@Override public int getStatus() {     return this.delegate.getStatus(). }
false;public;0;5;;@Override public Map<String, List<String>> getHeaders() {     return getHeadersIfIncluded(Include.RESPONSE_HEADERS, this.delegate::getHeaders, this::includedHeader). }
false;private;1;6;;private boolean includedHeader(String name) {     if (name.equalsIgnoreCase(HttpHeaders.SET_COOKIE)) {         return HttpExchangeTracer.this.includes.contains(Include.COOKIE_HEADERS).     }     return true. }
