commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void afterPropertiesSet() throws Exception {     Assert.state(this.dataSource != null, "DataSource for DataSourceHealthIndicator must be specified"). }
false;protected;1;9;;@Override protected void doHealthCheck(Health.Builder builder) throws Exception {     if (this.dataSource == null) {         builder.up().withDetail("database", "unknown").     } else {         doDataSourceHealthCheck(builder).     } }
false;private;1;17;;private void doDataSourceHealthCheck(Health.Builder builder) throws Exception {     String product = getProduct().     builder.up().withDetail("database", product).     String validationQuery = getValidationQuery(product).     if (StringUtils.hasText(validationQuery)) {         try {             // Avoid calling getObject as it breaks MySQL on Java 7             List<Object> results = this.jdbcTemplate.query(validationQuery, new SingleColumnRowMapper()).             Object result = DataAccessUtils.requiredSingleResult(results).             builder.withDetail("result", result).         } finally {             builder.withDetail("validationQuery", validationQuery).         }     } }
false;private;0;3;;private String getProduct() {     return this.jdbcTemplate.execute((ConnectionCallback<String>) this::getProduct). }
false;private;1;3;;private String getProduct(Connection connection) throws SQLException {     return connection.getMetaData().getDatabaseProductName(). }
false;protected;1;11;;protected String getValidationQuery(String product) {     String query = this.query.     if (!StringUtils.hasText(query)) {         DatabaseDriver specific = DatabaseDriver.fromProductName(product).         query = specific.getValidationQuery().     }     if (!StringUtils.hasText(query)) {         query = DEFAULT_QUERY.     }     return query. }
true;public;1;4;/**  * Set the {@link DataSource} to use.  * @param dataSource the data source  */ ;/**  * Set the {@link DataSource} to use.  * @param dataSource the data source  */ public void setDataSource(DataSource dataSource) {     this.dataSource = dataSource.     this.jdbcTemplate = new JdbcTemplate(dataSource). }
true;public;1;3;/**  * Set a specific validation query to use to validate a connection. If none is set, a  * default validation query is used.  * @param query the query  */ ;/**  * Set a specific validation query to use to validate a connection. If none is set, a  * default validation query is used.  * @param query the query  */ public void setQuery(String query) {     this.query = query. }
true;public;0;3;/**  * Return the validation query or {@code null}.  * @return the query  */ ;/**  * Return the validation query or {@code null}.  * @return the query  */ public String getQuery() {     return this.query. }
false;public;2;9;;@Override public Object mapRow(ResultSet rs, int rowNum) throws SQLException {     ResultSetMetaData metaData = rs.getMetaData().     int columns = metaData.getColumnCount().     if (columns != 1) {         throw new IncorrectResultSetColumnCountException(1, columns).     }     return JdbcUtils.getResultSetValue(rs, 1). }
