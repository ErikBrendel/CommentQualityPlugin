commented;modifiers;parameterAmount;loc;comment;code
true;public;4;14;/**  * Creates {@link Resource Resources} for the operations of the given  * {@code webEndpoints}.  * @param endpointMapping the base mapping for all endpoints  * @param endpoints the web endpoints  * @param endpointMediaTypes media types consumed and produced by the endpoints  * @param linksResolver resolver for determining links to available endpoints  * @return the resources for the operations  */ ;/**  * Creates {@link Resource Resources} for the operations of the given  * {@code webEndpoints}.  * @param endpointMapping the base mapping for all endpoints  * @param endpoints the web endpoints  * @param endpointMediaTypes media types consumed and produced by the endpoints  * @param linksResolver resolver for determining links to available endpoints  * @return the resources for the operations  */ public Collection<Resource> createEndpointResources(EndpointMapping endpointMapping, Collection<ExposableWebEndpoint> endpoints, EndpointMediaTypes endpointMediaTypes, EndpointLinksResolver linksResolver) {     List<Resource> resources = new ArrayList<>().     endpoints.stream().flatMap((endpoint) -> endpoint.getOperations().stream()).map((operation) -> createResource(endpointMapping, operation)).forEach(resources::add).     if (StringUtils.hasText(endpointMapping.getPath())) {         Resource resource = createEndpointLinksResource(endpointMapping.getPath(), endpointMediaTypes, linksResolver).         resources.add(resource).     }     return resources. }
false;private;2;12;;private Resource createResource(EndpointMapping endpointMapping, WebOperation operation) {     WebOperationRequestPredicate requestPredicate = operation.getRequestPredicate().     Builder resourceBuilder = Resource.builder().path(endpointMapping.createSubPath(requestPredicate.getPath())).     resourceBuilder.addMethod(requestPredicate.getHttpMethod().name()).consumes(StringUtils.toStringArray(requestPredicate.getConsumes())).produces(StringUtils.toStringArray(requestPredicate.getProduces())).handledBy(new OperationInflector(operation, !requestPredicate.getConsumes().isEmpty())).     return resourceBuilder.build(). }
false;private;3;8;;private Resource createEndpointLinksResource(String endpointPath, EndpointMediaTypes endpointMediaTypes, EndpointLinksResolver linksResolver) {     Builder resourceBuilder = Resource.builder().path(endpointPath).     resourceBuilder.addMethod("GET").produces(StringUtils.toStringArray(endpointMediaTypes.getProduced())).handledBy(new EndpointLinksInflector(linksResolver)).     return resourceBuilder.build(). }
false;public;1;17;;@Override public Response apply(ContainerRequestContext data) {     Map<String, Object> arguments = new HashMap<>().     if (this.readBody) {         arguments.putAll(extractBodyArguments(data)).     }     arguments.putAll(extractPathParameters(data)).     arguments.putAll(extractQueryParameters(data)).     try {         Object response = this.operation.invoke(new InvocationContext(new JerseySecurityContext(data.getSecurityContext()), arguments)).         return convertToJaxRsResponse(response, data.getRequest().getMethod()).     } catch (InvalidEndpointRequestException ex) {         return Response.status(Status.BAD_REQUEST).build().     } }
false;private;1;8;;@SuppressWarnings("unchecked") private Map<String, Object> extractBodyArguments(ContainerRequestContext data) {     Map<?, ?> entity = ((ContainerRequest) data).readEntity(Map.class).     if (entity == null) {         return Collections.emptyMap().     }     return (Map<String, Object>) entity. }
false;private;1;4;;private Map<String, Object> extractPathParameters(ContainerRequestContext requestContext) {     return extract(requestContext.getUriInfo().getPathParameters()). }
false;private;1;4;;private Map<String, Object> extractQueryParameters(ContainerRequestContext requestContext) {     return extract(requestContext.getUriInfo().getQueryParameters()). }
false;private;1;10;;private Map<String, Object> extract(MultivaluedMap<String, String> multivaluedMap) {     Map<String, Object> result = new HashMap<>().     multivaluedMap.forEach((name, values) -> {         if (!CollectionUtils.isEmpty(values)) {             result.put(name, (values.size() != 1) ? values : values.get(0)).         }     }).     return result. }
false;private;2;20;;private Response convertToJaxRsResponse(Object response, String httpMethod) {     if (response == null) {         boolean isGet = HttpMethod.GET.equals(httpMethod).         Status status = isGet ? Status.NOT_FOUND : Status.NO_CONTENT.         return Response.status(status).build().     }     try {         if (!(response instanceof WebEndpointResponse)) {             return Response.status(Status.OK).entity(convertIfNecessary(response)).build().         }         WebEndpointResponse<?> webEndpointResponse = (WebEndpointResponse<?>) response.         return Response.status(webEndpointResponse.getStatus()).entity(convertIfNecessary(webEndpointResponse.getBody())).build().     } catch (IOException ex) {         return Response.status(Status.INTERNAL_SERVER_ERROR).build().     } }
false;private;1;6;;private Object convertIfNecessary(Object body) throws IOException {     for (Function<Object, Object> converter : BODY_CONVERTERS) {         body = converter.apply(body).     }     return body. }
false;public;1;12;;@Override public Object apply(Object body) {     if (body instanceof org.springframework.core.io.Resource) {         try {             return ((org.springframework.core.io.Resource) body).getInputStream().         } catch (IOException ex) {             throw new IllegalStateException().         }     }     return body. }
false;public;1;7;;@Override public Object apply(Object body) {     if (body instanceof Mono) {         return ((Mono<?>) body).block().     }     return body. }
false;public;1;6;;@Override public Response apply(ContainerRequestContext request) {     Map<String, Link> links = this.linksResolver.resolveLinks(request.getUriInfo().getAbsolutePath().toString()).     return Response.ok(Collections.singletonMap("_links", links)).build(). }
false;public;0;4;;@Override public Principal getPrincipal() {     return this.securityContext.getUserPrincipal(). }
false;public;1;4;;@Override public boolean isUserInRole(String role) {     return this.securityContext.isUserInRole(role). }
