commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a {@code method} tag based on the {@link HttpServletRequest#getMethod()  * method} of the given {@code request}.  * @param request the request  * @return the method tag whose value is a capitalized method (e.g. GET).  */ ;/**  * Creates a {@code method} tag based on the {@link HttpServletRequest#getMethod()  * method} of the given {@code request}.  * @param request the request  * @return the method tag whose value is a capitalized method (e.g. GET).  */ public static Tag method(HttpServletRequest request) {     return (request != null) ? Tag.of("method", request.getMethod()) : METHOD_UNKNOWN. }
true;public,static;1;5;/**  * Creates a {@code status} tag based on the status of the given {@code response}.  * @param response the HTTP response  * @return the status tag derived from the status of the response  */ ;/**  * Creates a {@code status} tag based on the status of the given {@code response}.  * @param response the HTTP response  * @return the status tag derived from the status of the response  */ public static Tag status(HttpServletResponse response) {     return (response != null) ? Tag.of("status", Integer.toString(response.getStatus())) : STATUS_UNKNOWN. }
true;public,static;2;24;/**  * Creates a {@code uri} tag based on the URI of the given {@code request}. Uses the  * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if  * available. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}  * for 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}  * for all other requests.  * @param request the request  * @param response the response  * @return the uri tag derived from the request  */ ;/**  * Creates a {@code uri} tag based on the URI of the given {@code request}. Uses the  * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if  * available. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}  * for 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}  * for all other requests.  * @param request the request  * @param response the response  * @return the uri tag derived from the request  */ public static Tag uri(HttpServletRequest request, HttpServletResponse response) {     if (request != null) {         String pattern = getMatchingPattern(request).         if (pattern != null) {             return Tag.of("uri", pattern).         }         if (response != null) {             HttpStatus status = extractStatus(response).             if (status != null) {                 if (status.is3xxRedirection()) {                     return URI_REDIRECTION.                 }                 if (status == HttpStatus.NOT_FOUND) {                     return URI_NOT_FOUND.                 }             }         }         String pathInfo = getPathInfo(request).         if (pathInfo.isEmpty()) {             return URI_ROOT.         }     }     return URI_UNKNOWN. }
false;private,static;1;8;;private static HttpStatus extractStatus(HttpServletResponse response) {     try {         return HttpStatus.valueOf(response.getStatus()).     } catch (IllegalArgumentException ex) {         return null.     } }
false;private,static;1;9;;private static String getMatchingPattern(HttpServletRequest request) {     PathPattern dataRestPathPattern = (PathPattern) request.getAttribute(DATA_REST_PATH_PATTERN_ATTRIBUTE).     if (dataRestPathPattern != null) {         return dataRestPathPattern.getPatternString().     }     return (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE). }
false;private,static;1;6;;private static String getPathInfo(HttpServletRequest request) {     String pathInfo = request.getPathInfo().     String uri = StringUtils.hasText(pathInfo) ? pathInfo : "/".     uri = MULTIPLE_SLASH_PATTERN.matcher(uri).replaceAll("/").     return TRAILING_SLASH_PATTERN.matcher(uri).replaceAll(""). }
true;public,static;1;8;/**  * Creates a {@code exception} tag based on the {@link Class#getSimpleName() simple  * name} of the class of the given {@code exception}.  * @param exception the exception, may be {@code null}  * @return the exception tag derived from the exception  */ ;/**  * Creates a {@code exception} tag based on the {@link Class#getSimpleName() simple  * name} of the class of the given {@code exception}.  * @param exception the exception, may be {@code null}  * @return the exception tag derived from the exception  */ public static Tag exception(Throwable exception) {     if (exception != null) {         String simpleName = exception.getClass().getSimpleName().         return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName()).     }     return EXCEPTION_NONE. }
true;public,static;1;21;/**  * Creates an {@code outcome} tag based on the status of the given {@code response}.  * @param response the HTTP response  * @return the outcome tag derived from the status of the response  * @since 2.1.0  */ ;/**  * Creates an {@code outcome} tag based on the status of the given {@code response}.  * @param response the HTTP response  * @return the outcome tag derived from the status of the response  * @since 2.1.0  */ public static Tag outcome(HttpServletResponse response) {     if (response != null) {         HttpStatus status = extractStatus(response).         if (status != null) {             if (status.is1xxInformational()) {                 return OUTCOME_INFORMATIONAL.             }             if (status.is2xxSuccessful()) {                 return OUTCOME_SUCCESS.             }             if (status.is3xxRedirection()) {                 return OUTCOME_REDIRECTION.             }             if (status.is4xxClientError()) {                 return OUTCOME_CLIENT_ERROR.             }         }         return OUTCOME_SERVER_ERROR.     }     return OUTCOME_UNKNOWN. }
