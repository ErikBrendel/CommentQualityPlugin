commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;11;;@Override protected void initHandlerMethods() {     for (ExposableWebEndpoint endpoint : this.endpoints) {         for (WebOperation operation : endpoint.getOperations()) {             registerMappingForOperation(endpoint, operation).         }     }     if (StringUtils.hasText(this.endpointMapping.getPath())) {         registerLinksMapping().     } }
false;protected;2;6;;@Override protected HandlerMethod createHandlerMethod(Object handler, Method method) {     HandlerMethod handlerMethod = super.createHandlerMethod(handler, method).     return new WebMvcEndpointHandlerMethod(handlerMethod.getBean(), handlerMethod.getMethod()). }
false;public;2;13;;@Override public RequestMatchResult match(HttpServletRequest request, String pattern) {     RequestMappingInfo info = RequestMappingInfo.paths(pattern).options(builderConfig).build().     RequestMappingInfo matchingInfo = info.getMatchingCondition(request).     if (matchingInfo == null) {         return null.     }     Set<String> patterns = matchingInfo.getPatternsCondition().getPatterns().     String lookupPath = getUrlPathHelper().getLookupPathForRequest(request).     return new RequestMatchResult(patterns.iterator().next(), lookupPath, getPathMatcher()). }
false;private,static;0;8;;private static RequestMappingInfo.BuilderConfiguration getBuilderConfig() {     RequestMappingInfo.BuilderConfiguration config = new RequestMappingInfo.BuilderConfiguration().     config.setUrlPathHelper(null).     config.setPathMatcher(null).     config.setSuffixPatternMatch(false).     config.setTrailingSlashMatch(true).     return config. }
false;private;2;7;;private void registerMappingForOperation(ExposableWebEndpoint endpoint, WebOperation operation) {     ServletWebOperation servletWebOperation = wrapServletWebOperation(endpoint, operation, new ServletWebOperationAdapter(operation)).     registerMapping(createRequestMappingInfo(operation), new OperationHandler(servletWebOperation), this.handleMethod). }
true;protected;3;4;/**  * Hook point that allows subclasses to wrap the {@link ServletWebOperation} before  * it's called. Allows additional features, such as security, to be added.  * @param endpoint the source endpoint  * @param operation the source operation  * @param servletWebOperation the servlet web operation to wrap  * @return a wrapped servlet web operation  */ ;/**  * Hook point that allows subclasses to wrap the {@link ServletWebOperation} before  * it's called. Allows additional features, such as security, to be added.  * @param endpoint the source endpoint  * @param operation the source operation  * @param servletWebOperation the servlet web operation to wrap  * @return a wrapped servlet web operation  */ protected ServletWebOperation wrapServletWebOperation(ExposableWebEndpoint endpoint, WebOperation operation, ServletWebOperation servletWebOperation) {     return servletWebOperation. }
false;private;1;13;;private RequestMappingInfo createRequestMappingInfo(WebOperation operation) {     WebOperationRequestPredicate predicate = operation.getRequestPredicate().     PatternsRequestCondition patterns = patternsRequestConditionForPattern(predicate.getPath()).     RequestMethodsRequestCondition methods = new RequestMethodsRequestCondition(RequestMethod.valueOf(predicate.getHttpMethod().name())).     ConsumesRequestCondition consumes = new ConsumesRequestCondition(StringUtils.toStringArray(predicate.getConsumes())).     ProducesRequestCondition produces = new ProducesRequestCondition(StringUtils.toStringArray(predicate.getProduces())).     return new RequestMappingInfo(null, patterns, methods, null, null, consumes, produces, null). }
false;private;0;14;;private void registerLinksMapping() {     PatternsRequestCondition patterns = patternsRequestConditionForPattern("").     RequestMethodsRequestCondition methods = new RequestMethodsRequestCondition(RequestMethod.GET).     ProducesRequestCondition produces = new ProducesRequestCondition(this.endpointMediaTypes.getProduced().toArray(StringUtils.toStringArray(this.endpointMediaTypes.getProduced()))).     RequestMappingInfo mapping = new RequestMappingInfo(patterns, methods, null, null, null, produces, null).     LinksHandler linksHandler = getLinksHandler().     registerMapping(mapping, linksHandler, ReflectionUtils.findMethod(linksHandler.getClass(), "links", HttpServletRequest.class, HttpServletResponse.class)). }
false;private;1;6;;private PatternsRequestCondition patternsRequestConditionForPattern(String path) {     String[] patterns = new String[] { this.endpointMapping.createSubPath(path) }.     return new PatternsRequestCondition(patterns, builderConfig.getUrlPathHelper(), builderConfig.getPathMatcher(), builderConfig.useSuffixPatternMatch(), builderConfig.useTrailingSlashMatch()). }
false;protected;3;5;;@Override protected CorsConfiguration initCorsConfiguration(Object handler, Method method, RequestMappingInfo mapping) {     return this.corsConfiguration. }
false;protected;1;4;;@Override protected boolean isHandler(Class<?> beanType) {     return false. }
false;protected;2;5;;@Override protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {     return null. }
false;protected;1;4;;@Override protected void extendInterceptors(List<Object> interceptors) {     interceptors.add(new SkipPathExtensionContentNegotiation()). }
true;protected,abstract;0;1;/**  * Return the Handler providing actuator links at the root endpoint.  * @return the links handler  */ ;/**  * Return the Handler providing actuator links at the root endpoint.  * @return the links handler  */ protected abstract LinksHandler getLinksHandler().
true;public;0;3;/**  * Return the web endpoints being mapped.  * @return the endpoints  */ ;/**  * Return the web endpoints being mapped.  * @return the endpoints  */ public Collection<ExposableWebEndpoint> getEndpoints() {     return this.endpoints. }
false;;2;1;;Object links(HttpServletRequest request, HttpServletResponse response).
false;;2;1;;Object handle(HttpServletRequest request, Map<String, String> body).
false;public;2;14;;@Override public Object handle(HttpServletRequest request, @RequestBody(required = false) Map<String, String> body) {     Map<String, Object> arguments = getArguments(request, body).     try {         return handleResult(this.operation.invoke(new InvocationContext(new ServletSecurityContext(request), arguments)), HttpMethod.valueOf(request.getMethod())).     } catch (InvalidEndpointRequestException ex) {         throw new BadOperationRequestException(ex.getReason()).     } }
false;public;0;4;;@Override public String toString() {     return "Actuator web endpoint '" + this.operation.getId() + "'". }
false;private;2;11;;private Map<String, Object> getArguments(HttpServletRequest request, Map<String, String> body) {     Map<String, Object> arguments = new LinkedHashMap<>().     arguments.putAll(getTemplateVariables(request)).     if (body != null && HttpMethod.POST.name().equals(request.getMethod())) {         arguments.putAll(body).     }     request.getParameterMap().forEach((name, values) -> arguments.put(name, (values.length != 1) ? Arrays.asList(values) : values[0])).     return arguments. }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, String> getTemplateVariables(HttpServletRequest request) {     return (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE). }
false;private;2;12;;private Object handleResult(Object result, HttpMethod httpMethod) {     if (result == null) {         return new ResponseEntity<>((httpMethod != HttpMethod.GET) ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND).     }     if (!(result instanceof WebEndpointResponse)) {         return result.     }     WebEndpointResponse<?> response = (WebEndpointResponse<?>) result.     return new ResponseEntity<Object>(response.getBody(), HttpStatus.valueOf(response.getStatus())). }
false;public;2;5;;@ResponseBody public Object handle(HttpServletRequest request, @RequestBody(required = false) Map<String, String> body) {     return this.operation.handle(request, body). }
false;public;0;4;;@Override public String toString() {     return this.operation.toString(). }
false;public;0;4;;@Override public String toString() {     return getBean().toString(). }
false;public;0;4;;@Override public HandlerMethod createWithResolvedBean() {     return this. }
false;public;0;4;;@Override public Principal getPrincipal() {     return this.request.getUserPrincipal(). }
false;public;1;4;;@Override public boolean isUserInRole(String role) {     return this.request.isUserInRole(role). }
