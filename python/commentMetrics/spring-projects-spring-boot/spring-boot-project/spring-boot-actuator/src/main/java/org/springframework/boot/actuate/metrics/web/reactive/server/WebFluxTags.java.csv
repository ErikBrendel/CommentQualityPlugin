commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a {@code method} tag based on the  * {@link org.springframework.http.server.reactive.ServerHttpRequest#getMethod()  * method} of the {@link ServerWebExchange#getRequest()} request of the given  * {@code exchange}.  * @param exchange the exchange  * @return the method tag whose value is a capitalized method (e.g. GET).  */ ;/**  * Creates a {@code method} tag based on the  * {@link org.springframework.http.server.reactive.ServerHttpRequest#getMethod()  * method} of the {@link ServerWebExchange#getRequest()} request of the given  * {@code exchange}.  * @param exchange the exchange  * @return the method tag whose value is a capitalized method (e.g. GET).  */ public static Tag method(ServerWebExchange exchange) {     return Tag.of("method", exchange.getRequest().getMethodValue()). }
true;public,static;1;7;/**  * Creates a {@code status} tag based on the response status of the given  * {@code exchange}.  * @param exchange the exchange  * @return the status tag derived from the response status  */ ;/**  * Creates a {@code status} tag based on the response status of the given  * {@code exchange}.  * @param exchange the exchange  * @return the status tag derived from the response status  */ public static Tag status(ServerWebExchange exchange) {     HttpStatus status = exchange.getResponse().getStatusCode().     if (status == null) {         status = HttpStatus.OK.     }     return Tag.of("status", String.valueOf(status.value())). }
true;public,static;1;21;/**  * Creates a {@code uri} tag based on the URI of the given {@code exchange}. Uses the  * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if  * available. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}  * for 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}  * for all other requests.  * @param exchange the exchange  * @return the uri tag derived from the exchange  */ ;/**  * Creates a {@code uri} tag based on the URI of the given {@code exchange}. Uses the  * {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if  * available. Falling back to {@code REDIRECTION} for 3xx responses, {@code NOT_FOUND}  * for 404 responses, {@code root} for requests with no path info, and {@code UNKNOWN}  * for all other requests.  * @param exchange the exchange  * @return the uri tag derived from the exchange  */ public static Tag uri(ServerWebExchange exchange) {     PathPattern pathPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).     if (pathPattern != null) {         return Tag.of("uri", pathPattern.getPatternString()).     }     HttpStatus status = exchange.getResponse().getStatusCode().     if (status != null) {         if (status.is3xxRedirection()) {             return URI_REDIRECTION.         }         if (status == HttpStatus.NOT_FOUND) {             return URI_NOT_FOUND.         }     }     String path = getPathInfo(exchange).     if (path.isEmpty()) {         return URI_ROOT.     }     return URI_UNKNOWN. }
false;private,static;1;5;;private static String getPathInfo(ServerWebExchange exchange) {     String path = exchange.getRequest().getPath().value().     String uri = StringUtils.hasText(path) ? path : "/".     return uri.replaceAll("//+", "/").replaceAll("/$", ""). }
true;public,static;1;8;/**  * Creates an {@code exception} tag based on the {@link Class#getSimpleName() simple  * name} of the class of the given {@code exception}.  * @param exception the exception, may be {@code null}  * @return the exception tag derived from the exception  */ ;/**  * Creates an {@code exception} tag based on the {@link Class#getSimpleName() simple  * name} of the class of the given {@code exception}.  * @param exception the exception, may be {@code null}  * @return the exception tag derived from the exception  */ public static Tag exception(Throwable exception) {     if (exception != null) {         String simpleName = exception.getClass().getSimpleName().         return Tag.of("exception", StringUtils.hasText(simpleName) ? simpleName : exception.getClass().getName()).     }     return EXCEPTION_NONE. }
true;public,static;1;19;/**  * Creates an {@code outcome} tag based on the response status of the given  * {@code exchange}.  * @param exchange the exchange  * @return the outcome tag derived from the response status  * @since 2.1.0  */ ;/**  * Creates an {@code outcome} tag based on the response status of the given  * {@code exchange}.  * @param exchange the exchange  * @return the outcome tag derived from the response status  * @since 2.1.0  */ public static Tag outcome(ServerWebExchange exchange) {     HttpStatus status = exchange.getResponse().getStatusCode().     if (status != null) {         if (status.is1xxInformational()) {             return OUTCOME_INFORMATIONAL.         }         if (status.is2xxSuccessful()) {             return OUTCOME_SUCCESS.         }         if (status.is3xxRedirection()) {             return OUTCOME_REDIRECTION.         }         if (status.is4xxClientError()) {             return OUTCOME_CLIENT_ERROR.         }         return OUTCOME_SERVER_ERROR.     }     return OUTCOME_UNKNOWN. }
