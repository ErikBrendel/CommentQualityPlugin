commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {     if (this.autoTimeRequests) {         return chain.filter(exchange).compose((call) -> filter(exchange, call)).     }     return chain.filter(exchange). }
false;private;2;15;;private Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {     long start = System.nanoTime().     ServerHttpResponse response = exchange.getResponse().     return call.doOnSuccess((done) -> success(exchange, start)).doOnError((cause) -> {         if (response.isCommitted()) {             error(exchange, start, cause).         } else {             response.beforeCommit(() -> {                 error(exchange, start, cause).                 return Mono.empty().             }).         }     }). }
false;private;2;5;;private void success(ServerWebExchange exchange, long start) {     Iterable<Tag> tags = this.tagsProvider.httpRequestTags(exchange, null).     this.registry.timer(this.metricName, tags).record(System.nanoTime() - start, TimeUnit.NANOSECONDS). }
false;private;3;5;;private void error(ServerWebExchange exchange, long start, Throwable cause) {     Iterable<Tag> tags = this.tagsProvider.httpRequestTags(exchange, cause).     this.registry.timer(this.metricName, tags).record(System.nanoTime() - start, TimeUnit.NANOSECONDS). }
