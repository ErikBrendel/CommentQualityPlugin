commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@ReadOperation public ScheduledTasksReport scheduledTasks() {     Map<TaskType, List<TaskDescription>> descriptionsByType = this.scheduledTaskHolders.stream().flatMap((holder) -> holder.getScheduledTasks().stream()).map(ScheduledTask::getTask).map(TaskDescription::of).filter(Objects::nonNull).collect(Collectors.groupingBy(TaskDescription::getType)).     return new ScheduledTasksReport(descriptionsByType). }
false;public;0;3;;public List<TaskDescription> getCron() {     return this.cron. }
false;public;0;3;;public List<TaskDescription> getFixedDelay() {     return this.fixedDelay. }
false;public;0;3;;public List<TaskDescription> getFixedRate() {     return this.fixedRate. }
false;public;0;3;;public List<TaskDescription> getCustom() {     return this.custom. }
false;private,static;1;6;;private static TaskDescription of(Task task) {     return DESCRIBERS.entrySet().stream().filter((entry) -> entry.getKey().isInstance(task)).map((entry) -> entry.getValue().apply(task)).findFirst().orElse(null). }
false;private,static;1;14;;private static TaskDescription describeTriggerTask(TriggerTask triggerTask) {     Trigger trigger = triggerTask.getTrigger().     if (trigger instanceof CronTrigger) {         return new CronTaskDescription(triggerTask, (CronTrigger) trigger).     }     if (trigger instanceof PeriodicTrigger) {         PeriodicTrigger periodicTrigger = (PeriodicTrigger) trigger.         if (periodicTrigger.isFixedRate()) {             return new FixedRateTaskDescription(triggerTask, periodicTrigger).         }         return new FixedDelayTaskDescription(triggerTask, periodicTrigger).     }     return new CustomTriggerTaskDescription(triggerTask). }
false;private;0;3;;private TaskType getType() {     return this.type. }
false;public,final;0;3;;public final RunnableDescription getRunnable() {     return this.runnable. }
false;public;0;3;;public long getInitialDelay() {     return this.initialDelay. }
false;public;0;3;;public long getInterval() {     return this.interval. }
false;public;0;3;;public String getExpression() {     return this.expression. }
false;public;0;3;;public String getTrigger() {     return this.trigger. }
false;public;0;3;;public String getTarget() {     return this.target. }
