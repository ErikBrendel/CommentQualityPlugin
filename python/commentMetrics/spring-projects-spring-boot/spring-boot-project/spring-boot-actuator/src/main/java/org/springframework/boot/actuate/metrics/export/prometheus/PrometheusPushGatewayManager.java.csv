commented;modifiers;parameterAmount;loc;comment;code
false;private;0;16;;private void push() {     try {         this.pushGateway.pushAdd(this.registry, this.job, this.groupingKey).     } catch (UnknownHostException ex) {         String host = ex.getMessage().         String message = "Unable to locate prometheus push gateway host" + (StringUtils.hasLength(host) ? " '" + host + "'" : "") + ". No longer attempting metrics publication to this host".         logger.error(message, ex).         shutdown(ShutdownOperation.NONE).     } catch (Throwable ex) {         logger.error("Unable to push metrics to Prometheus Pushgateway", ex).     } }
false;private;0;8;;private void delete() {     try {         this.pushGateway.delete(this.job, this.groupingKey).     } catch (Throwable ex) {         logger.error("Unable to delete metrics from Prometheus Pushgateway", ex).     } }
true;public;0;3;/**  * Shutdown the manager, running any {@link ShutdownOperation}.  */ ;/**  * Shutdown the manager, running any {@link ShutdownOperation}.  */ public void shutdown() {     shutdown(this.shutdownOperation). }
false;private;1;14;;private void shutdown(ShutdownOperation shutdownOperation) {     if (this.scheduler instanceof PushGatewayTaskScheduler) {         ((PushGatewayTaskScheduler) this.scheduler).shutdown().     }     this.scheduled.cancel(false).     switch(shutdownOperation) {         case PUSH:             push().             break.         case DELETE:             delete().             break.     } }
false;public;0;5;;@Override public ScheduledExecutorService getScheduledExecutor() throws IllegalStateException {     return Executors.newSingleThreadScheduledExecutor(this::newThread). }
