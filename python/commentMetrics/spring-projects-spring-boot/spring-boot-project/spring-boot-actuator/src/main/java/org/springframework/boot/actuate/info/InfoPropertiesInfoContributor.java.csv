commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;0;3;/**  * Return the properties that this instance manages.  * @return the info properties  */ ;/**  * Return the properties that this instance manages.  * @return the info properties  */ protected final T getProperties() {     return this.properties. }
true;protected,final;0;3;/**  * Return the mode that should be used to expose the content.  * @return the mode  */ ;/**  * Return the mode that should be used to expose the content.  * @return the mode  */ protected final Mode getMode() {     return this.mode. }
true;protected,abstract;0;1;/**  * Return a {@link PropertySource} for the {@link Mode#SIMPLE SIMPLE} mode.  * @return the property source for the simple model  * @see #toPropertySource()  */ ;/**  * Return a {@link PropertySource} for the {@link Mode#SIMPLE SIMPLE} mode.  * @return the property source for the simple model  * @see #toPropertySource()  */ protected abstract PropertySource<?> toSimplePropertySource().
true;protected;0;5;/**  * Extract the content to contribute to the info endpoint.  * @return the content to expose  * @see #extractContent(PropertySource)  * @see #postProcessContent(Map)  */ ;/**  * Extract the content to contribute to the info endpoint.  * @return the content to expose  * @see #extractContent(PropertySource)  * @see #postProcessContent(Map)  */ protected Map<String, Object> generateContent() {     Map<String, Object> content = extractContent(toPropertySource()).     postProcessContent(content).     return content. }
true;protected;1;4;/**  * Extract the raw content based on the specified {@link PropertySource}.  * @param propertySource the property source to use  * @return the raw content  */ ;/**  * Extract the raw content based on the specified {@link PropertySource}.  * @param propertySource the property source to use  * @return the raw content  */ protected Map<String, Object> extractContent(PropertySource<?> propertySource) {     return new Binder(ConfigurationPropertySources.from(propertySource)).bind("", STRING_OBJECT_MAP).orElseGet(LinkedHashMap::new). }
true;protected;1;3;/**  * Post-process the content to expose. Elements can be added, changed or removed.  * @param content the content to expose  */ ;/**  * Post-process the content to expose. Elements can be added, changed or removed.  * @param content the content to expose  */ protected void postProcessContent(Map<String, Object> content) { }
true;protected;0;6;/**  * Return the {@link PropertySource} to use based on the chosen {@link Mode}.  * @return the property source  */ ;/**  * Return the {@link PropertySource} to use based on the chosen {@link Mode}.  * @return the property source  */ protected PropertySource<?> toPropertySource() {     if (this.mode.equals(Mode.FULL)) {         return this.properties.toPropertySource().     }     return toSimplePropertySource(). }
true;protected;2;6;/**  * Copy the specified key to the target {@link Properties} if it is set.  * @param target the target properties to update  * @param key the key  */ ;/**  * Copy the specified key to the target {@link Properties} if it is set.  * @param target the target properties to update  * @param key the key  */ protected void copyIfSet(Properties target, String key) {     String value = this.properties.get(key).     if (StringUtils.hasText(value)) {         target.put(key, value).     } }
true;protected;3;5;/**  * Replace the {@code value} for the specified key if the value is not {@code null}.  * @param content the content to expose  * @param key the property to replace  * @param value the new value  */ ;/**  * Replace the {@code value} for the specified key if the value is not {@code null}.  * @param content the content to expose  * @param key the property to replace  * @param value the new value  */ protected void replaceValue(Map<String, Object> content, String key, Object value) {     if (content.containsKey(key) && value != null) {         content.put(key, value).     } }
true;protected;2;8;/**  * Return the nested map with the specified key or empty map if the specified map  * contains no mapping for the key.  * @param map the content  * @param key the key of a nested map  * @return the nested map  */ ;/**  * Return the nested map with the specified key or empty map if the specified map  * contains no mapping for the key.  * @param map the content  * @param key the key of a nested map  * @return the nested map  */ @SuppressWarnings("unchecked") protected Map<String, Object> getNestedMap(Map<String, Object> map, String key) {     Object value = map.get(key).     if (value == null) {         return Collections.emptyMap().     }     return (Map<String, Object>) value. }
