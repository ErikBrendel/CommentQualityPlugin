commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Create a {@link HealthIndicatorRegistry} based on the specified health indicators.  * @param healthIndicators the {@link HealthIndicator} instances mapped by name  * @return a {@link HealthIndicator} that delegates to the specified  * {@code healthIndicators}.  */ ;/**  * Create a {@link HealthIndicatorRegistry} based on the specified health indicators.  * @param healthIndicators the {@link HealthIndicator} instances mapped by name  * @return a {@link HealthIndicator} that delegates to the specified  * {@code healthIndicators}.  */ public HealthIndicatorRegistry createHealthIndicatorRegistry(Map<String, HealthIndicator> healthIndicators) {     Assert.notNull(healthIndicators, "HealthIndicators must not be null").     return initialize(new DefaultHealthIndicatorRegistry(), healthIndicators). }
false;protected;2;8;;protected <T extends HealthIndicatorRegistry> T initialize(T registry, Map<String, HealthIndicator> healthIndicators) {     for (Map.Entry<String, HealthIndicator> entry : healthIndicators.entrySet()) {         String name = this.healthIndicatorNameFactory.apply(entry.getKey()).         registry.register(name, entry.getValue()).     }     return registry. }
