# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1516423464;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1517509533;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1517518977;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1518432379;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1519045463;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
ReflectiveOperationInvoker -> public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod, 			ParameterValueMapper parameterValueMapper);1519128725;Creates a new {code ReflectiveOperationInvoker} that will invoke the given_{@code method} on the given {@code target}. The given {@code parameterMapper} will_be used to map parameters to the required types and the given_{@code parameterNameMapper} will be used map parameters by name._@param target the target of the reflective call_@param operationMethod the method info_@param parameterValueMapper the parameter mapper;public ReflectiveOperationInvoker(Object target, OperationMethod operationMethod,_			ParameterValueMapper parameterValueMapper) {_		Assert.notNull(target, "Target must not be null")__		Assert.notNull(operationMethod, "OperationMethod must not be null")__		Assert.notNull(parameterValueMapper, "ParameterValueMapper must not be null")__		ReflectionUtils.makeAccessible(operationMethod.getMethod())__		this.target = target__		this.operationMethod = operationMethod__		this.parameterValueMapper = parameterValueMapper__	};creates,a,new,code,reflective,operation,invoker,that,will,invoke,the,given,code,method,on,the,given,code,target,the,given,code,parameter,mapper,will,be,used,to,map,parameters,to,the,required,types,and,the,given,code,parameter,name,mapper,will,be,used,map,parameters,by,name,param,target,the,target,of,the,reflective,call,param,operation,method,the,method,info,param,parameter,value,mapper,the,parameter,mapper;public,reflective,operation,invoker,object,target,operation,method,operation,method,parameter,value,mapper,parameter,value,mapper,assert,not,null,target,target,must,not,be,null,assert,not,null,operation,method,operation,method,must,not,be,null,assert,not,null,parameter,value,mapper,parameter,value,mapper,must,not,be,null,reflection,utils,make,accessible,operation,method,get,method,this,target,target,this,operation,method,operation,method,this,parameter,value,mapper,parameter,value,mapper
