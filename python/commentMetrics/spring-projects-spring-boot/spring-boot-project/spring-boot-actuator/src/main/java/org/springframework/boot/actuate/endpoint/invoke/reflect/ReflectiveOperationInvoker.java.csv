commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public Object invoke(InvocationContext context) {     validateRequiredParameters(context).     Method method = this.operationMethod.getMethod().     Object[] resolvedArguments = resolveArguments(context).     ReflectionUtils.makeAccessible(method).     return ReflectionUtils.invokeMethod(method, this.target, resolvedArguments). }
false;private;1;8;;private void validateRequiredParameters(InvocationContext context) {     Set<OperationParameter> missing = this.operationMethod.getParameters().stream().filter((parameter) -> isMissing(context, parameter)).collect(Collectors.toSet()).     if (!missing.isEmpty()) {         throw new MissingParametersException(missing).     } }
false;private;2;12;;private boolean isMissing(InvocationContext context, OperationParameter parameter) {     if (!parameter.isMandatory()) {         return false.     }     if (Principal.class.equals(parameter.getType())) {         return context.getSecurityContext().getPrincipal() == null.     }     if (SecurityContext.class.equals(parameter.getType())) {         return false.     }     return context.getArguments().get(parameter.getName()) == null. }
false;private;1;4;;private Object[] resolveArguments(InvocationContext context) {     return this.operationMethod.getParameters().stream().map((parameter) -> resolveArgument(parameter, context)).toArray(). }
false;private;2;11;;private Object resolveArgument(OperationParameter parameter, InvocationContext context) {     if (Principal.class.equals(parameter.getType())) {         return context.getSecurityContext().getPrincipal().     }     if (SecurityContext.class.equals(parameter.getType())) {         return context.getSecurityContext().     }     Object value = context.getArguments().get(parameter.getName()).     return this.parameterValueMapper.mapParameterValue(parameter, value). }
false;public;0;5;;@Override public String toString() {     return new ToStringCreator(this).append("target", this.target).append("method", this.operationMethod).toString(). }
