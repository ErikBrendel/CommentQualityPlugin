commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;/**  * Resolves links to the known endpoints based on a request with the given  * {@code requestUrl}.  * @param requestUrl the url of the request for the endpoint links  * @return the links  */ ;/**  * Resolves links to the known endpoints based on a request with the given  * {@code requestUrl}.  * @param requestUrl the url of the request for the endpoint links  * @return the links  */ public Map<String, Link> resolveLinks(String requestUrl) {     String normalizedUrl = normalizeRequestUrl(requestUrl).     Map<String, Link> links = new LinkedHashMap<>().     links.put("self", new Link(normalizedUrl)).     for (ExposableEndpoint<?> endpoint : this.endpoints) {         if (endpoint instanceof ExposableWebEndpoint) {             collectLinks(links, (ExposableWebEndpoint) endpoint, normalizedUrl).         } else if (endpoint instanceof PathMappedEndpoint) {             String rootPath = ((PathMappedEndpoint) endpoint).getRootPath().             Link link = createLink(normalizedUrl, rootPath).             links.put(endpoint.getEndpointId().toLowerCaseString(), link).         }     }     return links. }
false;private;1;6;;private String normalizeRequestUrl(String requestUrl) {     if (requestUrl.endsWith("/")) {         return requestUrl.substring(0, requestUrl.length() - 1).     }     return requestUrl. }
false;private;3;6;;private void collectLinks(Map<String, Link> links, ExposableWebEndpoint endpoint, String normalizedUrl) {     for (WebOperation operation : endpoint.getOperations()) {         links.put(operation.getId(), createLink(normalizedUrl, operation)).     } }
false;private;2;3;;private Link createLink(String requestUrl, WebOperation operation) {     return createLink(requestUrl, operation.getRequestPredicate().getPath()). }
false;private;2;3;;private Link createLink(String requestUrl, String path) {     return new Link(requestUrl + (path.startsWith("/") ? path : "/" + path)). }
