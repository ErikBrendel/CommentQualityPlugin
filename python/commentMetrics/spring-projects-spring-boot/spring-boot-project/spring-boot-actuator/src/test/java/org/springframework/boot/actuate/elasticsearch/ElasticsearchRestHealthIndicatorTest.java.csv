commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void elasticsearchIsUp() throws IOException {     BasicHttpEntity httpEntity = new BasicHttpEntity().     httpEntity.setContent(new ByteArrayInputStream(createJsonResult(200, "green").getBytes())).     Response response = mock(Response.class).     StatusLine statusLine = mock(StatusLine.class).     given(statusLine.getStatusCode()).willReturn(200).     given(response.getStatusLine()).willReturn(statusLine).     given(response.getEntity()).willReturn(httpEntity).     given(this.restClient.performRequest(any(Request.class))).willReturn(response).     Health health = this.elasticsearchRestHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     assertHealthDetailsWithStatus(health.getDetails(), "green"). }
false;public;0;15;;@Test public void elasticsearchWithYellowStatusIsUp() throws IOException {     BasicHttpEntity httpEntity = new BasicHttpEntity().     httpEntity.setContent(new ByteArrayInputStream(createJsonResult(200, "yellow").getBytes())).     Response response = mock(Response.class).     StatusLine statusLine = mock(StatusLine.class).     given(statusLine.getStatusCode()).willReturn(200).     given(response.getStatusLine()).willReturn(statusLine).     given(response.getEntity()).willReturn(httpEntity).     given(this.restClient.performRequest(any(Request.class))).willReturn(response).     Health health = this.elasticsearchRestHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     assertHealthDetailsWithStatus(health.getDetails(), "yellow"). }
false;public;0;9;;@Test public void elasticsearchIsDown() throws IOException {     given(this.restClient.performRequest(any(Request.class))).willThrow(new IOException("Couldn't connect")).     Health health = this.elasticsearchRestHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails()).contains(entry("error", "java.io.IOException: Couldn't connect")). }
false;public;0;13;;@Test public void elasticsearchIsDownByResponseCode() throws IOException {     Response response = mock(Response.class).     StatusLine statusLine = mock(StatusLine.class).     given(statusLine.getStatusCode()).willReturn(500).     given(statusLine.getReasonPhrase()).willReturn("Internal server error").     given(response.getStatusLine()).willReturn(statusLine).     given(this.restClient.performRequest(any(Request.class))).willReturn(response).     Health health = this.elasticsearchRestHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails()).contains(entry("statusCode", 500), entry("reasonPhrase", "Internal server error")). }
false;public;0;15;;@Test public void elasticsearchIsOutOfServiceByStatus() throws IOException {     BasicHttpEntity httpEntity = new BasicHttpEntity().     httpEntity.setContent(new ByteArrayInputStream(createJsonResult(200, "red").getBytes())).     Response response = mock(Response.class).     StatusLine statusLine = mock(StatusLine.class).     given(statusLine.getStatusCode()).willReturn(200).     given(response.getStatusLine()).willReturn(statusLine).     given(response.getEntity()).willReturn(httpEntity).     given(this.restClient.performRequest(any(Request.class))).willReturn(response).     Health health = this.elasticsearchRestHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.OUT_OF_SERVICE).     assertHealthDetailsWithStatus(health.getDetails(), "red"). }
false;private;2;13;;private void assertHealthDetailsWithStatus(Map<String, Object> details, String status) {     assertThat(details).contains(entry("cluster_name", "elasticsearch"), entry("status", status), entry("timed_out", false), entry("number_of_nodes", 1), entry("number_of_data_nodes", 1), entry("active_primary_shards", 0), entry("active_shards", 0), entry("relocating_shards", 0), entry("initializing_shards", 0), entry("unassigned_shards", 0), entry("delayed_unassigned_shards", 0), entry("number_of_pending_tasks", 0), entry("number_of_in_flight_fetch", 0), entry("task_max_waiting_in_queue_millis", 0), entry("active_shards_percent_as_number", 100.0)). }
false;private;2;14;;private String createJsonResult(int responseCode, String status) {     if (responseCode == 200) {         return String.format("{\"cluster_name\":\"elasticsearch\"," + "\"status\":\"%s\",\"timed_out\":false,\"number_of_nodes\":1," + "\"number_of_data_nodes\":1,\"active_primary_shards\":0," + "\"active_shards\":0,\"relocating_shards\":0,\"initializing_shards\":0," + "\"unassigned_shards\":0,\"delayed_unassigned_shards\":0," + "\"number_of_pending_tasks\":0,\"number_of_in_flight_fetch\":0," + "\"task_max_waiting_in_queue_millis\":0,\"active_shards_percent_as_number\":100.0}", status).     }     return "{\n" + "  \"error\": \"Server Error\",\n" + "  \"status\": " + responseCode + "\n" + "}". }
