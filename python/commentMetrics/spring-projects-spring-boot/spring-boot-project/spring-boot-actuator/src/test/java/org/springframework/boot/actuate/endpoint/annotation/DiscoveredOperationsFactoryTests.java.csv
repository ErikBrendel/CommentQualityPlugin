commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.parameterValueMapper = (parameter, value) -> value.toString().     this.invokerAdvisors = new ArrayList<>().     this.factory = new TestDiscoveredOperationsFactory(this.parameterValueMapper, this.invokerAdvisors). }
false;public;0;8;;@Test public void createOperationsWhenHasReadMethodShouldCreateOperation() {     Collection<TestOperation> operations = this.factory.createOperations(EndpointId.of("test"), new ExampleRead()).     assertThat(operations).hasSize(1).     TestOperation operation = getFirst(operations).     assertThat(operation.getType()).isEqualTo(OperationType.READ). }
false;public;0;8;;@Test public void createOperationsWhenHasWriteMethodShouldCreateOperation() {     Collection<TestOperation> operations = this.factory.createOperations(EndpointId.of("test"), new ExampleWrite()).     assertThat(operations).hasSize(1).     TestOperation operation = getFirst(operations).     assertThat(operation.getType()).isEqualTo(OperationType.WRITE). }
false;public;0;8;;@Test public void createOperationsWhenHasDeleteMethodShouldCreateOperation() {     Collection<TestOperation> operations = this.factory.createOperations(EndpointId.of("test"), new ExampleDelete()).     assertThat(operations).hasSize(1).     TestOperation operation = getFirst(operations).     assertThat(operation.getType()).isEqualTo(OperationType.DELETE). }
false;public;0;8;;@Test public void createOperationsWhenMultipleShouldReturnMultiple() {     Collection<TestOperation> operations = this.factory.createOperations(EndpointId.of("test"), new ExampleMultiple()).     assertThat(operations).hasSize(2).     assertThat(operations.stream().map(TestOperation::getType)).containsOnly(OperationType.READ, OperationType.WRITE). }
false;public;0;8;;@Test public void createOperationsShouldProvideOperationMethod() {     TestOperation operation = getFirst(this.factory.createOperations(EndpointId.of("test"), new ExampleWithParams())).     OperationMethod operationMethod = operation.getOperationMethod().     assertThat(operationMethod.getMethod().getName()).isEqualTo("read").     assertThat(operationMethod.getParameters().hasParameters()).isTrue(). }
false;public;0;9;;@Test public void createOperationsShouldProviderInvoker() {     TestOperation operation = getFirst(this.factory.createOperations(EndpointId.of("test"), new ExampleWithParams())).     Map<String, Object> params = Collections.singletonMap("name", 123).     Object result = operation.invoke(new InvocationContext(mock(SecurityContext.class), params)).     assertThat(result).isEqualTo("123"). }
false;public;0;12;;@Test public void createOperationShouldApplyAdvisors() {     TestOperationInvokerAdvisor advisor = new TestOperationInvokerAdvisor().     this.invokerAdvisors.add(advisor).     TestOperation operation = getFirst(this.factory.createOperations(EndpointId.of("test"), new ExampleRead())).     operation.invoke(new InvocationContext(mock(SecurityContext.class), Collections.emptyMap())).     assertThat(advisor.getEndpointId()).isEqualTo(EndpointId.of("test")).     assertThat(advisor.getOperationType()).isEqualTo(OperationType.READ).     assertThat(advisor.getParameters()).isEmpty(). }
false;private;1;3;;private <T> T getFirst(Iterable<T> iterable) {     return iterable.iterator().next(). }
false;public;0;4;;@ReadOperation public String read() {     return "read". }
false;public;0;4;;@WriteOperation public String write() {     return "write". }
false;public;0;4;;@DeleteOperation public String delete() {     return "delete". }
false;public;0;4;;@ReadOperation public String read() {     return "read". }
false;public;0;4;;@WriteOperation public String write() {     return "write". }
false;public;1;4;;@ReadOperation public String read(String name) {     return name. }
false;protected;3;5;;@Override protected TestOperation createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker) {     return new TestOperation(endpointId, operationMethod, invoker). }
false;public;4;8;;@Override public OperationInvoker apply(EndpointId endpointId, OperationType operationType, OperationParameters parameters, OperationInvoker invoker) {     this.endpointId = endpointId.     this.operationType = operationType.     this.parameters = parameters.     return invoker. }
false;public;0;3;;public EndpointId getEndpointId() {     return this.endpointId. }
false;public;0;3;;public OperationType getOperationType() {     return this.operationType. }
false;public;0;3;;public OperationParameters getParameters() {     return this.parameters. }
