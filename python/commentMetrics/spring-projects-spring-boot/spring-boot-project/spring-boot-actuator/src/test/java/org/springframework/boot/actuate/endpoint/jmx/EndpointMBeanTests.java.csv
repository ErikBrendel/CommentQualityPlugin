commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenResponseMapperIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new EndpointMBean(null, null, mock(ExposableJmxEndpoint.class))).withMessageContaining("ResponseMapper must not be null"). }
false;public;0;7;;@Test public void createWhenEndpointIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new EndpointMBean(mock(JmxOperationResponseMapper.class), null, null)).withMessageContaining("Endpoint must not be null"). }
false;public;0;6;;@Test public void getMBeanInfoShouldReturnMBeanInfo() {     EndpointMBean bean = createEndpointMBean().     MBeanInfo info = bean.getMBeanInfo().     assertThat(info.getDescription()).isEqualTo("MBean operations for endpoint test"). }
false;public;0;7;;@Test public void invokeShouldInvokeJmxOperation() throws MBeanException, ReflectionException {     EndpointMBean bean = createEndpointMBean().     Object result = bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE).     assertThat(result).isEqualTo("result"). }
false;public;0;14;;@Test public void invokeWhenOperationFailedShouldTranslateException() throws MBeanException, ReflectionException {     TestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(new TestJmxOperation((arguments) -> {         throw new FatalBeanException("test failure").     })).     EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint).     assertThatExceptionOfType(MBeanException.class).isThrownBy(() -> bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE)).withCauseInstanceOf(IllegalStateException.class).withMessageContaining("test failure"). }
false;public;0;13;;@Test public void invokeWhenOperationFailedWithJdkExceptionShouldReuseException() throws MBeanException, ReflectionException {     TestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(new TestJmxOperation((arguments) -> {         throw new UnsupportedOperationException("test failure").     })).     EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint).     assertThatExceptionOfType(MBeanException.class).isThrownBy(() -> bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE)).withCauseInstanceOf(UnsupportedOperationException.class).withMessageContaining("test failure"). }
false;public;0;10;;@Test public void invokeWhenActionNameIsNotAnOperationShouldThrowException() throws MBeanException, ReflectionException {     EndpointMBean bean = createEndpointMBean().     assertThatExceptionOfType(ReflectionException.class).isThrownBy(() -> bean.invoke("missingOperation", NO_PARAMS, NO_SIGNATURE)).withCauseInstanceOf(IllegalArgumentException.class).withMessageContaining("no operation named missingOperation"). }
false;public;0;15;;@Test public void invokeShouldInvokeJmxOperationWithBeanClassLoader() throws ReflectionException, MBeanException {     ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader().     TestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(new TestJmxOperation((arguments) -> ClassUtils.getDefaultClassLoader())).     URLClassLoader beanClassLoader = new URLClassLoader(new URL[0], getClass().getClassLoader()).     EndpointMBean bean = new EndpointMBean(this.responseMapper, beanClassLoader, endpoint).     Object result = bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE).     assertThat(result).isEqualTo(beanClassLoader).     assertThat(Thread.currentThread().getContextClassLoader()).isEqualTo(originalClassLoader). }
false;public;1;4;;@Override public Object invoke(InvocationContext context) {     throw new InvalidEndpointRequestException("test failure", "test"). }
false;public;0;18;;@Test public void invokeWhenOperationIsInvalidShouldThrowException() throws MBeanException, ReflectionException {     TestJmxOperation operation = new TestJmxOperation() {          @Override         public Object invoke(InvocationContext context) {             throw new InvalidEndpointRequestException("test failure", "test").         }     }.     TestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(operation).     EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint).     assertThatExceptionOfType(ReflectionException.class).isThrownBy(() -> bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE)).withRootCauseInstanceOf(IllegalArgumentException.class).withMessageContaining("test failure"). }
false;public;0;9;;@Test public void invokeWhenMonoResultShouldBlockOnMono() throws MBeanException, ReflectionException {     TestExposableJmxEndpoint endpoint = new TestExposableJmxEndpoint(new TestJmxOperation((arguments) -> Mono.just("monoResult"))).     EndpointMBean bean = new EndpointMBean(this.responseMapper, null, endpoint).     Object result = bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE).     assertThat(result).isEqualTo("monoResult"). }
false;public;0;9;;@Test public void invokeShouldCallResponseMapper() throws MBeanException, ReflectionException {     TestJmxOperationResponseMapper responseMapper = spy(this.responseMapper).     EndpointMBean bean = new EndpointMBean(responseMapper, null, this.endpoint).     bean.invoke("testOperation", NO_PARAMS, NO_SIGNATURE).     verify(responseMapper).mapResponseType(String.class).     verify(responseMapper).mapResponse("result"). }
false;public;0;8;;@Test public void getAttributeShouldThrowException() throws AttributeNotFoundException, MBeanException, ReflectionException {     EndpointMBean bean = createEndpointMBean().     assertThatExceptionOfType(AttributeNotFoundException.class).isThrownBy(() -> bean.getAttribute("test")).withMessageContaining("EndpointMBeans do not support attributes"). }
false;public;0;8;;@Test public void setAttributeShouldThrowException() throws AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {     EndpointMBean bean = createEndpointMBean().     assertThatExceptionOfType(AttributeNotFoundException.class).isThrownBy(() -> bean.setAttribute(new Attribute("test", "test"))).withMessageContaining("EndpointMBeans do not support attributes"). }
false;public;0;6;;@Test public void getAttributesShouldReturnEmptyAttributeList() {     EndpointMBean bean = createEndpointMBean().     AttributeList attributes = bean.getAttributes(new String[] { "test" }).     assertThat(attributes).isEmpty(). }
false;public;0;8;;@Test public void setAttributesShouldReturnEmptyAttributeList() {     EndpointMBean bean = createEndpointMBean().     AttributeList sourceAttributes = new AttributeList().     sourceAttributes.add(new Attribute("test", "test")).     AttributeList attributes = bean.setAttributes(sourceAttributes).     assertThat(attributes).isEmpty(). }
false;private;0;3;;private EndpointMBean createEndpointMBean() {     return new EndpointMBean(this.responseMapper, null, this.endpoint). }
