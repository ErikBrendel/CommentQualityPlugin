commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     this.request = ClientRequest.create(HttpMethod.GET, URI.create("http://example.org/projects/spring-boot")).attribute(URI_TEMPLATE_ATTRIBUTE, "http://example.org/projects/{project}").build().     this.response = mock(ClientResponse.class).     given(this.response.statusCode()).willReturn(HttpStatus.OK). }
false;public;0;5;;@Test public void method() {     assertThat(WebClientExchangeTags.method(this.request)).isEqualTo(Tag.of("method", "GET")). }
false;public;0;5;;@Test public void uriWhenAbsoluteTemplateIsAvailableShouldReturnTemplate() {     assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri", "/projects/{project}")). }
false;public;0;9;;@Test public void uriWhenRelativeTemplateIsAvailableShouldReturnTemplate() {     this.request = ClientRequest.create(HttpMethod.GET, URI.create("http://example.org/projects/spring-boot")).attribute(URI_TEMPLATE_ATTRIBUTE, "/projects/{project}").build().     assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri", "/projects/{project}")). }
false;public;0;7;;@Test public void uriWhenTemplateIsMissingShouldReturnPath() {     this.request = ClientRequest.create(HttpMethod.GET, URI.create("http://example.org/projects/spring-boot")).build().     assertThat(WebClientExchangeTags.uri(this.request)).isEqualTo(Tag.of("uri", "/projects/spring-boot")). }
false;public;0;5;;@Test public void clientName() {     assertThat(WebClientExchangeTags.clientName(this.request)).isEqualTo(Tag.of("clientName", "example.org")). }
false;public;0;5;;@Test public void status() {     assertThat(WebClientExchangeTags.status(this.response)).isEqualTo(Tag.of("status", "200")). }
false;public;0;5;;@Test public void statusWhenIOException() {     assertThat(WebClientExchangeTags.status(new IOException())).isEqualTo(Tag.of("status", "IO_ERROR")). }
false;public;0;5;;@Test public void statusWhenClientException() {     assertThat(WebClientExchangeTags.status(new IllegalArgumentException())).isEqualTo(Tag.of("status", "CLIENT_ERROR")). }
false;public;0;5;;@Test public void outcomeTagIsUnknownWhenResponseIsNull() {     Tag tag = WebClientExchangeTags.outcome(null).     assertThat(tag.getValue()).isEqualTo("UNKNOWN"). }
false;public;0;6;;@Test public void outcomeTagIsInformationalWhenResponseIs1xx() {     given(this.response.statusCode()).willReturn(HttpStatus.CONTINUE).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("INFORMATIONAL"). }
false;public;0;6;;@Test public void outcomeTagIsSuccessWhenResponseIs2xx() {     given(this.response.statusCode()).willReturn(HttpStatus.OK).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("SUCCESS"). }
false;public;0;6;;@Test public void outcomeTagIsRedirectionWhenResponseIs3xx() {     given(this.response.statusCode()).willReturn(HttpStatus.MOVED_PERMANENTLY).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("REDIRECTION"). }
false;public;0;6;;@Test public void outcomeTagIsClientErrorWhenResponseIs4xx() {     given(this.response.statusCode()).willReturn(HttpStatus.BAD_REQUEST).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("CLIENT_ERROR"). }
false;public;0;6;;@Test public void outcomeTagIsServerErrorWhenResponseIs5xx() {     given(this.response.statusCode()).willReturn(HttpStatus.BAD_GATEWAY).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("SERVER_ERROR"). }
false;public;0;6;;@Test public void outcomeTagIsUnknownWhenResponseStatusIsUnknown() {     given(this.response.statusCode()).willThrow(IllegalArgumentException.class).     Tag tag = WebClientExchangeTags.outcome(this.response).     assertThat(tag.getValue()).isEqualTo("UNKNOWN"). }
