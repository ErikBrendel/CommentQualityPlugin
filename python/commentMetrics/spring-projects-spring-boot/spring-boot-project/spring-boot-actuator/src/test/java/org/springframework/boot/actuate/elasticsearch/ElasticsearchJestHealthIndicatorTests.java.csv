commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void elasticsearchIsUp() throws IOException {     given(this.jestClient.execute(any(Action.class))).willReturn(createJestResult(200, true, "green")).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     assertHealthDetailsWithStatus(health.getDetails(), "green"). }
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void elasticsearchWithYellowStatusIsUp() throws IOException {     given(this.jestClient.execute(any(Action.class))).willReturn(createJestResult(200, true, "yellow")).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     assertHealthDetailsWithStatus(health.getDetails(), "yellow"). }
false;public;0;8;;@SuppressWarnings("unchecked") @Test public void elasticsearchIsDown() throws IOException {     given(this.jestClient.execute(any(Action.class))).willThrow(new CouldNotConnectException("http://localhost:9200", new IOException())).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN). }
false;public;0;8;;@SuppressWarnings("unchecked") @Test public void elasticsearchIsDownWhenQueryDidNotSucceed() throws IOException {     given(this.jestClient.execute(any(Action.class))).willReturn(createJestResult(200, false, "")).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void elasticsearchIsDownByResponseCode() throws IOException {     given(this.jestClient.execute(any(Action.class))).willReturn(createJestResult(500, false, "")).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails()).contains(entry("statusCode", 500)). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void elasticsearchIsOutOfServiceByStatus() throws IOException {     given(this.jestClient.execute(any(Action.class))).willReturn(createJestResult(200, true, "red")).     Health health = this.healthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.OUT_OF_SERVICE).     assertHealthDetailsWithStatus(health.getDetails(), "red"). }
false;private;2;13;;private void assertHealthDetailsWithStatus(Map<String, Object> details, String status) {     assertThat(details).contains(entry("cluster_name", "elasticsearch"), entry("status", status), entry("timed_out", false), entry("number_of_nodes", 1), entry("number_of_data_nodes", 1), entry("active_primary_shards", 0), entry("active_shards", 0), entry("relocating_shards", 0), entry("initializing_shards", 0), entry("unassigned_shards", 0), entry("delayed_unassigned_shards", 0), entry("number_of_pending_tasks", 0), entry("number_of_in_flight_fetch", 0), entry("task_max_waiting_in_queue_millis", 0), entry("active_shards_percent_as_number", 100.0)). }
false;private,static;3;25;;private static JestResult createJestResult(int responseCode, boolean succeeded, String status) {     SearchResult searchResult = new SearchResult(new Gson()).     String json.     if (responseCode == 200) {         json = String.format("{\"cluster_name\":\"elasticsearch\"," + "\"status\":\"%s\",\"timed_out\":false,\"number_of_nodes\":1," + "\"number_of_data_nodes\":1,\"active_primary_shards\":0," + "\"active_shards\":0,\"relocating_shards\":0,\"initializing_shards\":0," + "\"unassigned_shards\":0,\"delayed_unassigned_shards\":0," + "\"number_of_pending_tasks\":0,\"number_of_in_flight_fetch\":0," + "\"task_max_waiting_in_queue_millis\":0,\"active_shards_percent_as_number\":100.0}", status).     } else {         json = "{\n" + "  \"error\": \"Server Error\",\n" + "  \"status\": \"" + status + "\"\n" + "}".     }     searchResult.setJsonString(json).     searchResult.setJsonObject(new JsonParser().parse(json).getAsJsonObject()).     searchResult.setResponseCode(responseCode).     searchResult.setSucceeded(succeeded).     return searchResult. }
