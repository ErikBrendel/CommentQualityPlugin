commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void linkResolutionWithTrailingSlashStripsSlashOnSelfLink() {     Map<String, Link> links = new EndpointLinksResolver(Collections.emptyList()).resolveLinks("https://api.example.com/actuator/").     assertThat(links).hasSize(1).     assertThat(links).hasEntrySatisfying("self", linkWithHref("https://api.example.com/actuator")). }
false;public;0;8;;@Test public void linkResolutionWithoutTrailingSlash() {     Map<String, Link> links = new EndpointLinksResolver(Collections.emptyList()).resolveLinks("https://api.example.com/actuator").     assertThat(links).hasSize(1).     assertThat(links).hasEntrySatisfying("self", linkWithHref("https://api.example.com/actuator")). }
false;public;0;20;;@Test public void resolvedLinksContainsALinkForEachWebEndpointOperation() {     List<WebOperation> operations = new ArrayList<>().     operations.add(operationWithPath("/alpha", "alpha")).     operations.add(operationWithPath("/alpha/{name}", "alpha-name")).     ExposableWebEndpoint endpoint = mock(ExposableWebEndpoint.class).     given(endpoint.getEndpointId()).willReturn(EndpointId.of("alpha")).     given(endpoint.isEnableByDefault()).willReturn(true).     given(endpoint.getOperations()).willReturn(operations).     String requestUrl = "https://api.example.com/actuator".     Map<String, Link> links = new EndpointLinksResolver(Collections.singletonList(endpoint)).resolveLinks(requestUrl).     assertThat(links).hasSize(3).     assertThat(links).hasEntrySatisfying("self", linkWithHref("https://api.example.com/actuator")).     assertThat(links).hasEntrySatisfying("alpha", linkWithHref("https://api.example.com/actuator/alpha")).     assertThat(links).hasEntrySatisfying("alpha-name", linkWithHref("https://api.example.com/actuator/alpha/{name}")). }
false;public;0;15;;@Test public void resolvedLinksContainsALinkForServletEndpoint() {     ExposableServletEndpoint servletEndpoint = mock(ExposableServletEndpoint.class).     given(servletEndpoint.getEndpointId()).willReturn(EndpointId.of("alpha")).     given(servletEndpoint.isEnableByDefault()).willReturn(true).     given(servletEndpoint.getRootPath()).willReturn("alpha").     String requestUrl = "https://api.example.com/actuator".     Map<String, Link> links = new EndpointLinksResolver(Collections.singletonList(servletEndpoint)).resolveLinks(requestUrl).     assertThat(links).hasSize(2).     assertThat(links).hasEntrySatisfying("self", linkWithHref("https://api.example.com/actuator")).     assertThat(links).hasEntrySatisfying("alpha", linkWithHref("https://api.example.com/actuator/alpha")). }
false;public;0;16;;@Test public void resolvedLinksContainsALinkForControllerEndpoint() {     ExposableControllerEndpoint controllerEndpoint = mock(ExposableControllerEndpoint.class).     given(controllerEndpoint.getEndpointId()).willReturn(EndpointId.of("alpha")).     given(controllerEndpoint.isEnableByDefault()).willReturn(true).     given(controllerEndpoint.getRootPath()).willReturn("alpha").     String requestUrl = "https://api.example.com/actuator".     Map<String, Link> links = new EndpointLinksResolver(Collections.singletonList(controllerEndpoint)).resolveLinks(requestUrl).     assertThat(links).hasSize(2).     assertThat(links).hasEntrySatisfying("self", linkWithHref("https://api.example.com/actuator")).     assertThat(links).hasEntrySatisfying("alpha", linkWithHref("https://api.example.com/actuator/alpha")). }
false;private;2;10;;private WebOperation operationWithPath(String path, String id) {     WebOperationRequestPredicate predicate = new WebOperationRequestPredicate(path, WebEndpointHttpMethod.GET, Collections.emptyList(), Collections.emptyList()).     WebOperation operation = mock(WebOperation.class).     given(operation.getId()).willReturn(id).     given(operation.getType()).willReturn(OperationType.READ).     given(operation.getRequestPredicate()).willReturn(predicate).     return operation. }
false;private;1;4;;private Condition<Link> linkWithHref(String href) {     return new Condition<>((link) -> href.equals(link.getHref()), "Link with href '%s'", href). }
