commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void createWhenApplicationContextIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestEndpointDiscoverer(null, mock(ParameterValueMapper.class), Collections.emptyList(), Collections.emptyList())).withMessageContaining("ApplicationContext must not be null"). }
false;public;0;8;;@Test public void createWhenParameterValueMapperIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestEndpointDiscoverer(mock(ApplicationContext.class), null, Collections.emptyList(), Collections.emptyList())).withMessageContaining("ParameterValueMapper must not be null"). }
false;public;0;8;;@Test public void createWhenInvokerAdvisorsIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestEndpointDiscoverer(mock(ApplicationContext.class), mock(ParameterValueMapper.class), null, Collections.emptyList())).withMessageContaining("InvokerAdvisors must not be null"). }
false;public;0;7;;@Test public void createWhenFiltersIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestEndpointDiscoverer(mock(ApplicationContext.class), mock(ParameterValueMapper.class), Collections.emptyList(), null)).withMessageContaining("Filters must not be null"). }
false;public;0;8;;@Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection() {     load(EmptyConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context).         Collection<TestExposableEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).isEmpty().     }). }
false;public;0;4;;@Test public void getEndpointsWhenHasEndpointShouldReturnEndpoint() {     load(TestEndpointConfiguration.class, this::hasTestEndpoint). }
false;public;0;6;;@Test public void getEndpointsWhenHasEndpointInParentContextShouldReturnEndpoint() {     AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext(TestEndpointConfiguration.class).     loadWithParent(parent, EmptyConfiguration.class, this::hasTestEndpoint). }
false;public;0;16;;@Test public void getEndpointsWhenHasSubclassedEndpointShouldReturnEndpoint() {     load(TestEndpointSubclassConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context).         Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of("test"))).         assertThat(operations).hasSize(5).         assertThat(operations).containsKeys(testEndpointMethods()).         assertThat(operations).containsKeys(ReflectionUtils.findMethod(TestEndpointSubclass.class, "updateWithMoreArguments", String.class, String.class, String.class)).     }). }
false;public;0;8;;@Test public void getEndpointsWhenTwoEndpointsHaveTheSameIdShouldThrowException() {     load(ClashingEndpointConfiguration.class, (context) -> assertThatIllegalStateException().isThrownBy(new TestEndpointDiscoverer(context)::getEndpoints).withMessageContaining("Found two endpoints with the id 'test': ")). }
false;public;0;11;;@Test public void getEndpointsWhenEndpointsArePrefixedWithScopedTargetShouldRegisterOnlyOneEndpoint() {     load(ScopedTargetEndpointConfiguration.class, (context) -> {         TestEndpoint expectedEndpoint = context.getBean(ScopedTargetEndpointConfiguration.class).testEndpoint().         Collection<TestExposableEndpoint> endpoints = new TestEndpointDiscoverer(context).getEndpoints().         assertThat(endpoints).flatExtracting(TestExposableEndpoint::getEndpointBean).containsOnly(expectedEndpoint).     }). }
false;public;0;14;;@Test public void getEndpointsWhenTtlSetToZeroShouldNotCacheInvokeCalls() {     load(TestEndpointConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context, (endpointId) -> 0L).         Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of("test"))).         operations.values().forEach((operation) -> assertThat(operation.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class)).     }). }
false;public;0;14;;@Test public void getEndpointsWhenTtlSetByIdAndIdDoesNotMatchShouldNotCacheInvokeCalls() {     load(TestEndpointConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context, (endpointId) -> (endpointId.equals("foo") ? 500L : 0L)).         Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of("test"))).         operations.values().forEach((operation) -> assertThat(operation.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class)).     }). }
false;public;0;24;;@Test public void getEndpointsWhenTtlSetByIdAndIdMatchesShouldCacheInvokeCalls() {     load(TestEndpointConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context, (endpointId) -> (endpointId.equals(EndpointId.of("test")) ? 500L : 0L)).         Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of("test"))).         TestOperation getAll = operations.get(findTestEndpointMethod("getAll")).         TestOperation getOne = operations.get(findTestEndpointMethod("getOne", String.class)).         TestOperation update = operations.get(ReflectionUtils.findMethod(TestEndpoint.class, "update", String.class, String.class)).         assertThat(((CachingOperationInvoker) getAll.getInvoker()).getTimeToLive()).isEqualTo(500).         assertThat(getOne.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class).         assertThat(update.getInvoker()).isNotInstanceOf(CachingOperationInvoker.class).     }). }
false;public;0;9;;@Test public void getEndpointsWhenHasSpecializedFiltersInNonSpecializedDiscovererShouldFilterEndpoints() {     load(SpecializedEndpointsConfiguration.class, (context) -> {         TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context).         Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).     }). }
false;public;0;11;;@Test public void getEndpointsWhenHasSpecializedFiltersInSpecializedDiscovererShouldNotFilterEndpoints() {     load(SpecializedEndpointsConfiguration.class, (context) -> {         SpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context).         Map<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test"), EndpointId.of("specialized")).     }). }
false;public;0;14;;@Test public void getEndpointsShouldApplyExtensions() {     load(SpecializedEndpointsConfiguration.class, (context) -> {         SpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context).         Map<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         Map<Method, SpecializedOperation> operations = mapOperations(endpoints.get(EndpointId.of("specialized"))).         assertThat(operations).containsKeys(ReflectionUtils.findMethod(SpecializedExtension.class, "getSpecial")).     }). }
false;public;0;18;;@Test public void getEndpointShouldFindParentExtension() {     load(SubSpecializedEndpointsConfiguration.class, (context) -> {         SpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context).         Map<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         Map<Method, SpecializedOperation> operations = mapOperations(endpoints.get(EndpointId.of("specialized"))).         assertThat(operations).containsKeys(ReflectionUtils.findMethod(SpecializedTestEndpoint.class, "getAll")).         assertThat(operations).containsKeys(ReflectionUtils.findMethod(SubSpecializedTestEndpoint.class, "getSpecialOne", String.class)).         assertThat(operations).containsKeys(ReflectionUtils.findMethod(SpecializedExtension.class, "getSpecial")).         assertThat(operations).hasSize(3).     }). }
false;public;0;14;;@Test public void getEndpointsShouldApplyFilters() {     load(SpecializedEndpointsConfiguration.class, (context) -> {         EndpointFilter<SpecializedExposableEndpoint> filter = (endpoint) -> {             EndpointId id = endpoint.getEndpointId().             return !id.equals(EndpointId.of("specialized")).         }.         SpecializedEndpointDiscoverer discoverer = new SpecializedEndpointDiscoverer(context, Collections.singleton(filter)).         Map<EndpointId, SpecializedExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).     }). }
false;private;1;10;;private void hasTestEndpoint(AnnotationConfigApplicationContext context) {     TestEndpointDiscoverer discoverer = new TestEndpointDiscoverer(context).     Map<EndpointId, TestExposableEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).     assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).     Map<Method, TestOperation> operations = mapOperations(endpoints.get(EndpointId.of("test"))).     assertThat(operations).hasSize(4).     assertThat(operations).containsKeys(). }
false;private;0;8;;private Method[] testEndpointMethods() {     List<Method> methods = new ArrayList<>().     methods.add(findTestEndpointMethod("getAll")).     methods.add(findTestEndpointMethod("getOne", String.class)).     methods.add(findTestEndpointMethod("update", String.class, String.class)).     methods.add(findTestEndpointMethod("deleteOne", String.class)).     return methods.toArray(new Method[0]). }
false;private;2;3;;private Method findTestEndpointMethod(String name, Class<?>... paramTypes) {     return ReflectionUtils.findMethod(TestEndpoint.class, name, paramTypes). }
false;private;1;13;;private <E extends ExposableEndpoint<?>> Map<EndpointId, E> mapEndpoints(Collection<E> endpoints) {     Map<EndpointId, E> byId = new LinkedHashMap<>().     endpoints.forEach((endpoint) -> {         E existing = byId.put(endpoint.getEndpointId(), endpoint).         if (existing != null) {             throw new AssertionError(String.format("Found endpoints with duplicate id '%s'", endpoint.getEndpointId())).         }     }).     return byId. }
false;private;1;14;;private <O extends Operation> Map<Method, O> mapOperations(ExposableEndpoint<O> endpoint) {     Map<Method, O> byMethod = new HashMap<>().     endpoint.getOperations().forEach((operation) -> {         AbstractDiscoveredOperation discoveredOperation = (AbstractDiscoveredOperation) operation.         Method method = discoveredOperation.getOperationMethod().getMethod().         O existing = byMethod.put(method, operation).         if (existing != null) {             throw new AssertionError(String.format("Found endpoint with duplicate operation method '%s'", method)).         }     }).     return byMethod. }
false;private;2;4;;private void load(Class<?> configuration, Consumer<AnnotationConfigApplicationContext> consumer) {     load(null, configuration, consumer). }
false;private;3;4;;private void loadWithParent(ApplicationContext parent, Class<?> configuration, Consumer<AnnotationConfigApplicationContext> consumer) {     load(parent, configuration, consumer). }
false;private;3;15;;private void load(ApplicationContext parent, Class<?> configuration, Consumer<AnnotationConfigApplicationContext> consumer) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     if (parent != null) {         context.setParent(parent).     }     context.register(configuration).     context.refresh().     try {         consumer.accept(context).     } finally {         context.close().     } }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpointSubclass testEndpointSubclass() {     return new TestEndpointSubclass(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointTwo() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointOne() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean(name = "scopedTarget.testEndpoint") public TestEndpoint scopedTargetTestEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getOne(@Selector String id) {     return null. }
false;public;2;4;;@WriteOperation public void update(String foo, String bar) { }
false;public;1;4;;@DeleteOperation public void deleteOne(@Selector String id) { }
false;public;0;3;;public void someOtherMethod() { }
false;public;3;4;;@WriteOperation public void updateWithMoreArguments(String foo, String bar, String baz) { }
false;public;0;4;;@ReadOperation public Object getSpecial() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getSpecialOne(@Selector String id) {     return null. }
false;protected;4;6;;@Override protected TestExposableEndpoint createEndpoint(Object endpointBean, EndpointId id, boolean enabledByDefault, Collection<TestOperation> operations) {     return new TestExposableEndpoint(this, endpointBean, id, enabledByDefault, operations). }
false;protected;3;5;;@Override protected TestOperation createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker) {     return new TestOperation(operationMethod, invoker). }
false;protected;1;5;;@Override protected OperationKey createOperationKey(TestOperation operation) {     return new OperationKey(operation.getOperationMethod(), () -> "TestOperation " + operation.getOperationMethod()). }
false;protected;4;7;;@Override protected SpecializedExposableEndpoint createEndpoint(Object endpointBean, EndpointId id, boolean enabledByDefault, Collection<SpecializedOperation> operations) {     return new SpecializedExposableEndpoint(this, endpointBean, id, enabledByDefault, operations). }
false;protected;3;5;;@Override protected SpecializedOperation createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker) {     return new SpecializedOperation(operationMethod, invoker). }
false;protected;1;5;;@Override protected OperationKey createOperationKey(SpecializedOperation operation) {     return new OperationKey(operation.getOperationMethod(), () -> "TestOperation " + operation.getOperationMethod()). }
false;public;0;3;;public OperationInvoker getInvoker() {     return this.invoker. }
