commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run(assertDiscoverer((discoverer) -> assertThat(discoverer.getEndpoints()).isEmpty())). }
false;public;0;14;;@Test public void getEndpointsShouldIncludeServletEndpoints() {     this.contextRunner.withUserConfiguration(TestServletEndpoint.class).run(assertDiscoverer((discoverer) -> {         Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableServletEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testservlet")).         assertThat(endpoint.getEndpointServlet()).isNotNull().         assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class).     })). }
false;public;0;16;;@Test public void getEndpointsShouldDiscoverProxyServletEndpoints() {     this.contextRunner.withUserConfiguration(TestProxyServletEndpoint.class).withConfiguration(AutoConfigurations.of(ValidationAutoConfiguration.class)).run(assertDiscoverer((discoverer) -> {         Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableServletEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testservlet")).         assertThat(endpoint.getEndpointServlet()).isNotNull().         assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class).     })). }
false;public;0;12;;@Test public void getEndpointsShouldNotDiscoverRegularEndpoints() {     this.contextRunner.withUserConfiguration(WithRegularEndpointConfiguration.class).run(assertDiscoverer((discoverer) -> {         Collection<ExposableServletEndpoint> endpoints = discoverer.getEndpoints().         List<EndpointId> ids = endpoints.stream().map(ExposableEndpoint::getEndpointId).collect(Collectors.toList()).         assertThat(ids).containsOnly(EndpointId.of("testservlet")).     })). }
false;public;0;8;;@Test public void getEndpointWhenEndpointHasOperationsShouldThrowException() {     this.contextRunner.withUserConfiguration(TestServletEndpointWithOperation.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("ServletEndpoints must not declare operations"))). }
false;public;0;7;;@Test public void getEndpointWhenEndpointNotASupplierShouldThrowException() {     this.contextRunner.withUserConfiguration(TestServletEndpointNotASupplier.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must be a supplier"))). }
false;public;0;9;;@Test public void getEndpointWhenEndpointSuppliesWrongTypeShouldThrowException() {     this.contextRunner.withUserConfiguration(TestServletEndpointSupplierOfWrongType.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must supply an EndpointServlet"))). }
false;public;0;7;;@Test public void getEndpointWhenEndpointSuppliesNullShouldThrowException() {     this.contextRunner.withUserConfiguration(TestServletEndpointSupplierOfNull.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("must not supply null"))). }
false;private;1;8;;private ContextConsumer<AssertableApplicationContext> assertDiscoverer(Consumer<ServletEndpointDiscoverer> consumer) {     return (context) -> {         ServletEndpointDiscoverer discoverer = new ServletEndpointDiscoverer(context, null, Collections.emptyList()).         consumer.accept(discoverer).     }. }
false;public;0;4;;@Override public EndpointServlet get() {     return new EndpointServlet(TestServlet.class). }
false;public;0;4;;@Override public EndpointServlet get() {     return new EndpointServlet(TestServlet.class). }
false;public;0;4;;@Override public EndpointServlet get() {     return new EndpointServlet(TestServlet.class). }
false;public;0;4;;@ReadOperation public String read() {     return "error". }
false;public;2;4;;@Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { }
false;public;0;4;;@Override public String get() {     return "error". }
false;public;0;4;;@Override public EndpointServlet get() {     return null. }
