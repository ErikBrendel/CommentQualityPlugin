commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void liquibaseReportIsReturned() {     this.contextRunner.withUserConfiguration(Config.class).run((context) -> assertThat(context.getBean(LiquibaseEndpoint.class).liquibaseBeans().getContexts().get(context.getId()).getLiquibaseBeans()).hasSize(1)). }
false;public;0;10;;@Test public void invokeWithCustomSchema() {     this.contextRunner.withUserConfiguration(Config.class).withPropertyValues("spring.liquibase.default-schema=CUSTOMSCHEMA", "spring.datasource.schema=classpath:/db/create-custom-schema.sql").run((context) -> assertThat(context.getBean(LiquibaseEndpoint.class).liquibaseBeans().getContexts().get(context.getId()).getLiquibaseBeans()).hasSize(1)). }
false;public;0;9;;@Test public void connectionAutoCommitPropertyIsReset() {     this.contextRunner.withUserConfiguration(Config.class).run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         assertThat(getAutoCommit(dataSource)).isTrue().         context.getBean(LiquibaseEndpoint.class).liquibaseBeans().         assertThat(getAutoCommit(dataSource)).isTrue().     }). }
false;private;1;5;;private boolean getAutoCommit(DataSource dataSource) throws SQLException {     try (Connection connection = dataSource.getConnection()) {         return connection.getAutoCommit().     } }
false;public;1;4;;@Bean public LiquibaseEndpoint endpoint(ApplicationContext context) {     return new LiquibaseEndpoint(context). }
