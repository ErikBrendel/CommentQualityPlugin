commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void allEvents() {     client.get().uri((builder) -> builder.path("/actuator/auditevents").build()).exchange().expectStatus().isOk().expectBody().jsonPath("events.[*].principal").isEqualTo(new JSONArray().appendElement("admin").appendElement("admin").appendElement("user")). }
false;public;0;8;;@Test public void eventsAfter() {     client.get().uri((builder) -> builder.path("/actuator/auditevents").queryParam("after", "2016-11-01T13:00:00%2B00:00").build()).exchange().expectStatus().isOk().expectBody().jsonPath("events").isEmpty(). }
false;public;0;9;;@Test public void eventsWithPrincipal() {     client.get().uri((builder) -> builder.path("/actuator/auditevents").queryParam("principal", "user").build()).exchange().expectStatus().isOk().expectBody().jsonPath("events.[*].principal").isEqualTo(new JSONArray().appendElement("user")). }
false;public;0;11;;@Test public void eventsWithType() {     client.get().uri((builder) -> builder.path("/actuator/auditevents").queryParam("type", "logout").build()).exchange().expectStatus().isOk().expectBody().jsonPath("events.[*].principal").isEqualTo(new JSONArray().appendElement("admin")).jsonPath("events.[*].type").isEqualTo(new JSONArray().appendElement("logout")). }
false;public;0;8;;@Bean public AuditEventRepository auditEventsRepository() {     AuditEventRepository repository = new InMemoryAuditEventRepository(3).     repository.add(createEvent("2016-11-01T11:00:00Z", "admin", "login")).     repository.add(createEvent("2016-11-01T12:00:00Z", "admin", "logout")).     repository.add(createEvent("2016-11-01T12:00:00Z", "user", "login")).     return repository. }
false;public;0;4;;@Bean public AuditEventsEndpoint auditEventsEndpoint() {     return new AuditEventsEndpoint(auditEventsRepository()). }
false;private;3;4;;private AuditEvent createEvent(String instant, String principal, String type) {     return new AuditEvent(Instant.parse(instant), principal, type, Collections.emptyMap()). }
