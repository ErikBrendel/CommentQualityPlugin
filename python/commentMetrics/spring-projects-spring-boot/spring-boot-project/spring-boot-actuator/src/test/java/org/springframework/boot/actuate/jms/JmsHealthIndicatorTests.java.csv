commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void jmsBrokerIsUp() throws JMSException {     ConnectionMetaData connectionMetaData = mock(ConnectionMetaData.class).     given(connectionMetaData.getJMSProviderName()).willReturn("JMS test provider").     Connection connection = mock(Connection.class).     given(connection.getMetaData()).willReturn(connectionMetaData).     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     given(connectionFactory.createConnection()).willReturn(connection).     JmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory).     Health health = indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     assertThat(health.getDetails().get("provider")).isEqualTo("JMS test provider").     verify(connection, times(1)).close(). }
false;public;0;10;;@Test public void jmsBrokerIsDown() throws JMSException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     given(connectionFactory.createConnection()).willThrow(new JMSException("test", "123")).     JmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory).     Health health = indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails().get("provider")).isNull(). }
false;public;0;15;;@Test public void jmsBrokerCouldNotRetrieveProviderMetadata() throws JMSException {     ConnectionMetaData connectionMetaData = mock(ConnectionMetaData.class).     given(connectionMetaData.getJMSProviderName()).willThrow(new JMSException("test", "123")).     Connection connection = mock(Connection.class).     given(connection.getMetaData()).willReturn(connectionMetaData).     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     given(connectionFactory.createConnection()).willReturn(connection).     JmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory).     Health health = indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails().get("provider")).isNull().     verify(connection, times(1)).close(). }
false;public;0;14;;@Test public void jmsBrokerUsesFailover() throws JMSException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     ConnectionMetaData connectionMetaData = mock(ConnectionMetaData.class).     given(connectionMetaData.getJMSProviderName()).willReturn("JMS test provider").     Connection connection = mock(Connection.class).     given(connection.getMetaData()).willReturn(connectionMetaData).     willThrow(new JMSException("Could not start", "123")).given(connection).start().     given(connectionFactory.createConnection()).willReturn(connection).     JmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory).     Health health = indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat(health.getDetails().get("provider")).isNull(). }
false;public;0;19;;@Test public void whenConnectionStartIsUnresponsiveStatusIsDown() throws JMSException {     ConnectionMetaData connectionMetaData = mock(ConnectionMetaData.class).     given(connectionMetaData.getJMSProviderName()).willReturn("JMS test provider").     Connection connection = mock(Connection.class).     UnresponsiveStartAnswer unresponsiveStartAnswer = new UnresponsiveStartAnswer().     willAnswer(unresponsiveStartAnswer).given(connection).start().     willAnswer((invocation) -> {         unresponsiveStartAnswer.connectionClosed().         return null.     }).given(connection).close().     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     given(connectionFactory.createConnection()).willReturn(connection).     JmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory).     Health health = indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat((String) health.getDetails().get("error")).contains("Connection closed"). }
false;public;1;9;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     synchronized (this.monitor) {         while (!this.connectionClosed) {             this.monitor.wait().         }     }     throw new JMSException("Connection closed"). }
false;private;0;6;;private void connectionClosed() {     synchronized (this.monitor) {         this.connectionClosed = true.         this.monitor.notifyAll().     } }
