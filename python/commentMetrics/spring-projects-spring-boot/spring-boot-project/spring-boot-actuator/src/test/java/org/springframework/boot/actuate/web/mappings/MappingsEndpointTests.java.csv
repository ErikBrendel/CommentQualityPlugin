commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void servletWebMappings() {     Supplier<ConfigurableWebApplicationContext> contextSupplier = prepareContextSupplier().     new WebApplicationContextRunner(contextSupplier).withUserConfiguration(EndpointConfiguration.class, ServletWebConfiguration.class).run((context) -> {         ContextMappings contextMappings = contextMappings(context).         assertThat(contextMappings.getParentId()).isNull().         assertThat(contextMappings.getMappings()).containsOnlyKeys("dispatcherServlets", "servletFilters", "servlets").         Map<String, List<DispatcherServletMappingDescription>> dispatcherServlets = mappings(contextMappings, "dispatcherServlets").         assertThat(dispatcherServlets).containsOnlyKeys("dispatcherServlet").         List<DispatcherServletMappingDescription> handlerMappings = dispatcherServlets.get("dispatcherServlet").         assertThat(handlerMappings).hasSize(1).         List<ServletRegistrationMappingDescription> servlets = mappings(contextMappings, "servlets").         assertThat(servlets).hasSize(1).         List<FilterRegistrationMappingDescription> filters = mappings(contextMappings, "servletFilters").         assertThat(filters).hasSize(1).     }). }
false;public;0;20;;@Test public void servletWebMappingsWithAdditionalDispatcherServlets() {     Supplier<ConfigurableWebApplicationContext> contextSupplier = prepareContextSupplier().     new WebApplicationContextRunner(contextSupplier).withUserConfiguration(EndpointConfiguration.class, ServletWebConfiguration.class, CustomDispatcherServletConfiguration.class).run((context) -> {         ContextMappings contextMappings = contextMappings(context).         Map<String, List<DispatcherServletMappingDescription>> dispatcherServlets = mappings(contextMappings, "dispatcherServlets").         assertThat(dispatcherServlets).containsOnlyKeys("dispatcherServlet", "customDispatcherServletRegistration", "anotherDispatcherServletRegistration").         assertThat(dispatcherServlets.get("dispatcherServlet")).hasSize(1).         assertThat(dispatcherServlets.get("customDispatcherServletRegistration")).hasSize(1).         assertThat(dispatcherServlets.get("anotherDispatcherServletRegistration")).hasSize(1).     }). }
false;private;0;19;;@SuppressWarnings("unchecked") private Supplier<ConfigurableWebApplicationContext> prepareContextSupplier() {     ServletContext servletContext = mock(ServletContext.class).     given(servletContext.getInitParameterNames()).willReturn(Collections.emptyEnumeration()).     given(servletContext.getAttributeNames()).willReturn(Collections.emptyEnumeration()).     FilterRegistration filterRegistration = mock(FilterRegistration.class).     given((Map<String, FilterRegistration>) servletContext.getFilterRegistrations()).willReturn(Collections.singletonMap("testFilter", filterRegistration)).     ServletRegistration servletRegistration = mock(ServletRegistration.class).     given((Map<String, ServletRegistration>) servletContext.getServletRegistrations()).willReturn(Collections.singletonMap("testServlet", servletRegistration)).     return () -> {         AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().         context.setServletContext(servletContext).         return context.     }. }
false;public;0;18;;@Test public void reactiveWebMappings() {     new ReactiveWebApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class, ReactiveWebConfiguration.class).run((context) -> {         ContextMappings contextMappings = contextMappings(context).         assertThat(contextMappings.getParentId()).isNull().         assertThat(contextMappings.getMappings()).containsOnlyKeys("dispatcherHandlers").         Map<String, List<DispatcherHandlerMappingDescription>> dispatcherHandlers = mappings(contextMappings, "dispatcherHandlers").         assertThat(dispatcherHandlers).containsOnlyKeys("webHandler").         List<DispatcherHandlerMappingDescription> handlerMappings = dispatcherHandlers.get("webHandler").         assertThat(handlerMappings).hasSize(3).     }). }
false;private;1;6;;private ContextMappings contextMappings(ApplicationContext context) {     ApplicationMappings applicationMappings = context.getBean(MappingsEndpoint.class).mappings().     assertThat(applicationMappings.getContexts()).containsOnlyKeys(context.getId()).     return applicationMappings.getContexts().get(context.getId()). }
false;private;2;4;;@SuppressWarnings("unchecked") private <T> T mappings(ContextMappings contextMappings, String key) {     return (T) contextMappings.getMappings().get(key). }
false;public;2;6;;@Bean public MappingsEndpoint mappingsEndpoint(Collection<MappingDescriptionProvider> descriptionProviders, ApplicationContext context) {     return new MappingsEndpoint(descriptionProviders, context). }
false;public;0;4;;@Bean public DispatcherHandlersMappingDescriptionProvider dispatcherHandlersMappingDescriptionProvider() {     return new DispatcherHandlersMappingDescriptionProvider(). }
false;public;0;5;;@Bean public RouterFunction<ServerResponse> routerFunction() {     return route(GET("/one"), (request) -> ServerResponse.ok().build()).andRoute(POST("/two"), (request) -> ServerResponse.ok().build()). }
false;public;0;4;;@RequestMapping("/three") public void three() { }
false;public;0;4;;@Bean public DispatcherServletsMappingDescriptionProvider dispatcherServletsMappingDescriptionProvider() {     return new DispatcherServletsMappingDescriptionProvider(). }
false;public;0;4;;@Bean public ServletsMappingDescriptionProvider servletsMappingDescriptionProvider() {     return new ServletsMappingDescriptionProvider(). }
false;public;0;4;;@Bean public FiltersMappingDescriptionProvider filtersMappingDescriptionProvider() {     return new FiltersMappingDescriptionProvider(). }
false;public;1;7;;@Bean public DispatcherServlet dispatcherServlet(WebApplicationContext context) throws ServletException {     DispatcherServlet dispatcherServlet = new DispatcherServlet(context).     dispatcherServlet.init(new MockServletConfig()).     return dispatcherServlet. }
false;public;0;4;;@RequestMapping("/three") public void three() { }
false;public;1;8;;@Bean public ServletRegistrationBean<DispatcherServlet> customDispatcherServletRegistration(WebApplicationContext context) {     ServletRegistrationBean<DispatcherServlet> registration = new ServletRegistrationBean<>(createTestDispatcherServlet(context)).     registration.setName("customDispatcherServletRegistration").     return registration. }
false;public;1;4;;@Bean public DispatcherServlet anotherDispatcherServlet(WebApplicationContext context) {     return createTestDispatcherServlet(context). }
false;public;1;8;;@Bean public ServletRegistrationBean<DispatcherServlet> anotherDispatcherServletRegistration(WebApplicationContext context) {     ServletRegistrationBean<DispatcherServlet> registrationBean = new ServletRegistrationBean<>(anotherDispatcherServlet(context)).     registrationBean.setName("anotherDispatcherServletRegistration").     return registrationBean. }
false;private;1;11;;private DispatcherServlet createTestDispatcherServlet(WebApplicationContext context) {     try {         DispatcherServlet dispatcherServlet = new DispatcherServlet(context).         dispatcherServlet.init(new MockServletConfig()).         return dispatcherServlet.     } catch (ServletException ex) {         throw new IllegalStateException(ex).     } }
