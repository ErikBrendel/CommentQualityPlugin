commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void readOperation() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test").exchange().expectStatus().isOk().expectBody().jsonPath("All").isEqualTo(true)). }
false;public;0;6;;@Test public void readOperationWithEndpointsMappedToTheRoot() {     load(TestEndpointConfiguration.class, "", (client) -> client.get().uri("/test").exchange().expectStatus().isOk().expectBody().jsonPath("All").isEqualTo(true)). }
false;public;0;6;;@Test public void readOperationWithSelector() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test/one").exchange().expectStatus().isOk().expectBody().jsonPath("part").isEqualTo("one")). }
false;public;0;6;;@Test public void readOperationWithSelectorContainingADot() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test/foo.bar").exchange().expectStatus().isOk().expectBody().jsonPath("part").isEqualTo("foo.bar")). }
false;public;0;12;;@Test public void linksToOtherEndpointsAreProvided() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("").exchange().expectStatus().isOk().expectBody().jsonPath("_links.length()").isEqualTo(3).jsonPath("_links.self.href").isNotEmpty().jsonPath("_links.self.templated").isEqualTo(false).jsonPath("_links.test.href").isNotEmpty().jsonPath("_links.test.templated").isEqualTo(false).jsonPath("_links.test-part.href").isNotEmpty().jsonPath("_links.test-part.templated").isEqualTo(true)). }
false;public;0;5;;@Test public void linksMappingIsDisabledWhenEndpointPathIsEmpty() {     load(TestEndpointConfiguration.class, "", (client) -> client.get().uri("").exchange().expectStatus().isNotFound()). }
false;public;0;6;;@Test public void operationWithTrailingSlashShouldMatch() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test/").exchange().expectStatus().isOk().expectBody().jsonPath("All").isEqualTo(true)). }
false;public;0;7;;@Test public void readOperationWithSingleQueryParameters() {     load(QueryEndpointConfiguration.class, (client) -> client.get().uri("/query?one=1&two=2").exchange().expectStatus().isOk().expectBody().jsonPath("query").isEqualTo("1 2")). }
false;public;0;7;;@Test public void readOperationWithSingleQueryParametersAndMultipleValues() {     load(QueryEndpointConfiguration.class, (client) -> client.get().uri("/query?one=1&one=1&two=2").exchange().expectStatus().isOk().expectBody().jsonPath("query").isEqualTo("1,1 2")). }
false;public;0;7;;@Test public void readOperationWithListQueryParameterAndSingleValue() {     load(QueryWithListEndpointConfiguration.class, (client) -> client.get().uri("/query?one=1&two=2").exchange().expectStatus().isOk().expectBody().jsonPath("query").isEqualTo("1 [2]")). }
false;public;0;7;;@Test public void readOperationWithListQueryParameterAndMultipleValues() {     load(QueryWithListEndpointConfiguration.class, (client) -> client.get().uri("/query?one=1&two=2&two=2").exchange().expectStatus().isOk().expectBody().jsonPath("query").isEqualTo("1 [2, 2]")). }
false;public;0;10;;@Test public void readOperationWithMappingFailureProducesBadRequestResponse() {     load(QueryEndpointConfiguration.class, (client) -> {         WebTestClient.BodyContentSpec body = client.get().uri("/query?two=two").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isBadRequest().expectBody().         validateErrorBody(body, HttpStatus.BAD_REQUEST, "/endpoints/query", "Missing parameters: one").     }). }
false;public;0;10;;@Test public void writeOperation() {     load(TestEndpointConfiguration.class, (client) -> {         Map<String, Object> body = new HashMap<>().         body.put("foo", "one").         body.put("bar", "two").         client.post().uri("/test").syncBody(body).exchange().expectStatus().isNoContent().expectBody().isEmpty().     }). }
false;public;0;8;;@Test public void writeOperationWithVoidResponse() {     load(VoidWriteResponseEndpointConfiguration.class, (context, client) -> {         client.post().uri("/voidwrite").exchange().expectStatus().isNoContent().expectBody().isEmpty().         verify(context.getBean(EndpointDelegate.class)).write().     }). }
false;public;0;6;;@Test public void deleteOperation() {     load(TestEndpointConfiguration.class, (client) -> client.delete().uri("/test/one").exchange().expectStatus().isOk().expectBody().jsonPath("part").isEqualTo("one")). }
false;public;0;8;;@Test public void deleteOperationWithVoidResponse() {     load(VoidDeleteResponseEndpointConfiguration.class, (context, client) -> {         client.delete().uri("/voiddelete").exchange().expectStatus().isNoContent().expectBody().isEmpty().         verify(context.getBean(EndpointDelegate.class)).delete().     }). }
false;public;0;10;;@Test public void nullIsPassedToTheOperationWhenArgumentIsNotFoundInPostRequestBody() {     load(TestEndpointConfiguration.class, (context, client) -> {         Map<String, Object> body = new HashMap<>().         body.put("foo", "one").         client.post().uri("/test").syncBody(body).exchange().expectStatus().isNoContent().expectBody().isEmpty().         verify(context.getBean(EndpointDelegate.class)).write("one", null).     }). }
false;public;0;8;;@Test public void nullsArePassedToTheOperationWhenPostRequestHasNoBody() {     load(TestEndpointConfiguration.class, (context, client) -> {         client.post().uri("/test").contentType(MediaType.APPLICATION_JSON).exchange().expectStatus().isNoContent().expectBody().isEmpty().         verify(context.getBean(EndpointDelegate.class)).write(null, null).     }). }
false;public;0;5;;@Test public void nullResponseFromReadOperationResultsInNotFoundResponseStatus() {     load(NullReadResponseEndpointConfiguration.class, (context, client) -> client.get().uri("/nullread").exchange().expectStatus().isNotFound()). }
false;public;0;5;;@Test public void nullResponseFromDeleteOperationResultsInNoContentResponseStatus() {     load(NullDeleteResponseEndpointConfiguration.class, (context, client) -> client.delete().uri("/nulldelete").exchange().expectStatus().isNoContent()). }
false;public;0;5;;@Test public void nullResponseFromWriteOperationResultsInNoContentResponseStatus() {     load(NullWriteResponseEndpointConfiguration.class, (context, client) -> client.post().uri("/nullwrite").exchange().expectStatus().isNoContent()). }
false;public;0;9;;@Test public void readOperationWithResourceResponse() {     load(ResourceEndpointConfiguration.class, (context, client) -> {         byte[] responseBody = client.get().uri("/resource").exchange().expectStatus().isOk().expectHeader().contentType(MediaType.APPLICATION_OCTET_STREAM).returnResult(byte[].class).getResponseBodyContent().         assertThat(responseBody).containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).     }). }
false;public;0;12;;@Test public void readOperationWithResourceWebOperationResponse() {     load(ResourceWebEndpointResponseEndpointConfiguration.class, (context, client) -> {         byte[] responseBody = client.get().uri("/resource").exchange().expectStatus().isOk().expectHeader().contentType(MediaType.APPLICATION_OCTET_STREAM).returnResult(byte[].class).getResponseBodyContent().         assertThat(responseBody).containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9).     }). }
false;public;0;6;;@Test public void readOperationWithMonoResponse() {     load(MonoResponseEndpointConfiguration.class, (client) -> client.get().uri("/mono").exchange().expectStatus().isOk().expectBody().jsonPath("a").isEqualTo("alpha")). }
false;public;0;7;;@Test public void readOperationWithCustomMediaType() {     load(CustomMediaTypesEndpointConfiguration.class, (client) -> client.get().uri("/custommediatypes").exchange().expectStatus().isOk().expectHeader().valueMatches("Content-Type", "text/plain(.charset=.*)?")). }
false;public;0;10;;@Test public void readOperationWithMissingRequiredParametersReturnsBadRequestResponse() {     load(RequiredParameterEndpointConfiguration.class, (client) -> {         WebTestClient.BodyContentSpec body = client.get().uri("/requiredparameters").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isBadRequest().expectBody().         validateErrorBody(body, HttpStatus.BAD_REQUEST, "/endpoints/requiredparameters", "Missing parameters: foo").     }). }
false;public;0;5;;@Test public void readOperationWithMissingNullableParametersIsOk() {     load(RequiredParameterEndpointConfiguration.class, (client) -> client.get().uri("/requiredparameters?foo=hello").exchange().expectStatus().isOk()). }
false;public;0;7;;@Test public void endpointsProducePrimaryMediaTypeByDefault() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test").exchange().expectStatus().isOk().expectHeader().valueMatches("Content-Type", ACTUATOR_MEDIA_TYPE_PATTERN)). }
false;public;0;7;;@Test public void endpointsProduceSecondaryMediaTypeWhenRequested() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/test").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectHeader().valueMatches("Content-Type", JSON_MEDIA_TYPE_PATTERN)). }
false;public;0;7;;@Test public void linksProducesPrimaryMediaTypeByDefault() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("").exchange().expectStatus().isOk().expectHeader().valueMatches("Content-Type", ACTUATOR_MEDIA_TYPE_PATTERN)). }
false;public;0;7;;@Test public void linksProducesSecondaryMediaTypeWhenRequested() {     load(TestEndpointConfiguration.class, (client) -> client.get().uri("").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectHeader().valueMatches("Content-Type", JSON_MEDIA_TYPE_PATTERN)). }
false;public;0;7;;@Test public void principalIsNullWhenRequestHasNoPrincipal() {     load(PrincipalEndpointConfiguration.class, (client) -> client.get().uri("/principal").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("None")). }
false;public;0;9;;@Test public void principalIsAvailableWhenRequestHasAPrincipal() {     load((context) -> {         this.authenticatedContextCustomizer.accept(context).         context.register(PrincipalEndpointConfiguration.class).     }, (client) -> client.get().uri("/principal").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Alice")). }
false;public;0;9;;@Test public void operationWithAQueryNamedPrincipalCanBeAccessedWhenAuthenticated() {     load((context) -> {         this.authenticatedContextCustomizer.accept(context).         context.register(PrincipalQueryEndpointConfiguration.class).     }, (client) -> client.get().uri("/principalquery?principal=Zoe").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Zoe")). }
false;public;0;7;;@Test public void securityContextIsAvailableAndHasNullPrincipalWhenRequestHasNoPrincipal() {     load(SecurityContextEndpointConfiguration.class, (client) -> client.get().uri("/securitycontext").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("None")). }
false;public;0;9;;@Test public void securityContextIsAvailableAndHasPrincipalWhenRequestHasPrincipal() {     load((context) -> {         this.authenticatedContextCustomizer.accept(context).         context.register(SecurityContextEndpointConfiguration.class).     }, (client) -> client.get().uri("/securitycontext").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("Alice")). }
false;public;0;7;;@Test public void userInRoleReturnsFalseWhenRequestHasNoPrincipal() {     load(UserInRoleEndpointConfiguration.class, (client) -> client.get().uri("/userinrole?role=ADMIN").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("ADMIN: false")). }
false;public;0;9;;@Test public void userInRoleReturnsFalseWhenUserIsNotInRole() {     load((context) -> {         this.authenticatedContextCustomizer.accept(context).         context.register(UserInRoleEndpointConfiguration.class).     }, (client) -> client.get().uri("/userinrole?role=ADMIN").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("ADMIN: false")). }
false;public;0;9;;@Test public void userInRoleReturnsTrueWhenUserIsInRole() {     load((context) -> {         this.authenticatedContextCustomizer.accept(context).         context.register(UserInRoleEndpointConfiguration.class).     }, (client) -> client.get().uri("/userinrole?role=ACTUATOR").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class).isEqualTo("ACTUATOR: true")). }
false;protected,abstract;1;1;;protected abstract int getPort(T context).
false;protected;4;6;;protected void validateErrorBody(WebTestClient.BodyContentSpec body, HttpStatus status, String path, String message) {     body.jsonPath("status").isEqualTo(status.value()).jsonPath("error").isEqualTo(status.getReasonPhrase()).jsonPath("path").isEqualTo(path).jsonPath("message").isEqualTo(message). }
false;private;2;4;;private void load(Class<?> configuration, BiConsumer<ApplicationContext, WebTestClient> consumer) {     load((context) -> context.register(configuration), "/endpoints", consumer). }
false;protected;2;4;;protected void load(Class<?> configuration, Consumer<WebTestClient> clientConsumer) {     load((context) -> context.register(configuration), "/endpoints", (context, client) -> clientConsumer.accept(client)). }
false;protected;2;5;;protected void load(Consumer<T> contextCustomizer, Consumer<WebTestClient> clientConsumer) {     load(contextCustomizer, "/endpoints", (context, client) -> clientConsumer.accept(client)). }
false;protected;3;5;;protected void load(Class<?> configuration, String endpointPath, Consumer<WebTestClient> clientConsumer) {     load((context) -> context.register(configuration), endpointPath, (context, client) -> clientConsumer.accept(client)). }
false;private;3;20;;private void load(Consumer<T> contextCustomizer, String endpointPath, BiConsumer<ApplicationContext, WebTestClient> consumer) {     T applicationContext = this.applicationContextSupplier.get().     contextCustomizer.accept(applicationContext).     applicationContext.getEnvironment().getPropertySources().addLast(new MapPropertySource("test", Collections.singletonMap("endpointPath", endpointPath))).     applicationContext.refresh().     try {         InetSocketAddress address = new InetSocketAddress(getPort(applicationContext)).         String url = "http://" + address.getHostString() + ":" + address.getPort() + endpointPath.         consumer.accept(applicationContext, WebTestClient.bindToServer().baseUrl(url).responseTimeout(TIMEOUT).build()).     } finally {         applicationContext.close().     } }
false;public;1;4;;@Bean public TestEndpoint testEndpoint(EndpointDelegate endpointDelegate) {     return new TestEndpoint(endpointDelegate). }
false;public;0;4;;@Bean public QueryEndpoint queryEndpoint() {     return new QueryEndpoint(). }
false;public;0;4;;@Bean public QueryWithListEndpoint queryEndpoint() {     return new QueryWithListEndpoint(). }
false;public;1;5;;@Bean public VoidWriteResponseEndpoint voidWriteResponseEndpoint(EndpointDelegate delegate) {     return new VoidWriteResponseEndpoint(delegate). }
false;public;1;5;;@Bean public VoidDeleteResponseEndpoint voidDeleteResponseEndpoint(EndpointDelegate delegate) {     return new VoidDeleteResponseEndpoint(delegate). }
false;public;1;5;;@Bean public NullWriteResponseEndpoint nullWriteResponseEndpoint(EndpointDelegate delegate) {     return new NullWriteResponseEndpoint(delegate). }
false;public;0;4;;@Bean public NullReadResponseEndpoint nullResponseEndpoint() {     return new NullReadResponseEndpoint(). }
false;public;0;4;;@Bean public NullDeleteResponseEndpoint nullDeleteResponseEndpoint() {     return new NullDeleteResponseEndpoint(). }
false;public;0;4;;@Bean public ResourceEndpoint resourceEndpoint() {     return new ResourceEndpoint(). }
false;public;0;4;;@Bean public ResourceWebEndpointResponseEndpoint resourceEndpoint() {     return new ResourceWebEndpointResponseEndpoint(). }
false;public;1;4;;@Bean public MonoResponseEndpoint testEndpoint(EndpointDelegate endpointDelegate) {     return new MonoResponseEndpoint(). }
false;public;0;4;;@Bean public CustomMediaTypesEndpoint customMediaTypesEndpoint() {     return new CustomMediaTypesEndpoint(). }
false;public;0;4;;@Bean public RequiredParametersEndpoint requiredParametersEndpoint() {     return new RequiredParametersEndpoint(). }
false;public;0;4;;@Bean public PrincipalEndpoint principalEndpoint() {     return new PrincipalEndpoint(). }
false;public;0;4;;@Bean public PrincipalQueryEndpoint principalQueryEndpoint() {     return new PrincipalQueryEndpoint(). }
false;public;0;4;;@Bean public SecurityContextEndpoint securityContextEndpoint() {     return new SecurityContextEndpoint(). }
false;public;0;4;;@Bean public UserInRoleEndpoint userInRoleEndpoint() {     return new UserInRoleEndpoint(). }
false;public;0;4;;@ReadOperation public Map<String, Object> readAll() {     return Collections.singletonMap("All", true). }
false;public;1;4;;@ReadOperation public Map<String, Object> readPart(@Selector String part) {     return Collections.singletonMap("part", part). }
false;public;2;4;;@WriteOperation public void write(@Nullable String foo, @Nullable String bar) {     this.endpointDelegate.write(foo, bar). }
false;public;1;4;;@DeleteOperation public Map<String, Object> deletePart(@Selector String part) {     return Collections.singletonMap("part", part). }
false;public;2;4;;@ReadOperation public Map<String, String> query(String one, Integer two) {     return Collections.singletonMap("query", one + " " + two). }
false;public;3;5;;@ReadOperation public Map<String, String> queryWithParameterList(@Selector String list, String one, List<String> two) {     return Collections.singletonMap("query", list + " " + one + " " + two). }
false;public;2;4;;@ReadOperation public Map<String, String> queryWithParameterList(String one, List<String> two) {     return Collections.singletonMap("query", one + " " + two). }
false;public;0;4;;@WriteOperation public void write() {     this.delegate.write(). }
false;public;0;4;;@DeleteOperation public void delete() {     this.delegate.delete(). }
false;public;0;5;;@WriteOperation public Object write() {     this.delegate.write().     return null. }
false;public;0;4;;@ReadOperation public String readReturningNull() {     return null. }
false;public;0;4;;@DeleteOperation public String deleteReturningNull() {     return null. }
false;public;0;4;;@ReadOperation public Resource read() {     return new ByteArrayResource(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }). }
false;public;0;6;;@ReadOperation public WebEndpointResponse<Resource> read() {     return new WebEndpointResponse<>(new ByteArrayResource(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }), 200). }
false;;0;4;;@ReadOperation Mono<Map<String, String>> operation() {     return Mono.just(Collections.singletonMap("a", "alpha")). }
false;public;0;4;;@ReadOperation(produces = "text/plain") public String read() {     return "read". }
false;public;2;4;;@ReadOperation public String read(String foo, @Nullable String bar) {     return foo. }
false;public;1;4;;@ReadOperation public String read(@Nullable Principal principal) {     return (principal != null) ? principal.getName() : "None". }
false;public;1;4;;@ReadOperation public String read(String principal) {     return principal. }
false;public;1;5;;@ReadOperation public String read(SecurityContext securityContext) {     Principal principal = securityContext.getPrincipal().     return (principal != null) ? principal.getName() : "None". }
false;public;2;4;;@ReadOperation public String read(SecurityContext securityContext, String role) {     return role + ": " + securityContext.isUserInRole(role). }
false;;0;1;;void write().
false;;2;1;;void write(String foo, String bar).
false;;0;1;;void delete().
