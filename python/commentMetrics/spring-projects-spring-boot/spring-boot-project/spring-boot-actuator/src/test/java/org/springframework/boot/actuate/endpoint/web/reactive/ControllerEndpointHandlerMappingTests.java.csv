commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mappingWithNoPrefix() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ExposableControllerEndpoint second = secondEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("", first, second).     assertThat(getHandler(mapping, HttpMethod.GET, "/first")).isEqualTo(handlerOf(first.getController(), "get")).     assertThat(getHandler(mapping, HttpMethod.POST, "/second")).isEqualTo(handlerOf(second.getController(), "save")).     assertThat(getHandler(mapping, HttpMethod.GET, "/third")).isNull(). }
false;public;0;13;;@Test public void mappingWithPrefix() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ExposableControllerEndpoint second = secondEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", first, second).     assertThat(getHandler(mapping, HttpMethod.GET, "/actuator/first")).isEqualTo(handlerOf(first.getController(), "get")).     assertThat(getHandler(mapping, HttpMethod.POST, "/actuator/second")).isEqualTo(handlerOf(second.getController(), "save")).     assertThat(getHandler(mapping, HttpMethod.GET, "/first")).isNull().     assertThat(getHandler(mapping, HttpMethod.GET, "/second")).isNull(). }
false;public;0;9;;@Test public void mappingWithNoPath() throws Exception {     ExposableControllerEndpoint pathless = pathlessEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", pathless).     assertThat(getHandler(mapping, HttpMethod.GET, "/actuator/pathless")).isEqualTo(handlerOf(pathless.getController(), "get")).     assertThat(getHandler(mapping, HttpMethod.GET, "/pathless")).isNull().     assertThat(getHandler(mapping, HttpMethod.GET, "/")).isNull(). }
false;public;0;7;;@Test public void mappingNarrowedToMethod() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", first).     assertThatExceptionOfType(MethodNotAllowedException.class).isThrownBy(() -> getHandler(mapping, HttpMethod.POST, "/actuator/first")). }
false;private;3;5;;private Object getHandler(ControllerEndpointHandlerMapping mapping, HttpMethod method, String requestURI) {     return mapping.getHandler(exchange(method, requestURI)).block(Duration.ofSeconds(30)). }
false;private;2;8;;private ControllerEndpointHandlerMapping createMapping(String prefix, ExposableControllerEndpoint... endpoints) {     ControllerEndpointHandlerMapping mapping = new ControllerEndpointHandlerMapping(new EndpointMapping(prefix), Arrays.asList(endpoints), null).     mapping.setApplicationContext(this.context).     mapping.afterPropertiesSet().     return mapping. }
false;private;2;4;;private HandlerMethod handlerOf(Object source, String methodName) {     return new HandlerMethod(source, ReflectionUtils.findMethod(source.getClass(), methodName)). }
false;private;2;4;;private MockServerWebExchange exchange(HttpMethod method, String requestURI) {     return MockServerWebExchange.from(MockServerHttpRequest.method(method, requestURI).build()). }
false;private;0;3;;private ExposableControllerEndpoint firstEndpoint() {     return mockEndpoint(EndpointId.of("first"), new FirstTestMvcEndpoint()). }
false;private;0;3;;private ExposableControllerEndpoint secondEndpoint() {     return mockEndpoint(EndpointId.of("second"), new SecondTestMvcEndpoint()). }
false;private;0;3;;private ExposableControllerEndpoint pathlessEndpoint() {     return mockEndpoint(EndpointId.of("pathless"), new PathlessControllerEndpoint()). }
false;private;2;7;;private ExposableControllerEndpoint mockEndpoint(EndpointId id, Object controller) {     ExposableControllerEndpoint endpoint = mock(ExposableControllerEndpoint.class).     given(endpoint.getEndpointId()).willReturn(id).     given(endpoint.getController()).willReturn(controller).     given(endpoint.getRootPath()).willReturn(id.toString()).     return endpoint. }
false;public;0;4;;@GetMapping("/") public String get() {     return "test". }
false;public;0;4;;@PostMapping("/") public void save() { }
false;public;0;4;;@GetMapping public String get() {     return "test". }
