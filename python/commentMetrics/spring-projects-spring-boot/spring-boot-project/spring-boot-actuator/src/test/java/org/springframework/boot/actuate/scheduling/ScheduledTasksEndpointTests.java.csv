commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void cronScheduledMethodIsReported() {     run(CronScheduledMethod.class, (tasks) -> {         assertThat(tasks.getFixedDelay()).isEmpty().         assertThat(tasks.getFixedRate()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getCron()).hasSize(1).         CronTaskDescription description = (CronTaskDescription) tasks.getCron().get(0).         assertThat(description.getExpression()).isEqualTo("0 0 0/3 1/1 * ?").         assertThat(description.getRunnable().getTarget()).isEqualTo(CronScheduledMethod.class.getName() + ".cron").     }). }
false;public;0;14;;@Test public void cronTriggerIsReported() {     run(CronTriggerTask.class, (tasks) -> {         assertThat(tasks.getFixedRate()).isEmpty().         assertThat(tasks.getFixedDelay()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getCron()).hasSize(1).         CronTaskDescription description = (CronTaskDescription) tasks.getCron().get(0).         assertThat(description.getExpression()).isEqualTo("0 0 0/6 1/1 * ?").         assertThat(description.getRunnable().getTarget()).isEqualTo(CronTriggerRunnable.class.getName()).     }). }
false;public;0;15;;@Test public void fixedDelayScheduledMethodIsReported() {     run(FixedDelayScheduledMethod.class, (tasks) -> {         assertThat(tasks.getCron()).isEmpty().         assertThat(tasks.getFixedRate()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getFixedDelay()).hasSize(1).         FixedDelayTaskDescription description = (FixedDelayTaskDescription) tasks.getFixedDelay().get(0).         assertThat(description.getInitialDelay()).isEqualTo(2).         assertThat(description.getInterval()).isEqualTo(1).         assertThat(description.getRunnable().getTarget()).isEqualTo(FixedDelayScheduledMethod.class.getName() + ".fixedDelay").     }). }
false;public;0;15;;@Test public void fixedDelayTriggerIsReported() {     run(FixedDelayTriggerTask.class, (tasks) -> {         assertThat(tasks.getCron()).isEmpty().         assertThat(tasks.getFixedRate()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getFixedDelay()).hasSize(1).         FixedDelayTaskDescription description = (FixedDelayTaskDescription) tasks.getFixedDelay().get(0).         assertThat(description.getInitialDelay()).isEqualTo(2000).         assertThat(description.getInterval()).isEqualTo(1000).         assertThat(description.getRunnable().getTarget()).isEqualTo(FixedDelayTriggerRunnable.class.getName()).     }). }
false;public;0;15;;@Test public void fixedRateScheduledMethodIsReported() {     run(FixedRateScheduledMethod.class, (tasks) -> {         assertThat(tasks.getCron()).isEmpty().         assertThat(tasks.getFixedDelay()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getFixedRate()).hasSize(1).         FixedRateTaskDescription description = (FixedRateTaskDescription) tasks.getFixedRate().get(0).         assertThat(description.getInitialDelay()).isEqualTo(4).         assertThat(description.getInterval()).isEqualTo(3).         assertThat(description.getRunnable().getTarget()).isEqualTo(FixedRateScheduledMethod.class.getName() + ".fixedRate").     }). }
false;public;0;15;;@Test public void fixedRateTriggerIsReported() {     run(FixedRateTriggerTask.class, (tasks) -> {         assertThat(tasks.getCron()).isEmpty().         assertThat(tasks.getFixedDelay()).isEmpty().         assertThat(tasks.getCustom()).isEmpty().         assertThat(tasks.getFixedRate()).hasSize(1).         FixedRateTaskDescription description = (FixedRateTaskDescription) tasks.getFixedRate().get(0).         assertThat(description.getInitialDelay()).isEqualTo(3000).         assertThat(description.getInterval()).isEqualTo(2000).         assertThat(description.getRunnable().getTarget()).isEqualTo(FixedRateTriggerRunnable.class.getName()).     }). }
false;public;0;15;;@Test public void taskWithCustomTriggerIsReported() {     run(CustomTriggerTask.class, (tasks) -> {         assertThat(tasks.getCron()).isEmpty().         assertThat(tasks.getFixedDelay()).isEmpty().         assertThat(tasks.getFixedRate()).isEmpty().         assertThat(tasks.getCustom()).hasSize(1).         CustomTriggerTaskDescription description = (CustomTriggerTaskDescription) tasks.getCustom().get(0).         assertThat(description.getRunnable().getTarget()).isEqualTo(CustomTriggerRunnable.class.getName()).         assertThat(description.getTrigger()).isEqualTo(CustomTriggerTask.trigger.toString()).     }). }
false;private;2;4;;private void run(Class<?> configuration, Consumer<ScheduledTasksReport> consumer) {     this.contextRunner.withUserConfiguration(configuration).run((context) -> consumer.accept(context.getBean(ScheduledTasksEndpoint.class).scheduledTasks())). }
false;public;1;5;;@Bean public ScheduledTasksEndpoint endpoint(Collection<ScheduledTaskHolder> scheduledTaskHolders) {     return new ScheduledTasksEndpoint(scheduledTaskHolders). }
false;public;0;4;;@Scheduled(fixedDelay = 1, initialDelay = 2) public void fixedDelay() { }
false;public;0;4;;@Scheduled(fixedRate = 3, initialDelay = 4) public void fixedRate() { }
false;public;0;4;;@Scheduled(cron = "0 0 0/3 1/1 * ?") public void cron() { }
false;public;1;6;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     PeriodicTrigger trigger = new PeriodicTrigger(1, TimeUnit.SECONDS).     trigger.setInitialDelay(2).     taskRegistrar.addTriggerTask(new FixedDelayTriggerRunnable(), trigger). }
false;public;1;7;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     PeriodicTrigger trigger = new PeriodicTrigger(2, TimeUnit.SECONDS).     trigger.setInitialDelay(3).     trigger.setFixedRate(true).     taskRegistrar.addTriggerTask(new FixedRateTriggerRunnable(), trigger). }
false;public;1;5;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.addTriggerTask(new CronTriggerRunnable(), new CronTrigger("0 0 0/6 1/1 * ?")). }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.addTriggerTask(new CustomTriggerRunnable(), trigger). }
false;public;0;4;;@Override public void run() { }
false;public;0;4;;@Override public void run() { }
false;public;0;4;;@Override public void run() { }
false;public;0;4;;@Override public void run() { }
