commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void get() {     this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get().uri("/actuator/example/one").accept(MediaType.TEXT_PLAIN).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(MediaType.TEXT_PLAIN).expectBody(String.class).isEqualTo("One"))). }
false;public;0;6;;@Test public void getWithUnacceptableContentType() {     this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.get().uri("/actuator/example/one").accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isEqualTo(HttpStatus.NOT_ACCEPTABLE))). }
false;public;0;8;;@Test public void post() {     this.contextRunner.run(withWebTestClient((webTestClient) -> webTestClient.post().uri("/actuator/example/two").syncBody(Collections.singletonMap("id", "test")).exchange().expectStatus().isCreated().expectHeader().valueEquals(HttpHeaders.LOCATION, "/example/test"))). }
false;private;1;9;;private ContextConsumer<AssertableWebApplicationContext> withWebTestClient(Consumer<WebTestClient> webClient) {     return (context) -> {         int port = ((AnnotationConfigServletWebServerApplicationContext) context.getSourceApplicationContext()).getWebServer().getPort().         WebTestClient webTestClient = createWebTestClient(port).         webClient.accept(webTestClient).     }. }
false;private;1;7;;private WebTestClient createWebTestClient(int port) {     DefaultUriBuilderFactory uriBuilderFactory = new DefaultUriBuilderFactory("http://localhost:" + port).     uriBuilderFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.NONE).     return WebTestClient.bindToServer().uriBuilderFactory(uriBuilderFactory).responseTimeout(Duration.ofMinutes(2)).build(). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory tomcat() {     return new TomcatServletWebServerFactory(0). }
false;public;1;6;;@Bean public ControllerEndpointDiscoverer webEndpointDiscoverer(ApplicationContext applicationContext) {     return new ControllerEndpointDiscoverer(applicationContext, null, Collections.emptyList()). }
false;public;1;6;;@Bean public ControllerEndpointHandlerMapping webEndpointHandlerMapping(ControllerEndpointsSupplier endpointsSupplier) {     return new ControllerEndpointHandlerMapping(new EndpointMapping("actuator"), endpointsSupplier.getEndpoints(), null). }
false;public;0;4;;@GetMapping(path = "one", produces = MediaType.TEXT_PLAIN_VALUE) public String one() {     return "One". }
false;public;1;5;;@PostMapping("/two") public ResponseEntity<String> two(@RequestBody Map<String, Object> content) {     return ResponseEntity.created(URI.create("/example/" + content.get("id"))).build(). }
