commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void listNames() throws IOException {     String responseBody = client.get().uri("/actuator/metrics").exchange().expectStatus().isOk().expectBody(String.class).returnResult().getResponseBody().     Map<String, List<String>> names = this.mapper.readValue(responseBody, Map.class).     assertThat(names.get("names")).containsOnlyOnce("jvm.memory.used"). }
false;public;0;5;;@Test public void selectByName() {     client.get().uri("/actuator/metrics/jvm.memory.used").exchange().expectStatus().isOk().expectBody().jsonPath("$.name").isEqualTo("jvm.memory.used"). }
false;public;0;7;;@Test public void selectByTag() {     client.get().uri("/actuator/metrics/jvm.memory.used?tag=id:Compressed%20Class%20Space").exchange().expectStatus().isOk().expectBody().jsonPath("$.name").isEqualTo("jvm.memory.used"). }
false;public;0;4;;@Bean public MeterRegistry registry() {     return registry. }
false;public;1;4;;@Bean public MetricsEndpoint metricsEndpoint(MeterRegistry meterRegistry) {     return new MetricsEndpoint(meterRegistry). }
false;public;1;6;;@Bean public JvmMemoryMetrics jvmMemoryMetrics(MeterRegistry meterRegistry) {     JvmMemoryMetrics memoryMetrics = new JvmMemoryMetrics().     memoryMetrics.bindTo(meterRegistry).     return memoryMetrics. }
