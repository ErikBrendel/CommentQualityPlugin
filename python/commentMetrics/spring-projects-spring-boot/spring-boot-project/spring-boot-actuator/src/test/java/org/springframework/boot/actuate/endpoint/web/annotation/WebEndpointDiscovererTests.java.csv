commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection() {     load(EmptyConfiguration.class, (discoverer) -> assertThat(discoverer.getEndpoints()).isEmpty()). }
false;public;0;8;;@Test public void getEndpointsWhenWebExtensionIsMissingEndpointShouldThrowException() {     load(TestWebEndpointExtensionConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Invalid extension 'endpointExtension': no endpoint found with id '" + "test'")). }
false;public;0;8;;@Test public void getEndpointsWhenHasFilteredEndpointShouldOnlyDiscoverWebEndpoints() {     load(MultipleEndpointsConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).     }). }
false;public;0;12;;@Test public void getEndpointsWhenHasWebExtensionShouldOverrideStandardEndpoint() {     load(OverriddenOperationWebEndpointExtensionConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("test")).         assertThat(requestPredicates(endpoint)).has(requestPredicates(path("test").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/json"))).     }). }
false;public;0;14;;@Test public void getEndpointsWhenExtensionAddsOperationShouldHaveBothOperations() {     load(AdditionalOperationWebEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("test")).         assertThat(requestPredicates(endpoint)).has(requestPredicates(path("test").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/json"), path("test/{id}").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/json"))).     }). }
false;public;0;12;;@Test public void getEndpointsWhenPredicateForWriteOperationThatReturnsVoidShouldHaveNoProducedMediaTypes() {     load(VoidWriteOperationEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("voidwrite")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("voidwrite")).         assertThat(requestPredicates(endpoint)).has(requestPredicates(path("voidwrite").httpMethod(WebEndpointHttpMethod.POST).produces().consumes("application/json"))).     }). }
false;public;0;8;;@Test public void getEndpointsWhenTwoExtensionsHaveTheSameEndpointTypeShouldThrowException() {     load(ClashingWebEndpointConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Found multiple extensions for the endpoint bean " + "testEndpoint (testExtensionOne, testExtensionTwo)")). }
false;public;0;7;;@Test public void getEndpointsWhenTwoStandardEndpointsHaveTheSameIdShouldThrowException() {     load(ClashingStandardEndpointConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Found two endpoints with the id 'test': ")). }
false;public;0;9;;@Test public void getEndpointsWhenWhenEndpointHasTwoOperationsWithTheSameNameShouldThrowException() {     load(ClashingOperationsEndpointConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Unable to map duplicate endpoint operations: " + "[web request predicate GET to path 'test' " + "produces: application/json] to clashingOperationsEndpoint")). }
false;public;0;8;;@Test public void getEndpointsWhenExtensionIsNotCompatibleWithTheEndpointTypeShouldThrowException() {     load(InvalidWebExtensionConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Endpoint bean 'nonWebEndpoint' cannot support the " + "extension bean 'nonWebWebEndpointExtension'")). }
false;public;0;10;;@Test public void getEndpointsWhenWhenExtensionHasTwoOperationsWithTheSameNameShouldThrowException() {     load(ClashingSelectorsWebEndpointExtensionConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Unable to map duplicate endpoint operations").withMessageContaining("to testEndpoint (clashingSelectorsExtension)")). }
false;public;0;16;;@Test public void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {     load((id) -> 500L, EndpointId::toString, TestEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("test")).         assertThat(endpoint.getOperations()).hasSize(1).         WebOperation operation = endpoint.getOperations().iterator().next().         Object invoker = ReflectionTestUtils.getField(operation, "invoker").         assertThat(invoker).isInstanceOf(CachingOperationInvoker.class).         assertThat(((CachingOperationInvoker) invoker).getTimeToLive()).isEqualTo(500).     }). }
false;public;0;12;;@Test public void getEndpointsWhenOperationReturnsResourceShouldProduceApplicationOctetStream() {     load(ResourceEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("resource")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("resource")).         assertThat(requestPredicates(endpoint)).has(requestPredicates(path("resource").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/octet-stream"))).     }). }
false;public;0;17;;@Test public void getEndpointsWhenHasCustomMediaTypeShouldProduceCustomMediaType() {     load(CustomMediaTypesEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("custommediatypes")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("custommediatypes")).         assertThat(requestPredicates(endpoint)).has(requestPredicates(path("custommediatypes").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("text/plain"), path("custommediatypes").httpMethod(WebEndpointHttpMethod.POST).consumes().produces("a/b", "c/d"), path("custommediatypes").httpMethod(WebEndpointHttpMethod.DELETE).consumes().produces("text/plain"))).     }). }
false;public;0;16;;@Test public void getEndpointsWhenHasCustomPathShouldReturnCustomPath() {     load((id) -> null, (id) -> "custom/" + id, AdditionalOperationWebEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableWebEndpoint> endpoints = mapEndpoints(discoverer.getEndpoints()).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         ExposableWebEndpoint endpoint = endpoints.get(EndpointId.of("test")).         Condition<List<? extends WebOperationRequestPredicate>> expected = requestPredicates(path("custom/test").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/json"), path("custom/test/{id}").httpMethod(WebEndpointHttpMethod.GET).consumes().produces("application/json")).         assertThat(requestPredicates(endpoint)).has(expected).     }). }
false;private;2;3;;private void load(Class<?> configuration, Consumer<WebEndpointDiscoverer> consumer) {     this.load((id) -> null, EndpointId::toString, configuration, consumer). }
false;private;4;18;;private void load(Function<EndpointId, Long> timeToLive, PathMapper endpointPathMapper, Class<?> configuration, Consumer<WebEndpointDiscoverer> consumer) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(configuration)) {         ConversionServiceParameterValueMapper parameterMapper = new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance()).         EndpointMediaTypes mediaTypes = new EndpointMediaTypes(Collections.singletonList("application/json"), Collections.singletonList("application/json")).         WebEndpointDiscoverer discoverer = new WebEndpointDiscoverer(context, parameterMapper, mediaTypes, Collections.singletonList(endpointPathMapper), Collections.singleton(new CachingOperationInvokerAdvisor(timeToLive)), Collections.emptyList()).         consumer.accept(discoverer).     } }
false;private;1;7;;private Map<EndpointId, ExposableWebEndpoint> mapEndpoints(Collection<ExposableWebEndpoint> endpoints) {     Map<EndpointId, ExposableWebEndpoint> endpointById = new HashMap<>().     endpoints.forEach((endpoint) -> endpointById.put(endpoint.getEndpointId(), endpoint)).     return endpointById. }
false;private;1;5;;private List<WebOperationRequestPredicate> requestPredicates(ExposableWebEndpoint endpoint) {     return endpoint.getOperations().stream().map(WebOperation::getRequestPredicate).collect(Collectors.toList()). }
false;private;1;14;;private Condition<List<? extends WebOperationRequestPredicate>> requestPredicates(RequestPredicateMatcher... matchers) {     return new Condition<>((predicates) -> {         if (predicates.size() != matchers.length) {             return false.         }         Map<WebOperationRequestPredicate, Long> matchCounts = new HashMap<>().         for (WebOperationRequestPredicate predicate : predicates) {             matchCounts.put(predicate, Stream.of(matchers).filter((matcher) -> matcher.matches(predicate)).count()).         }         return matchCounts.values().stream().noneMatch((count) -> count != 1).     }, Arrays.toString(matchers)). }
false;private;1;3;;private RequestPredicateMatcher path(String path) {     return new RequestPredicateMatcher(path). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public NonWebEndpoint nonWebEndpoint() {     return new NonWebEndpoint(). }
false;public;0;4;;@Bean public TestWebEndpointExtension endpointExtension() {     return new TestWebEndpointExtension(). }
false;public;0;4;;@Bean public ClashingOperationsEndpoint clashingOperationsEndpoint() {     return new ClashingOperationsEndpoint(). }
false;public;0;4;;@Bean public ClashingOperationsWebEndpointExtension clashingOperationsExtension() {     return new ClashingOperationsWebEndpointExtension(). }
false;public;0;4;;@Bean public OverriddenOperationWebEndpointExtension overriddenOperationExtension() {     return new OverriddenOperationWebEndpointExtension(). }
false;public;0;4;;@Bean public AdditionalOperationWebEndpointExtension additionalOperationExtension() {     return new AdditionalOperationWebEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestWebEndpointExtension testExtensionOne() {     return new TestWebEndpointExtension(). }
false;public;0;4;;@Bean public TestWebEndpointExtension testExtensionTwo() {     return new TestWebEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointTwo() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointOne() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public ClashingSelectorsWebEndpointExtension clashingSelectorsExtension() {     return new ClashingSelectorsWebEndpointExtension(). }
false;public;0;4;;@Bean public NonWebEndpoint nonWebEndpoint() {     return new NonWebEndpoint(). }
false;public;0;4;;@Bean public NonWebWebEndpointExtension nonWebWebEndpointExtension() {     return new NonWebWebEndpointExtension(). }
false;public;0;4;;@Bean public VoidWriteOperationEndpoint voidWriteOperationEndpoint() {     return new VoidWriteOperationEndpoint(). }
false;public;0;4;;@Bean public ResourceEndpoint resourceEndpoint() {     return new ResourceEndpoint(). }
false;public;0;4;;@Bean public CustomMediaTypesEndpoint customMediaTypesEndpoint() {     return new CustomMediaTypesEndpoint(). }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getOne(@Selector String id) {     return null. }
false;public;2;4;;@WriteOperation public void update(String foo, String bar) { }
false;public;0;3;;public void someOtherMethod() { }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getOne(@Selector String id) {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAgain() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAgain() {     return null. }
false;public;2;4;;@ReadOperation public Object readOne(@Selector String oneA, @Selector String oneB) {     return null. }
false;public;2;4;;@ReadOperation public Object readTwo(@Selector String twoA, @Selector String twoB) {     return null. }
false;public;0;4;;@ReadOperation public Object getData() {     return null. }
false;public;1;4;;@ReadOperation public Object getSomething(@Selector String name) {     return null. }
false;public;2;3;;@WriteOperation public void write(String foo, String bar) { }
false;public;0;4;;@ReadOperation public Resource read() {     return new ByteArrayResource(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }). }
false;public;0;4;;@ReadOperation(produces = "text/plain") public String read() {     return "read". }
false;public;0;5;;@WriteOperation(produces = { "a/b", "c/d" }) public String write() {     return "write". }
false;public;0;4;;@DeleteOperation(produces = "text/plain") public String delete() {     return "delete". }
false;public;1;4;;public RequestPredicateMatcher produces(String... mediaTypes) {     this.produces = Arrays.asList(mediaTypes).     return this. }
false;public;1;4;;public RequestPredicateMatcher consumes(String... mediaTypes) {     this.consumes = Arrays.asList(mediaTypes).     return this. }
false;private;1;4;;private RequestPredicateMatcher httpMethod(WebEndpointHttpMethod httpMethod) {     this.httpMethod = httpMethod.     return this. }
false;private;1;9;;private boolean matches(WebOperationRequestPredicate predicate) {     return (this.path == null || this.path.equals(predicate.getPath())) && (this.httpMethod == null || this.httpMethod == predicate.getHttpMethod()) && (this.produces == null || this.produces.equals(new ArrayList<>(predicate.getProduces()))) && (this.consumes == null || this.consumes.equals(new ArrayList<>(predicate.getConsumes()))). }
false;public;0;5;;@Override public String toString() {     return "Request predicate with path = '" + this.path + "', httpMethod = '" + this.httpMethod + "', produces = '" + this.produces + "'". }
