commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     this.registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock()).     this.restTemplate = new RestTemplate().     this.mockServer = MockRestServiceServer.createServer(this.restTemplate).     this.customizer = new MetricsRestTemplateCustomizer(this.registry, new DefaultRestTemplateExchangeTagsProvider(), "http.client.requests").     this.customizer.customize(this.restTemplate). }
false;public;0;16;;@Test public void interceptRestTemplate() {     this.mockServer.expect(MockRestRequestMatchers.requestTo("/test/123")).andExpect(MockRestRequestMatchers.method(HttpMethod.GET)).andRespond(MockRestResponseCreators.withSuccess("OK", MediaType.APPLICATION_JSON)).     String result = this.restTemplate.getForObject("/test/{id}", String.class, 123).     assertThat(this.registry.find("http.client.requests").meters()).anySatisfy((m) -> assertThat(m.getId().getTags().stream().map(Tag::getKey)).doesNotContain("bucket")).     assertThat(this.registry.get("http.client.requests").tags("method", "GET", "uri", "/test/{id}", "status", "200").timer().count()).isEqualTo(1).     assertThat(result).isEqualTo("OK").     this.mockServer.verify(). }
false;public;0;7;;@Test public void avoidDuplicateRegistration() {     this.customizer.customize(this.restTemplate).     assertThat(this.restTemplate.getInterceptors()).hasSize(1).     this.customizer.customize(this.restTemplate).     assertThat(this.restTemplate.getInterceptors()).hasSize(1). }
false;public;0;11;;@Test public void normalizeUriToContainLeadingSlash() {     this.mockServer.expect(MockRestRequestMatchers.requestTo("/test/123")).andExpect(MockRestRequestMatchers.method(HttpMethod.GET)).andRespond(MockRestResponseCreators.withSuccess("OK", MediaType.APPLICATION_JSON)).     String result = this.restTemplate.getForObject("test/{id}", String.class, 123).     this.registry.get("http.client.requests").tags("uri", "/test/{id}").timer().     assertThat(result).isEqualTo("OK").     this.mockServer.verify(). }
false;public;0;13;;@Test public void interceptRestTemplateWithUri() throws URISyntaxException {     this.mockServer.expect(MockRestRequestMatchers.requestTo("http://localhost/test/123")).andExpect(MockRestRequestMatchers.method(HttpMethod.GET)).andRespond(MockRestResponseCreators.withSuccess("OK", MediaType.APPLICATION_JSON)).     String result = this.restTemplate.getForObject(new URI("http://localhost/test/123"), String.class).     assertThat(result).isEqualTo("OK").     this.registry.get("http.client.requests").tags("uri", "/test/123").timer().     this.mockServer.verify(). }
