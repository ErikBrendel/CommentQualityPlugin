commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void sessionsForUsername() {     given(this.repository.findByPrincipalName("user")).willReturn(Collections.singletonMap(session.getId(), session)).     List<SessionDescriptor> result = this.endpoint.sessionsForUsername("user").getSessions().     assertThat(result).hasSize(1).     assertThat(result.get(0).getId()).isEqualTo(session.getId()).     assertThat(result.get(0).getAttributeNames()).isEqualTo(session.getAttributeNames()).     assertThat(result.get(0).getCreationTime()).isEqualTo(session.getCreationTime()).     assertThat(result.get(0).getLastAccessedTime()).isEqualTo(session.getLastAccessedTime()).     assertThat(result.get(0).getMaxInactiveInterval()).isEqualTo(session.getMaxInactiveInterval().getSeconds()).     assertThat(result.get(0).isExpired()).isEqualTo(session.isExpired()). }
false;public;0;12;;@Test public void getSession() {     given(this.repository.findById(session.getId())).willReturn(session).     SessionDescriptor result = this.endpoint.getSession(session.getId()).     assertThat(result.getId()).isEqualTo(session.getId()).     assertThat(result.getAttributeNames()).isEqualTo(session.getAttributeNames()).     assertThat(result.getCreationTime()).isEqualTo(session.getCreationTime()).     assertThat(result.getLastAccessedTime()).isEqualTo(session.getLastAccessedTime()).     assertThat(result.getMaxInactiveInterval()).isEqualTo(session.getMaxInactiveInterval().getSeconds()).     assertThat(result.isExpired()).isEqualTo(session.isExpired()). }
false;public;0;5;;@Test public void getSessionWithIdNotFound() {     given(this.repository.findById("not-found")).willReturn(null).     assertThat(this.endpoint.getSession("not-found")).isNull(). }
false;public;0;5;;@Test public void deleteSession() {     this.endpoint.deleteSession(session.getId()).     verify(this.repository).deleteById(session.getId()). }
