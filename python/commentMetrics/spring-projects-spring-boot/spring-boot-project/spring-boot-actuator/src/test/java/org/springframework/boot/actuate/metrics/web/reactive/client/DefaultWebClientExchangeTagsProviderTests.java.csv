commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     this.request = ClientRequest.create(HttpMethod.GET, URI.create("http://example.org/projects/spring-boot")).attribute(URI_TEMPLATE_ATTRIBUTE, "http://example.org/projects/{project}").build().     this.response = mock(ClientResponse.class).     given(this.response.statusCode()).willReturn(HttpStatus.OK). }
false;public;0;7;;@Test public void tagsShouldBePopulated() {     Iterable<Tag> tags = this.tagsProvider.tags(this.request, this.response, null).     assertThat(tags).containsExactlyInAnyOrder(Tag.of("method", "GET"), Tag.of("uri", "/projects/{project}"), Tag.of("clientName", "example.org"), Tag.of("status", "200"), Tag.of("outcome", "SUCCESS")). }
false;public;0;10;;@Test public void tagsWhenNoUriTemplateShouldProvideUriPath() {     ClientRequest request = ClientRequest.create(HttpMethod.GET, URI.create("http://example.org/projects/spring-boot")).build().     Iterable<Tag> tags = this.tagsProvider.tags(request, this.response, null).     assertThat(tags).containsExactlyInAnyOrder(Tag.of("method", "GET"), Tag.of("uri", "/projects/spring-boot"), Tag.of("clientName", "example.org"), Tag.of("status", "200"), Tag.of("outcome", "SUCCESS")). }
false;public;0;8;;@Test public void tagsWhenIoExceptionShouldReturnIoErrorStatus() {     Iterable<Tag> tags = this.tagsProvider.tags(this.request, null, new IOException()).     assertThat(tags).containsExactlyInAnyOrder(Tag.of("method", "GET"), Tag.of("uri", "/projects/{project}"), Tag.of("clientName", "example.org"), Tag.of("status", "IO_ERROR")). }
false;public;0;8;;@Test public void tagsWhenExceptionShouldReturnClientErrorStatus() {     Iterable<Tag> tags = this.tagsProvider.tags(this.request, null, new IllegalArgumentException()).     assertThat(tags).containsExactlyInAnyOrder(Tag.of("method", "GET"), Tag.of("uri", "/projects/{project}"), Tag.of("clientName", "example.org"), Tag.of("status", "CLIENT_ERROR")). }
