commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void beansAreFound() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class).     contextRunner.run((context) -> {         ApplicationBeans result = context.getBean(BeansEndpoint.class).beans().         ContextBeans descriptor = result.getContexts().get(context.getId()).         assertThat(descriptor.getParentId()).isNull().         Map<String, BeanDescriptor> beans = descriptor.getBeans().         assertThat(beans.size()).isLessThanOrEqualTo(context.getBeanDefinitionCount()).         assertThat(beans).containsKey("endpoint").     }). }
false;public;0;19;;@Test public void infrastructureBeansAreOmitted() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class).     contextRunner.run((context) -> {         ConfigurableListableBeanFactory factory = (ConfigurableListableBeanFactory) context.getAutowireCapableBeanFactory().         List<String> infrastructureBeans = Stream.of(context.getBeanDefinitionNames()).filter((name) -> BeanDefinition.ROLE_INFRASTRUCTURE == factory.getBeanDefinition(name).getRole()).collect(Collectors.toList()).         ApplicationBeans result = context.getBean(BeansEndpoint.class).beans().         ContextBeans contextDescriptor = result.getContexts().get(context.getId()).         Map<String, BeanDescriptor> beans = contextDescriptor.getBeans().         for (String infrastructureBean : infrastructureBeans) {             assertThat(beans).doesNotContainKey(infrastructureBean).         }     }). }
false;public;0;12;;@Test public void lazyBeansAreOmitted() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class, LazyBeanConfiguration.class).     contextRunner.run((context) -> {         ApplicationBeans result = context.getBean(BeansEndpoint.class).beans().         ContextBeans contextDescriptor = result.getContexts().get(context.getId()).         assertThat(context).hasBean("lazyBean").         assertThat(contextDescriptor.getBeans()).doesNotContainKey("lazyBean").     }). }
false;public;0;17;;@Test public void beansInParentContextAreFound() {     ApplicationContextRunner parentRunner = new ApplicationContextRunner().withUserConfiguration(BeanConfiguration.class).     parentRunner.run((parent) -> {         new ApplicationContextRunner().withUserConfiguration(EndpointConfiguration.class).withParent(parent).run((child) -> {             ApplicationBeans result = child.getBean(BeansEndpoint.class).beans().             assertThat(result.getContexts().get(parent.getId()).getBeans()).containsKey("bean").             assertThat(result.getContexts().get(child.getId()).getBeans()).containsKey("endpoint").         }).     }). }
false;public;1;4;;@Bean public BeansEndpoint endpoint(ConfigurableApplicationContext context) {     return new BeansEndpoint(context). }
false;public;0;4;;@Bean public String bean() {     return "bean". }
false;public;0;5;;@Lazy @Bean public String lazyBean() {     return "lazyBean". }
