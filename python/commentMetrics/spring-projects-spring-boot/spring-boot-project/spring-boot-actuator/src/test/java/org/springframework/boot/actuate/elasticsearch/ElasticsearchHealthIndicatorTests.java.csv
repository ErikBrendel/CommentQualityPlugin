commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() {     MockitoAnnotations.initMocks(this).     given(this.client.admin()).willReturn(this.admin).     given(this.admin.cluster()).willReturn(this.cluster).     this.indicator = new ElasticsearchHealthIndicator(this.client, 100L). }
false;public;0;12;;@Test public void defaultConfigurationQueriesAllIndicesWith100msTimeout() {     TestActionFuture responseFuture = new TestActionFuture().     responseFuture.onResponse(new StubClusterHealthResponse()).     ArgumentCaptor<ClusterHealthRequest> requestCaptor = ArgumentCaptor.forClass(ClusterHealthRequest.class).     given(this.cluster.health(requestCaptor.capture())).willReturn(responseFuture).     Health health = this.indicator.health().     assertThat(responseFuture.getTimeout).isEqualTo(100L).     assertThat(requestCaptor.getValue().indices()).contains("_all").     assertThat(health.getStatus()).isEqualTo(Status.UP). }
false;public;0;14;;@Test public void certainIndices() {     this.indicator = new ElasticsearchHealthIndicator(this.client, 100L, "test-index-1", "test-index-2").     PlainActionFuture<ClusterHealthResponse> responseFuture = new PlainActionFuture<>().     responseFuture.onResponse(new StubClusterHealthResponse()).     ArgumentCaptor<ClusterHealthRequest> requestCaptor = ArgumentCaptor.forClass(ClusterHealthRequest.class).     given(this.cluster.health(requestCaptor.capture())).willReturn(responseFuture).     Health health = this.indicator.health().     assertThat(requestCaptor.getValue().indices()).contains("test-index-1", "test-index-2").     assertThat(health.getStatus()).isEqualTo(Status.UP). }
false;public;0;11;;@Test public void customTimeout() {     this.indicator = new ElasticsearchHealthIndicator(this.client, 1000L).     TestActionFuture responseFuture = new TestActionFuture().     responseFuture.onResponse(new StubClusterHealthResponse()).     ArgumentCaptor<ClusterHealthRequest> requestCaptor = ArgumentCaptor.forClass(ClusterHealthRequest.class).     given(this.cluster.health(requestCaptor.capture())).willReturn(responseFuture).     this.indicator.health().     assertThat(responseFuture.getTimeout).isEqualTo(1000L). }
false;public;0;18;;@Test public void healthDetails() {     PlainActionFuture<ClusterHealthResponse> responseFuture = new PlainActionFuture<>().     responseFuture.onResponse(new StubClusterHealthResponse()).     given(this.cluster.health(any(ClusterHealthRequest.class))).willReturn(responseFuture).     Health health = this.indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     Map<String, Object> details = health.getDetails().     assertDetail(details, "clusterName", "test-cluster").     assertDetail(details, "activeShards", 1).     assertDetail(details, "relocatingShards", 2).     assertDetail(details, "activePrimaryShards", 3).     assertDetail(details, "initializingShards", 4).     assertDetail(details, "unassignedShards", 5).     assertDetail(details, "numberOfNodes", 6).     assertDetail(details, "numberOfDataNodes", 7). }
false;public;0;8;;@Test public void redResponseMapsToDown() {     PlainActionFuture<ClusterHealthResponse> responseFuture = new PlainActionFuture<>().     responseFuture.onResponse(new StubClusterHealthResponse(ClusterHealthStatus.RED)).     given(this.cluster.health(any(ClusterHealthRequest.class))).willReturn(responseFuture).     assertThat(this.indicator.health().getStatus()).isEqualTo(Status.DOWN). }
false;public;0;9;;@Test public void yellowResponseMapsToUp() {     PlainActionFuture<ClusterHealthResponse> responseFuture = new PlainActionFuture<>().     responseFuture.onResponse(new StubClusterHealthResponse(ClusterHealthStatus.YELLOW)).     given(this.cluster.health(any(ClusterHealthRequest.class))).willReturn(responseFuture).     assertThat(this.indicator.health().getStatus()).isEqualTo(Status.UP). }
false;public;0;10;;@Test public void responseTimeout() {     PlainActionFuture<ClusterHealthResponse> responseFuture = new PlainActionFuture<>().     given(this.cluster.health(any(ClusterHealthRequest.class))).willReturn(responseFuture).     Health health = this.indicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN).     assertThat((String) health.getDetails().get("error")).contains(ElasticsearchTimeoutException.class.getName()). }
false;private;3;4;;@SuppressWarnings("unchecked") private <T> void assertDetail(Map<String, Object> details, String detail, T value) {     assertThat((T) details.get(detail)).isEqualTo(value). }
false;public;0;4;;@Override public int getActiveShards() {     return 1. }
false;public;0;4;;@Override public int getRelocatingShards() {     return 2. }
false;public;0;4;;@Override public int getActivePrimaryShards() {     return 3. }
false;public;0;4;;@Override public int getInitializingShards() {     return 4. }
false;public;0;4;;@Override public int getUnassignedShards() {     return 5. }
false;public;0;4;;@Override public int getNumberOfNodes() {     return 6. }
false;public;0;4;;@Override public int getNumberOfDataNodes() {     return 7. }
false;public;0;4;;@Override public ClusterHealthStatus getStatus() {     return this.status. }
false;public;1;6;;@Override public ClusterHealthResponse actionGet(long timeoutMillis) throws ElasticsearchException {     this.getTimeout = timeoutMillis.     return super.actionGet(timeoutMillis). }
