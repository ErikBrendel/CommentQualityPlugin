commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mappingWithNoPrefix() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ExposableControllerEndpoint second = secondEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("", first, second).     assertThat(mapping.getHandler(request("GET", "/first")).getHandler()).isEqualTo(handlerOf(first.getController(), "get")).     assertThat(mapping.getHandler(request("POST", "/second")).getHandler()).isEqualTo(handlerOf(second.getController(), "save")).     assertThat(mapping.getHandler(request("GET", "/third"))).isNull(). }
false;public;0;13;;@Test public void mappingWithPrefix() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ExposableControllerEndpoint second = secondEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", first, second).     assertThat(mapping.getHandler(request("GET", "/actuator/first")).getHandler()).isEqualTo(handlerOf(first.getController(), "get")).     assertThat(mapping.getHandler(request("POST", "/actuator/second")).getHandler()).isEqualTo(handlerOf(second.getController(), "save")).     assertThat(mapping.getHandler(request("GET", "/first"))).isNull().     assertThat(mapping.getHandler(request("GET", "/second"))).isNull(). }
false;public;0;7;;@Test public void mappingNarrowedToMethod() throws Exception {     ExposableControllerEndpoint first = firstEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", first).     assertThatExceptionOfType(HttpRequestMethodNotSupportedException.class).isThrownBy(() -> mapping.getHandler(request("POST", "/actuator/first"))). }
false;public;0;9;;@Test public void mappingWithNoPath() throws Exception {     ExposableControllerEndpoint pathless = pathlessEndpoint().     ControllerEndpointHandlerMapping mapping = createMapping("actuator", pathless).     assertThat(mapping.getHandler(request("GET", "/actuator/pathless")).getHandler()).isEqualTo(handlerOf(pathless.getController(), "get")).     assertThat(mapping.getHandler(request("GET", "/pathless"))).isNull().     assertThat(mapping.getHandler(request("GET", "/"))).isNull(). }
false;private;2;8;;private ControllerEndpointHandlerMapping createMapping(String prefix, ExposableControllerEndpoint... endpoints) {     ControllerEndpointHandlerMapping mapping = new ControllerEndpointHandlerMapping(new EndpointMapping(prefix), Arrays.asList(endpoints), null).     mapping.setApplicationContext(this.context).     mapping.afterPropertiesSet().     return mapping. }
false;private;2;4;;private HandlerMethod handlerOf(Object source, String methodName) {     return new HandlerMethod(source, ReflectionUtils.findMethod(source.getClass(), methodName)). }
false;private;2;3;;private MockHttpServletRequest request(String method, String requestURI) {     return new MockHttpServletRequest(method, requestURI). }
false;private;0;3;;private ExposableControllerEndpoint firstEndpoint() {     return mockEndpoint(EndpointId.of("first"), new FirstTestMvcEndpoint()). }
false;private;0;3;;private ExposableControllerEndpoint secondEndpoint() {     return mockEndpoint(EndpointId.of("second"), new SecondTestMvcEndpoint()). }
false;private;0;3;;private ExposableControllerEndpoint pathlessEndpoint() {     return mockEndpoint(EndpointId.of("pathless"), new PathlessControllerEndpoint()). }
false;private;2;7;;private ExposableControllerEndpoint mockEndpoint(EndpointId id, Object controller) {     ExposableControllerEndpoint endpoint = mock(ExposableControllerEndpoint.class).     given(endpoint.getEndpointId()).willReturn(id).     given(endpoint.getController()).willReturn(controller).     given(endpoint.getRootPath()).willReturn(id.toString()).     return endpoint. }
false;public;0;4;;@GetMapping("/") public String get() {     return "test". }
false;public;0;4;;@PostMapping("/") public void save() { }
false;public;0;4;;@GetMapping public String get() {     return "test". }
