commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void filterTracesExchange() throws ServletException, IOException {     this.filter.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse(), new MockFilterChain()).     assertThat(this.repository.findAll()).hasSize(1). }
false;protected;2;6;;@Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {     req.getSession(true). }
false;public;0;18;;@Test public void filterCapturesSessionId() throws ServletException, IOException {     this.filter.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse(), new MockFilterChain(new HttpServlet() {          @Override         protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {             req.getSession(true).         }     })).     assertThat(this.repository.findAll()).hasSize(1).     Session session = this.repository.findAll().get(0).getSession().     assertThat(session).isNotNull().     assertThat(session.getId()).isNotNull(). }
false;public;0;14;;@Test public void filterCapturesPrincipal() throws ServletException, IOException {     MockHttpServletRequest request = new MockHttpServletRequest().     Principal principal = mock(Principal.class).     given(principal.getName()).willReturn("alice").     request.setUserPrincipal(principal).     this.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain()).     assertThat(this.repository.findAll()).hasSize(1).     org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal().     assertThat(tracedPrincipal).isNotNull().     assertThat(tracedPrincipal.getName()).isEqualTo("alice"). }
false;protected;2;6;;@Override protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {     throw new IOException(). }
false;public;0;22;;@Test public void statusIsAssumedToBe500WhenChainFails() throws ServletException, IOException {     assertThatIOException().isThrownBy(() -> this.filter.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse(), new MockFilterChain(new HttpServlet() {          @Override         protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {             throw new IOException().         }     }))).satisfies((ex) -> {         assertThat(this.repository.findAll()).hasSize(1).         assertThat(this.repository.findAll().get(0).getResponse().getStatus()).isEqualTo(500).     }). }
false;public;0;8;;@Test public void filterRejectsInvalidRequests() throws ServletException, IOException {     MockHttpServletRequest request = new MockHttpServletRequest().     request.setServerName("<script>alert(document.domain)</script>").     this.filter.doFilter(request, new MockHttpServletResponse(), new MockFilterChain()).     assertThat(this.repository.findAll()).hasSize(0). }
