commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;0;4;;@Override protected final String getName() {     return this.name. }
false;protected;1;4;;@Override protected String testName(FrameworkMethod method) {     return super.testName(method) + "[" + getName() + "]". }
false;public;0;5;;@Override public void evaluate() throws Throwable {     AbstractWebEndpointRunner.this.testContext.beforeClass().     delegate.evaluate(). }
false;protected;1;13;;@Override protected Statement withBeforeClasses(Statement statement) {     Statement delegate = super.withBeforeClasses(statement).     return new Statement() {          @Override         public void evaluate() throws Throwable {             AbstractWebEndpointRunner.this.testContext.beforeClass().             delegate.evaluate().         }     }. }
false;public;0;9;;@Override public void evaluate() throws Throwable {     try {         delegate.evaluate().     } finally {         AbstractWebEndpointRunner.this.testContext.afterClass().     } }
false;protected;1;17;;@Override protected Statement withAfterClasses(Statement statement) {     Statement delegate = super.withAfterClasses(statement).     return new Statement() {          @Override         public void evaluate() throws Throwable {             try {                 delegate.evaluate().             } finally {                 AbstractWebEndpointRunner.this.testContext.afterClass().             }         }     }. }
false;public;0;5;;@Override public void evaluate() throws Throwable {     AbstractWebEndpointRunner.this.testContext.beforeTest().     delegate.evaluate(). }
false;protected;3;14;;@Override protected Statement withBefores(FrameworkMethod method, Object target, Statement statement) {     Statement delegate = super.withBefores(method, target, statement).     return new Statement() {          @Override         public void evaluate() throws Throwable {             AbstractWebEndpointRunner.this.testContext.beforeTest().             delegate.evaluate().         }     }. }
false;public;0;9;;@Override public void evaluate() throws Throwable {     try {         delegate.evaluate().     } finally {         AbstractWebEndpointRunner.this.testContext.afterTest().     } }
false;protected;3;18;;@Override protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) {     Statement delegate = super.withAfters(method, target, statement).     return new Statement() {          @Override         public void evaluate() throws Throwable {             try {                 delegate.evaluate().             } finally {                 AbstractWebEndpointRunner.this.testContext.afterTest().             }         }     }. }
false;;0;6;;void beforeClass() {     this.applicationContext = createApplicationContext().     WebTestClient webTestClient = createWebTestClient().     injectIfPossible(this.testClass, webTestClient).     injectIfPossible(this.testClass, this.applicationContext). }
false;;0;3;;void beforeTest() {     capturePropertySources(). }
false;;0;3;;void afterTest() {     restorePropertySources(). }
false;;0;5;;void afterClass() {     if (this.applicationContext != null) {         this.applicationContext.close().     } }
false;private;0;7;;private ConfigurableApplicationContext createApplicationContext() {     Class<?>[] members = this.testClass.getDeclaredClasses().     List<Class<?>> configurationClasses = Stream.of(members).filter(this::isConfiguration).collect(Collectors.toList()).     return this.contextFactory.createContext(new ArrayList<>(configurationClasses)). }
false;private;1;3;;private boolean isConfiguration(Class<?> candidate) {     return AnnotationUtils.findAnnotation(candidate, Configuration.class) != null. }
false;private;0;7;;private WebTestClient createWebTestClient() {     DefaultUriBuilderFactory uriBuilderFactory = new DefaultUriBuilderFactory("http://localhost:" + determinePort()).     uriBuilderFactory.setEncodingMode(EncodingMode.NONE).     return WebTestClient.bindToServer().uriBuilderFactory(uriBuilderFactory).responseTimeout(TIMEOUT).build(). }
false;private;0;7;;private int determinePort() {     if (this.applicationContext instanceof AnnotationConfigServletWebServerApplicationContext) {         return ((AnnotationConfigServletWebServerApplicationContext) this.applicationContext).getWebServer().getPort().     }     return this.applicationContext.getBean(PortHolder.class).getPort(). }
false;private;2;9;;private void injectIfPossible(Class<?> target, Object value) {     ReflectionUtils.doWithFields(target, (field) -> {         if (Modifier.isStatic(field.getModifiers()) && field.getType().isInstance(value)) {             ReflectionUtils.makeAccessible(field).             ReflectionUtils.setField(field, null, value).         }     }). }
false;private;0;5;;private void capturePropertySources() {     this.propertySources = new ArrayList<>().     this.applicationContext.getEnvironment().getPropertySources().forEach(this.propertySources::add). }
false;private;0;9;;private void restorePropertySources() {     List<String> names = new ArrayList<>().     MutablePropertySources propertySources = this.applicationContext.getEnvironment().getPropertySources().     propertySources.forEach((propertySource) -> names.add(propertySource.getName())).     names.forEach(propertySources::remove).     this.propertySources.forEach(propertySources::addLast). }
