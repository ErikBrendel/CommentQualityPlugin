commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.exchange = MockServerWebExchange.from(MockServerHttpRequest.get("")). }
false;public;0;8;;@Test public void uriTagValueIsBestMatchingPatternWhenAvailable() {     this.exchange.getAttributes().put(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, this.parser.parse("/spring")).     this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY).     Tag tag = WebFluxTags.uri(this.exchange).     assertThat(tag.getValue()).isEqualTo("/spring"). }
false;public;0;6;;@Test public void uriTagValueIsRedirectionWhenResponseStatusIs3xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY).     Tag tag = WebFluxTags.uri(this.exchange).     assertThat(tag.getValue()).isEqualTo("REDIRECTION"). }
false;public;0;6;;@Test public void uriTagValueIsNotFoundWhenResponseStatusIs404() {     this.exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND).     Tag tag = WebFluxTags.uri(this.exchange).     assertThat(tag.getValue()).isEqualTo("NOT_FOUND"). }
false;public;0;6;;@Test public void uriTagToleratesCustomResponseStatus() {     this.exchange.getResponse().setStatusCodeValue(601).     Tag tag = WebFluxTags.uri(this.exchange).     assertThat(tag.getValue()).isEqualTo("root"). }
false;public;0;5;;@Test public void uriTagValueIsRootWhenRequestHasNoPatternOrPathInfo() {     Tag tag = WebFluxTags.uri(this.exchange).     assertThat(tag.getValue()).isEqualTo("root"). }
false;public;0;7;;@Test public void uriTagValueIsRootWhenRequestHasNoPatternAndSlashPathInfo() {     MockServerHttpRequest request = MockServerHttpRequest.get("/").build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     Tag tag = WebFluxTags.uri(exchange).     assertThat(tag.getValue()).isEqualTo("root"). }
false;public;0;7;;@Test public void uriTagValueIsUnknownWhenRequestHasNoPatternAndNonRootPathInfo() {     MockServerHttpRequest request = MockServerHttpRequest.get("/example").build().     ServerWebExchange exchange = MockServerWebExchange.from(request).     Tag tag = WebFluxTags.uri(exchange).     assertThat(tag.getValue()).isEqualTo("UNKNOWN"). }
false;public;0;9;;@Test public void methodTagToleratesNonStandardHttpMethods() {     ServerWebExchange exchange = mock(ServerWebExchange.class).     ServerHttpRequest request = mock(ServerHttpRequest.class).     given(exchange.getRequest()).willReturn(request).     given(request.getMethodValue()).willReturn("CUSTOM").     Tag tag = WebFluxTags.method(exchange).     assertThat(tag.getValue()).isEqualTo("CUSTOM"). }
false;public;0;6;;@Test public void outcomeTagIsUnknownWhenResponseStatusIsNull() {     this.exchange.getResponse().setStatusCode(null).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("UNKNOWN"). }
false;public;0;6;;@Test public void outcomeTagIsInformationalWhenResponseIs1xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.CONTINUE).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("INFORMATIONAL"). }
false;public;0;6;;@Test public void outcomeTagIsSuccessWhenResponseIs2xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.OK).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("SUCCESS"). }
false;public;0;6;;@Test public void outcomeTagIsRedirectionWhenResponseIs3xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.MOVED_PERMANENTLY).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("REDIRECTION"). }
false;public;0;6;;@Test public void outcomeTagIsClientErrorWhenResponseIs4xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("CLIENT_ERROR"). }
false;public;0;6;;@Test public void outcomeTagIsServerErrorWhenResponseIs5xx() {     this.exchange.getResponse().setStatusCode(HttpStatus.BAD_GATEWAY).     Tag tag = WebFluxTags.outcome(this.exchange).     assertThat(tag.getValue()).isEqualTo("SERVER_ERROR"). }
