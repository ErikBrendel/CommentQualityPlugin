commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.exporter = new JmxEndpointExporter(this.mBeanServer, this.objectNameFactory, this.responseMapper, this.endpoints). }
false;public;0;7;;@Test public void createWhenMBeanServerIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new JmxEndpointExporter(null, this.objectNameFactory, this.responseMapper, this.endpoints)).withMessageContaining("MBeanServer must not be null"). }
false;public;0;7;;@Test public void createWhenObjectNameFactoryIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new JmxEndpointExporter(this.mBeanServer, null, this.responseMapper, this.endpoints)).withMessageContaining("ObjectNameFactory must not be null"). }
false;public;0;7;;@Test public void createWhenResponseMapperIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new JmxEndpointExporter(this.mBeanServer, this.objectNameFactory, null, this.endpoints)).withMessageContaining("ResponseMapper must not be null"). }
false;public;0;7;;@Test public void createWhenEndpointsIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new JmxEndpointExporter(this.mBeanServer, this.objectNameFactory, this.responseMapper, null)).withMessageContaining("Endpoints must not be null"). }
false;public;0;10;;@Test public void afterPropertiesSetShouldRegisterMBeans() throws Exception {     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     this.exporter.afterPropertiesSet().     verify(this.mBeanServer).registerMBean(this.objectCaptor.capture(), this.objectNameCaptor.capture()).     assertThat(this.objectCaptor.getValue()).isInstanceOf(EndpointMBean.class).     assertThat(this.objectNameCaptor.getValue().getKeyProperty("name")).isEqualTo("test"). }
false;public;0;6;;@Test public void registerShouldUseObjectNameFactory() throws Exception {     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     this.exporter.afterPropertiesSet().     verify(this.objectNameFactory).getObjectName(any(ExposableJmxEndpoint.class)). }
false;public;0;8;;@Test public void registerWhenObjectNameIsMalformedShouldThrowException() throws Exception {     given(this.objectNameFactory.getObjectName(any(ExposableJmxEndpoint.class))).willThrow(MalformedObjectNameException.class).     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     assertThatIllegalStateException().isThrownBy(this.exporter::afterPropertiesSet).withMessageContaining("Invalid ObjectName for endpoint 'test'"). }
false;public;0;9;;@Test public void registerWhenRegistrationFailsShouldThrowException() throws Exception {     given(this.mBeanServer.registerMBean(any(), any(ObjectName.class))).willThrow(new MBeanRegistrationException(new RuntimeException())).     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     assertThatExceptionOfType(MBeanExportException.class).isThrownBy(this.exporter::afterPropertiesSet).withMessageContaining("Failed to register MBean for endpoint 'test"). }
false;public;0;9;;@Test public void destroyShouldUnregisterMBeans() throws Exception {     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     this.exporter.afterPropertiesSet().     this.exporter.destroy().     verify(this.mBeanServer).unregisterMBean(this.objectNameCaptor.capture()).     assertThat(this.objectNameCaptor.getValue().getKeyProperty("name")).isEqualTo("test"). }
false;public;0;8;;@Test public void unregisterWhenInstanceNotFoundShouldContinue() throws Exception {     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     this.exporter.afterPropertiesSet().     willThrow(InstanceNotFoundException.class).given(this.mBeanServer).unregisterMBean(any(ObjectName.class)).     this.exporter.destroy(). }
false;public;0;11;;@Test public void unregisterWhenUnregisterThrowsExceptionShouldThrowException() throws Exception {     this.endpoints.add(new TestExposableJmxEndpoint(new TestJmxOperation())).     this.exporter.afterPropertiesSet().     willThrow(new MBeanRegistrationException(new RuntimeException())).given(this.mBeanServer).unregisterMBean(any(ObjectName.class)).     assertThatExceptionOfType(JmxException.class).isThrownBy(() -> this.exporter.destroy()).withMessageContaining("Failed to unregister MBean with ObjectName 'boot"). }
false;public;1;6;;@Override public ObjectName getObjectName(ExposableJmxEndpoint endpoint) throws MalformedObjectNameException {     return (endpoint != null) ? new ObjectName("boot:type=Endpoint,name=" + endpoint.getEndpointId()) : null. }
