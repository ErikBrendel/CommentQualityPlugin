commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void allCachesWithSingleCacheManager() {     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", new ConcurrentMapCacheManager("a", "b"))).     Map<String, CacheManagerDescriptor> allDescriptors = endpoint.caches().getCacheManagers().     assertThat(allDescriptors).containsOnlyKeys("test").     CacheManagerDescriptor descriptors = allDescriptors.get("test").     assertThat(descriptors.getCaches()).containsOnlyKeys("a", "b").     assertThat(descriptors.getCaches().get("a").getTarget()).isEqualTo(ConcurrentHashMap.class.getName()).     assertThat(descriptors.getCaches().get("b").getTarget()).isEqualTo(ConcurrentHashMap.class.getName()). }
false;public;0;12;;@Test public void allCachesWithSeveralCacheManagers() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     cacheManagers.put("test", new ConcurrentMapCacheManager("a", "b")).     cacheManagers.put("another", new ConcurrentMapCacheManager("a", "c")).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     Map<String, CacheManagerDescriptor> allDescriptors = endpoint.caches().getCacheManagers().     assertThat(allDescriptors).containsOnlyKeys("test", "another").     assertThat(allDescriptors.get("test").getCaches()).containsOnlyKeys("a", "b").     assertThat(allDescriptors.get("another").getCaches()).containsOnlyKeys("a", "c"). }
false;public;0;10;;@Test public void namedCacheWithSingleCacheManager() {     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", new ConcurrentMapCacheManager("b", "a"))).     CacheEntry entry = endpoint.cache("a", null).     assertThat(entry).isNotNull().     assertThat(entry.getCacheManager()).isEqualTo("test").     assertThat(entry.getName()).isEqualTo("a").     assertThat(entry.getTarget()).isEqualTo(ConcurrentHashMap.class.getName()). }
false;public;0;11;;@Test public void namedCacheWithSeveralCacheManagers() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     cacheManagers.put("test", new ConcurrentMapCacheManager("b", "dupe-cache")).     cacheManagers.put("another", new ConcurrentMapCacheManager("c", "dupe-cache")).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     assertThatExceptionOfType(NonUniqueCacheException.class).isThrownBy(() -> endpoint.cache("dupe-cache", null)).withMessageContaining("dupe-cache").withMessageContaining("test").withMessageContaining("another"). }
false;public;0;7;;@Test public void namedCacheWithUnknownCache() {     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", new ConcurrentMapCacheManager("b", "a"))).     CacheEntry entry = endpoint.cache("unknown", null).     assertThat(entry).isNull(). }
false;public;0;9;;@Test public void namedCacheWithWrongCacheManager() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     cacheManagers.put("test", new ConcurrentMapCacheManager("b", "a")).     cacheManagers.put("another", new ConcurrentMapCacheManager("c", "a")).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     CacheEntry entry = endpoint.cache("c", "test").     assertThat(entry).isNull(). }
false;public;0;11;;@Test public void namedCacheWithSeveralCacheManagersWithCacheManagerFilter() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     cacheManagers.put("test", new ConcurrentMapCacheManager("b", "a")).     cacheManagers.put("another", new ConcurrentMapCacheManager("c", "a")).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     CacheEntry entry = endpoint.cache("a", "test").     assertThat(entry).isNotNull().     assertThat(entry.getCacheManager()).isEqualTo("test").     assertThat(entry.getName()).isEqualTo("a"). }
false;public;0;10;;@Test public void clearAllCaches() {     Cache a = mockCache("a").     Cache b = mockCache("b").     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", cacheManager(a, b))).     endpoint.clearCaches().     verify(a).clear().     verify(b).clear(). }
false;public;0;10;;@Test public void clearCache() {     Cache a = mockCache("a").     Cache b = mockCache("b").     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", cacheManager(a, b))).     assertThat(endpoint.clearCache("a", null)).isTrue().     verify(a).clear().     verify(b, never()).clear(). }
false;public;0;11;;@Test public void clearCacheWithSeveralCacheManagers() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     cacheManagers.put("test", cacheManager(mockCache("dupe-cache"), mockCache("b"))).     cacheManagers.put("another", cacheManager(mockCache("dupe-cache"))).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     assertThatExceptionOfType(NonUniqueCacheException.class).isThrownBy(() -> endpoint.clearCache("dupe-cache", null)).withMessageContaining("dupe-cache").withMessageContaining("test").withMessageContaining("another"). }
false;public;0;14;;@Test public void clearCacheWithSeveralCacheManagersWithCacheManagerFilter() {     Map<String, CacheManager> cacheManagers = new LinkedHashMap<>().     Cache a = mockCache("a").     Cache b = mockCache("b").     cacheManagers.put("test", cacheManager(a, b)).     Cache anotherA = mockCache("a").     cacheManagers.put("another", cacheManager(anotherA)).     CachesEndpoint endpoint = new CachesEndpoint(cacheManagers).     assertThat(endpoint.clearCache("a", "another")).isTrue().     verify(a, never()).clear().     verify(anotherA).clear().     verify(b, never()).clear(). }
false;public;0;8;;@Test public void clearCacheWithUnknownCache() {     Cache a = mockCache("a").     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", cacheManager(a))).     assertThat(endpoint.clearCache("unknown", null)).isFalse().     verify(a, never()).clear(). }
false;public;0;8;;@Test public void clearCacheWithUnknownCacheManager() {     Cache a = mockCache("a").     CachesEndpoint endpoint = new CachesEndpoint(Collections.singletonMap("test", cacheManager(a))).     assertThat(endpoint.clearCache("a", "unknown")).isFalse().     verify(a, never()).clear(). }
false;private;1;6;;private CacheManager cacheManager(Cache... caches) {     SimpleCacheManager cacheManager = new SimpleCacheManager().     cacheManager.setCaches(Arrays.asList(caches)).     cacheManager.afterPropertiesSet().     return cacheManager. }
false;private;1;6;;private Cache mockCache(String name) {     Cache cache = mock(Cache.class).     given(cache.getName()).willReturn(name).     given(cache.getNativeCache()).willReturn(new Object()).     return cache. }
