commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setupMockMvc() {     this.mvc = MockMvcBuilders.webAppContextSetup(this.context).addFilters(this.filter).build(). }
false;public;0;7;;@Test public void handledExceptionIsRecordedInMetricTag() throws Exception {     this.mvc.perform(get("/api/handledError")).andExpect(status().is5xxServerError()).     assertThat(this.registry.get("http.server.requests").tags("exception", "Exception1", "status", "500").timer().count()).isEqualTo(1L). }
false;public;0;8;;@Test public void rethrownExceptionIsRecordedInMetricTag() {     assertThatCode(() -> this.mvc.perform(get("/api/rethrownError")).andExpect(status().is5xxServerError())).     assertThat(this.registry.get("http.server.requests").tags("exception", "Exception2", "status", "500").timer().count()).isEqualTo(1L). }
false;;0;4;;@Bean MockClock clock() {     return new MockClock(). }
false;;1;4;;@Bean MeterRegistry meterRegistry(Clock clock) {     return new SimpleMeterRegistry(SimpleConfig.DEFAULT, clock). }
false;public;2;6;;@Bean public WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry, WebApplicationContext ctx) {     return new WebMvcMetricsFilter(registry, new DefaultWebMvcTagsProvider(), "http.server.requests", true). }
false;public;0;4;;@Bean public CustomExceptionHandler controllerAdvice() {     return new CustomExceptionHandler(). }
false;public;0;4;;@GetMapping("/handledError") public String handledError() {     throw new Exception1(). }
false;public;0;4;;@GetMapping("/rethrownError") public String rethrownError() {     throw new Exception2(). }
false;;1;5;;@ExceptionHandler ResponseEntity<String> handleError(Exception1 ex) {     return new ResponseEntity<>("this is a custom exception body", HttpStatus.INTERNAL_SERVER_ERROR). }
false;;1;4;;@ExceptionHandler ResponseEntity<String> rethrowError(Exception2 ex) {     throw ex. }
