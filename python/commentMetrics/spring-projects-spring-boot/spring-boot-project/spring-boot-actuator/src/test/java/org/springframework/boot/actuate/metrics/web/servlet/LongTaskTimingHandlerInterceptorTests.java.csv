commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUpMockMvc() {     this.mvc = MockMvcBuilders.webAppContextSetup(this.context).build(). }
false;public;0;12;;@Test public void asyncRequestThatThrowsUncheckedException() throws Exception {     MvcResult result = this.mvc.perform(get("/api/c1/completableFutureException")).andExpect(request().asyncStarted()).andReturn().     assertThat(this.registry.get("my.long.request.exception").longTaskTimer().activeTasks()).isEqualTo(1).     assertThatExceptionOfType(NestedServletException.class).isThrownBy(() -> this.mvc.perform(asyncDispatch(result))).withRootCauseInstanceOf(RuntimeException.class).     assertThat(this.registry.get("my.long.request.exception").longTaskTimer().activeTasks()).isEqualTo(0). }
false;public;0;22;;@Test public void asyncCallableRequest() throws Exception {     AtomicReference<MvcResult> result = new AtomicReference<>().     Thread backgroundRequest = new Thread(() -> {         try {             result.set(this.mvc.perform(get("/api/c1/callable/10")).andExpect(request().asyncStarted()).andReturn()).         } catch (Exception ex) {             fail("Failed to execute async request", ex).         }     }).     backgroundRequest.start().     this.callableBarrier.await().     assertThat(this.registry.get("my.long.request").tags("region", "test").longTaskTimer().activeTasks()).isEqualTo(1).     this.callableBarrier.await().     backgroundRequest.join().     this.mvc.perform(asyncDispatch(result.get())).andExpect(status().isOk()).     assertThat(this.registry.get("my.long.request").tags("region", "test").longTaskTimer().activeTasks()).isEqualTo(0). }
false;;0;4;;@Bean Clock micrometerClock() {     return new MockClock(). }
false;;1;4;;@Bean SimpleMeterRegistry simple(Clock clock) {     return new SimpleMeterRegistry(SimpleConfig.DEFAULT, clock). }
false;;0;4;;@Bean CyclicBarrier callableBarrier() {     return new CyclicBarrier(2). }
false;public;1;5;;@Override public void addInterceptors(InterceptorRegistry registry) {     registry.addInterceptor(new LongTaskTimingHandlerInterceptor(meterRegistry, new DefaultWebMvcTagsProvider())). }
false;;1;12;;@Bean WebMvcConfigurer handlerInterceptorConfigurer(MeterRegistry meterRegistry) {     return new WebMvcConfigurer() {          @Override         public void addInterceptors(InterceptorRegistry registry) {             registry.addInterceptor(new LongTaskTimingHandlerInterceptor(meterRegistry, new DefaultWebMvcTagsProvider())).         }     }. }
false;public;1;16;;@Timed @Timed(value = "my.long.request", extraTags = { "region", "test" }, longTask = true) @GetMapping("/callable/{id}") public Callable<String> asyncCallable(@PathVariable Long id) throws Exception {     this.callableBarrier.await().     return () -> {         try {             this.callableBarrier.await().         } catch (InterruptedException ex) {             throw new RuntimeException(ex).         }         return id.toString().     }. }
false;;0;8;;@Timed @Timed(value = "my.long.request.exception", longTask = true) @GetMapping("/completableFutureException") CompletableFuture<String> asyncCompletableFutureException() {     return CompletableFuture.supplyAsync(() -> {         throw new RuntimeException("boom").     }). }
