commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mapParameterShouldDelegateToConversionService() {     DefaultFormattingConversionService conversionService = spy(new DefaultFormattingConversionService()).     ConversionServiceParameterValueMapper mapper = new ConversionServiceParameterValueMapper(conversionService).     Object mapped = mapper.mapParameterValue(new TestOperationParameter(Integer.class), "123").     assertThat(mapped).isEqualTo(123).     verify(conversionService).convert("123", Integer.class). }
false;public;0;16;;@Test public void mapParameterWhenConversionServiceFailsShouldThrowParameterMappingException() {     ConversionService conversionService = mock(ConversionService.class).     RuntimeException error = new RuntimeException().     given(conversionService.convert(any(), any())).willThrow(error).     ConversionServiceParameterValueMapper mapper = new ConversionServiceParameterValueMapper(conversionService).     assertThatExceptionOfType(ParameterMappingException.class).isThrownBy(() -> mapper.mapParameterValue(new TestOperationParameter(Integer.class), "123")).satisfies((ex) -> {         assertThat(ex.getValue()).isEqualTo("123").         assertThat(ex.getParameter().getType()).isEqualTo(Integer.class).         assertThat(ex.getCause()).isEqualTo(error).     }). }
false;public;0;8;;@Test public void createShouldRegisterIsoOffsetDateTimeConverter() {     ConversionServiceParameterValueMapper mapper = new ConversionServiceParameterValueMapper().     Object mapped = mapper.mapParameterValue(new TestOperationParameter(OffsetDateTime.class), "2011-12-03T10:15:30+01:00").     assertThat(mapped).isNotNull(). }
false;public;0;9;;@Test public void createWithConversionServiceShouldNotRegisterIsoOffsetDateTimeConverter() {     ConversionService conversionService = new DefaultConversionService().     ConversionServiceParameterValueMapper mapper = new ConversionServiceParameterValueMapper(conversionService).     assertThatExceptionOfType(ParameterMappingException.class).isThrownBy(() -> mapper.mapParameterValue(new TestOperationParameter(OffsetDateTime.class), "2011-12-03T10:15:30+01:00")). }
false;public;0;4;;@Override public String getName() {     return "test". }
false;public;0;4;;@Override public Class<?> getType() {     return this.type. }
false;public;0;4;;@Override public boolean isMandatory() {     return false. }
