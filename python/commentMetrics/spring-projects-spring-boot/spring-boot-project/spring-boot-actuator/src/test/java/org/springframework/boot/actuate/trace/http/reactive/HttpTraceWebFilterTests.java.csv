commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void filterTracesExchange() {     executeFilter(MockServerWebExchange.from(MockServerHttpRequest.get("https://api.example.com")), (exchange) -> Mono.empty()).block(Duration.ofSeconds(30)).     assertThat(this.repository.findAll()).hasSize(1). }
false;public;0;15;;@Test public void filterCapturesSessionIdWhenSessionIsUsed() {     executeFilter(MockServerWebExchange.from(MockServerHttpRequest.get("https://api.example.com")), (exchange) -> {         exchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put("a", "alpha").         return Mono.empty().     }).block(Duration.ofSeconds(30)).     assertThat(this.repository.findAll()).hasSize(1).     Session session = this.repository.findAll().get(0).getSession().     assertThat(session).isNotNull().     assertThat(session.getId()).isNotNull(). }
false;public;0;13;;@Test public void filterDoesNotCaptureIdOfUnusedSession() {     executeFilter(MockServerWebExchange.from(MockServerHttpRequest.get("https://api.example.com")), (exchange) -> {         exchange.getSession().block(Duration.ofSeconds(30)).         return Mono.empty().     }).block(Duration.ofSeconds(30)).     assertThat(this.repository.findAll()).hasSize(1).     Session session = this.repository.findAll().get(0).getSession().     assertThat(session).isNull(). }
false;public;0;4;;@Override public Mono<Principal> getPrincipal() {     return Mono.just(principal). }
false;public;0;23;;@Test public void filterCapturesPrincipal() {     Principal principal = mock(Principal.class).     given(principal.getName()).willReturn("alice").     executeFilter(new ServerWebExchangeDecorator(MockServerWebExchange.from(MockServerHttpRequest.get("https://api.example.com"))) {          @Override         public Mono<Principal> getPrincipal() {             return Mono.just(principal).         }     }, (exchange) -> {         exchange.getSession().block(Duration.ofSeconds(30)).getAttributes().put("a", "alpha").         return Mono.empty().     }).block(Duration.ofSeconds(30)).     assertThat(this.repository.findAll()).hasSize(1).     org.springframework.boot.actuate.trace.http.HttpTrace.Principal tracedPrincipal = this.repository.findAll().get(0).getPrincipal().     assertThat(tracedPrincipal).isNotNull().     assertThat(tracedPrincipal.getName()).isEqualTo("alice"). }
false;private;2;4;;private Mono<Void> executeFilter(ServerWebExchange exchange, WebFilterChain chain) {     return this.filter.filter(exchange, chain).then(Mono.defer(() -> exchange.getResponse().setComplete())). }
