commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void extractOnlyInfoProperty() {     TestPropertyValues.of("info.app=my app", "info.version=1.0.0", "foo=bar").applyTo(this.environment).     Info actual = contributeFrom(this.environment).     assertThat(actual.get("app", String.class)).isEqualTo("my app").     assertThat(actual.get("version", String.class)).isEqualTo("1.0.0").     assertThat(actual.getDetails().size()).isEqualTo(2). }
false;public;0;6;;@Test public void extractNoEntry() {     TestPropertyValues.of("foo=bar").applyTo(this.environment).     Info actual = contributeFrom(this.environment).     assertThat(actual.getDetails()).isEmpty(). }
false;public;0;8;;@Test @SuppressWarnings("unchecked") public void propertiesFromEnvironmentShouldBindCorrectly() {     TestPropertyValues.of("INFO_ENVIRONMENT_FOO=green").applyTo(this.environment, Type.SYSTEM_ENVIRONMENT).     Info actual = contributeFrom(this.environment).     assertThat(actual.get("environment", Map.class)).containsEntry("foo", "green"). }
false;private,static;1;7;;private static Info contributeFrom(ConfigurableEnvironment environment) {     EnvironmentInfoContributor contributor = new EnvironmentInfoContributor(environment).     Info.Builder builder = new Info.Builder().     contributor.contribute(builder).     return builder.build(). }
