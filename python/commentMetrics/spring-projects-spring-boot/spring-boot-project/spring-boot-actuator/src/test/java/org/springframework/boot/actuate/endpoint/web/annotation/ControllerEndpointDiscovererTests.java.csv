commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run(assertDiscoverer((discoverer) -> assertThat(discoverer.getEndpoints()).isEmpty())). }
false;public;0;15;;@Test public void getEndpointsShouldIncludeControllerEndpoints() {     this.contextRunner.withUserConfiguration(TestControllerEndpoint.class).run(assertDiscoverer((discoverer) -> {         Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableControllerEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testcontroller")).         assertThat(endpoint.getController()).isInstanceOf(TestControllerEndpoint.class).         assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class).     })). }
false;public;0;17;;@Test public void getEndpointsShouldDiscoverProxyControllerEndpoints() {     this.contextRunner.withUserConfiguration(TestProxyControllerEndpoint.class).withConfiguration(AutoConfigurations.of(ValidationAutoConfiguration.class)).run(assertDiscoverer((discoverer) -> {         Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableControllerEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testcontroller")).         assertThat(endpoint.getController()).isInstanceOf(TestProxyControllerEndpoint.class).         assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class).     })). }
false;public;0;14;;@Test public void getEndpointsShouldIncludeRestControllerEndpoints() {     this.contextRunner.withUserConfiguration(TestRestControllerEndpoint.class).run(assertDiscoverer((discoverer) -> {         Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableControllerEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testrestcontroller")).         assertThat(endpoint.getController()).isInstanceOf(TestRestControllerEndpoint.class).     })). }
false;public;0;17;;@Test public void getEndpointsShouldDiscoverProxyRestControllerEndpoints() {     this.contextRunner.withUserConfiguration(TestProxyRestControllerEndpoint.class).withConfiguration(AutoConfigurations.of(ValidationAutoConfiguration.class)).run(assertDiscoverer((discoverer) -> {         Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints).hasSize(1).         ExposableControllerEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getEndpointId()).isEqualTo(EndpointId.of("testrestcontroller")).         assertThat(endpoint.getController()).isInstanceOf(TestProxyRestControllerEndpoint.class).         assertThat(endpoint).isInstanceOf(DiscoveredEndpoint.class).     })). }
false;public;0;13;;@Test public void getEndpointsShouldNotDiscoverRegularEndpoints() {     this.contextRunner.withUserConfiguration(WithRegularEndpointConfiguration.class).run(assertDiscoverer((discoverer) -> {         Collection<ExposableControllerEndpoint> endpoints = discoverer.getEndpoints().         List<EndpointId> ids = endpoints.stream().map(ExposableEndpoint::getEndpointId).collect(Collectors.toList()).         assertThat(ids).containsOnly(EndpointId.of("testcontroller"), EndpointId.of("testrestcontroller")).     })). }
false;public;0;8;;@Test public void getEndpointWhenEndpointHasOperationsShouldThrowException() {     this.contextRunner.withUserConfiguration(TestControllerWithOperation.class).run(assertDiscoverer((discoverer) -> assertThatExceptionOfType(IllegalStateException.class).isThrownBy(discoverer::getEndpoints).withMessageContaining("ControllerEndpoints must not declare operations"))). }
false;private;1;8;;private ContextConsumer<AssertableApplicationContext> assertDiscoverer(Consumer<ControllerEndpointDiscoverer> consumer) {     return (context) -> {         ControllerEndpointDiscoverer discoverer = new ControllerEndpointDiscoverer(context, null, Collections.emptyList()).         consumer.accept(discoverer).     }. }
false;public;0;4;;@ReadOperation public String read() {     return "error". }
