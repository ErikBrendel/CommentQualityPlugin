commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setupMockMvc() {     this.mvc = MockMvcBuilders.webAppContextSetup(this.context).addFilters(this.filter, new RedirectAndNotFoundFilter()).build(). }
false;public;0;7;;@Test public void timedMethod() throws Exception {     this.mvc.perform(get("/api/c1/10")).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("status", "200", "uri", "/api/c1/{id}", "public", "true").timer().count()).isEqualTo(1). }
false;public;0;7;;@Test public void subclassedTimedMethod() throws Exception {     this.mvc.perform(get("/api/c1/metaTimed/10")).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("status", "200", "uri", "/api/c1/metaTimed/{id}").timer().count()).isEqualTo(1L). }
false;public;0;6;;@Test public void untimedMethod() throws Exception {     this.mvc.perform(get("/api/c1/untimed/10")).andExpect(status().isOk()).     assertThat(this.registry.find("http.server.requests").tags("uri", "/api/c1/untimed/10").timer()).isNull(). }
false;public;0;6;;@Test public void timedControllerClass() throws Exception {     this.mvc.perform(get("/api/c2/10")).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("status", "200").timer().count()).isEqualTo(1L). }
false;public;0;6;;@Test public void badClientRequest() throws Exception {     this.mvc.perform(get("/api/c1/oops")).andExpect(status().is4xxClientError()).     assertThat(this.registry.get("http.server.requests").tags("status", "400").timer().count()).isEqualTo(1L). }
false;public;0;8;;@Test public void redirectRequest() throws Exception {     this.mvc.perform(get("/api/redirect").header(RedirectAndNotFoundFilter.TEST_MISBEHAVE_HEADER, "302")).andExpect(status().is3xxRedirection()).     assertThat(this.registry.get("http.server.requests").tags("uri", "REDIRECTION").tags("status", "302").timer()).isNotNull(). }
false;public;0;8;;@Test public void notFoundRequest() throws Exception {     this.mvc.perform(get("/api/not/found").header(RedirectAndNotFoundFilter.TEST_MISBEHAVE_HEADER, "404")).andExpect(status().is4xxClientError()).     assertThat(this.registry.get("http.server.requests").tags("uri", "NOT_FOUND").tags("status", "404").timer()).isNotNull(). }
false;public;0;8;;@Test public void unhandledError() {     assertThatCode(() -> this.mvc.perform(get("/api/c1/unhandledError/10")).andExpect(status().isOk())).hasRootCauseInstanceOf(RuntimeException.class).     assertThat(this.registry.get("http.server.requests").tags("exception", "RuntimeException").timer().count()).isEqualTo(1L). }
false;public;0;11;;@Test public void anonymousError() {     try {         this.mvc.perform(get("/api/c1/anonymousError/10")).     } catch (Throwable ignore) {     }     assertThat(this.registry.get("http.server.requests").tag("uri", "/api/c1/anonymousError/{id}").timer().getId().getTag("exception")).endsWith("$1"). }
false;public;0;26;;@Test public void asyncCallableRequest() throws Exception {     AtomicReference<MvcResult> result = new AtomicReference<>().     Thread backgroundRequest = new Thread(() -> {         try {             result.set(this.mvc.perform(get("/api/c1/callable/10")).andExpect(request().asyncStarted()).andReturn()).         } catch (Exception ex) {             fail("Failed to execute async request", ex).         }     }).     backgroundRequest.start().     assertThat(this.registry.find("http.server.requests").tags("uri", "/api/c1/async").timer()).describedAs("Request isn't prematurely recorded as complete").isNull().     // once the mapping completes, we can gather information about status, etc.     this.callableBarrier.await().     MockClock.clock(this.registry).add(Duration.ofSeconds(2)).     this.callableBarrier.await().     backgroundRequest.join().     this.mvc.perform(asyncDispatch(result.get())).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("status", "200").tags("uri", "/api/c1/callable/{id}").timer().totalTime(TimeUnit.SECONDS)).isEqualTo(2L). }
false;public;0;11;;@Test public void asyncRequestThatThrowsUncheckedException() throws Exception {     MvcResult result = this.mvc.perform(get("/api/c1/completableFutureException")).andExpect(request().asyncStarted()).andReturn().     assertThatExceptionOfType(NestedServletException.class).isThrownBy(() -> this.mvc.perform(asyncDispatch(result))).withRootCauseInstanceOf(RuntimeException.class).     assertThat(this.registry.get("http.server.requests").tags("uri", "/api/c1/completableFutureException").timer().count()).isEqualTo(1). }
false;public;0;22;;@Test public void asyncCompletableFutureRequest() throws Exception {     AtomicReference<MvcResult> result = new AtomicReference<>().     Thread backgroundRequest = new Thread(() -> {         try {             result.set(this.mvc.perform(get("/api/c1/completableFuture/{id}", 1)).andExpect(request().asyncStarted()).andReturn()).         } catch (Exception ex) {             fail("Failed to execute async request", ex).         }     }).     backgroundRequest.start().     this.completableFutureBarrier.await().     MockClock.clock(this.registry).add(Duration.ofSeconds(2)).     this.completableFutureBarrier.await().     backgroundRequest.join().     this.mvc.perform(asyncDispatch(result.get())).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("uri", "/api/c1/completableFuture/{id}").timer().totalTime(TimeUnit.SECONDS)).isEqualTo(2). }
false;public;0;6;;@Test public void endpointThrowsError() throws Exception {     this.mvc.perform(get("/api/c1/error/10")).andExpect(status().is4xxClientError()).     assertThat(this.registry.get("http.server.requests").tags("status", "422").timer().count()).isEqualTo(1L). }
false;public;0;7;;@Test public void regexBasedRequestMapping() throws Exception {     this.mvc.perform(get("/api/c1/regex/.abc")).andExpect(status().isOk()).     assertThat(this.registry.get("http.server.requests").tags("uri", "/api/c1/regex/{id:\\.[a-z]+}").timer().count()).isEqualTo(1L). }
false;public;0;6;;@Test public void recordQuantiles() throws Exception {     this.mvc.perform(get("/api/c1/percentiles/10")).andExpect(status().isOk()).     assertThat(this.prometheusRegistry.scrape()).contains("quantile=\"0.5\"").     assertThat(this.prometheusRegistry.scrape()).contains("quantile=\"0.95\""). }
false;public;0;6;;@Test public void recordHistogram() throws Exception {     this.mvc.perform(get("/api/c1/histogram/10")).andExpect(status().isOk()).     assertThat(this.prometheusRegistry.scrape()).contains("le=\"0.001\"").     assertThat(this.prometheusRegistry.scrape()).contains("le=\"30.0\""). }
false;;0;4;;@Bean Clock micrometerClock() {     return new MockClock(). }
false;;2;7;;@Primary @Bean MeterRegistry meterRegistry(Collection<MeterRegistry> registries, Clock clock) {     CompositeMeterRegistry composite = new CompositeMeterRegistry(clock).     registries.forEach(composite::add).     return composite. }
false;;1;4;;@Bean SimpleMeterRegistry simple(Clock clock) {     return new SimpleMeterRegistry(SimpleConfig.DEFAULT, clock). }
false;public;1;12;;@Override @NonNull public MeterFilterReply accept(@NonNull Meter.Id id) {     for (Tag tag : id.getTags()) {         if (tag.getKey().equals("uri") && (tag.getValue().contains("histogram") || tag.getValue().contains("percentiles"))) {             return MeterFilterReply.ACCEPT.         }     }     return MeterFilterReply.DENY. }
false;;1;20;;@Bean PrometheusMeterRegistry prometheus(Clock clock) {     PrometheusMeterRegistry r = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT, new CollectorRegistry(), clock).     r.config().meterFilter(new MeterFilter() {          @Override         @NonNull         public MeterFilterReply accept(@NonNull Meter.Id id) {             for (Tag tag : id.getTags()) {                 if (tag.getKey().equals("uri") && (tag.getValue().contains("histogram") || tag.getValue().contains("percentiles"))) {                     return MeterFilterReply.ACCEPT.                 }             }             return MeterFilterReply.DENY.         }     }).     return r. }
false;;0;4;;@Bean RedirectAndNotFoundFilter redirectAndNotFoundFilter() {     return new RedirectAndNotFoundFilter(). }
false;;0;4;;@Bean(name = "callableBarrier") CyclicBarrier callableBarrier() {     return new CyclicBarrier(2). }
false;;0;4;;@Bean(name = "completableFutureBarrier") CyclicBarrier completableFutureBarrier() {     return new CyclicBarrier(2). }
false;;2;6;;@Bean WebMvcMetricsFilter webMetricsFilter(MeterRegistry registry, WebApplicationContext ctx) {     return new WebMvcMetricsFilter(registry, new DefaultWebMvcTagsProvider(), "http.server.requests", true). }
false;public;1;5;;@Timed(extraTags = { "public", "true" }) @GetMapping("/{id}") public String successfulWithExtraTags(@PathVariable Long id) {     return id.toString(). }
false;public;1;16;;@Timed @Timed(value = "my.long.request", extraTags = { "region", "test" }, longTask = true) @GetMapping("/callable/{id}") public Callable<String> asyncCallable(@PathVariable Long id) throws Exception {     this.callableBarrier.await().     return () -> {         try {             this.callableBarrier.await().         } catch (InterruptedException ex) {             throw new RuntimeException(ex).         }         return id.toString().     }. }
false;;1;15;;@Timed @GetMapping("/completableFuture/{id}") CompletableFuture<String> asyncCompletableFuture(@PathVariable Long id) throws Exception {     this.completableFutureBarrier.await().     return CompletableFuture.supplyAsync(() -> {         try {             this.completableFutureBarrier.await().         } catch (InterruptedException | BrokenBarrierException ex) {             throw new RuntimeException(ex).         }         return id.toString().     }). }
false;;0;8;;@Timed @Timed(value = "my.long.request.exception", longTask = true) @GetMapping("/completableFutureException") CompletableFuture<String> asyncCompletableFutureException() {     return CompletableFuture.supplyAsync(() -> {         throw new RuntimeException("boom").     }). }
false;public;1;4;;@GetMapping("/untimed/{id}") public String successfulButUntimed(@PathVariable Long id) {     return id.toString(). }
false;public;1;5;;@Timed @GetMapping("/error/{id}") public String alwaysThrowsException(@PathVariable Long id) {     throw new IllegalStateException("Boom on " + id + "!"). }
false;public;1;7;;@Timed @GetMapping("/anonymousError/{id}") public String alwaysThrowsAnonymousException(@PathVariable Long id) throws Exception {     throw new Exception("this exception won't have a simple class name") {     }. }
false;public;1;5;;@Timed @GetMapping("/unhandledError/{id}") public String alwaysThrowsUnhandledException(@PathVariable Long id) {     throw new RuntimeException("Boom on " + id + "!"). }
false;public;1;5;;@Timed @GetMapping("/regex/{id:\\.[a-z]+}") public String successfulRegex(@PathVariable String id) {     return id. }
false;public;1;5;;@Timed(percentiles = { 0.50, 0.95 }) @GetMapping("/percentiles/{id}") public String percentiles(@PathVariable String id) {     return id. }
false;public;1;5;;@Timed(histogram = true) @GetMapping("/histogram/{id}") public String histogram(@PathVariable String id) {     return id. }
false;public;1;5;;@Timed95 @GetMapping("/metaTimed/{id}") public String meta(@PathVariable String id) {     return id. }
false;;2;5;;@ExceptionHandler(IllegalStateException.class) @ResponseStatus(HttpStatus.UNPROCESSABLE_ENTITY) ModelAndView defaultErrorHandler(HttpServletRequest request, Exception e) {     return new ModelAndView("myerror"). }
false;public;1;4;;@GetMapping("/{id}") public String successful(@PathVariable Long id) {     return id.toString(). }
false;protected;3;12;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     String misbehave = request.getHeader(TEST_MISBEHAVE_HEADER).     if (misbehave != null) {         response.setStatus(Integer.parseInt(misbehave)).     } else {         filterChain.doFilter(request, response).     } }
