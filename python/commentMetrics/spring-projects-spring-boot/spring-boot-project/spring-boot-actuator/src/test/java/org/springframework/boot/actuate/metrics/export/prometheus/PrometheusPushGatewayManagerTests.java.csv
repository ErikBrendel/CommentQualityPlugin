commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.scheduler = mockScheduler(TaskScheduler.class). }
false;public;0;7;;@Test public void createWhenPushGatewayIsNullThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PrometheusPushGatewayManager(null, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, null)).withMessage("PushGateway must not be null"). }
false;public;0;7;;@Test public void createWhenCollectorRegistryIsNullThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PrometheusPushGatewayManager(this.pushGateway, null, this.scheduler, this.pushRate, "job", this.groupingKey, null)).withMessage("Registry must not be null"). }
false;public;0;7;;@Test public void createWhenSchedulerIsNullThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PrometheusPushGatewayManager(this.pushGateway, this.registry, null, this.pushRate, "job", this.groupingKey, null)).withMessage("Scheduler must not be null"). }
false;public;0;7;;@Test public void createWhenPushRateIsNullThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, null, "job", this.groupingKey, null)).withMessage("PushRate must not be null"). }
false;public;0;7;;@Test public void createWhenJobIsEmptyThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "", this.groupingKey, null)).withMessage("Job must not be empty"). }
false;public;0;9;;@Test public void createShouldSchedulePushAsFixedRate() throws Exception {     new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, null).     verify(this.scheduler).scheduleAtFixedRate(this.task.capture(), eq(this.pushRate)).     this.task.getValue().run().     verify(this.pushGateway).pushAdd(this.registry, "job", this.groupingKey). }
false;public;0;10;;@Test public void shutdownWhenOwnsSchedulerDoesShutdownScheduler() {     PushGatewayTaskScheduler ownedScheduler = mockScheduler(PushGatewayTaskScheduler.class).     PrometheusPushGatewayManager manager = new PrometheusPushGatewayManager(this.pushGateway, this.registry, ownedScheduler, this.pushRate, "job", this.groupingKey, null).     manager.shutdown().     verify(ownedScheduler).shutdown(). }
false;public;0;10;;@Test public void shutdownWhenDoesNotOwnSchedulerDoesNotShutdownScheduler() {     ThreadPoolTaskScheduler otherScheduler = mockScheduler(ThreadPoolTaskScheduler.class).     PrometheusPushGatewayManager manager = new PrometheusPushGatewayManager(this.pushGateway, this.registry, otherScheduler, this.pushRate, "job", this.groupingKey, null).     manager.shutdown().     verify(otherScheduler, never()).shutdown(). }
false;public;0;10;;@Test public void shutdownWhenShutdownOperationIsPushPerformsPushOnShutdown() throws Exception {     PrometheusPushGatewayManager manager = new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, ShutdownOperation.PUSH).     manager.shutdown().     verify(this.future).cancel(false).     verify(this.pushGateway).pushAdd(this.registry, "job", this.groupingKey). }
false;public;0;10;;@Test public void shutdownWhenShutdownOperationIsDeletePerformsDeleteOnShutdown() throws Exception {     PrometheusPushGatewayManager manager = new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, ShutdownOperation.DELETE).     manager.shutdown().     verify(this.future).cancel(false).     verify(this.pushGateway).delete("job", this.groupingKey). }
false;public;0;9;;@Test public void shutdownWhenShutdownOperationIsNoneDoesNothing() {     PrometheusPushGatewayManager manager = new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, ShutdownOperation.NONE).     manager.shutdown().     verify(this.future).cancel(false).     verifyZeroInteractions(this.pushGateway). }
false;public;0;11;;@Test public void pushWhenUnknownHostExceptionIsThrownDoesShutdown() throws Exception {     new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, null).     verify(this.scheduler).scheduleAtFixedRate(this.task.capture(), eq(this.pushRate)).     willThrow(new UnknownHostException("foo")).given(this.pushGateway).pushAdd(this.registry, "job", this.groupingKey).     this.task.getValue().run().     verify(this.future).cancel(false). }
false;public;0;10;;@Test public void pushDoesNotThrowException() throws Exception {     new PrometheusPushGatewayManager(this.pushGateway, this.registry, this.scheduler, this.pushRate, "job", this.groupingKey, null).     verify(this.scheduler).scheduleAtFixedRate(this.task.capture(), eq(this.pushRate)).     willThrow(RuntimeException.class).given(this.pushGateway).pushAdd(this.registry, "job", this.groupingKey).     this.task.getValue().run(). }
false;private;1;7;;@SuppressWarnings({ "unchecked", "rawtypes" }) private <T extends TaskScheduler> T mockScheduler(Class<T> type) {     T scheduler = mock(type).     given(scheduler.scheduleAtFixedRate(isA(Runnable.class), isA(Duration.class))).willReturn((ScheduledFuture) this.future).     return scheduler. }
