commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static ConfigurableApplicationContext createContext(List<Class<?>> classes) {     AnnotationConfigReactiveWebServerApplicationContext context = new AnnotationConfigReactiveWebServerApplicationContext().     classes.add(WebFluxEndpointConfiguration.class).     context.register(ClassUtils.toClassArray(classes)).     context.refresh().     return context. }
false;public;0;4;;@Bean public NettyReactiveWebServerFactory netty() {     return new NettyReactiveWebServerFactory(0). }
false;public;0;4;;@Bean public PortHolder portHolder() {     return new PortHolder(). }
false;public;1;4;;@Override public void onApplicationEvent(WebServerInitializedEvent event) {     portHolder().setPort(event.getWebServer().getPort()). }
false;public;1;4;;@Bean public HttpHandler httpHandler(ApplicationContext applicationContext) {     return WebHttpHandlerBuilder.applicationContext(applicationContext).build(). }
false;public;0;15;;@Bean public WebFluxEndpointHandlerMapping webEndpointReactiveHandlerMapping() {     List<String> mediaTypes = Arrays.asList(MediaType.APPLICATION_JSON_VALUE, ActuatorMediaType.V2_JSON).     EndpointMediaTypes endpointMediaTypes = new EndpointMediaTypes(mediaTypes, mediaTypes).     WebEndpointDiscoverer discoverer = new WebEndpointDiscoverer(this.applicationContext, new ConversionServiceParameterValueMapper(), endpointMediaTypes, null, Collections.emptyList(), Collections.emptyList()).     return new WebFluxEndpointHandlerMapping(new EndpointMapping("/actuator"), discoverer.getEndpoints(), endpointMediaTypes, new CorsConfiguration(), new EndpointLinksResolver(discoverer.getEndpoints())). }
