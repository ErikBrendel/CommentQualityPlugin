commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void before() throws IOException {     this.logFile = this.temp.newFile().     FileCopyUtils.copy("--TEST--".getBytes(), this.logFile). }
false;public;0;4;;@Test public void nullResponseWithoutLogFile() {     assertThat(this.endpoint.logFile()).isNull(). }
false;public;0;5;;@Test public void nullResponseWithMissingLogFile() {     this.environment.setProperty("logging.file.name", "no_test.log").     assertThat(this.endpoint.logFile()).isNull(). }
false;public;0;8;;@Test public void resourceResponseWithLogFile() throws Exception {     this.environment.setProperty("logging.file.name", this.logFile.getAbsolutePath()).     Resource resource = this.endpoint.logFile().     assertThat(resource).isNotNull().     assertThat(StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8)).isEqualTo("--TEST--"). }
false;public;0;9;;@Test @Deprecated public void resourceResponseWithLogFileAndDeprecatedProperty() throws Exception {     this.environment.setProperty("logging.file", this.logFile.getAbsolutePath()).     Resource resource = this.endpoint.logFile().     assertThat(resource).isNotNull().     assertThat(StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8)).isEqualTo("--TEST--"). }
false;public;0;9;;@Test public void resourceResponseWithExternalLogFile() throws Exception {     LogFileWebEndpoint endpoint = new LogFileWebEndpoint(this.environment, this.logFile).     Resource resource = endpoint.logFile().     assertThat(resource).isNotNull().     assertThat(StreamUtils.copyToString(resource.getInputStream(), StandardCharsets.UTF_8)).isEqualTo("--TEST--"). }
