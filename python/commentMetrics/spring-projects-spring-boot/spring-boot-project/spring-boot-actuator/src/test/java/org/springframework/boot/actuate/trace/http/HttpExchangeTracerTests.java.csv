commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void methodIsIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.noneOf(Include.class)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getMethod()).isEqualTo("GET"). }
false;public;0;7;;@Test public void uriIsIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.noneOf(Include.class)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getUri()).isEqualTo(URI.create("https://api.example.com")). }
false;public;0;7;;@Test public void remoteAddressIsNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.noneOf(Include.class)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getRemoteAddress()).isNull(). }
false;public;0;7;;@Test public void remoteAddressCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REMOTE_ADDRESS)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getRemoteAddress()).isEqualTo("127.0.0.1"). }
false;public;0;7;;@Test public void requestHeadersAreNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.noneOf(Include.class)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getHeaders()).isEmpty(). }
false;public;0;7;;@Test public void requestHeadersCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS)).receivedRequest(createRequest()).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys(HttpHeaders.ACCEPT). }
false;public;0;12;;@Test public void requestHeadersCanBeCustomized() {     MultiValueMap<String, String> headers = new LinkedMultiValueMap<>().     headers.add("to-remove", "test").     headers.add("test", "value").     HttpTrace trace = new RequestHeadersFilterHttpExchangeTracer().receivedRequest(createRequest(headers)).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys("test", "to-add").     assertThat(request.getHeaders().get("test")).containsExactly("value").     assertThat(request.getHeaders().get("to-add")).containsExactly("42"). }
false;public;0;8;;@Test public void authorizationHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(HttpHeaders.AUTHORIZATION, Arrays.asList("secret")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).isEmpty(). }
false;public;0;8;;@Test public void mixedCaseAuthorizationHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(mixedCase(HttpHeaders.AUTHORIZATION), Arrays.asList("secret")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).isEmpty(). }
false;public;0;9;;@Test public void authorizationHeaderCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS, Include.AUTHORIZATION_HEADER)).receivedRequest(createRequest(Collections.singletonMap(HttpHeaders.AUTHORIZATION, Arrays.asList("secret")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys(HttpHeaders.AUTHORIZATION). }
false;public;0;11;;@Test public void mixedCaseAuthorizationHeaderCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS, Include.AUTHORIZATION_HEADER)).receivedRequest(createRequest(Collections.singletonMap(mixedCase(HttpHeaders.AUTHORIZATION), Arrays.asList("secret")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys(mixedCase(HttpHeaders.AUTHORIZATION)). }
false;public;0;8;;@Test public void cookieHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(HttpHeaders.COOKIE, Arrays.asList("test=test")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).isEmpty(). }
false;public;0;8;;@Test public void mixedCaseCookieHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(mixedCase(HttpHeaders.COOKIE), Arrays.asList("value")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).isEmpty(). }
false;public;0;9;;@Test public void cookieHeaderCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS, Include.COOKIE_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(HttpHeaders.COOKIE, Arrays.asList("value")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys(HttpHeaders.COOKIE). }
false;public;0;9;;@Test public void mixedCaseCookieHeaderCanBeIncluded() {     HttpTrace trace = new HttpExchangeTracer(EnumSet.of(Include.REQUEST_HEADERS, Include.COOKIE_HEADERS)).receivedRequest(createRequest(Collections.singletonMap(mixedCase(HttpHeaders.COOKIE), Arrays.asList("value")))).     Request request = trace.getRequest().     assertThat(request.getHeaders()).containsOnlyKeys(mixedCase(HttpHeaders.COOKIE)). }
false;public;0;7;;@Test public void statusIsIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.noneOf(Include.class)).sendingResponse(trace, createResponse(), null, null).     assertThat(trace.getResponse().getStatus()).isEqualTo(204). }
false;public;0;7;;@Test public void responseHeadersAreNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.noneOf(Include.class)).sendingResponse(trace, createResponse(), null, null).     assertThat(trace.getResponse().getHeaders()).isEmpty(). }
false;public;0;8;;@Test public void responseHeadersCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(), null, null).     assertThat(trace.getResponse().getHeaders()).containsOnlyKeys(HttpHeaders.CONTENT_TYPE). }
false;public;0;9;;@Test public void setCookieHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(HttpHeaders.SET_COOKIE, Arrays.asList("test=test"))), null, null).     assertThat(trace.getResponse().getHeaders()).isEmpty(). }
false;public;0;10;;@Test public void mixedCaseSetCookieHeaderIsNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(mixedCase(HttpHeaders.SET_COOKIE), Arrays.asList("test=test"))), null, null).     assertThat(trace.getResponse().getHeaders()).isEmpty(). }
false;public;0;13;;@Test public void setCookieHeaderCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS, Include.COOKIE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(HttpHeaders.SET_COOKIE, Arrays.asList("test=test"))), null, null).     assertThat(trace.getResponse().getHeaders()).containsOnlyKeys(HttpHeaders.SET_COOKIE). }
false;public;0;13;;@Test public void mixedCaseSetCookieHeaderCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.RESPONSE_HEADERS, Include.COOKIE_HEADERS)).sendingResponse(trace, createResponse(Collections.singletonMap(mixedCase(HttpHeaders.SET_COOKIE), Arrays.asList("test=test"))), null, null).     assertThat(trace.getResponse().getHeaders()).containsOnlyKeys(mixedCase(HttpHeaders.SET_COOKIE)). }
false;public;0;7;;@Test public void principalIsNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.noneOf(Include.class)).sendingResponse(trace, createResponse(), this::createPrincipal, null).     assertThat(trace.getPrincipal()).isNull(). }
false;public;0;8;;@Test public void principalCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.PRINCIPAL)).sendingResponse(trace, createResponse(), this::createPrincipal, null).     assertThat(trace.getPrincipal()).isNotNull().     assertThat(trace.getPrincipal().getName()).isEqualTo("alice"). }
false;public;0;7;;@Test public void sessionIdIsNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.noneOf(Include.class)).sendingResponse(trace, createResponse(), null, () -> "sessionId").     assertThat(trace.getSession()).isNull(). }
false;public;0;8;;@Test public void sessionIdCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.SESSION_ID)).sendingResponse(trace, createResponse(), null, () -> "sessionId").     assertThat(trace.getSession()).isNotNull().     assertThat(trace.getSession().getId()).isEqualTo("sessionId"). }
false;public;0;7;;@Test public void timeTakenIsNotIncludedByDefault() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.noneOf(Include.class)).sendingResponse(trace, createResponse(), null, null).     assertThat(trace.getTimeTaken()).isNull(). }
false;public;0;7;;@Test public void timeTakenCanBeIncluded() {     HttpTrace trace = new HttpTrace(createRequest()).     new HttpExchangeTracer(EnumSet.of(Include.TIME_TAKEN)).sendingResponse(trace, createResponse(), null, null).     assertThat(trace.getTimeTaken()).isNotNull(). }
false;private;0;4;;private TraceableRequest createRequest() {     return createRequest(Collections.singletonMap(HttpHeaders.ACCEPT, Arrays.asList("application/json"))). }
false;private;1;8;;private TraceableRequest createRequest(Map<String, List<String>> headers) {     TraceableRequest request = mock(TraceableRequest.class).     given(request.getMethod()).willReturn("GET").     given(request.getRemoteAddress()).willReturn("127.0.0.1").     given(request.getHeaders()).willReturn(new HashMap<>(headers)).     given(request.getUri()).willReturn(URI.create("https://api.example.com")).     return request. }
false;private;0;4;;private TraceableResponse createResponse() {     return createResponse(Collections.singletonMap(HttpHeaders.CONTENT_TYPE, Arrays.asList("application/json"))). }
false;private;1;6;;private TraceableResponse createResponse(Map<String, List<String>> headers) {     TraceableResponse response = mock(TraceableResponse.class).     given(response.getStatus()).willReturn(204).     given(response.getHeaders()).willReturn(new HashMap<>(headers)).     return response. }
false;private;0;5;;private Principal createPrincipal() {     Principal principal = mock(Principal.class).     given(principal.getName()).willReturn("alice").     return principal. }
false;private;1;8;;private String mixedCase(String input) {     StringBuilder output = new StringBuilder().     for (int i = 0. i < input.length(). i++) {         output.append((i % 2 != 0) ? Character.toUpperCase(input.charAt(i)) : Character.toLowerCase(input.charAt(i))).     }     return output.toString(). }
false;protected;1;5;;@Override protected void postProcessRequestHeaders(Map<String, List<String>> headers) {     headers.remove("to-remove").     headers.putIfAbsent("to-add", Collections.singletonList("42")). }
