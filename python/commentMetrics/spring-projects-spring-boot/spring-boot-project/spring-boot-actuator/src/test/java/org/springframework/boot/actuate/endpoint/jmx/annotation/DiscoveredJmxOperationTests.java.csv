commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getNameShouldReturnMethodName() {     DiscoveredJmxOperation operation = getOperation("getEnum").     assertThat(operation.getName()).isEqualTo("getEnum"). }
false;public;0;10;;@Test public void getOutputTypeShouldReturnJmxType() {     assertThat(getOperation("getEnum").getOutputType()).isEqualTo(String.class).     assertThat(getOperation("getDate").getOutputType()).isEqualTo(String.class).     assertThat(getOperation("getInstant").getOutputType()).isEqualTo(String.class).     assertThat(getOperation("getInteger").getOutputType()).isEqualTo(Integer.class).     assertThat(getOperation("getVoid").getOutputType()).isEqualTo(void.class).     assertThat(getOperation("getApplicationContext").getOutputType()).isEqualTo(Object.class). }
false;public;0;6;;@Test public void getDescriptionWhenHasManagedOperationDescriptionShouldUseValueFromAnnotation() {     DiscoveredJmxOperation operation = getOperation("withManagedOperationDescription").     assertThat(operation.getDescription()).isEqualTo("fromannotation"). }
false;public;0;6;;@Test public void getDescriptionWhenHasNoManagedOperationShouldGenerateDescription() {     DiscoveredJmxOperation operation = getOperation("getEnum").     assertThat(operation.getDescription()).isEqualTo("Invoke getEnum for endpoint test"). }
false;public;0;5;;@Test public void getParametersWhenHasNoParametersShouldReturnEmptyList() {     DiscoveredJmxOperation operation = getOperation("getEnum").     assertThat(operation.getParameters()).isEmpty(). }
false;public;0;10;;@Test public void getParametersShouldReturnJmxTypes() {     DiscoveredJmxOperation operation = getOperation("params").     List<JmxOperationParameter> parameters = operation.getParameters().     assertThat(parameters.get(0).getType()).isEqualTo(String.class).     assertThat(parameters.get(1).getType()).isEqualTo(String.class).     assertThat(parameters.get(2).getType()).isEqualTo(String.class).     assertThat(parameters.get(3).getType()).isEqualTo(Integer.class).     assertThat(parameters.get(4).getType()).isEqualTo(Object.class). }
false;public;0;9;;@Test public void getParametersWhenHasManagedOperationParameterShouldUseValuesFromAnnotation() {     DiscoveredJmxOperation operation = getOperation("withManagedOperationParameters").     List<JmxOperationParameter> parameters = operation.getParameters().     assertThat(parameters.get(0).getName()).isEqualTo("a1").     assertThat(parameters.get(1).getName()).isEqualTo("a2").     assertThat(parameters.get(0).getDescription()).isEqualTo("d1").     assertThat(parameters.get(1).getDescription()).isEqualTo("d2"). }
false;public;0;15;;@Test public void getParametersWhenHasNoManagedOperationParameterShouldDeducedValuesName() {     DiscoveredJmxOperation operation = getOperation("params").     List<JmxOperationParameter> parameters = operation.getParameters().     assertThat(parameters.get(0).getName()).isEqualTo("enumParam").     assertThat(parameters.get(1).getName()).isEqualTo("dateParam").     assertThat(parameters.get(2).getName()).isEqualTo("instantParam").     assertThat(parameters.get(3).getName()).isEqualTo("integerParam").     assertThat(parameters.get(4).getName()).isEqualTo("applicationContextParam").     assertThat(parameters.get(0).getDescription()).isNull().     assertThat(parameters.get(1).getDescription()).isNull().     assertThat(parameters.get(2).getDescription()).isNull().     assertThat(parameters.get(3).getDescription()).isNull().     assertThat(parameters.get(4).getDescription()).isNull(). }
false;private;1;10;;private DiscoveredJmxOperation getOperation(String methodName) {     Method method = findMethod(methodName).     AnnotationAttributes annotationAttributes = new AnnotationAttributes().     annotationAttributes.put("produces", "application/xml").     DiscoveredOperationMethod operationMethod = new DiscoveredOperationMethod(method, OperationType.READ, annotationAttributes).     DiscoveredJmxOperation operation = new DiscoveredJmxOperation(EndpointId.of("test"), operationMethod, mock(OperationInvoker.class)).     return operation. }
false;private;1;6;;private Method findMethod(String methodName) {     Map<String, Method> methods = new HashMap<>().     ReflectionUtils.doWithMethods(Example.class, (method) -> methods.put(method.getName(), method)).     return methods.get(methodName). }
false;;0;1;;OperationType getEnum().
false;;0;1;;Date getDate().
false;;0;1;;Instant getInstant().
false;;0;1;;Integer getInteger().
false;;0;1;;void getVoid().
false;;0;1;;ApplicationContext getApplicationContext().
false;;5;2;;Object params(OperationType enumParam, Date dateParam, Instant instantParam, Integer integerParam, ApplicationContext applicationContextParam).
false;;0;2;;@ManagedOperation(description = "fromannotation") Object withManagedOperationDescription().
false;;2;4;;@ManagedOperationParameters({ @ManagedOperationParameter(name = "a1", description = "d1"), @ManagedOperationParameter(name = "a2", description = "d2") }) Object withManagedOperationParameters(Object one, Object two).
