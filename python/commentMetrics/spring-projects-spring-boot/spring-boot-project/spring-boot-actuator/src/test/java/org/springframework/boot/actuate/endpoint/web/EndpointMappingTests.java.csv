commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void normalizationTurnsASlashIntoAnEmptyString() {     assertThat(new EndpointMapping("/").getPath()).isEqualTo(""). }
false;public;0;4;;@Test public void normalizationLeavesAnEmptyStringAsIs() {     assertThat(new EndpointMapping("").getPath()).isEqualTo(""). }
false;public;0;4;;@Test public void normalizationRemovesATrailingSlash() {     assertThat(new EndpointMapping("/test/").getPath()).isEqualTo("/test"). }
false;public;0;4;;@Test public void normalizationAddsALeadingSlash() {     assertThat(new EndpointMapping("test").getPath()).isEqualTo("/test"). }
false;public;0;4;;@Test public void normalizationAddsALeadingSlashAndRemovesATrailingSlash() {     assertThat(new EndpointMapping("test/").getPath()).isEqualTo("/test"). }
false;public;0;4;;@Test public void normalizationLeavesAPathWithALeadingSlashAndNoTrailingSlashAsIs() {     assertThat(new EndpointMapping("/test").getPath()).isEqualTo("/test"). }
false;public;0;4;;@Test public void subPathForAnEmptyStringReturnsBasePath() {     assertThat(new EndpointMapping("/test").createSubPath("")).isEqualTo("/test"). }
false;public;0;5;;@Test public void subPathWithALeadingSlashIsSeparatedFromBasePathBySingleSlash() {     assertThat(new EndpointMapping("/test").createSubPath("/one")).isEqualTo("/test/one"). }
false;public;0;5;;@Test public void subPathWithoutALeadingSlashIsSeparatedFromBasePathBySingleSlash() {     assertThat(new EndpointMapping("/test").createSubPath("one")).isEqualTo("/test/one"). }
false;public;0;5;;@Test public void trailingSlashIsRemovedFromASubPath() {     assertThat(new EndpointMapping("/test").createSubPath("one/")).isEqualTo("/test/one"). }
