commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     MockClock clock = new MockClock().     this.registry = new SimpleMeterRegistry(SimpleConfig.DEFAULT, clock).     this.webFilter = new MetricsWebFilter(this.registry, new DefaultWebFluxTagsProvider(), REQUEST_METRICS_NAME, true). }
false;public;0;11;;@Test public void filterAddsTagsToRegistry() {     MockServerWebExchange exchange = createExchange("/projects/spring-boot", "/projects/{project}").     this.webFilter.filter(exchange, (serverWebExchange) -> exchange.getResponse().setComplete()).block(Duration.ofSeconds(30)).     assertMetricsContainsTag("uri", "/projects/{project}").     assertMetricsContainsTag("status", "200"). }
false;public;0;16;;@Test public void filterAddsTagsToRegistryForExceptions() {     MockServerWebExchange exchange = createExchange("/projects/spring-boot", "/projects/{project}").     this.webFilter.filter(exchange, (serverWebExchange) -> Mono.error(new IllegalStateException("test error"))).onErrorResume((t) -> {         exchange.getResponse().setStatusCodeValue(500).         return exchange.getResponse().setComplete().     }).block(Duration.ofSeconds(30)).     assertMetricsContainsTag("uri", "/projects/{project}").     assertMetricsContainsTag("status", "500").     assertMetricsContainsTag("exception", "IllegalStateException"). }
false;public;0;16;;@Test public void filterAddsNonEmptyTagsToRegistryForAnonymousExceptions() {     final Exception anonymous = new Exception("test error") {     }.     MockServerWebExchange exchange = createExchange("/projects/spring-boot", "/projects/{project}").     this.webFilter.filter(exchange, (serverWebExchange) -> Mono.error(anonymous)).onErrorResume((t) -> {         exchange.getResponse().setStatusCodeValue(500).         return exchange.getResponse().setComplete().     }).block(Duration.ofSeconds(30)).     assertMetricsContainsTag("uri", "/projects/{project}").     assertMetricsContainsTag("status", "500").     assertMetricsContainsTag("exception", anonymous.getClass().getName()). }
false;public;0;12;;@Test public void filterAddsTagsToRegistryForExceptionsAndCommittedResponse() {     MockServerWebExchange exchange = createExchange("/projects/spring-boot", "/projects/{project}").     this.webFilter.filter(exchange, (serverWebExchange) -> {         exchange.getResponse().setStatusCodeValue(500).         return exchange.getResponse().setComplete().then(Mono.error(new IllegalStateException("test error"))).     }).onErrorResume((t) -> Mono.empty()).block(Duration.ofSeconds(30)).     assertMetricsContainsTag("uri", "/projects/{project}").     assertMetricsContainsTag("status", "500"). }
false;private;2;8;;private MockServerWebExchange createExchange(String path, String pathPattern) {     PathPatternParser parser = new PathPatternParser().     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(path).build()).     exchange.getAttributes().put(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE, parser.parse(pathPattern)).     return exchange. }
false;private;2;4;;private void assertMetricsContainsTag(String tagKey, String tagValue) {     assertThat(this.registry.get(REQUEST_METRICS_NAME).tag(tagKey, tagValue).timer().count()).isEqualTo(1). }
