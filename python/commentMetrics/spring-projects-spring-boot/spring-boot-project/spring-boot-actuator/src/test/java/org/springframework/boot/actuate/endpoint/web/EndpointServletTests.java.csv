commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenServletClassIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new EndpointServlet((Class<Servlet>) null)).withMessageContaining("Servlet must not be null"). }
false;public;0;6;;@Test public void createWhenServletIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new EndpointServlet((Servlet) null)).withMessageContaining("Servlet must not be null"). }
false;public;0;5;;@Test public void createWithServletClassShouldCreateServletInstance() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThat(endpointServlet.getServlet()).isInstanceOf(TestServlet.class). }
false;public;0;6;;@Test public void getServletShouldGetServlet() {     TestServlet servlet = new TestServlet().     EndpointServlet endpointServlet = new EndpointServlet(servlet).     assertThat(endpointServlet.getServlet()).isEqualTo(servlet). }
false;public;0;6;;@Test public void withInitParameterNullName() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThatIllegalArgumentException().isThrownBy(() -> endpointServlet.withInitParameter(null, "value")). }
false;public;0;6;;@Test public void withInitParameterEmptyName() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThatIllegalArgumentException().isThrownBy(() -> endpointServlet.withInitParameter(" ", "value")). }
false;public;0;6;;@Test public void withInitParameterShouldReturnNewInstance() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThat(endpointServlet.withInitParameter("spring", "boot")).isNotSameAs(endpointServlet). }
false;public;0;8;;@Test public void withInitParameterWhenHasExistingShouldMergeParameters() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).withInitParameter("a", "b").withInitParameter("c", "d").     assertThat(endpointServlet.withInitParameter("a", "b1").withInitParameter("e", "f").getInitParameters()).containsExactly(entry("a", "b1"), entry("c", "d"), entry("e", "f")). }
false;public;0;6;;@Test public void withInitParametersNullName() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThatIllegalArgumentException().isThrownBy(() -> endpointServlet.withInitParameters(Collections.singletonMap(null, "value"))). }
false;public;0;6;;@Test public void withInitParametersEmptyName() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThatIllegalArgumentException().isThrownBy(() -> endpointServlet.withInitParameters(Collections.singletonMap(" ", "value"))). }
false;public;0;7;;@Test public void withInitParametersShouldCreateNewInstance() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).     assertThat(endpointServlet.withInitParameters(Collections.singletonMap("spring", "boot"))).isNotSameAs(endpointServlet). }
false;public;0;11;;@Test public void withInitParametersWhenHasExistingShouldMergeParameters() {     EndpointServlet endpointServlet = new EndpointServlet(TestServlet.class).withInitParameter("a", "b").withInitParameter("c", "d").     Map<String, String> extra = new LinkedHashMap<>().     extra.put("a", "b1").     extra.put("e", "f").     assertThat(endpointServlet.withInitParameters(extra).getInitParameters()).containsExactly(entry("a", "b1"), entry("c", "d"), entry("e", "f")). }
false;public;2;4;;@Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { }
