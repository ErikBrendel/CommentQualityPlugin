commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;5;;private static AnnotationConfigServletWebServerApplicationContext createApplicationContext() {     AnnotationConfigServletWebServerApplicationContext context = new AnnotationConfigServletWebServerApplicationContext().     context.register(JerseyConfiguration.class).     return context. }
false;private,static;1;4;;private static void applyAuthenticatedConfiguration(AnnotationConfigServletWebServerApplicationContext context) {     context.register(AuthenticatedConfiguration.class). }
false;protected;1;4;;@Override protected int getPort(AnnotationConfigServletWebServerApplicationContext context) {     return context.getWebServer().getPort(). }
false;protected;4;5;;@Override protected void validateErrorBody(WebTestClient.BodyContentSpec body, HttpStatus status, String path, String message) { // Jersey doesn't support the general error page handling }
false;public;0;4;;@Bean public TomcatServletWebServerFactory tomcat() {     return new TomcatServletWebServerFactory(0). }
false;public;1;6;;@Bean public ServletRegistrationBean<ServletContainer> servletContainer(ResourceConfig resourceConfig) {     return new ServletRegistrationBean<>(new ServletContainer(resourceConfig), "/*"). }
false;public;3;16;;@Bean public ResourceConfig resourceConfig(Environment environment, WebEndpointDiscoverer endpointDiscoverer, EndpointMediaTypes endpointMediaTypes) {     ResourceConfig resourceConfig = new ResourceConfig().     Collection<Resource> resources = new JerseyEndpointResourceFactory().createEndpointResources(new EndpointMapping(environment.getProperty("endpointPath")), endpointDiscoverer.getEndpoints(), endpointMediaTypes, new EndpointLinksResolver(endpointDiscoverer.getEndpoints())).     resourceConfig.registerResources(new HashSet<>(resources)).     resourceConfig.register(JacksonFeature.class).     resourceConfig.register(new ObjectMapperContextResolver(new ObjectMapper()), ContextResolver.class).     return resourceConfig. }
false;protected;3;17;;@Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {     SecurityContext context = SecurityContextHolder.createEmptyContext().     context.setAuthentication(new UsernamePasswordAuthenticationToken("Alice", "secret", Arrays.asList(new SimpleGrantedAuthority("ROLE_ACTUATOR")))).     SecurityContextHolder.setContext(context).     try {         filterChain.doFilter(new SecurityContextHolderAwareRequestWrapper(request, "ROLE_"), response).     } finally {         SecurityContextHolder.clearContext().     } }
false;public;0;24;;@Bean public Filter securityFilter() {     return new OncePerRequestFilter() {          @Override         protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {             SecurityContext context = SecurityContextHolder.createEmptyContext().             context.setAuthentication(new UsernamePasswordAuthenticationToken("Alice", "secret", Arrays.asList(new SimpleGrantedAuthority("ROLE_ACTUATOR")))).             SecurityContextHolder.setContext(context).             try {                 filterChain.doFilter(new SecurityContextHolderAwareRequestWrapper(request, "ROLE_"), response).             } finally {                 SecurityContextHolder.clearContext().             }         }     }. }
false;public;1;4;;@Override public ObjectMapper getContext(Class<?> type) {     return this.objectMapper. }
