commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void mapDetailsWithDisableDetailsDoesNotInvokeSupplier() {     HealthWebEndpointResponseMapper mapper = createMapper(ShowDetails.NEVER).     Supplier<Health> supplier = mockSupplier().     SecurityContext securityContext = mock(SecurityContext.class).     WebEndpointResponse<Health> response = mapper.mapDetails(supplier, securityContext).     assertThat(response.getStatus()).isEqualTo(HttpStatus.NOT_FOUND.value()).     verifyZeroInteractions(supplier).     verifyZeroInteractions(securityContext). }
false;public;0;13;;@Test public void mapDetailsWithUnauthorizedUserDoesNotInvokeSupplier() {     HealthWebEndpointResponseMapper mapper = createMapper(ShowDetails.WHEN_AUTHORIZED).     Supplier<Health> supplier = mockSupplier().     SecurityContext securityContext = mockSecurityContext("USER").     WebEndpointResponse<Health> response = mapper.mapDetails(supplier, securityContext).     assertThat(response.getStatus()).isEqualTo(HttpStatus.NOT_FOUND.value()).     assertThat(response.getBody()).isNull().     verifyZeroInteractions(supplier).     verify(securityContext).isUserInRole("ACTUATOR"). }
false;public;0;15;;@Test public void mapDetailsWithAuthorizedUserInvokeSupplier() {     HealthWebEndpointResponseMapper mapper = createMapper(ShowDetails.WHEN_AUTHORIZED).     Supplier<Health> supplier = mockSupplier().     given(supplier.get()).willReturn(Health.down().build()).     SecurityContext securityContext = mockSecurityContext("ACTUATOR").     WebEndpointResponse<Health> response = mapper.mapDetails(supplier, securityContext).     assertThat(response.getStatus()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE.value()).     assertThat(response.getBody().getStatus()).isEqualTo(Status.DOWN).     verify(supplier).get().     verify(securityContext).isUserInRole("ACTUATOR"). }
false;public;0;12;;@Test public void mapDetailsWithUnavailableHealth() {     HealthWebEndpointResponseMapper mapper = createMapper(ShowDetails.ALWAYS).     Supplier<Health> supplier = mockSupplier().     SecurityContext securityContext = mock(SecurityContext.class).     WebEndpointResponse<Health> response = mapper.mapDetails(supplier, securityContext).     assertThat(response.getStatus()).isEqualTo(HttpStatus.NOT_FOUND.value()).     assertThat(response.getBody()).isNull().     verify(supplier).get().     verifyZeroInteractions(securityContext). }
false;private;0;4;;@SuppressWarnings("unchecked") private Supplier<Health> mockSupplier() {     return mock(Supplier.class). }
false;private;1;11;;private SecurityContext mockSecurityContext(String... roles) {     List<String> associatedRoles = Arrays.asList(roles).     SecurityContext securityContext = mock(SecurityContext.class).     given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).     given(securityContext.isUserInRole(anyString())).will((Answer<Boolean>) (invocation) -> {         String expectedRole = invocation.getArgument(0).         return associatedRoles.contains(expectedRole).     }).     return securityContext. }
false;private;1;4;;private HealthWebEndpointResponseMapper createMapper(ShowDetails showDetails) {     return new HealthWebEndpointResponseMapper(this.statusHttpMapper, showDetails, this.authorizedRoles). }
