commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void allCaches() {     client.get().uri("/actuator/caches").exchange().expectStatus().isOk().expectBody().jsonPath("cacheManagers.one.caches.a.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.one.caches.b.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.two.caches.a.target").isEqualTo(ConcurrentHashMap.class.getName()).jsonPath("cacheManagers.two.caches.c.target").isEqualTo(ConcurrentHashMap.class.getName()). }
false;public;0;7;;@Test public void namedCache() {     client.get().uri("/actuator/caches/b").exchange().expectStatus().isOk().expectBody().jsonPath("name").isEqualTo("b").jsonPath("cacheManager").isEqualTo("one").jsonPath("target").isEqualTo(ConcurrentHashMap.class.getName()). }
false;public;0;5;;@Test public void namedCacheWithUnknownName() {     client.get().uri("/actuator/caches/does-not-exist").exchange().expectStatus().isNotFound(). }
false;public;0;4;;@Test public void namedCacheWithNonUniqueName() {     client.get().uri("/actuator/caches/a").exchange().expectStatus().isBadRequest(). }
false;public;0;7;;@Test public void clearNamedCache() {     Cache b = context.getBean("one", CacheManager.class).getCache("b").     b.put("test", "value").     client.delete().uri("/actuator/caches/b").exchange().expectStatus().isNoContent().     assertThat(b.get("test")).isNull(). }
false;public;0;5;;@Test public void cleanNamedCacheWithUnknownName() {     client.delete().uri("/actuator/caches/does-not-exist").exchange().expectStatus().isNotFound(). }
false;public;0;4;;@Test public void clearNamedCacheWithNonUniqueName() {     client.get().uri("/actuator/caches/a").exchange().expectStatus().isBadRequest(). }
false;public;0;4;;@Bean public CacheManager one() {     return new ConcurrentMapCacheManager("a", "b"). }
false;public;0;4;;@Bean public CacheManager two() {     return new ConcurrentMapCacheManager("a", "c"). }
false;public;1;4;;@Bean public CachesEndpoint endpoint(Map<String, CacheManager> cacheManagers) {     return new CachesEndpoint(cacheManagers). }
false;public;1;5;;@Bean public CachesEndpointWebExtension cachesEndpointWebExtension(CachesEndpoint endpoint) {     return new CachesEndpointWebExtension(endpoint). }
