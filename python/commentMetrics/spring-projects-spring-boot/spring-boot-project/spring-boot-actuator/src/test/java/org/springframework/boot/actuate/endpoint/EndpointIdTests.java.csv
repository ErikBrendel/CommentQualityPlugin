commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void ofWhenNullThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of(null)).withMessage("Value must not be empty"). }
false;public;0;5;;@Test public void ofWhenEmptyThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of("")).withMessage("Value must not be empty"). }
false;public;0;5;;@Test public void ofWhenContainsSlashThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of("foo/bar")).withMessage("Value must only contain valid chars"). }
false;public;0;5;;@Test public void ofWhenHasBadCharThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of("foo!bar")).withMessage("Value must only contain valid chars"). }
false;public;0;5;;@Test public void ofWhenStartsWithNumberThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of("1foo")).withMessage("Value must not start with a number"). }
false;public;0;5;;@Test public void ofWhenStartsWithUppercaseLetterThrowsException() {     assertThatIllegalArgumentException().isThrownBy(() -> EndpointId.of("Foo")).withMessage("Value must not start with an uppercase letter"). }
false;public;0;7;;@Test public void ofWhenContainsDotIsValid() {     // Ideally we wouldn't support this but there are existing endpoints using the     // pattern. See gh-14773     EndpointId endpointId = EndpointId.of("foo.bar").     assertThat(endpointId.toString()).isEqualTo("foo.bar"). }
false;public;0;7;;@Test public void ofWhenContainsDashIsValid() {     // Ideally we wouldn't support this but there are existing endpoints using the     // pattern. See gh-14773     EndpointId endpointId = EndpointId.of("foo-bar").     assertThat(endpointId.toString()).isEqualTo("foo-bar"). }
false;public;0;7;;@Test public void ofWhenContainsDeprecatedCharsLogsWarning() {     EndpointId.resetLoggedWarnings().     EndpointId.of("foo-bar").     assertThat(this.output.toString()).contains("Endpoint ID 'foo-bar' contains invalid characters, please migrate to a valid format"). }
false;public;0;12;;@Test public void equalsAndHashCode() {     EndpointId one = EndpointId.of("foobar1").     EndpointId two = EndpointId.of("fooBar1").     EndpointId three = EndpointId.of("foo-bar1").     EndpointId four = EndpointId.of("foo.bar1").     EndpointId five = EndpointId.of("barfoo1").     EndpointId six = EndpointId.of("foobar2").     assertThat(one.hashCode()).isEqualTo(two.hashCode()).     assertThat(one).isEqualTo(one).isEqualTo(two).isEqualTo(three).isEqualTo(four).isNotEqualTo(five).isNotEqualTo(six). }
false;public;0;4;;@Test public void toLowerCaseStringReturnsLowercase() {     assertThat(EndpointId.of("fooBar").toLowerCaseString()).isEqualTo("foobar"). }
false;public;0;4;;@Test public void toStringReturnsString() {     assertThat(EndpointId.of("fooBar").toString()).isEqualTo("fooBar"). }
false;public;0;5;;@Test public void fromPropertyValueStripsDashes() {     EndpointId fromPropertyValue = EndpointId.fromPropertyValue("foo-bar").     assertThat(fromPropertyValue).isEqualTo(EndpointId.of("fooBar")). }
