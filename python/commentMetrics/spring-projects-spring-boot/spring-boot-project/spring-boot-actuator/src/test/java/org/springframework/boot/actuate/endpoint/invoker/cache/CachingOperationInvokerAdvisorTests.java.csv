commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.advisor = new CachingOperationInvokerAdvisor(this.timeToLive). }
false;public;0;7;;@Test public void applyWhenOperationIsNotReadShouldNotAddAdvise() {     OperationParameters parameters = getParameters("get").     OperationInvoker advised = this.advisor.apply(EndpointId.of("foo"), OperationType.WRITE, parameters, this.invoker).     assertThat(advised).isSameAs(this.invoker). }
false;public;0;8;;@Test public void applyWhenHasAtLeaseOneMandatoryParameterShouldNotAddAdvise() {     OperationParameters parameters = getParameters("getWithParameters", String.class, String.class).     OperationInvoker advised = this.advisor.apply(EndpointId.of("foo"), OperationType.READ, parameters, this.invoker).     assertThat(advised).isSameAs(this.invoker). }
false;public;0;9;;@Test public void applyWhenTimeToLiveReturnsNullShouldNotAddAdvise() {     OperationParameters parameters = getParameters("get").     given(this.timeToLive.apply(any())).willReturn(null).     OperationInvoker advised = this.advisor.apply(EndpointId.of("foo"), OperationType.READ, parameters, this.invoker).     assertThat(advised).isSameAs(this.invoker).     verify(this.timeToLive).apply(EndpointId.of("foo")). }
false;public;0;9;;@Test public void applyWhenTimeToLiveIsZeroShouldNotAddAdvise() {     OperationParameters parameters = getParameters("get").     given(this.timeToLive.apply(any())).willReturn(0L).     OperationInvoker advised = this.advisor.apply(EndpointId.of("foo"), OperationType.READ, parameters, this.invoker).     assertThat(advised).isSameAs(this.invoker).     verify(this.timeToLive).apply(EndpointId.of("foo")). }
false;public;0;6;;@Test public void applyShouldAddCacheAdvise() {     OperationParameters parameters = getParameters("get").     given(this.timeToLive.apply(any())).willReturn(100L).     assertAdviseIsApplied(parameters). }
false;public;0;7;;@Test public void applyWithAllOptionalParametersShouldAddAdvise() {     OperationParameters parameters = getParameters("getWithAllOptionalParameters", String.class, String.class).     given(this.timeToLive.apply(any())).willReturn(100L).     assertAdviseIsApplied(parameters). }
false;public;0;7;;@Test public void applyWithSecurityContextShouldAddAdvise() {     OperationParameters parameters = getParameters("getWithSecurityContext", SecurityContext.class, String.class).     given(this.timeToLive.apply(any())).willReturn(100L).     assertAdviseIsApplied(parameters). }
false;private;1;7;;private void assertAdviseIsApplied(OperationParameters parameters) {     OperationInvoker advised = this.advisor.apply(EndpointId.of("foo"), OperationType.READ, parameters, this.invoker).     assertThat(advised).isInstanceOf(CachingOperationInvoker.class).     assertThat(advised).hasFieldOrPropertyWithValue("invoker", this.invoker).     assertThat(advised).hasFieldOrPropertyWithValue("timeToLive", 100L). }
false;private;2;4;;private OperationParameters getParameters(String methodName, Class<?>... parameterTypes) {     return getOperationMethod(methodName, parameterTypes).getParameters(). }
false;private;2;6;;private OperationMethod getOperationMethod(String methodName, Class<?>... parameterTypes) {     Method method = ReflectionUtils.findMethod(TestOperations.class, methodName, parameterTypes).     return new OperationMethod(method, OperationType.READ). }
false;public;0;3;;public String get() {     return "". }
false;public;2;3;;public String getWithParameters(@Nullable String foo, String bar) {     return "". }
false;public;2;4;;public String getWithAllOptionalParameters(@Nullable String foo, @Nullable String bar) {     return "". }
false;public;2;4;;public String getWithSecurityContext(SecurityContext securityContext, @Nullable String bar) {     return "". }
