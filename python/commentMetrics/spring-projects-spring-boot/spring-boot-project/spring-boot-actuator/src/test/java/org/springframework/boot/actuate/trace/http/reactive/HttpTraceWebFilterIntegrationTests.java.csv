commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void traceForNotFoundResponseHas404Status() {     this.contextRunner.run((context) -> {         WebTestClient.bindToApplicationContext(context).build().get().uri("/").exchange().expectStatus().isNotFound().         HttpTraceRepository repository = context.getBean(HttpTraceRepository.class).         assertThat(repository.findAll()).hasSize(1).         assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(404).     }). }
false;public;0;12;;@Test public void traceForMonoErrorWithRuntimeExceptionHas500Status() {     this.contextRunner.run((context) -> {         WebTestClient.bindToApplicationContext(context).build().get().uri("/mono-error").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).         HttpTraceRepository repository = context.getBean(HttpTraceRepository.class).         assertThat(repository.findAll()).hasSize(1).         assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(500).     }). }
false;public;0;12;;@Test public void traceForThrownRuntimeExceptionHas500Status() {     this.contextRunner.run((context) -> {         WebTestClient.bindToApplicationContext(context).build().get().uri("/thrown").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).         HttpTraceRepository repository = context.getBean(HttpTraceRepository.class).         assertThat(repository.findAll()).hasSize(1).         assertThat(repository.findAll().get(0).getResponse().getStatus()).isEqualTo(500).     }). }
false;public;1;6;;@Bean public HttpTraceWebFilter httpTraceWebFilter(HttpTraceRepository repository) {     Set<Include> includes = EnumSet.allOf(Include.class).     return new HttpTraceWebFilter(repository, new HttpExchangeTracer(includes), includes). }
false;public;0;4;;@Bean public HttpTraceRepository httpTraceRepository() {     return new InMemoryHttpTraceRepository(). }
false;public;1;4;;@Bean public HttpHandler httpHandler(ApplicationContext applicationContext) {     return WebHttpHandlerBuilder.applicationContext(applicationContext).build(). }
false;public;0;9;;@Bean public RouterFunction<ServerResponse> router() {     return route(GET("/mono-error"), (request) -> Mono.error(new RuntimeException())).andRoute(GET("/thrown"), (HandlerFunction<ServerResponse>) (request) -> {         throw new RuntimeException().     }). }
