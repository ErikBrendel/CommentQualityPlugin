commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() {     given(this.one.health()).willReturn(Mono.just(new Health.Builder().unknown().withDetail("1", "1").build())).     given(this.two.health()).willReturn(Mono.just(new Health.Builder().unknown().withDetail("2", "2").build())).     this.registry = new DefaultReactiveHealthIndicatorRegistry(). }
false;public;0;8;;@Test public void register() {     this.registry.register("one", this.one).     this.registry.register("two", this.two).     assertThat(this.registry.getAll()).hasSize(2).     assertThat(this.registry.get("one")).isSameAs(this.one).     assertThat(this.registry.get("two")).isSameAs(this.two). }
false;public;0;8;;@Test public void registerAlreadyUsedName() {     this.registry.register("one", this.one).     assertThatIllegalStateException().isThrownBy(() -> this.registry.register("one", this.two)).withMessageContaining("HealthIndicator with name 'one' already registered"). }
false;public;0;9;;@Test public void unregister() {     this.registry.register("one", this.one).     this.registry.register("two", this.two).     assertThat(this.registry.getAll()).hasSize(2).     ReactiveHealthIndicator two = this.registry.unregister("two").     assertThat(two).isSameAs(this.two).     assertThat(this.registry.getAll()).hasSize(1). }
false;public;0;8;;@Test public void unregisterUnknown() {     this.registry.register("one", this.one).     assertThat(this.registry.getAll()).hasSize(1).     ReactiveHealthIndicator two = this.registry.unregister("two").     assertThat(two).isNull().     assertThat(this.registry.getAll()).hasSize(1). }
false;public;0;8;;@Test public void getAllIsASnapshot() {     this.registry.register("one", this.one).     Map<String, ReactiveHealthIndicator> snapshot = this.registry.getAll().     assertThat(snapshot).containsOnlyKeys("one").     this.registry.register("two", this.two).     assertThat(snapshot).containsOnlyKeys("one"). }
false;public;0;7;;@Test public void getAllIsImmutable() {     this.registry.register("one", this.one).     Map<String, ReactiveHealthIndicator> snapshot = this.registry.getAll().     assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(snapshot::clear). }
