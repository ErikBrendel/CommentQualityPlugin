commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     this.exchange = mock(ServerWebExchange.class).     this.request = mock(ServerHttpRequest.class).     given(this.exchange.getRequest()).willReturn(this.request). }
false;public;0;8;;@Test public void getMethod() {     String method = "POST".     given(this.request.getMethodValue()).willReturn(method).     ServerWebExchangeTraceableRequest traceableRequest = new ServerWebExchangeTraceableRequest(this.exchange).     assertThat(traceableRequest.getMethod()).isSameAs(method). }
false;public;0;8;;@Test public void getUri() {     URI uri = URI.create("http://localhost:8080/").     given(this.request.getURI()).willReturn(uri).     ServerWebExchangeTraceableRequest traceableRequest = new ServerWebExchangeTraceableRequest(this.exchange).     assertThat(traceableRequest.getUri()).isSameAs(uri). }
false;public;0;10;;@Test public void getHeaders() {     HttpHeaders httpHeaders = new HttpHeaders().     httpHeaders.add("name", "value").     given(this.request.getHeaders()).willReturn(httpHeaders).     ServerWebExchangeTraceableRequest traceableRequest = new ServerWebExchangeTraceableRequest(this.exchange).     assertThat(traceableRequest.getHeaders()).containsOnly(entry("name", Collections.singletonList("value"))). }
false;public;0;9;;@Test public void getUnresolvedRemoteAddress() {     InetSocketAddress socketAddress = InetSocketAddress.createUnresolved("unresolved.example.com", 8080).     given(this.request.getRemoteAddress()).willReturn(socketAddress).     ServerWebExchangeTraceableRequest traceableRequest = new ServerWebExchangeTraceableRequest(this.exchange).     assertThat(traceableRequest.getRemoteAddress()).isNull(). }
false;public;0;9;;@Test public void getRemoteAddress() {     InetSocketAddress socketAddress = new InetSocketAddress(0).     given(this.request.getRemoteAddress()).willReturn(socketAddress).     ServerWebExchangeTraceableRequest traceableRequest = new ServerWebExchangeTraceableRequest(this.exchange).     assertThat(traceableRequest.getRemoteAddress()).isEqualTo(socketAddress.getAddress().toString()). }
