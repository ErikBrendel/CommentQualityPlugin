commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void nowEvent() {     AuditEvent event = new AuditEvent("phil", "UNKNOWN", Collections.singletonMap("a", (Object) "b")).     assertThat(event.getData().get("a")).isEqualTo("b").     assertThat(event.getType()).isEqualTo("UNKNOWN").     assertThat(event.getPrincipal()).isEqualTo("phil").     assertThat(event.getTimestamp()).isNotNull(). }
false;public;0;6;;@Test public void convertStringsToData() {     AuditEvent event = new AuditEvent("phil", "UNKNOWN", "a=b", "c=d").     assertThat(event.getData().get("a")).isEqualTo("b").     assertThat(event.getData().get("c")).isEqualTo("d"). }
false;public;0;6;;@Test public void nullPrincipalIsMappedToEmptyString() {     AuditEvent auditEvent = new AuditEvent(null, "UNKNOWN", Collections.singletonMap("a", (Object) "b")).     assertThat(auditEvent.getPrincipal()).isEmpty(). }
false;public;0;7;;@Test public void nullTimestamp() {     assertThatIllegalArgumentException().isThrownBy(() -> new AuditEvent(null, "phil", "UNKNOWN", Collections.singletonMap("a", (Object) "b"))).withMessageContaining("Timestamp must not be null"). }
false;public;0;7;;@Test public void nullType() {     assertThatIllegalArgumentException().isThrownBy(() -> new AuditEvent("phil", null, Collections.singletonMap("a", (Object) "b"))).withMessageContaining("Type must not be null"). }
false;public;0;11;;@Test public void jsonFormat() throws Exception {     AuditEvent event = new AuditEvent("johannes", "UNKNOWN", Collections.singletonMap("type", (Object) "BadCredentials")).     String json = Jackson2ObjectMapperBuilder.json().build().writeValueAsString(event).     JSONObject jsonObject = new JSONObject(json).     assertThat(jsonObject.getString("type")).isEqualTo("UNKNOWN").     assertThat(jsonObject.getJSONObject("data").getString("type")).isEqualTo("BadCredentials"). }
