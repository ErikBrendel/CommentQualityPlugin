commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     this.listener.setApplicationEventPublisher(this.publisher). }
false;public;0;8;;@Test public void testAuthenticationSuccess() {     AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken("user", "password"))).     assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_SUCCESS). }
false;public;0;7;;@Test public void testOtherAuthenticationSuccess() {     this.listener.onApplicationEvent(new InteractiveAuthenticationSuccessEvent(new UsernamePasswordAuthenticationToken("user", "password"), getClass())).     // No need to audit this one (it shadows a regular AuthenticationSuccessEvent)     verify(this.publisher, never()).publishEvent(any(ApplicationEvent.class)). }
false;public;0;9;;@Test public void testAuthenticationFailed() {     AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationFailureExpiredEvent(new UsernamePasswordAuthenticationToken("user", "password"), new BadCredentialsException("Bad user"))).     assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_FAILURE). }
false;public;0;10;;@Test public void testAuthenticationSwitch() {     AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationSwitchUserEvent(new UsernamePasswordAuthenticationToken("user", "password"), new User("user", "password", AuthorityUtils.commaSeparatedStringToAuthorityList("USER")))).     assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_SWITCH). }
false;public;0;9;;@Test public void testAuthenticationSwitchBackToAnonymous() {     AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationSwitchUserEvent(new UsernamePasswordAuthenticationToken("user", "password"), null)).     assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_SWITCH). }
false;public;0;13;;@Test public void testDetailsAreIncludedInAuditEvent() {     Object details = new Object().     UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken("user", "password").     authentication.setDetails(details).     AuditApplicationEvent event = handleAuthenticationEvent(new AuthenticationFailureExpiredEvent(authentication, new BadCredentialsException("Bad user"))).     assertThat(event.getAuditEvent().getType()).isEqualTo(AuthenticationAuditListener.AUTHENTICATION_FAILURE).     assertThat(event.getAuditEvent().getData()).containsEntry("details", details). }
false;private;1;8;;private AuditApplicationEvent handleAuthenticationEvent(AbstractAuthenticationEvent event) {     ArgumentCaptor<AuditApplicationEvent> eventCaptor = ArgumentCaptor.forClass(AuditApplicationEvent.class).     this.listener.onApplicationEvent(event).     verify(this.publisher).publishEvent(eventCaptor.capture()).     return eventCaptor.getValue(). }
