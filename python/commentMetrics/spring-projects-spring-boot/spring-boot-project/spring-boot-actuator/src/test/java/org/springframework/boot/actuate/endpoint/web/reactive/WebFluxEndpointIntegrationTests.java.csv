commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;5;;private static AnnotationConfigReactiveWebServerApplicationContext createApplicationContext() {     AnnotationConfigReactiveWebServerApplicationContext context = new AnnotationConfigReactiveWebServerApplicationContext().     context.register(ReactiveConfiguration.class).     return context. }
false;private,static;1;4;;private static void applyAuthenticatedConfiguration(AnnotationConfigReactiveWebServerApplicationContext context) {     context.register(AuthenticatedConfiguration.class). }
false;public;0;10;;@Test public void responseToOptionsRequestIncludesCorsHeaders() {     load(TestEndpointConfiguration.class, (client) -> client.options().uri("/test").accept(MediaType.APPLICATION_JSON).header("Access-Control-Request-Method", "POST").header("Origin", "http://example.com").exchange().expectStatus().isOk().expectHeader().valueEquals("Access-Control-Allow-Origin", "http://example.com").expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST")). }
false;public;0;11;;@Test public void readOperationsThatReturnAResourceSupportRangeRequests() {     load(ResourceEndpointConfiguration.class, (client) -> {         byte[] responseBody = client.get().uri("/resource").header("Range", "bytes=0-3").exchange().expectStatus().isEqualTo(HttpStatus.PARTIAL_CONTENT).expectHeader().contentType(MediaType.APPLICATION_OCTET_STREAM).returnResult(byte[].class).getResponseBodyContent().         assertThat(responseBody).containsExactly(0, 1, 2, 3).     }). }
false;protected;1;4;;@Override protected int getPort(AnnotationConfigReactiveWebServerApplicationContext context) {     return context.getBean(ReactiveConfiguration.class).port. }
false;public;0;4;;@Bean public NettyReactiveWebServerFactory netty() {     return new NettyReactiveWebServerFactory(0). }
false;public;1;4;;@Bean public HttpHandler httpHandler(ApplicationContext applicationContext) {     return WebHttpHandlerBuilder.applicationContext(applicationContext).build(). }
false;public;3;13;;@Bean public WebFluxEndpointHandlerMapping webEndpointHandlerMapping(Environment environment, WebEndpointDiscoverer endpointDiscoverer, EndpointMediaTypes endpointMediaTypes) {     CorsConfiguration corsConfiguration = new CorsConfiguration().     corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com")).     corsConfiguration.setAllowedMethods(Arrays.asList("GET", "POST")).     return new WebFluxEndpointHandlerMapping(new EndpointMapping(environment.getProperty("endpointPath")), endpointDiscoverer.getEndpoints(), endpointMediaTypes, corsConfiguration, new EndpointLinksResolver(endpointDiscoverer.getEndpoints())). }
false;public;0;4;;@Bean public ApplicationListener<ReactiveWebServerInitializedEvent> serverInitializedListener() {     return (event) -> this.port = event.getWebServer().getPort(). }
false;public;0;8;;@Bean public WebFilter webFilter() {     return (exchange, chain) -> chain.filter(exchange).subscriberContext(ReactiveSecurityContextHolder.withAuthentication(new UsernamePasswordAuthenticationToken("Alice", "secret", Arrays.asList(new SimpleGrantedAuthority("ROLE_ACTUATOR"))))). }
