commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     given(this.servletContext.addServlet(any(String.class), any(Servlet.class))).willReturn(this.dynamic). }
false;public;0;6;;@Test public void createWhenServletEndpointsIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ServletEndpointRegistrar(null, null)).withMessageContaining("ServletEndpoints must not be null"). }
false;public;0;4;;@Test public void onStartupShouldRegisterServlets() throws ServletException {     assertBasePath(null, "/test/*"). }
false;public;0;4;;@Test public void onStartupWhenHasBasePathShouldIncludeBasePath() throws ServletException {     assertBasePath("/actuator", "/actuator/test/*"). }
false;public;0;5;;@Test public void onStartupWhenHasEmptyBasePathShouldPrefixWithSlash() throws ServletException {     assertBasePath("", "/test/*"). }
false;public;0;5;;@Test public void onStartupWhenHasRootBasePathShouldNotAddDuplicateSlash() throws ServletException {     assertBasePath("/", "/test/*"). }
false;private;2;12;;private void assertBasePath(String basePath, String expectedMapping) throws ServletException {     ExposableServletEndpoint endpoint = mockEndpoint(new EndpointServlet(TestServlet.class)).     ServletEndpointRegistrar registrar = new ServletEndpointRegistrar(basePath, Collections.singleton(endpoint)).     registrar.onStartup(this.servletContext).     verify(this.servletContext).addServlet(eq("test-actuator-endpoint"), this.servlet.capture()).     assertThat(this.servlet.getValue()).isInstanceOf(TestServlet.class).     verify(this.dynamic).addMapping(expectedMapping). }
false;public;0;10;;@Test public void onStartupWhenHasInitParametersShouldRegisterInitParameters() throws Exception {     ExposableServletEndpoint endpoint = mockEndpoint(new EndpointServlet(TestServlet.class).withInitParameter("a", "b")).     ServletEndpointRegistrar registrar = new ServletEndpointRegistrar("/actuator", Collections.singleton(endpoint)).     registrar.onStartup(this.servletContext).     verify(this.dynamic).setInitParameters(Collections.singletonMap("a", "b")). }
false;private;1;7;;private ExposableServletEndpoint mockEndpoint(EndpointServlet endpointServlet) {     ExposableServletEndpoint endpoint = mock(ExposableServletEndpoint.class).     given(endpoint.getEndpointId()).willReturn(EndpointId.of("test")).     given(endpoint.getEndpointServlet()).willReturn(endpointServlet).     given(endpoint.getRootPath()).willReturn("test").     return endpoint. }
false;public;2;3;;@Override public void service(ServletRequest req, ServletResponse res) { }
