commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     this.target = new Example().     this.operationMethod = new OperationMethod(ReflectionUtils.findMethod(Example.class, "reverse", String.class), OperationType.READ).     this.parameterValueMapper = (parameter, value) -> (value != null) ? value.toString() : null. }
false;public;0;7;;@Test public void createWhenTargetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(null, this.operationMethod, this.parameterValueMapper)).withMessageContaining("Target must not be null"). }
false;public;0;7;;@Test public void createWhenOperationMethodIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(this.target, null, this.parameterValueMapper)).withMessageContaining("OperationMethod must not be null"). }
false;public;0;7;;@Test public void createWhenParameterValueMapperIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ReflectiveOperationInvoker(this.target, this.operationMethod, null)).withMessageContaining("ParameterValueMapper must not be null"). }
false;public;0;8;;@Test public void invokeShouldInvokeMethod() {     ReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod, this.parameterValueMapper).     Object result = invoker.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap("name", "boot"))).     assertThat(result).isEqualTo("toob"). }
false;public;0;8;;@Test public void invokeWhenMissingNonNullableArgumentShouldThrowException() {     ReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod, this.parameterValueMapper).     assertThatExceptionOfType(MissingParametersException.class).isThrownBy(() -> invoker.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap("name", null)))). }
false;public;0;10;;@Test public void invokeWhenMissingNullableArgumentShouldInvoke() {     OperationMethod operationMethod = new OperationMethod(ReflectionUtils.findMethod(Example.class, "reverseNullable", String.class), OperationType.READ).     ReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, operationMethod, this.parameterValueMapper).     Object result = invoker.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap("name", null))).     assertThat(result).isEqualTo("llun"). }
false;public;0;8;;@Test public void invokeShouldResolveParameters() {     ReflectiveOperationInvoker invoker = new ReflectiveOperationInvoker(this.target, this.operationMethod, this.parameterValueMapper).     Object result = invoker.invoke(new InvocationContext(mock(SecurityContext.class), Collections.singletonMap("name", 1234))).     assertThat(result).isEqualTo("4321"). }
false;;1;3;;String reverse(String name) {     return new StringBuilder(name).reverse().toString(). }
false;;1;3;;String reverseNullable(@Nullable String name) {     return new StringBuilder(String.valueOf(name)).reverse().toString(). }
