commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before @After public void resetMocks() {     this.loggingSystem = context.getBean(LoggingSystem.class).     Mockito.reset(this.loggingSystem).     given(this.loggingSystem.getSupportedLogLevels()).willReturn(EnumSet.allOf(LogLevel.class)). }
false;public;0;13;;@Test public void getLoggerShouldReturnAllLoggerConfigurations() {     given(this.loggingSystem.getLoggerConfigurations()).willReturn(Collections.singletonList(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG))).     client.get().uri("/actuator/loggers").exchange().expectStatus().isOk().expectBody().jsonPath("$.length()").isEqualTo(2).jsonPath("levels").isEqualTo(jsonArrayOf("OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE")).jsonPath("loggers.length()").isEqualTo(1).jsonPath("loggers.ROOT.length()").isEqualTo(2).jsonPath("loggers.ROOT.configuredLevel").isEqualTo(null).jsonPath("loggers.ROOT.effectiveLevel").isEqualTo("DEBUG"). }
false;public;0;9;;@Test public void getLoggerShouldReturnLogLevels() {     given(this.loggingSystem.getLoggerConfiguration("ROOT")).willReturn(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG)).     client.get().uri("/actuator/loggers/ROOT").exchange().expectStatus().isOk().expectBody().jsonPath("$.length()").isEqualTo(2).jsonPath("configuredLevel").isEqualTo(null).jsonPath("effectiveLevel").isEqualTo("DEBUG"). }
false;public;0;5;;@Test public void getLoggersWhenLoggerNotFoundShouldReturnNotFound() {     client.get().uri("/actuator/loggers/com.does.not.exist").exchange().expectStatus().isNotFound(). }
false;public;0;8;;@Test public void setLoggerUsingApplicationJsonShouldSetLogLevel() {     client.post().uri("/actuator/loggers/ROOT").contentType(MediaType.APPLICATION_JSON).syncBody(Collections.singletonMap("configuredLevel", "debug")).exchange().expectStatus().isNoContent().     verify(this.loggingSystem).setLogLevel("ROOT", LogLevel.DEBUG). }
false;public;0;8;;@Test public void setLoggerUsingActuatorV2JsonShouldSetLogLevel() {     client.post().uri("/actuator/loggers/ROOT").contentType(MediaType.parseMediaType(ActuatorMediaType.V2_JSON)).syncBody(Collections.singletonMap("configuredLevel", "debug")).exchange().expectStatus().isNoContent().     verify(this.loggingSystem).setLogLevel("ROOT", LogLevel.DEBUG). }
false;public;0;8;;@Test public void setLoggerWithWrongLogLevelResultInBadRequestResponse() {     client.post().uri("/actuator/loggers/ROOT").contentType(MediaType.APPLICATION_JSON).syncBody(Collections.singletonMap("configuredLevel", "other")).exchange().expectStatus().isBadRequest().     verifyZeroInteractions(this.loggingSystem). }
false;public;0;8;;@Test public void setLoggerWithNullLogLevel() {     client.post().uri("/actuator/loggers/ROOT").contentType(MediaType.parseMediaType(ActuatorMediaType.V2_JSON)).syncBody(Collections.singletonMap("configuredLevel", null)).exchange().expectStatus().isNoContent().     verify(this.loggingSystem).setLogLevel("ROOT", null). }
false;public;0;7;;@Test public void setLoggerWithNoLogLevel() {     client.post().uri("/actuator/loggers/ROOT").contentType(MediaType.parseMediaType(ActuatorMediaType.V2_JSON)).syncBody(Collections.emptyMap()).exchange().expectStatus().isNoContent().     verify(this.loggingSystem).setLogLevel("ROOT", null). }
false;public;0;9;;@Test public void logLevelForLoggerWithNameThatCouldBeMistakenForAPathExtension() {     given(this.loggingSystem.getLoggerConfiguration("com.png")).willReturn(new LoggerConfiguration("com.png", null, LogLevel.DEBUG)).     client.get().uri("/actuator/loggers/com.png").exchange().expectStatus().isOk().expectBody().jsonPath("$.length()").isEqualTo(2).jsonPath("configuredLevel").isEqualTo(null).jsonPath("effectiveLevel").isEqualTo("DEBUG"). }
false;private;1;5;;private JSONArray jsonArrayOf(Object... entries) {     JSONArray array = new JSONArray().     array.addAll(Arrays.asList(entries)).     return array. }
false;public;0;4;;@Bean public LoggingSystem loggingSystem() {     return mock(LoggingSystem.class). }
false;public;1;4;;@Bean public LoggersEndpoint endpoint(LoggingSystem loggingSystem) {     return new LoggersEndpoint(loggingSystem). }
