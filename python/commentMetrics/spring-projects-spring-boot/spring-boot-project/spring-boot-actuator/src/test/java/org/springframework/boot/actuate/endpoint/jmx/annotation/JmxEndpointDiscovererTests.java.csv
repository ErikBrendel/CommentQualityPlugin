commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getEndpointsWhenNoEndpointBeansShouldReturnEmptyCollection() {     load(EmptyConfiguration.class, (discoverer) -> assertThat(discoverer.getEndpoints()).isEmpty()). }
false;public;0;35;;@Test public void getEndpointsShouldDiscoverStandardEndpoints() {     load(TestEndpoint.class, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<String, JmxOperation> operationByName = mapOperations(endpoints.get(EndpointId.of("test")).getOperations()).         assertThat(operationByName).containsOnlyKeys("getAll", "getSomething", "update", "deleteSomething").         JmxOperation getAll = operationByName.get("getAll").         assertThat(getAll.getDescription()).isEqualTo("Invoke getAll for endpoint test").         assertThat(getAll.getOutputType()).isEqualTo(Object.class).         assertThat(getAll.getParameters()).isEmpty().         JmxOperation getSomething = operationByName.get("getSomething").         assertThat(getSomething.getDescription()).isEqualTo("Invoke getSomething for endpoint test").         assertThat(getSomething.getOutputType()).isEqualTo(String.class).         assertThat(getSomething.getParameters()).hasSize(1).         hasDefaultParameter(getSomething, 0, String.class).         JmxOperation update = operationByName.get("update").         assertThat(update.getDescription()).isEqualTo("Invoke update for endpoint test").         assertThat(update.getOutputType()).isEqualTo(Void.TYPE).         assertThat(update.getParameters()).hasSize(2).         hasDefaultParameter(update, 0, String.class).         hasDefaultParameter(update, 1, String.class).         JmxOperation deleteSomething = operationByName.get("deleteSomething").         assertThat(deleteSomething.getDescription()).isEqualTo("Invoke deleteSomething for endpoint test").         assertThat(deleteSomething.getOutputType()).isEqualTo(Void.TYPE).         assertThat(deleteSomething.getParameters()).hasSize(1).         hasDefaultParameter(deleteSomething, 0, String.class).     }). }
false;public;0;8;;@Test public void getEndpointsWhenHasFilteredEndpointShouldOnlyDiscoverJmxEndpoints() {     load(MultipleEndpointsConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test"), EndpointId.of("jmx")).     }). }
false;public;0;7;;@Test public void getEndpointsWhenJmxExtensionIsMissingEndpointShouldThrowException() {     load(TestJmxEndpointExtension.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Invalid extension 'jmxEndpointDiscovererTests.TestJmxEndpointExtension': no endpoint found with id 'test'")). }
false;public;0;8;;@Test public void getEndpointsWhenHasJmxExtensionShouldOverrideStandardEndpoint() {     load(OverriddenOperationJmxEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         assertJmxTestEndpoint(endpoints.get(EndpointId.of("test"))).     }). }
false;public;0;15;;@Test public void getEndpointsWhenHasJmxExtensionWithNewOperationAddsExtraOperation() {     load(AdditionalOperationJmxEndpointConfiguration.class, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<String, JmxOperation> operationByName = mapOperations(endpoints.get(EndpointId.of("test")).getOperations()).         assertThat(operationByName).containsOnlyKeys("getAll", "getSomething", "update", "deleteSomething", "getAnother").         JmxOperation getAnother = operationByName.get("getAnother").         assertThat(getAnother.getDescription()).isEqualTo("Get another thing").         assertThat(getAnother.getOutputType()).isEqualTo(Object.class).         assertThat(getAnother.getParameters()).isEmpty().     }). }
false;public;0;15;;@Test public void getEndpointsWhenHasCacheWithTtlShouldCacheReadOperationWithTtlValue() {     load(TestEndpoint.class, (id) -> 500L, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<String, JmxOperation> operationByName = mapOperations(endpoints.get(EndpointId.of("test")).getOperations()).         assertThat(operationByName).containsOnlyKeys("getAll", "getSomething", "update", "deleteSomething").         JmxOperation getAll = operationByName.get("getAll").         assertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class).         assertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500).     }). }
false;public;0;23;;@Test public void getEndpointsShouldCacheReadOperations() {     load(AdditionalOperationJmxEndpointConfiguration.class, (id) -> 500L, (discoverer) -> {         Map<EndpointId, ExposableJmxEndpoint> endpoints = discover(discoverer).         assertThat(endpoints).containsOnlyKeys(EndpointId.of("test")).         Map<String, JmxOperation> operationByName = mapOperations(endpoints.get(EndpointId.of("test")).getOperations()).         assertThat(operationByName).containsOnlyKeys("getAll", "getSomething", "update", "deleteSomething", "getAnother").         JmxOperation getAll = operationByName.get("getAll").         assertThat(getInvoker(getAll)).isInstanceOf(CachingOperationInvoker.class).         assertThat(((CachingOperationInvoker) getInvoker(getAll)).getTimeToLive()).isEqualTo(500).         JmxOperation getAnother = operationByName.get("getAnother").         assertThat(getInvoker(getAnother)).isInstanceOf(CachingOperationInvoker.class).         assertThat(((CachingOperationInvoker) getInvoker(getAnother)).getTimeToLive()).isEqualTo(500).     }). }
false;public;0;7;;@Test public void getEndpointsWhenTwoExtensionsHaveTheSameEndpointTypeShouldThrowException() {     load(ClashingJmxEndpointConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Found multiple extensions for the endpoint bean testEndpoint (testExtensionOne, testExtensionTwo)")). }
false;public;0;7;;@Test public void getEndpointsWhenTwoStandardEndpointsHaveTheSameIdShouldThrowException() {     load(ClashingStandardEndpointConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Found two endpoints with the id 'test': ")). }
false;public;0;7;;@Test public void getEndpointsWhenWhenEndpointHasTwoOperationsWithTheSameNameShouldThrowException() {     load(ClashingOperationsEndpoint.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Unable to map duplicate endpoint operations: [MBean call 'getAll'] to jmxEndpointDiscovererTests.ClashingOperationsEndpoint")). }
false;public;0;7;;@Test public void getEndpointsWhenWhenExtensionHasTwoOperationsWithTheSameNameShouldThrowException() {     load(AdditionalClashingOperationsConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Unable to map duplicate endpoint operations: [MBean call 'getAll'] to testEndpoint (clashingOperationsJmxEndpointExtension)")). }
false;public;0;7;;@Test public void getEndpointsWhenExtensionIsNotCompatibleWithTheEndpointTypeShouldThrowException() {     load(InvalidJmxExtensionConfiguration.class, (discoverer) -> assertThatIllegalStateException().isThrownBy(discoverer::getEndpoints).withMessageContaining("Endpoint bean 'nonJmxEndpoint' cannot support the extension bean 'nonJmxJmxEndpointExtension'")). }
false;private;1;3;;private Object getInvoker(JmxOperation operation) {     return ReflectionTestUtils.getField(operation, "invoker"). }
false;private;1;30;;private void assertJmxTestEndpoint(ExposableJmxEndpoint endpoint) {     Map<String, JmxOperation> operationsByName = mapOperations(endpoint.getOperations()).     assertThat(operationsByName).containsOnlyKeys("getAll", "getSomething", "update", "deleteSomething").     JmxOperation getAll = operationsByName.get("getAll").     assertThat(getAll.getDescription()).isEqualTo("Get all the things").     assertThat(getAll.getOutputType()).isEqualTo(Object.class).     assertThat(getAll.getParameters()).isEmpty().     JmxOperation getSomething = operationsByName.get("getSomething").     assertThat(getSomething.getDescription()).isEqualTo("Get something based on a timeUnit").     assertThat(getSomething.getOutputType()).isEqualTo(String.class).     assertThat(getSomething.getParameters()).hasSize(1).     hasDocumentedParameter(getSomething, 0, "unitMs", Long.class, "Number of milliseconds").     JmxOperation update = operationsByName.get("update").     assertThat(update.getDescription()).isEqualTo("Update something based on bar").     assertThat(update.getOutputType()).isEqualTo(Void.TYPE).     assertThat(update.getParameters()).hasSize(2).     hasDocumentedParameter(update, 0, "foo", String.class, "Foo identifier").     hasDocumentedParameter(update, 1, "bar", String.class, "Bar value").     JmxOperation deleteSomething = operationsByName.get("deleteSomething").     assertThat(deleteSomething.getDescription()).isEqualTo("Delete something based on a timeUnit").     assertThat(deleteSomething.getOutputType()).isEqualTo(Void.TYPE).     assertThat(deleteSomething.getParameters()).hasSize(1).     hasDocumentedParameter(deleteSomething, 0, "unitMs", Long.class, "Number of milliseconds"). }
false;private;5;8;;private void hasDocumentedParameter(JmxOperation operation, int index, String name, Class<?> type, String description) {     assertThat(index).isLessThan(operation.getParameters().size()).     JmxOperationParameter parameter = operation.getParameters().get(index).     assertThat(parameter.getName()).isEqualTo(name).     assertThat(parameter.getType()).isEqualTo(type).     assertThat(parameter.getDescription()).isEqualTo(description). }
true;private;3;4;// FIXME rename ;// FIXME rename private void hasDefaultParameter(JmxOperation operation, int index, Class<?> type) {     JmxOperationParameter parameter = operation.getParameters().get(index).     assertThat(parameter.getType()).isEqualTo(type). }
false;private;1;7;;private Map<EndpointId, ExposableJmxEndpoint> discover(JmxEndpointDiscoverer discoverer) {     Map<EndpointId, ExposableJmxEndpoint> byId = new HashMap<>().     discoverer.getEndpoints().forEach((endpoint) -> byId.put(endpoint.getEndpointId(), endpoint)).     return byId. }
false;private;1;5;;private Map<String, JmxOperation> mapOperations(Collection<JmxOperation> operations) {     Map<String, JmxOperation> byName = new HashMap<>().     operations.forEach((operation) -> byName.put(operation.getName(), operation)).     return byName. }
false;private;2;3;;private void load(Class<?> configuration, Consumer<JmxEndpointDiscoverer> consumer) {     load(configuration, (id) -> null, consumer). }
false;private;3;13;;private void load(Class<?> configuration, Function<EndpointId, Long> timeToLive, Consumer<JmxEndpointDiscoverer> consumer) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(configuration)) {         ConversionServiceParameterValueMapper parameterMapper = new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance()).         JmxEndpointDiscoverer discoverer = new JmxEndpointDiscoverer(context, parameterMapper, Collections.singleton(new CachingOperationInvokerAdvisor(timeToLive)), Collections.emptyList()).         consumer.accept(discoverer).     } }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestJmxEndpoint testJmxEndpoint() {     return new TestJmxEndpoint(). }
false;public;0;4;;@Bean public NonJmxEndpoint nonJmxEndpoint() {     return new NonJmxEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestJmxEndpointExtension testJmxEndpointExtension() {     return new TestJmxEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public AdditionalOperationJmxEndpointExtension additionalOperationJmxEndpointExtension() {     return new AdditionalOperationJmxEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public ClashingOperationsJmxEndpointExtension clashingOperationsJmxEndpointExtension() {     return new ClashingOperationsJmxEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestJmxEndpointExtension testExtensionOne() {     return new TestJmxEndpointExtension(). }
false;public;0;4;;@Bean public TestJmxEndpointExtension testExtensionTwo() {     return new TestJmxEndpointExtension(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointTwo() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpoint testEndpointOne() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public NonJmxEndpoint nonJmxEndpoint() {     return new NonJmxEndpoint(). }
false;public;0;4;;@Bean public NonJmxJmxEndpointExtension nonJmxJmxEndpointExtension() {     return new NonJmxJmxEndpointExtension(). }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public String getSomething(TimeUnit timeUnit) {     return null. }
false;public;2;4;;@WriteOperation public void update(String foo, String bar) { }
false;public;1;4;;@DeleteOperation public void deleteSomething(TimeUnit timeUnit) { }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;5;;@ManagedOperation(description = "Get all the things") @ReadOperation public Object getAll() {     return null. }
false;public;1;7;;@ReadOperation @ManagedOperation(description = "Get something based on a timeUnit") @ManagedOperationParameters({ @ManagedOperationParameter(name = "unitMs", description = "Number of milliseconds") }) public String getSomething(Long timeUnit) {     return null. }
false;public;2;8;;@WriteOperation @ManagedOperation(description = "Update something based on bar") @ManagedOperationParameters({ @ManagedOperationParameter(name = "foo", description = "Foo identifier"), @ManagedOperationParameter(name = "bar", description = "Bar value") }) public void update(String foo, String bar) { }
false;public;1;7;;@DeleteOperation @ManagedOperation(description = "Delete something based on a timeUnit") @ManagedOperationParameters({ @ManagedOperationParameter(name = "unitMs", description = "Number of milliseconds") }) public void deleteSomething(Long timeUnit) { }
false;public;0;5;;@ManagedOperation(description = "Get another thing") @ReadOperation public Object getAnother() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getAll(String param) {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;1;4;;@ReadOperation public Object getAll(String param) {     return null. }
false;public;0;4;;@ReadOperation public Object getData() {     return null. }
false;public;0;4;;@ReadOperation public Object getSomething() {     return null. }
