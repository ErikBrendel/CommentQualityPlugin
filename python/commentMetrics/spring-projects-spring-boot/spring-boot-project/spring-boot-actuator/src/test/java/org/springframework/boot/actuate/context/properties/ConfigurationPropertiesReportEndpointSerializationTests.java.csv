commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testNaming() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(FooConfig.class).withPropertyValues("foo.name:foo").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo).isNotNull().         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(2).         assertThat(map.get("name")).isEqualTo("foo").     }). }
false;public;0;21;;@Test @SuppressWarnings("unchecked") public void testNestedNaming() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(FooConfig.class).withPropertyValues("foo.bar.name:foo").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo).isNotNull().         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(2).         assertThat(((Map<String, Object>) map.get("bar")).get("name")).isEqualTo("foo").     }). }
false;public;0;23;;@Test @SuppressWarnings("unchecked") public void testSelfReferentialProperty() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(SelfReferentialConfig.class).withPropertyValues("foo.name:foo").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).containsOnlyKeys("bar", "name").         assertThat(map).containsEntry("name", "foo").         Map<String, Object> bar = (Map<String, Object>) map.get("bar").         assertThat(bar).containsOnlyKeys("name").         assertThat(bar).containsEntry("name", "123456").     }). }
false;public;0;18;;@Test public void testCycle() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(CycleConfig.class).     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor cycle = applicationProperties.getContexts().get(context.getId()).getBeans().get("cycle").         assertThat(cycle.getPrefix()).isEqualTo("cycle").         Map<String, Object> map = cycle.getProperties().         assertThat(map).isNotNull().         assertThat(map).containsOnlyKeys("error").         assertThat(map).containsEntry("error", "Cannot serialize 'cycle'").     }). }
false;public;0;22;;@Test @SuppressWarnings("unchecked") public void testMap() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(MapConfig.class).withPropertyValues("foo.map.name:foo").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor fooProperties = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(fooProperties).isNotNull().         assertThat(fooProperties.getPrefix()).isEqualTo("foo").         Map<String, Object> map = fooProperties.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(3).         assertThat(((Map<String, Object>) map.get("map")).get("name")).isEqualTo("foo").     }). }
false;public;0;19;;@Test public void testEmptyMapIsNotAdded() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(MapConfig.class).     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo).isNotNull().         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(2).         assertThat(map).doesNotContainKey("map").     }). }
false;public;0;21;;@Test @SuppressWarnings("unchecked") public void testList() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(ListConfig.class).withPropertyValues("foo.list[0]:foo").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo).isNotNull().         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(3).         assertThat(((List<String>) map.get("list")).get(0)).isEqualTo("foo").     }). }
false;public;0;20;;@Test public void testInetAddress() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(AddressedConfig.class).withPropertyValues("foo.address:192.168.1.10").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo).isNotNull().         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> map = foo.getProperties().         assertThat(map).isNotNull().         assertThat(map).hasSize(3).         assertThat(map.get("address")).isEqualTo("192.168.1.10").     }). }
false;public;0;22;;@Test @SuppressWarnings("unchecked") public void testInitializedMapAndList() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(InitializedMapAndListPropertiesConfig.class).withPropertyValues("foo.map.entryOne:true", "foo.list[0]:abc").     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor foo = applicationProperties.getContexts().get(context.getId()).getBeans().get("foo").         assertThat(foo.getPrefix()).isEqualTo("foo").         Map<String, Object> propertiesMap = foo.getProperties().         assertThat(propertiesMap).containsOnlyKeys("bar", "name", "map", "list").         Map<String, Object> map = (Map<String, Object>) propertiesMap.get("map").         assertThat(map).containsOnly(entry("entryOne", true)).         List<String> list = (List<String>) propertiesMap.get("list").         assertThat(list).containsExactly("abc").     }). }
false;public;0;16;;@Test public void hikariDataSourceConfigurationPropertiesBeanCanBeSerialized() {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(HikariDataSourceConfig.class).     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         ApplicationConfigurationProperties applicationProperties = endpoint.configurationProperties().         ConfigurationPropertiesBeanDescriptor hikariDataSource = applicationProperties.getContexts().get(context.getId()).getBeans().get("hikariDataSource").         Map<String, Object> nestedProperties = hikariDataSource.getProperties().         assertThat(nestedProperties).doesNotContainKey("error").     }). }
false;public;0;4;;@Bean public ConfigurationPropertiesReportEndpoint endpoint() {     return new ConfigurationPropertiesReportEndpoint(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public Foo foo() {     return new Foo(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public SelfReferential foo() {     return new SelfReferential(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "bar") public SelfReferential foo() {     return new SelfReferential(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public MapHolder foo() {     return new MapHolder(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public ListHolder foo() {     return new ListHolder(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "spam") public MapHolder foo() {     return new MapHolder(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public Addressed foo() {     return new Addressed(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "foo") public InitializedMapAndListProperties foo() {     return new InitializedMapAndListProperties(). }
false;public;0;3;;public Bar getBar() {     return this.bar. }
false;public;1;3;;public void setBar(Bar bar) {     this.bar = bar. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
true;public;0;3;// No setter so it doesn't appear in the report ;// No setter so it doesn't appear in the report public String getSummary() {     return "Name: " + this.name. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public Foo getSelf() {     return this.self. }
false;public;1;3;;public void setSelf(Foo self) {     this.self = self. }
false;public;0;3;;public Map<String, Object> getMap() {     return this.map. }
false;public;1;3;;public void setMap(Map<String, Object> map) {     this.map = map. }
false;public;0;3;;public List<String> getList() {     return this.list. }
false;public;1;3;;public void setList(List<String> list) {     this.list = list. }
false;public;0;3;;public InetAddress getAddress() {     return this.address. }
false;public;1;3;;public void setAddress(InetAddress address) {     this.address = address. }
false;public;0;3;;public Map<String, Boolean> getMap() {     return this.map. }
false;public;0;3;;public List<String> getList() {     return this.list. }
false;public;0;3;;public Alpha getAlpha() {     return this.alpha. }
false;public;0;3;;public Cycle getCycle() {     return this.cycle. }
false;public;0;6;;@Bean // gh-11037 @ConfigurationProperties(prefix = "cycle") public Cycle cycle() {     return new Cycle(). }
false;public;0;4;;@Bean public ConfigurationPropertiesReportEndpoint endpoint() {     return new ConfigurationPropertiesReportEndpoint(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "test.datasource") public HikariDataSource hikariDataSource() {     return new HikariDataSource(). }
