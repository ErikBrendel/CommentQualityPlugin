commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void configurationPropertiesAreReturned() {     load((context, properties) -> {         assertThat(properties.getBeans().size()).isGreaterThan(0).         ConfigurationPropertiesBeanDescriptor nestedProperties = properties.getBeans().get("testProperties").         assertThat(nestedProperties).isNotNull().         assertThat(nestedProperties.getPrefix()).isEqualTo("test").         assertThat(nestedProperties.getProperties()).isNotEmpty().     }). }
false;public;0;8;;@Test public void entriesWithNullValuesAreNotIncluded() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties).doesNotContainKey("nullValue").     }). }
false;public;0;10;;@Test public void defaultKeySanitization() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties).isNotNull().         assertThat(nestedProperties.get("dbPassword")).isEqualTo("******").         assertThat(nestedProperties.get("myTestProperty")).isEqualTo("654321").     }). }
false;public;0;10;;@Test public void customKeySanitization() {     load("property", (context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties).isNotNull().         assertThat(nestedProperties.get("dbPassword")).isEqualTo("123456").         assertThat(nestedProperties.get("myTestProperty")).isEqualTo("******").     }). }
false;public;0;10;;@Test public void customPatternKeySanitization() {     load(".*pass.*", (context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties).isNotNull().         assertThat(nestedProperties.get("dbPassword")).isEqualTo("******").         assertThat(nestedProperties.get("myTestProperty")).isEqualTo("654321").     }). }
false;public;0;18;;@Test @SuppressWarnings("unchecked") public void keySanitizationWithCustomPatternUsingCompositeKeys() {     // gh-4415     load(Arrays.asList(".*\\.secrets\\..*", ".*\\.hidden\\..*"), (context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties).isNotNull().         Map<String, Object> secrets = (Map<String, Object>) nestedProperties.get("secrets").         Map<String, Object> hidden = (Map<String, Object>) nestedProperties.get("hidden").         assertThat(secrets.get("mine")).isEqualTo("******").         assertThat(secrets.get("yours")).isEqualTo("******").         assertThat(hidden.get("mine")).isEqualTo("******").     }). }
false;public;0;8;;@Test public void nonCamelCaseProperty() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("myURL")).isEqualTo("https://example.com").     }). }
false;public;0;8;;@Test public void simpleBoolean() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("simpleBoolean")).isEqualTo(true).     }). }
false;public;0;8;;@Test public void mixedBoolean() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("mixedBoolean")).isEqualTo(true).     }). }
false;public;0;8;;@Test public void mixedCase() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("mIxedCase")).isEqualTo("mixed").     }). }
false;public;0;8;;@Test public void singleLetterProperty() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("z")).isEqualTo("zzz").     }). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void listsAreSanitized() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("listItems")).isInstanceOf(List.class).         List<Object> list = (List<Object>) nestedProperties.get("listItems").         assertThat(list).hasSize(1).         Map<String, Object> item = (Map<String, Object>) list.get(0).         assertThat(item.get("somePassword")).isEqualTo("******").     }). }
false;public;0;16;;@Test @SuppressWarnings("unchecked") public void listsOfListsAreSanitized() {     load((context, properties) -> {         Map<String, Object> nestedProperties = properties.getBeans().get("testProperties").getProperties().         assertThat(nestedProperties.get("listOfListItems")).isInstanceOf(List.class).         List<List<Object>> listOfLists = (List<List<Object>>) nestedProperties.get("listOfListItems").         assertThat(listOfLists).hasSize(1).         List<Object> list = listOfLists.get(0).         assertThat(list).hasSize(1).         Map<String, Object> item = (Map<String, Object>) list.get(0).         assertThat(item.get("somePassword")).isEqualTo("******").     }). }
false;private;1;4;;private void load(BiConsumer<ApplicationContext, ContextConfigurationProperties> properties) {     load(Collections.emptyList(), properties). }
false;private;2;4;;private void load(String keyToSanitize, BiConsumer<ApplicationContext, ContextConfigurationProperties> properties) {     load(Collections.singletonList(keyToSanitize), properties). }
false;private;2;14;;private void load(List<String> keysToSanitize, BiConsumer<ApplicationContext, ContextConfigurationProperties> properties) {     ApplicationContextRunner contextRunner = new ApplicationContextRunner().withUserConfiguration(Config.class).     contextRunner.run((context) -> {         ConfigurationPropertiesReportEndpoint endpoint = context.getBean(ConfigurationPropertiesReportEndpoint.class).         if (!CollectionUtils.isEmpty(keysToSanitize)) {             endpoint.setKeysToSanitize(StringUtils.toStringArray(keysToSanitize)).         }         properties.accept(context, endpoint.configurationProperties().getContexts().get(context.getId())).     }). }
false;public;0;4;;@Bean public TestProperties testProperties() {     return new TestProperties(). }
false;public;0;4;;@Bean public ConfigurationPropertiesReportEndpoint endpoint() {     return new ConfigurationPropertiesReportEndpoint(). }
false;public;0;4;;@Bean public TestProperties testProperties() {     return new TestProperties(). }
false;public;0;3;;public String getDbPassword() {     return this.dbPassword. }
false;public;1;3;;public void setDbPassword(String dbPassword) {     this.dbPassword = dbPassword. }
false;public;0;3;;public String getMyTestProperty() {     return this.myTestProperty. }
false;public;1;3;;public void setMyTestProperty(String myTestProperty) {     this.myTestProperty = myTestProperty. }
false;public;0;3;;public String getMyURL() {     return this.myURL. }
false;public;1;3;;public void setMyURL(String myURL) {     this.myURL = myURL. }
false;public;0;3;;public boolean isSimpleBoolean() {     return this.simpleBoolean. }
false;public;1;3;;public void setSimpleBoolean(boolean simpleBoolean) {     this.simpleBoolean = simpleBoolean. }
false;public;0;3;;public boolean isMixedBoolean() {     return (this.mixedBoolean != null) ? this.mixedBoolean : false. }
false;public;1;3;;public void setMixedBoolean(Boolean mixedBoolean) {     this.mixedBoolean = mixedBoolean. }
false;public;0;3;;public String getmIxedCase() {     return this.mIxedCase. }
false;public;1;3;;public void setmIxedCase(String mIxedCase) {     this.mIxedCase = mIxedCase. }
false;public;0;3;;public String getZ() {     return this.z. }
false;public;1;3;;public void setZ(String z) {     this.z = z. }
false;public;0;3;;public Map<String, Object> getSecrets() {     return this.secrets. }
false;public;1;3;;public void setSecrets(Map<String, Object> secrets) {     this.secrets = secrets. }
false;public;0;3;;public Hidden getHidden() {     return this.hidden. }
false;public;1;3;;public void setHidden(Hidden hidden) {     this.hidden = hidden. }
false;public;0;3;;public List<ListItem> getListItems() {     return this.listItems. }
false;public;1;3;;public void setListItems(List<ListItem> listItems) {     this.listItems = listItems. }
false;public;0;3;;public List<List<ListItem>> getListOfListItems() {     return this.listOfListItems. }
false;public;1;3;;public void setListOfListItems(List<List<ListItem>> listOfListItems) {     this.listOfListItems = listOfListItems. }
false;public;0;3;;public String getNullValue() {     return this.nullValue. }
false;public;1;3;;public void setNullValue(String nullValue) {     this.nullValue = nullValue. }
false;public;0;3;;public String getMine() {     return this.mine. }
false;public;1;3;;public void setMine(String mine) {     this.mine = mine. }
false;public;0;3;;public String getSomePassword() {     return this.somePassword. }
false;public;1;3;;public void setSomePassword(String somePassword) {     this.somePassword = somePassword. }
