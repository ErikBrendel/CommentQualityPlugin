commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void before() {     this.session = mock(Session.class).     SessionFactory sessionFactory = mock(SessionFactory.class).     given(sessionFactory.openSession()).willReturn(this.session).     this.neo4jHealthIndicator = new Neo4jHealthIndicator(sessionFactory). }
false;public;0;17;;@Test public void neo4jUp() {     Result result = mock(Result.class).     given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())).willReturn(result).     int nodeCount = 500.     Map<String, Object> expectedCypherDetails = new HashMap<>().     expectedCypherDetails.put("nodes", nodeCount).     List<Map<String, Object>> queryResults = new ArrayList<>().     queryResults.add(expectedCypherDetails).     given(result.queryResults()).willReturn(queryResults).     Health health = this.neo4jHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.UP).     Map<String, Object> details = health.getDetails().     int nodeCountFromDetails = (int) details.get("nodes").     Assert.assertEquals(nodeCount, nodeCountFromDetails). }
false;public;0;9;;@Test public void neo4jDown() {     CypherException cypherException = new CypherException("Neo.ClientError.Statement.SyntaxError", "Error executing Cypher").     given(this.session.query(Neo4jHealthIndicator.CYPHER, Collections.emptyMap())).willThrow(cypherException).     Health health = this.neo4jHealthIndicator.health().     assertThat(health.getStatus()).isEqualTo(Status.DOWN). }
