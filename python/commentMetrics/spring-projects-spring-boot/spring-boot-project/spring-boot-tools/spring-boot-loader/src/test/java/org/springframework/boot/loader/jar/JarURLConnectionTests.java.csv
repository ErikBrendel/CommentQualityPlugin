commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     this.rootJarFile = this.temporaryFolder.newFile().     TestJarCreator.createTestJar(this.rootJarFile).     this.jarFile = new JarFile(this.rootJarFile). }
false;public;0;6;;@Test public void connectionToRootUsingAbsoluteUrl() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/").     assertThat(JarURLConnection.get(url, this.jarFile).getContent()).isSameAs(this.jarFile). }
false;public;0;6;;@Test public void connectionToRootUsingRelativeUrl() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/").     assertThat(JarURLConnection.get(url, this.jarFile).getContent()).isSameAs(this.jarFile). }
false;public;0;6;;@Test public void connectionToEntryUsingAbsoluteUrl() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/1.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 1 })). }
false;public;0;6;;@Test public void connectionToEntryUsingRelativeUrl() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/1.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 1 })). }
false;public;0;7;;@Test public void connectionToEntryUsingAbsoluteUrlWithFileColonSlashSlashPrefix() throws Exception {     URL url = new URL("jar:file:/" + getAbsolutePath() + "!/1.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 1 })). }
false;public;0;6;;@Test public void connectionToEntryUsingAbsoluteUrlForNestedEntry() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/nested.jar!/3.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;6;;@Test public void connectionToEntryUsingRelativeUrlForNestedEntry() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/nested.jar!/3.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;9;;@Test public void connectionToEntryUsingAbsoluteUrlForEntryFromNestedJarFile() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/nested.jar!/3.dat").     JarFile nested = this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar")).     assertThat(JarURLConnection.get(url, nested).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;9;;@Test public void connectionToEntryUsingRelativeUrlForEntryFromNestedJarFile() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/nested.jar!/3.dat").     JarFile nested = this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar")).     assertThat(JarURLConnection.get(url, nested).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;10;;@Test public void connectionToEntryInNestedJarFromUrlThatUsesExistingUrlAsContext() throws Exception {     URL url = new URL(new URL("jar", null, -1, "file:" + getAbsolutePath() + "!/nested.jar!/", new Handler()), "/3.dat").     JarFile nested = this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar")).     assertThat(JarURLConnection.get(url, nested).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;6;;@Test public void connectionToEntryWithSpaceNestedEntry() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/space nested.jar!/3.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;7;;@Test public void connectionToEntryWithEncodedSpaceNestedEntry() throws Exception {     URL url = new URL("jar:file:" + getRelativePath() + "!/space%20nested.jar!/3.dat").     assertThat(JarURLConnection.get(url, this.jarFile).getInputStream()).hasSameContentAs(new ByteArrayInputStream(new byte[] { 3 })). }
false;public;0;9;;@Test public void connectionToEntryUsingWrongAbsoluteUrlForEntryFromNestedJarFile() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/w.jar!/3.dat").     JarFile nested = this.jarFile.getNestedJarFile(this.jarFile.getEntry("nested.jar")).     assertThatExceptionOfType(FileNotFoundException.class).isThrownBy(JarURLConnection.get(url, nested)::getInputStream). }
false;public;0;6;;@Test public void getContentLengthReturnsLengthOfUnderlyingEntry() throws Exception {     URL url = new URL(new URL("jar", null, -1, "file:" + getAbsolutePath() + "!/nested.jar!/", new Handler()), "/3.dat").     assertThat(url.openConnection().getContentLength()).isEqualTo(1). }
false;public;0;6;;@Test public void getContentLengthLongReturnsLengthOfUnderlyingEntry() throws Exception {     URL url = new URL(new URL("jar", null, -1, "file:" + getAbsolutePath() + "!/nested.jar!/", new Handler()), "/3.dat").     assertThat(url.openConnection().getContentLengthLong()).isEqualTo(1). }
false;public;0;7;;@Test public void getLastModifiedReturnsLastModifiedTimeOfJarEntry() throws Exception {     URL url = new URL("jar:file:" + getAbsolutePath() + "!/1.dat").     JarURLConnection connection = JarURLConnection.get(url, this.jarFile).     assertThat(connection.getLastModified()).isEqualTo(connection.getJarEntry().getTime()). }
false;public;0;5;;@Test public void jarEntryBasicName() {     assertThat(new JarEntryName(new StringSequence("a/b/C.class")).toString()).isEqualTo("a/b/C.class"). }
false;public;0;5;;@Test public void jarEntryNameWithSingleByteEncodedCharacters() {     assertThat(new JarEntryName(new StringSequence("%61/%62/%43.class")).toString()).isEqualTo("a/b/C.class"). }
false;public;0;5;;@Test public void jarEntryNameWithDoubleByteEncodedCharacters() {     assertThat(new JarEntryName(new StringSequence("%c3%a1/b/C.class")).toString()).isEqualTo("\u00e1/b/C.class"). }
false;public;0;6;;@Test public void jarEntryNameWithMixtureOfEncodedAndUnencodedDoubleByteCharacters() {     assertThat(new JarEntryName(new StringSequence("%c3%a1/b/\u00c7.class")).toString()).isEqualTo("\u00e1/b/\u00c7.class"). }
false;private;0;3;;private String getAbsolutePath() {     return this.rootJarFile.getAbsolutePath().replace('\\', '/'). }
false;private;0;3;;private String getRelativePath() {     return this.rootJarFile.getPath().replace('\\', '/'). }
