commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() throws Exception {     this.jarFile = this.temporaryFolder.newFile().     TestJarCreator.createTestJar(this.jarFile).     this.jarData = new RandomAccessDataFile(this.jarFile). }
false;public;0;10;;@Test public void visitsInOrder() throws Exception {     MockCentralDirectoryVisitor visitor = new MockCentralDirectoryVisitor().     CentralDirectoryParser parser = new CentralDirectoryParser().     parser.addVisitor(visitor).     parser.parse(this.jarData, false).     List<String> invocations = visitor.getInvocations().     assertThat(invocations).startsWith("visitStart").endsWith("visitEnd").contains("visitFileHeader"). }
false;public;0;21;;@Test public void visitRecords() throws Exception {     Collector collector = new Collector().     CentralDirectoryParser parser = new CentralDirectoryParser().     parser.addVisitor(collector).     parser.parse(this.jarData, false).     Iterator<CentralDirectoryFileHeader> headers = collector.getHeaders().iterator().     assertThat(headers.next().getName().toString()).isEqualTo("META-INF/").     assertThat(headers.next().getName().toString()).isEqualTo("META-INF/MANIFEST.MF").     assertThat(headers.next().getName().toString()).isEqualTo("1.dat").     assertThat(headers.next().getName().toString()).isEqualTo("2.dat").     assertThat(headers.next().getName().toString()).isEqualTo("d/").     assertThat(headers.next().getName().toString()).isEqualTo("d/9.dat").     assertThat(headers.next().getName().toString()).isEqualTo("special/").     assertThat(headers.next().getName().toString()).isEqualTo("special/\u00EB.dat").     assertThat(headers.next().getName().toString()).isEqualTo("nested.jar").     assertThat(headers.next().getName().toString()).isEqualTo("another-nested.jar").     assertThat(headers.next().getName().toString()).isEqualTo("space nested.jar").     assertThat(headers.next().getName().toString()).isEqualTo("multi-release.jar").     assertThat(headers.hasNext()).isFalse(). }
false;public;2;4;;@Override public void visitStart(CentralDirectoryEndRecord endRecord, RandomAccessData centralDirectoryData) { }
false;public;2;5;;@Override public void visitFileHeader(CentralDirectoryFileHeader fileHeader, int dataOffset) {     this.headers.add(fileHeader.clone()). }
false;public;0;3;;@Override public void visitEnd() { }
false;public;0;3;;public List<CentralDirectoryFileHeader> getHeaders() {     return this.headers. }
false;public;2;5;;@Override public void visitStart(CentralDirectoryEndRecord endRecord, RandomAccessData centralDirectoryData) {     this.invocations.add("visitStart"). }
false;public;2;5;;@Override public void visitFileHeader(CentralDirectoryFileHeader fileHeader, int dataOffset) {     this.invocations.add("visitFileHeader"). }
false;public;0;4;;@Override public void visitEnd() {     this.invocations.add("visitEnd"). }
false;public;0;3;;public List<String> getInvocations() {     return this.invocations. }
