commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void createWhenSourceIsNullShouldThrowException() {     assertThatNullPointerException().isThrownBy(() -> new StringSequence(null)).withMessage("Source must not be null"). }
false;public;0;5;;@Test public void createWithIndexWhenSourceIsNullShouldThrowException() {     assertThatNullPointerException().isThrownBy(() -> new StringSequence(null, 0, 0)).withMessage("Source must not be null"). }
false;public;0;5;;@Test public void createWhenStartIsLessThanZeroShouldThrowException() {     assertThatExceptionOfType(StringIndexOutOfBoundsException.class).isThrownBy(() -> new StringSequence("x", -1, 0)). }
false;public;0;5;;@Test public void createWhenEndIsGreaterThanLengthShouldThrowException() {     assertThatExceptionOfType(StringIndexOutOfBoundsException.class).isThrownBy(() -> new StringSequence("x", 0, 2)). }
false;public;0;4;;@Test public void createFromString() {     assertThat(new StringSequence("test").toString()).isEqualTo("test"). }
false;public;0;5;;@Test public void subSequenceWithJustStartShouldReturnSubSequence() {     assertThat(new StringSequence("smiles").subSequence(1).toString()).isEqualTo("miles"). }
false;public;0;7;;@Test public void subSequenceShouldReturnSubSequence() {     assertThat(new StringSequence("hamburger").subSequence(4, 8).toString()).isEqualTo("urge").     assertThat(new StringSequence("smiles").subSequence(1, 5).toString()).isEqualTo("mile"). }
false;public;0;5;;@Test public void subSequenceWhenCalledMultipleTimesShouldReturnSubSequence() {     assertThat(new StringSequence("hamburger").subSequence(4, 8).subSequence(1, 3).toString()).isEqualTo("rg"). }
false;public;0;8;;@Test public void subSequenceWhenEndPastExistingEndShouldThrowException() {     StringSequence sequence = new StringSequence("abcde").subSequence(1, 4).     assertThat(sequence.toString()).isEqualTo("bcd").     assertThat(sequence.subSequence(2, 3).toString()).isEqualTo("d").     assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> sequence.subSequence(3, 4)). }
false;public;0;8;;@Test public void subSequenceWhenStartPastExistingEndShouldThrowException() {     StringSequence sequence = new StringSequence("abcde").subSequence(1, 4).     assertThat(sequence.toString()).isEqualTo("bcd").     assertThat(sequence.subSequence(2, 3).toString()).isEqualTo("d").     assertThatExceptionOfType(IndexOutOfBoundsException.class).isThrownBy(() -> sequence.subSequence(4, 3)). }
false;public;0;4;;@Test public void isEmptyWhenEmptyShouldReturnTrue() {     assertThat(new StringSequence("").isEmpty()).isTrue(). }
false;public;0;4;;@Test public void isEmptyWhenNotEmptyShouldReturnFalse() {     assertThat(new StringSequence("x").isEmpty()).isFalse(). }
false;public;0;6;;@Test public void lengthShouldReturnLength() {     StringSequence sequence = new StringSequence("hamburger").     assertThat(sequence.length()).isEqualTo(9).     assertThat(sequence.subSequence(4, 8).length()).isEqualTo(4). }
false;public;0;8;;@Test public void charAtShouldReturnChar() {     StringSequence sequence = new StringSequence("hamburger").     assertThat(sequence.charAt(0)).isEqualTo('h').     assertThat(sequence.charAt(1)).isEqualTo('a').     assertThat(sequence.subSequence(4, 8).charAt(0)).isEqualTo('u').     assertThat(sequence.subSequence(4, 8).charAt(1)).isEqualTo('r'). }
false;public;0;7;;@Test public void indexOfCharShouldReturnIndexOf() {     StringSequence sequence = new StringSequence("aabbaacc").     assertThat(sequence.indexOf('a')).isEqualTo(0).     assertThat(sequence.indexOf('b')).isEqualTo(2).     assertThat(sequence.subSequence(2).indexOf('a')).isEqualTo(2). }
false;public;0;7;;@Test public void indexOfStringShouldReturnIndexOf() {     StringSequence sequence = new StringSequence("aabbaacc").     assertThat(sequence.indexOf("a")).isEqualTo(0).     assertThat(sequence.indexOf("b")).isEqualTo(2).     assertThat(sequence.subSequence(2).indexOf("a")).isEqualTo(2). }
false;public;0;7;;@Test public void indexOfStringFromIndexShouldReturnIndexOf() {     StringSequence sequence = new StringSequence("aabbaacc").     assertThat(sequence.indexOf("a", 2)).isEqualTo(4).     assertThat(sequence.indexOf("b", 3)).isEqualTo(3).     assertThat(sequence.subSequence(2).indexOf("a", 3)).isEqualTo(3). }
false;public;0;7;;@Test public void hashCodeShouldBeSameAsString() {     assertThat(new StringSequence("hamburger").hashCode()).isEqualTo("hamburger".hashCode()).     assertThat(new StringSequence("hamburger").subSequence(4, 8).hashCode()).isEqualTo("urge".hashCode()). }
false;public;0;7;;@Test public void equalsWhenSameContentShouldMatch() {     StringSequence a = new StringSequence("hamburger").subSequence(4, 8).     StringSequence b = new StringSequence("urge").     StringSequence c = new StringSequence("urgh").     assertThat(a).isEqualTo(b).isNotEqualTo(c). }
false;public;0;6;;@Test public void notEqualsWhenSequencesOfDifferentLength() {     StringSequence a = new StringSequence("abcd").     StringSequence b = new StringSequence("ef").     assertThat(a).isNotEqualTo(b). }
false;public;0;4;;@Test public void startsWithWhenExactMatch() {     assertThat(new StringSequence("abc").startsWith("abc")).isTrue(). }
false;public;0;4;;@Test public void startsWithWhenLongerAndStartsWith() {     assertThat(new StringSequence("abcd").startsWith("abc")).isTrue(). }
false;public;0;4;;@Test public void startsWithWhenLongerAndDoesNotStartWith() {     assertThat(new StringSequence("abcd").startsWith("abx")).isFalse(). }
false;public;0;5;;@Test public void startsWithWhenShorterAndDoesNotStartWith() {     assertThat(new StringSequence("ab").startsWith("abc")).isFalse().     assertThat(new StringSequence("ab").startsWith("c")).isFalse(). }
false;public;0;4;;@Test public void startsWithOffsetWhenExactMatch() {     assertThat(new StringSequence("xabc").startsWith("abc", 1)).isTrue(). }
false;public;0;4;;@Test public void startsWithOffsetWhenLongerAndStartsWith() {     assertThat(new StringSequence("xabcd").startsWith("abc", 1)).isTrue(). }
false;public;0;4;;@Test public void startsWithOffsetWhenLongerAndDoesNotStartWith() {     assertThat(new StringSequence("xabcd").startsWith("abx", 1)).isFalse(). }
false;public;0;5;;@Test public void startsWithOffsetWhenShorterAndDoesNotStartWith() {     assertThat(new StringSequence("xab").startsWith("abc", 1)).isFalse().     assertThat(new StringSequence("xab").startsWith("c", 1)).isFalse(). }
