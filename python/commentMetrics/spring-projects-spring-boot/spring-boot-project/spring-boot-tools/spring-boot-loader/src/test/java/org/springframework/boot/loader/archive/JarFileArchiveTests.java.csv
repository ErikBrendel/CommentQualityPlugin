commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() throws Exception {     setup(false). }
false;private;1;6;;private void setup(boolean unpackNested) throws Exception {     this.rootJarFile = this.temporaryFolder.newFile().     this.rootJarFileUrl = this.rootJarFile.toURI().toString().     TestJarCreator.createTestJar(this.rootJarFile, unpackNested).     this.archive = new JarFileArchive(this.rootJarFile). }
false;public;0;5;;@Test public void getManifest() throws Exception {     assertThat(this.archive.getManifest().getMainAttributes().getValue("Built-By")).isEqualTo("j1"). }
false;public;0;5;;@Test public void getEntries() {     Map<String, Archive.Entry> entries = getEntriesMap(this.archive).     assertThat(entries.size()).isEqualTo(12). }
false;public;0;5;;@Test public void getUrl() throws Exception {     URL url = this.archive.getUrl().     assertThat(url.toString()).isEqualTo("jar:" + this.rootJarFileUrl + "!/"). }
false;public;0;7;;@Test public void getNestedArchive() throws Exception {     Entry entry = getEntriesMap(this.archive).get("nested.jar").     Archive nested = this.archive.getNestedArchive(entry).     assertThat(nested.getUrl().toString()).isEqualTo("jar:" + this.rootJarFileUrl + "!/nested.jar!/"). }
false;public;0;8;;@Test public void getNestedUnpackedArchive() throws Exception {     setup(true).     Entry entry = getEntriesMap(this.archive).get("nested.jar").     Archive nested = this.archive.getNestedArchive(entry).     assertThat(nested.getUrl().toString()).startsWith("file:").     assertThat(nested.getUrl().toString()).endsWith("/nested.jar"). }
false;public;0;10;;@Test public void unpackedLocationsAreUniquePerArchive() throws Exception {     setup(true).     Entry entry = getEntriesMap(this.archive).get("nested.jar").     URL firstNested = this.archive.getNestedArchive(entry).getUrl().     setup(true).     entry = getEntriesMap(this.archive).get("nested.jar").     URL secondNested = this.archive.getNestedArchive(entry).getUrl().     assertThat(secondNested).isNotEqualTo(firstNested). }
false;public;0;11;;@Test public void unpackedLocationsFromSameArchiveShareSameParent() throws Exception {     setup(true).     File nested = new File(this.archive.getNestedArchive(getEntriesMap(this.archive).get("nested.jar")).getUrl().toURI()).     File anotherNested = new File(this.archive.getNestedArchive(getEntriesMap(this.archive).get("another-nested.jar")).getUrl().toURI()).     assertThat(nested.getParent()).isEqualTo(anotherNested.getParent()). }
false;public;0;7;;@Test public void zip64ArchivesAreHandledGracefully() throws IOException {     File file = this.temporaryFolder.newFile("test.jar").     FileCopyUtils.copy(writeZip64Jar(), file).     assertThatIllegalStateException().isThrownBy(() -> new JarFileArchive(file)).withMessageContaining("Zip64 archives are not supported"). }
false;public;0;23;;@Test public void nestedZip64ArchivesAreHandledGracefully() throws IOException {     File file = this.temporaryFolder.newFile("test.jar").     JarOutputStream output = new JarOutputStream(new FileOutputStream(file)).     JarEntry zip64JarEntry = new JarEntry("nested/zip64.jar").     output.putNextEntry(zip64JarEntry).     byte[] zip64JarData = writeZip64Jar().     zip64JarEntry.setSize(zip64JarData.length).     zip64JarEntry.setCompressedSize(zip64JarData.length).     zip64JarEntry.setMethod(ZipEntry.STORED).     CRC32 crc32 = new CRC32().     crc32.update(zip64JarData).     zip64JarEntry.setCrc(crc32.getValue()).     output.write(zip64JarData).     output.closeEntry().     output.close().     JarFileArchive jarFileArchive = new JarFileArchive(file).     assertThatIllegalStateException().isThrownBy(() -> jarFileArchive.getNestedArchive(getEntriesMap(jarFileArchive).get("nested/zip64.jar"))).withMessageContaining("Failed to get nested archive for entry nested/zip64.jar"). }
false;private;0;10;;private byte[] writeZip64Jar() throws IOException {     ByteArrayOutputStream bytes = new ByteArrayOutputStream().     JarOutputStream jarOutput = new JarOutputStream(bytes).     for (int i = 0. i < 65537. i++) {         jarOutput.putNextEntry(new JarEntry(i + ".dat")).         jarOutput.closeEntry().     }     jarOutput.close().     return bytes.toByteArray(). }
false;private;1;7;;private Map<String, Archive.Entry> getEntriesMap(Archive archive) {     Map<String, Archive.Entry> entries = new HashMap<>().     for (Archive.Entry entry : archive) {         entries.put(entry.getName(), entry).     }     return entries. }
