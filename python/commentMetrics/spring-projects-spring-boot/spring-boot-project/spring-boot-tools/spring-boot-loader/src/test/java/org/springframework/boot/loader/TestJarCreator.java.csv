commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void createTestJar(File file) throws Exception {     createTestJar(file, false). }
false;public,static;2;18;;public static void createTestJar(File file, boolean unpackNested) throws Exception {     FileOutputStream fileOutputStream = new FileOutputStream(file).     try (JarOutputStream jarOutputStream = new JarOutputStream(fileOutputStream)) {         writeManifest(jarOutputStream, "j1").         writeEntry(jarOutputStream, "1.dat", 1).         writeEntry(jarOutputStream, "2.dat", 2).         writeDirEntry(jarOutputStream, "d/").         writeEntry(jarOutputStream, "d/9.dat", 9).         writeDirEntry(jarOutputStream, "special/").         writeEntry(jarOutputStream, "special/\u00EB.dat", '\u00EB').         writeNestedEntry("nested.jar", unpackNested, jarOutputStream).         writeNestedEntry("another-nested.jar", unpackNested, jarOutputStream).         writeNestedEntry("space nested.jar", unpackNested, jarOutputStream).         writeNestedMultiReleaseEntry("multi-release.jar", unpackNested, jarOutputStream).     } }
false;private,static;3;4;;private static void writeNestedEntry(String name, boolean unpackNested, JarOutputStream jarOutputStream) throws Exception {     writeNestedEntry(name, unpackNested, jarOutputStream, false). }
false;private,static;3;4;;private static void writeNestedMultiReleaseEntry(String name, boolean unpackNested, JarOutputStream jarOutputStream) throws Exception {     writeNestedEntry(name, unpackNested, jarOutputStream, true). }
false;private,static;4;18;;private static void writeNestedEntry(String name, boolean unpackNested, JarOutputStream jarOutputStream, boolean multiRelease) throws Exception {     JarEntry nestedEntry = new JarEntry(name).     byte[] nestedJarData = getNestedJarData(multiRelease).     nestedEntry.setSize(nestedJarData.length).     nestedEntry.setCompressedSize(nestedJarData.length).     if (unpackNested) {         nestedEntry.setComment("UNPACK:0000000000000000000000000000000000000000").     }     CRC32 crc32 = new CRC32().     crc32.update(nestedJarData).     nestedEntry.setCrc(crc32.getValue()).     nestedEntry.setMethod(ZipEntry.STORED).     jarOutputStream.putNextEntry(nestedEntry).     jarOutputStream.write(nestedJarData).     jarOutputStream.closeEntry(). }
false;private,static;1;18;;private static byte[] getNestedJarData(boolean multiRelease) throws Exception {     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream().     JarOutputStream jarOutputStream = new JarOutputStream(byteArrayOutputStream).     writeManifest(jarOutputStream, "j2", multiRelease).     if (multiRelease) {         writeEntry(jarOutputStream, "multi-release.dat", 8).         writeEntry(jarOutputStream, "META-INF/versions/9/multi-release.dat", 9).         writeEntry(jarOutputStream, "META-INF/versions/10/multi-release.dat", 10).         writeEntry(jarOutputStream, "META-INF/versions/11/multi-release.dat", 11).     } else {         writeEntry(jarOutputStream, "3.dat", 3).         writeEntry(jarOutputStream, "4.dat", 4).         writeEntry(jarOutputStream, "\u00E4.dat", '\u00E4').     }     jarOutputStream.close().     return byteArrayOutputStream.toByteArray(). }
false;private,static;2;4;;private static void writeManifest(JarOutputStream jarOutputStream, String name) throws Exception {     writeManifest(jarOutputStream, name, false). }
false;private,static;3;14;;private static void writeManifest(JarOutputStream jarOutputStream, String name, boolean multiRelease) throws Exception {     writeDirEntry(jarOutputStream, "META-INF/").     Manifest manifest = new Manifest().     manifest.getMainAttributes().putValue("Built-By", name).     manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0").     if (multiRelease) {         manifest.getMainAttributes().putValue("Multi-Release", Boolean.toString(true)).     }     jarOutputStream.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF")).     manifest.write(jarOutputStream).     jarOutputStream.closeEntry(). }
false;private,static;2;5;;private static void writeDirEntry(JarOutputStream jarOutputStream, String name) throws IOException {     jarOutputStream.putNextEntry(new JarEntry(name)).     jarOutputStream.closeEntry(). }
false;private,static;3;6;;private static void writeEntry(JarOutputStream jarOutputStream, String name, int data) throws IOException {     jarOutputStream.putNextEntry(new JarEntry(name)).     jarOutputStream.write(new byte[] { (byte) data }).     jarOutputStream.closeEntry(). }
