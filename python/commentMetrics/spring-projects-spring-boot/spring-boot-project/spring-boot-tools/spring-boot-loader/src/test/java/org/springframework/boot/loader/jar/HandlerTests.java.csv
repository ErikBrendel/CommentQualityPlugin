commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void parseUrlWithJarRootContextAndAbsoluteSpecThatUsesContext() throws MalformedURLException {     String spec = "/entry.txt".     URL context = createUrl("file:example.jar!/").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:file:example.jar!/entry.txt"). }
false;public;0;8;;@Test public void parseUrlWithDirectoryEntryContextAndAbsoluteSpecThatUsesContext() throws MalformedURLException {     String spec = "/entry.txt".     URL context = createUrl("file:example.jar!/dir/").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:file:example.jar!/entry.txt"). }
false;public;0;8;;@Test public void parseUrlWithJarRootContextAndRelativeSpecThatUsesContext() throws MalformedURLException {     String spec = "entry.txt".     URL context = createUrl("file:example.jar!/").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:file:example.jar!/entry.txt"). }
false;public;0;9;;@Test public void parseUrlWithDirectoryEntryContextAndRelativeSpecThatUsesContext() throws MalformedURLException {     String spec = "entry.txt".     URL context = createUrl("file:example.jar!/dir/").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:file:example.jar!/dir/entry.txt"). }
false;public;0;9;;@Test public void parseUrlWithFileEntryContextAndRelativeSpecThatUsesContext() throws MalformedURLException {     String spec = "entry.txt".     URL context = createUrl("file:example.jar!/dir/file").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:file:example.jar!/dir/entry.txt"). }
false;public;0;9;;@Test public void parseUrlWithSpecThatIgnoresContext() throws MalformedURLException {     JarFile.registerUrlProtocolHandler().     String spec = "jar:file:/other.jar!/nested!/entry.txt".     URL context = createUrl("file:example.jar!/dir/file").     this.handler.parseURL(context, spec, 0, spec.length()).     assertThat(context.toExternalForm()).isEqualTo("jar:jar:file:/other.jar!/nested!/entry.txt"). }
false;public;0;6;;@Test public void sameFileReturnsFalseForUrlsWithDifferentProtocols() throws MalformedURLException {     assertThat(this.handler.sameFile(new URL("jar:file:foo.jar!/content.txt"), new URL("file:/foo.jar"))).isFalse(). }
false;public;0;7;;@Test public void sameFileReturnsFalseForDifferentFileInSameJar() throws MalformedURLException {     assertThat(this.handler.sameFile(new URL("jar:file:foo.jar!/the/path/to/the/first/content.txt"), new URL("jar:file:/foo.jar!/content.txt"))).isFalse(). }
false;public;0;7;;@Test public void sameFileReturnsFalseForSameFileInDifferentJars() throws MalformedURLException {     assertThat(this.handler.sameFile(new URL("jar:file:/the/path/to/the/first.jar!/content.txt"), new URL("jar:file:/second.jar!/content.txt"))).isFalse(). }
false;public;0;6;;@Test public void sameFileReturnsTrueForSameFileInSameJar() throws MalformedURLException {     assertThat(this.handler.sameFile(new URL("jar:file:/the/path/to/the/first.jar!/content.txt"), new URL("jar:file:/the/path/to/the/first.jar!/content.txt"))).isTrue(). }
false;public;0;7;;@Test public void sameFileReturnsTrueForUrlsThatReferenceSameFileViaNestedArchiveAndFromRootOfJar() throws MalformedURLException {     assertThat(this.handler.sameFile(new URL("jar:file:/test.jar!/BOOT-INF/classes!/foo.txt"), new URL("jar:file:/test.jar!/BOOT-INF/classes/foo.txt"))).isTrue(). }
false;public;0;8;;@Test public void hashCodesAreEqualForUrlsThatReferenceSameFileViaNestedArchiveAndFromRootOfJar() throws MalformedURLException {     assertThat(this.handler.hashCode(new URL("jar:file:/test.jar!/BOOT-INF/classes!/foo.txt"))).isEqualTo(this.handler.hashCode(new URL("jar:file:/test.jar!/BOOT-INF/classes/foo.txt"))). }
false;public;0;6;;@Test public void urlWithSpecReferencingParentDirectory() throws MalformedURLException {     assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes!/xsd/folderA/a.xsd", "../folderB/b.xsd"). }
false;public;0;7;;@Test public void urlWithSpecReferencingAncestorDirectoryOutsideJarStopsAtJarRoot() throws MalformedURLException {     assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes!/xsd/folderA/a.xsd", "../../../../../../folderB/b.xsd"). }
false;public;0;6;;@Test public void urlWithSpecReferencingCurrentDirectory() throws MalformedURLException {     assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes!/xsd/folderA/a.xsd", "./folderB/./b.xsd"). }
false;public;0;5;;@Test public void urlWithRef() throws MalformedURLException {     assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes", "!/foo.txt#alpha"). }
false;public;0;5;;@Test public void urlWithQuery() throws MalformedURLException {     assertStandardAndCustomHandlerUrlsAreEqual("file:/test.jar!/BOOT-INF/classes", "!/foo.txt?alpha"). }
false;public;0;13;;@Test public void fallbackToJdksJarUrlStreamHandler() throws Exception {     File testJar = this.temporaryFolder.newFile("test.jar").     TestJarCreator.createTestJar(testJar).     URLConnection connection = new URL(null, "jar:file:" + testJar.getAbsolutePath() + "!/nested.jar!/", this.handler).openConnection().     assertThat(connection).isInstanceOf(JarURLConnection.class).     URLConnection jdkConnection = new URL(null, "jar:file:file:" + testJar.getAbsolutePath() + "!/nested.jar!/", this.handler).openConnection().     assertThat(jdkConnection).isNotInstanceOf(JarURLConnection.class). }
false;private;2;11;;private void assertStandardAndCustomHandlerUrlsAreEqual(String context, String spec) throws MalformedURLException {     URL standardUrl = new URL(new URL("jar:" + context), spec).     URL customHandlerUrl = new URL(new URL("jar", null, -1, context, this.handler), spec).     assertThat(customHandlerUrl.toString()).isEqualTo(standardUrl.toString()).     assertThat(customHandlerUrl.getFile()).isEqualTo(standardUrl.getFile()).     assertThat(customHandlerUrl.getPath()).isEqualTo(standardUrl.getPath()).     assertThat(customHandlerUrl.getQuery()).isEqualTo(standardUrl.getQuery()).     assertThat(customHandlerUrl.getRef()).isEqualTo(standardUrl.getRef()). }
false;private;1;3;;private URL createUrl(String file) throws MalformedURLException {     return new URL("jar", null, -1, file, this.handler). }
