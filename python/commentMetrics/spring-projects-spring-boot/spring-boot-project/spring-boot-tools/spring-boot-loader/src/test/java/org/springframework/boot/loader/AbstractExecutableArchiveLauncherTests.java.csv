commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;20;;protected File createJarArchive(String name, String entryPrefix) throws IOException {     File archive = this.temp.newFile(name).     JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(archive)).     jarOutputStream.putNextEntry(new JarEntry(entryPrefix + "/")).     jarOutputStream.putNextEntry(new JarEntry(entryPrefix + "/classes/")).     jarOutputStream.putNextEntry(new JarEntry(entryPrefix + "/lib/")).     JarEntry libFoo = new JarEntry(entryPrefix + "/lib/foo.jar").     libFoo.setMethod(ZipEntry.STORED).     ByteArrayOutputStream fooJarStream = new ByteArrayOutputStream().     new JarOutputStream(fooJarStream).close().     libFoo.setSize(fooJarStream.size()).     CRC32 crc32 = new CRC32().     crc32.update(fooJarStream.toByteArray()).     libFoo.setCrc(crc32.getValue()).     jarOutputStream.putNextEntry(libFoo).     jarOutputStream.write(fooJarStream.toByteArray()).     jarOutputStream.close().     return archive. }
false;protected;1;18;;protected File explode(File archive) throws IOException {     File exploded = this.temp.newFolder("exploded").     JarFile jarFile = new JarFile(archive).     Enumeration<JarEntry> entries = jarFile.entries().     while (entries.hasMoreElements()) {         JarEntry entry = entries.nextElement().         File entryFile = new File(exploded, entry.getName()).         if (entry.isDirectory()) {             entryFile.mkdirs().         } else {             FileCopyUtils.copy(jarFile.getInputStream(entry), new FileOutputStream(entryFile)).         }     }     jarFile.close().     return exploded. }
false;protected;1;7;;protected Set<URL> getUrls(List<Archive> archives) throws MalformedURLException {     Set<URL> urls = new HashSet<>(archives.size()).     for (Archive archive : archives) {         urls.add(archive.getUrl()).     }     return urls. }
