commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() throws Exception {     createArchive(). }
false;private;0;3;;private void createArchive() throws Exception {     createArchive(null). }
false;private;1;24;;private void createArchive(String folderName) throws Exception {     File file = this.temporaryFolder.newFile().     TestJarCreator.createTestJar(file).     this.rootFolder = (StringUtils.hasText(folderName) ? this.temporaryFolder.newFolder(folderName) : this.temporaryFolder.newFolder()).     JarFile jarFile = new JarFile(file).     Enumeration<JarEntry> entries = jarFile.entries().     while (entries.hasMoreElements()) {         JarEntry entry = entries.nextElement().         File destination = new File(this.rootFolder.getAbsolutePath() + File.separator + entry.getName()).         destination.getParentFile().mkdirs().         if (entry.isDirectory()) {             destination.mkdir().         } else {             copy(jarFile.getInputStream(entry), new FileOutputStream(destination)).         }     }     this.archive = new ExplodedArchive(this.rootFolder).     jarFile.close(). }
false;private;2;8;;private void copy(InputStream in, OutputStream out) throws IOException {     byte[] buffer = new byte[1024].     int len = in.read(buffer).     while (len != -1) {         out.write(buffer, 0, len).         len = in.read(buffer).     } }
false;public;0;5;;@Test public void getManifest() throws Exception {     assertThat(this.archive.getManifest().getMainAttributes().getValue("Built-By")).isEqualTo("j1"). }
false;public;0;5;;@Test public void getEntries() {     Map<String, Archive.Entry> entries = getEntriesMap(this.archive).     assertThat(entries.size()).isEqualTo(12). }
false;public;0;4;;@Test public void getUrl() throws Exception {     assertThat(this.archive.getUrl()).isEqualTo(this.rootFolder.toURI().toURL()). }
false;public;0;5;;@Test public void getUrlWithSpaceInPath() throws Exception {     createArchive("spaces in the name").     assertThat(this.archive.getUrl()).isEqualTo(this.rootFolder.toURI().toURL()). }
false;public;0;7;;@Test public void getNestedArchive() throws Exception {     Entry entry = getEntriesMap(this.archive).get("nested.jar").     Archive nested = this.archive.getNestedArchive(entry).     assertThat(nested.getUrl().toString()).isEqualTo("jar:" + this.rootFolder.toURI() + "nested.jar!/"). }
false;public;0;9;;@Test public void nestedDirArchive() throws Exception {     Entry entry = getEntriesMap(this.archive).get("d/").     Archive nested = this.archive.getNestedArchive(entry).     Map<String, Entry> nestedEntries = getEntriesMap(nested).     assertThat(nestedEntries.size()).isEqualTo(1).     assertThat(nested.getUrl().toString()).isEqualTo("file:" + this.rootFolder.toURI().getPath() + "d/"). }
false;public;0;6;;@Test public void getNonRecursiveEntriesForRoot() {     ExplodedArchive archive = new ExplodedArchive(new File("/"), false).     Map<String, Archive.Entry> entries = getEntriesMap(archive).     assertThat(entries.size()).isGreaterThan(1). }
false;public;0;8;;@Test public void getNonRecursiveManifest() throws Exception {     ExplodedArchive archive = new ExplodedArchive(new File("src/test/resources/root")).     assertThat(archive.getManifest()).isNotNull().     Map<String, Archive.Entry> entries = getEntriesMap(archive).     assertThat(entries.size()).isEqualTo(4). }
false;public;0;8;;@Test public void getNonRecursiveManifestEvenIfNonRecursive() throws Exception {     ExplodedArchive archive = new ExplodedArchive(new File("src/test/resources/root"), false).     assertThat(archive.getManifest()).isNotNull().     Map<String, Archive.Entry> entries = getEntriesMap(archive).     assertThat(entries.size()).isEqualTo(3). }
false;public;0;10;;@Test public void getResourceAsStream() throws Exception {     ExplodedArchive archive = new ExplodedArchive(new File("src/test/resources/root")).     assertThat(archive.getManifest()).isNotNull().     URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }).     assertThat(loader.getResourceAsStream("META-INF/spring/application.xml")).isNotNull().     loader.close(). }
false;public;0;10;;@Test public void getResourceAsStreamNonRecursive() throws Exception {     ExplodedArchive archive = new ExplodedArchive(new File("src/test/resources/root"), false).     assertThat(archive.getManifest()).isNotNull().     URLClassLoader loader = new URLClassLoader(new URL[] { archive.getUrl() }).     assertThat(loader.getResourceAsStream("META-INF/spring/application.xml")).isNotNull().     loader.close(). }
false;private;1;7;;private Map<String, Archive.Entry> getEntriesMap(Archive archive) {     Map<String, Archive.Entry> entries = new HashMap<>().     for (Archive.Entry entry : archive) {         entries.put(entry.getName(), entry).     }     return entries. }
