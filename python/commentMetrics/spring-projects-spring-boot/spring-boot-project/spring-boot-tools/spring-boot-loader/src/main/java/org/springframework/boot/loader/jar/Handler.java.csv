# id;timestamp;commentText;codeText;commentWords;codeWords
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1507173536;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1511987618;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1513031874;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1513083327;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1521237968;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1525376698;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1532738143;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1532852936;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1534156736;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1537507999;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> static void addToRootFileCache(File sourceFile, JarFile jarFile);1549365067;Add the given {@link JarFile} to the root file cache._@param sourceFile the source file to add_@param jarFile the jar file.;static void addToRootFileCache(File sourceFile, JarFile jarFile) {_		Map<File, JarFile> cache = rootFileCache.get()__		if (cache == null) {_			cache = new ConcurrentHashMap<>()__			rootFileCache = new SoftReference<>(cache)__		}_		cache.put(sourceFile, jarFile)__	};add,the,given,link,jar,file,to,the,root,file,cache,param,source,file,the,source,file,to,add,param,jar,file,the,jar,file;static,void,add,to,root,file,cache,file,source,file,jar,file,jar,file,map,file,jar,file,cache,root,file,cache,get,if,cache,null,cache,new,concurrent,hash,map,root,file,cache,new,soft,reference,cache,cache,put,source,file,jar,file
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1507173536;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1511987618;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1513031874;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1513083327;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1521237968;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1525376698;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1532738143;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1532852936;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1534156736;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1537507999;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
Handler -> public static void setUseFastConnectionExceptions( 			boolean useFastConnectionExceptions);1549365067;Set if a generic static exception can be thrown when a URL cannot be connected._This optimization is used during class loading to save creating lots of exceptions_which are then swallowed._@param useFastConnectionExceptions if fast connection exceptions can be used.;public static void setUseFastConnectionExceptions(_			boolean useFastConnectionExceptions) {_		JarURLConnection.setUseFastExceptions(useFastConnectionExceptions)__	};set,if,a,generic,static,exception,can,be,thrown,when,a,url,cannot,be,connected,this,optimization,is,used,during,class,loading,to,save,creating,lots,of,exceptions,which,are,then,swallowed,param,use,fast,connection,exceptions,if,fast,connection,exceptions,can,be,used;public,static,void,set,use,fast,connection,exceptions,boolean,use,fast,connection,exceptions,jar,urlconnection,set,use,fast,exceptions,use,fast,connection,exceptions
