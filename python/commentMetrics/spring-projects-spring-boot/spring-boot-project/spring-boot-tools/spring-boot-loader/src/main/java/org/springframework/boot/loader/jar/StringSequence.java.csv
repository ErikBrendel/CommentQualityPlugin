commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public StringSequence subSequence(int start) {     return subSequence(start, length()). }
false;public;2;15;;@Override public StringSequence subSequence(int start, int end) {     int subSequenceStart = this.start + start.     int subSequenceEnd = this.start + end.     if (subSequenceStart > this.end) {         throw new StringIndexOutOfBoundsException(start).     }     if (subSequenceEnd > this.end) {         throw new StringIndexOutOfBoundsException(end).     }     if (start == 0 && subSequenceEnd == this.end) {         return this.     }     return new StringSequence(this.source, subSequenceStart, subSequenceEnd). }
false;public;0;3;;public boolean isEmpty() {     return length() == 0. }
false;public;0;4;;@Override public int length() {     return this.end - this.start. }
false;public;1;4;;@Override public char charAt(int index) {     return this.source.charAt(this.start + index). }
false;public;1;3;;public int indexOf(char ch) {     return this.source.indexOf(ch, this.start) - this.start. }
false;public;1;3;;public int indexOf(String str) {     return this.source.indexOf(str, this.start) - this.start. }
false;public;2;3;;public int indexOf(String str, int fromIndex) {     return this.source.indexOf(str, this.start + fromIndex) - this.start. }
false;public;1;3;;public boolean startsWith(CharSequence prefix) {     return startsWith(prefix, 0). }
false;public;2;14;;public boolean startsWith(CharSequence prefix, int offset) {     int prefixLength = prefix.length().     if (length() - prefixLength - offset < 0) {         return false.     }     int prefixOffset = 0.     int sourceOffset = offset.     while (prefixLength-- != 0) {         if (charAt(sourceOffset++) != prefix.charAt(prefixOffset++)) {             return false.         }     }     return true. }
false;public;1;22;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (!(obj instanceof CharSequence)) {         return false.     }     CharSequence other = (CharSequence) obj.     int n = length().     if (n != other.length()) {         return false.     }     int i = 0.     while (n-- != 0) {         if (charAt(i) != other.charAt(i)) {             return false.         }         i++.     }     return true. }
false;public;0;11;;@Override public int hashCode() {     int hash = this.hash.     if (hash == 0 && length() > 0) {         for (int i = this.start. i < this.end. i++) {             hash = 31 * hash + this.source.charAt(i).         }         this.hash = hash.     }     return hash. }
false;public;0;4;;@Override public String toString() {     return this.source.substring(this.start, this.end). }
