commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;5;/**  * Launch the application. This method is the initial entry point that should be  * called by a subclass {@code public static void main(String[] args)} method.  * @param args the incoming arguments  * @throws Exception if the application fails to launch  */ ;/**  * Launch the application. This method is the initial entry point that should be  * called by a subclass {@code public static void main(String[] args)} method.  * @param args the incoming arguments  * @throws Exception if the application fails to launch  */ protected void launch(String[] args) throws Exception {     JarFile.registerUrlProtocolHandler().     ClassLoader classLoader = createClassLoader(getClassPathArchives()).     launch(args, getMainClass(), classLoader). }
true;protected;1;7;/**  * Create a classloader for the specified archives.  * @param archives the archives  * @return the classloader  * @throws Exception if the classloader cannot be created  */ ;/**  * Create a classloader for the specified archives.  * @param archives the archives  * @return the classloader  * @throws Exception if the classloader cannot be created  */ protected ClassLoader createClassLoader(List<Archive> archives) throws Exception {     List<URL> urls = new ArrayList<>(archives.size()).     for (Archive archive : archives) {         urls.add(archive.getUrl()).     }     return createClassLoader(urls.toArray(new URL[0])). }
true;protected;1;3;/**  * Create a classloader for the specified URLs.  * @param urls the URLs  * @return the classloader  * @throws Exception if the classloader cannot be created  */ ;/**  * Create a classloader for the specified URLs.  * @param urls the URLs  * @return the classloader  * @throws Exception if the classloader cannot be created  */ protected ClassLoader createClassLoader(URL[] urls) throws Exception {     return new LaunchedURLClassLoader(urls, getClass().getClassLoader()). }
true;protected;3;5;/**  * Launch the application given the archive file and a fully configured classloader.  * @param args the incoming arguments  * @param mainClass the main class to run  * @param classLoader the classloader  * @throws Exception if the launch fails  */ ;/**  * Launch the application given the archive file and a fully configured classloader.  * @param args the incoming arguments  * @param mainClass the main class to run  * @param classLoader the classloader  * @throws Exception if the launch fails  */ protected void launch(String[] args, String mainClass, ClassLoader classLoader) throws Exception {     Thread.currentThread().setContextClassLoader(classLoader).     createMainMethodRunner(mainClass, args, classLoader).run(). }
true;protected;3;4;/**  * Create the {@code MainMethodRunner} used to launch the application.  * @param mainClass the main class  * @param args the incoming arguments  * @param classLoader the classloader  * @return the main method runner  */ ;/**  * Create the {@code MainMethodRunner} used to launch the application.  * @param mainClass the main class  * @param args the incoming arguments  * @param classLoader the classloader  * @return the main method runner  */ protected MainMethodRunner createMainMethodRunner(String mainClass, String[] args, ClassLoader classLoader) {     return new MainMethodRunner(mainClass, args). }
true;protected,abstract;0;1;/**  * Returns the main class that should be launched.  * @return the name of the main class  * @throws Exception if the main class cannot be obtained  */ ;/**  * Returns the main class that should be launched.  * @return the name of the main class  * @throws Exception if the main class cannot be obtained  */ protected abstract String getMainClass() throws Exception.
true;protected,abstract;0;1;/**  * Returns the archives that will be used to construct the class path.  * @return the class path archives  * @throws Exception if the class path archives cannot be obtained  */ ;/**  * Returns the archives that will be used to construct the class path.  * @return the class path archives  * @throws Exception if the class path archives cannot be obtained  */ protected abstract List<Archive> getClassPathArchives() throws Exception.
false;protected,final;0;16;;protected final Archive createArchive() throws Exception {     ProtectionDomain protectionDomain = getClass().getProtectionDomain().     CodeSource codeSource = protectionDomain.getCodeSource().     URI location = (codeSource != null) ? codeSource.getLocation().toURI() : null.     String path = (location != null) ? location.getSchemeSpecificPart() : null.     if (path == null) {         throw new IllegalStateException("Unable to determine code source archive").     }     File root = new File(path).     if (!root.exists()) {         throw new IllegalStateException("Unable to determine code source archive from " + root).     }     return (root.isDirectory() ? new ExplodedArchive(root) : new JarFileArchive(root)). }
