commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns an {@link InputStream} that can be used to read the underlying data. The  * caller is responsible close the underlying stream.  * @return a new input stream that can be used to read the underlying data.  * @throws IOException if the stream cannot be opened  */ ;/**  * Returns an {@link InputStream} that can be used to read the underlying data. The  * caller is responsible close the underlying stream.  * @return a new input stream that can be used to read the underlying data.  * @throws IOException if the stream cannot be opened  */ InputStream getInputStream() throws IOException.
true;;2;1;/**  * Returns a new {@link RandomAccessData} for a specific subsection of this data.  * @param offset the offset of the subsection  * @param length the length of the subsection  * @return the subsection data  */ ;/**  * Returns a new {@link RandomAccessData} for a specific subsection of this data.  * @param offset the offset of the subsection  * @param length the length of the subsection  * @return the subsection data  */ RandomAccessData getSubsection(long offset, long length).
true;;0;1;/**  * Reads all the data and returns it as a byte array.  * @return the data  * @throws IOException if the data cannot be read  */ ;/**  * Reads all the data and returns it as a byte array.  * @return the data  * @throws IOException if the data cannot be read  */ byte[] read() throws IOException.
true;;2;1;/**  * Reads the {@code length} bytes of data starting at the given {@code offset}.  * @param offset the offset from which data should be read  * @param length the number of bytes to be read  * @return the data  * @throws IOException if the data cannot be read  * @throws IndexOutOfBoundsException if offset is beyond the end of the file or  * subsection  * @throws EOFException if offset plus length is greater than the length of the file  * or subsection  */ ;/**  * Reads the {@code length} bytes of data starting at the given {@code offset}.  * @param offset the offset from which data should be read  * @param length the number of bytes to be read  * @return the data  * @throws IOException if the data cannot be read  * @throws IndexOutOfBoundsException if offset is beyond the end of the file or  * subsection  * @throws EOFException if offset plus length is greater than the length of the file  * or subsection  */ byte[] read(long offset, long length) throws IOException.
true;;0;1;/**  * Returns the size of the data.  * @return the size  */ ;/**  * Returns the size of the data.  * @return the size  */ long getSize().
