# id;timestamp;commentText;codeText;commentWords;codeWords
LaunchedURLClassLoader -> private void definePackageIfNecessary(String className);1507173536;Define a package before a {@code findClass} call is made. This is necessary to_ensure that the appropriate manifest for nested JARs is associated with the_package._@param className the class name being found;private void definePackageIfNecessary(String className) {_		int lastDot = className.lastIndexOf('.')__		if (lastDot >= 0) {_			String packageName = className.substring(0, lastDot)__			if (getPackage(packageName) == null) {_				try {_					definePackage(className, packageName)__				}_				catch (IllegalArgumentException ex) {_					_					if (getPackage(packageName) == null) {_						_						_						_						throw new AssertionError(_								"Package " + packageName + " has already been defined "_										+ "but it could not be found")__					}_				}_			}_		}_	};define,a,package,before,a,code,find,class,call,is,made,this,is,necessary,to,ensure,that,the,appropriate,manifest,for,nested,jars,is,associated,with,the,package,param,class,name,the,class,name,being,found;private,void,define,package,if,necessary,string,class,name,int,last,dot,class,name,last,index,of,if,last,dot,0,string,package,name,class,name,substring,0,last,dot,if,get,package,package,name,null,try,define,package,class,name,package,name,catch,illegal,argument,exception,ex,if,get,package,package,name,null,throw,new,assertion,error,package,package,name,has,already,been,defined,but,it,could,not,be,found
LaunchedURLClassLoader -> private void definePackageIfNecessary(String className);1512760426;Define a package before a {@code findClass} call is made. This is necessary to_ensure that the appropriate manifest for nested JARs is associated with the_package._@param className the class name being found;private void definePackageIfNecessary(String className) {_		int lastDot = className.lastIndexOf('.')__		if (lastDot >= 0) {_			String packageName = className.substring(0, lastDot)__			if (getPackage(packageName) == null) {_				try {_					definePackage(className, packageName)__				}_				catch (IllegalArgumentException ex) {_					_					if (getPackage(packageName) == null) {_						_						_						_						throw new AssertionError(_								"Package " + packageName + " has already been defined "_										+ "but it could not be found")__					}_				}_			}_		}_	};define,a,package,before,a,code,find,class,call,is,made,this,is,necessary,to,ensure,that,the,appropriate,manifest,for,nested,jars,is,associated,with,the,package,param,class,name,the,class,name,being,found;private,void,define,package,if,necessary,string,class,name,int,last,dot,class,name,last,index,of,if,last,dot,0,string,package,name,class,name,substring,0,last,dot,if,get,package,package,name,null,try,define,package,class,name,package,name,catch,illegal,argument,exception,ex,if,get,package,package,name,null,throw,new,assertion,error,package,package,name,has,already,been,defined,but,it,could,not,be,found
LaunchedURLClassLoader -> private void definePackageIfNecessary(String className);1514004607;Define a package before a {@code findClass} call is made. This is necessary to_ensure that the appropriate manifest for nested JARs is associated with the_package._@param className the class name being found;private void definePackageIfNecessary(String className) {_		int lastDot = className.lastIndexOf('.')__		if (lastDot >= 0) {_			String packageName = className.substring(0, lastDot)__			if (getPackage(packageName) == null) {_				try {_					definePackage(className, packageName)__				}_				catch (IllegalArgumentException ex) {_					_					if (getPackage(packageName) == null) {_						_						_						_						throw new AssertionError(_								"Package " + packageName + " has already been defined "_										+ "but it could not be found")__					}_				}_			}_		}_	};define,a,package,before,a,code,find,class,call,is,made,this,is,necessary,to,ensure,that,the,appropriate,manifest,for,nested,jars,is,associated,with,the,package,param,class,name,the,class,name,being,found;private,void,define,package,if,necessary,string,class,name,int,last,dot,class,name,last,index,of,if,last,dot,0,string,package,name,class,name,substring,0,last,dot,if,get,package,package,name,null,try,define,package,class,name,package,name,catch,illegal,argument,exception,ex,if,get,package,package,name,null,throw,new,assertion,error,package,package,name,has,already,been,defined,but,it,could,not,be,found
LaunchedURLClassLoader -> public LaunchedURLClassLoader(URL[] urls, ClassLoader parent);1507173536;Create a new {@link LaunchedURLClassLoader} instance._@param urls the URLs from which to load classes and resources_@param parent the parent class loader for delegation;public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {_		super(urls, parent)__	};create,a,new,link,launched,urlclass,loader,instance,param,urls,the,urls,from,which,to,load,classes,and,resources,param,parent,the,parent,class,loader,for,delegation;public,launched,urlclass,loader,url,urls,class,loader,parent,super,urls,parent
LaunchedURLClassLoader -> public LaunchedURLClassLoader(URL[] urls, ClassLoader parent);1512760426;Create a new {@link LaunchedURLClassLoader} instance._@param urls the URLs from which to load classes and resources_@param parent the parent class loader for delegation;public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {_		super(urls, parent)__	};create,a,new,link,launched,urlclass,loader,instance,param,urls,the,urls,from,which,to,load,classes,and,resources,param,parent,the,parent,class,loader,for,delegation;public,launched,urlclass,loader,url,urls,class,loader,parent,super,urls,parent
LaunchedURLClassLoader -> public LaunchedURLClassLoader(URL[] urls, ClassLoader parent);1514004607;Create a new {@link LaunchedURLClassLoader} instance._@param urls the URLs from which to load classes and resources_@param parent the parent class loader for delegation;public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {_		super(urls, parent)__	};create,a,new,link,launched,urlclass,loader,instance,param,urls,the,urls,from,which,to,load,classes,and,resources,param,parent,the,parent,class,loader,for,delegation;public,launched,urlclass,loader,url,urls,class,loader,parent,super,urls,parent
LaunchedURLClassLoader -> public void clearCache();1507173536;Clear URL caches.;public void clearCache() {_		for (URL url : getURLs()) {_			try {_				URLConnection connection = url.openConnection()__				if (connection instanceof JarURLConnection) {_					clearCache(connection)__				}_			}_			catch (IOException ex) {_				_			}_		}__	};clear,url,caches;public,void,clear,cache,for,url,url,get,urls,try,urlconnection,connection,url,open,connection,if,connection,instanceof,jar,urlconnection,clear,cache,connection,catch,ioexception,ex
LaunchedURLClassLoader -> public void clearCache();1512760426;Clear URL caches.;public void clearCache() {_		for (URL url : getURLs()) {_			try {_				URLConnection connection = url.openConnection()__				if (connection instanceof JarURLConnection) {_					clearCache(connection)__				}_			}_			catch (IOException ex) {_				_			}_		}__	};clear,url,caches;public,void,clear,cache,for,url,url,get,urls,try,urlconnection,connection,url,open,connection,if,connection,instanceof,jar,urlconnection,clear,cache,connection,catch,ioexception,ex
LaunchedURLClassLoader -> public void clearCache();1514004607;Clear URL caches.;public void clearCache() {_		for (URL url : getURLs()) {_			try {_				URLConnection connection = url.openConnection()__				if (connection instanceof JarURLConnection) {_					clearCache(connection)__				}_			}_			catch (IOException ex) {_				_			}_		}__	};clear,url,caches;public,void,clear,cache,for,url,url,get,urls,try,urlconnection,connection,url,open,connection,if,connection,instanceof,jar,urlconnection,clear,cache,connection,catch,ioexception,ex
