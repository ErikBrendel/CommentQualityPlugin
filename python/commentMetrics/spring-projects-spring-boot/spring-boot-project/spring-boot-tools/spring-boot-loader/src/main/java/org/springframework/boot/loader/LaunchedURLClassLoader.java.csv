commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public URL findResource(String name) {     Handler.setUseFastConnectionExceptions(true).     try {         return super.findResource(name).     } finally {         Handler.setUseFastConnectionExceptions(false).     } }
false;public;1;10;;@Override public Enumeration<URL> findResources(String name) throws IOException {     Handler.setUseFastConnectionExceptions(true).     try {         return new UseFastConnectionExceptionsEnumeration(super.findResources(name)).     } finally {         Handler.setUseFastConnectionExceptions(false).     } }
false;protected;2;24;;@Override protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     Handler.setUseFastConnectionExceptions(true).     try {         try {             definePackageIfNecessary(name).         } catch (IllegalArgumentException ex) {             // Tolerate race condition due to being parallel capable             if (getPackage(name) == null) {                 // getPackage(name) should not return null.                 throw new AssertionError("Package " + name + " has already been " + "defined but it could not be found").             }         }         return super.loadClass(name, resolve).     } finally {         Handler.setUseFastConnectionExceptions(false).     } }
true;private;1;22;/**  * Define a package before a {@code findClass} call is made. This is necessary to  * ensure that the appropriate manifest for nested JARs is associated with the  * package.  * @param className the class name being found  */ ;/**  * Define a package before a {@code findClass} call is made. This is necessary to  * ensure that the appropriate manifest for nested JARs is associated with the  * package.  * @param className the class name being found  */ private void definePackageIfNecessary(String className) {     int lastDot = className.lastIndexOf('.').     if (lastDot >= 0) {         String packageName = className.substring(0, lastDot).         if (getPackage(packageName) == null) {             try {                 definePackage(className, packageName).             } catch (IllegalArgumentException ex) {                 // Tolerate race condition due to being parallel capable                 if (getPackage(packageName) == null) {                     // therefore, getPackage(name) should not have returned null.                     throw new AssertionError("Package " + packageName + " has already been defined " + "but it could not be found").                 }             }         }     } }
false;private;2;30;;private void definePackage(String className, String packageName) {     try {         AccessController.doPrivileged((PrivilegedExceptionAction<Object>) () -> {             String packageEntryName = packageName.replace('.', '/') + "/".             String classEntryName = className.replace('.', '/') + ".class".             for (URL url : getURLs()) {                 try {                     URLConnection connection = url.openConnection().                     if (connection instanceof JarURLConnection) {                         JarFile jarFile = ((JarURLConnection) connection).getJarFile().                         if (jarFile.getEntry(classEntryName) != null && jarFile.getEntry(packageEntryName) != null && jarFile.getManifest() != null) {                             definePackage(packageName, jarFile.getManifest(), url).                             return null.                         }                     }                 } catch (IOException ex) {                 // Ignore                 }             }             return null.         }, AccessController.getContext()).     } catch (java.security.PrivilegedActionException ex) {     // Ignore     } }
true;public;0;14;/**  * Clear URL caches.  */ ;/**  * Clear URL caches.  */ public void clearCache() {     for (URL url : getURLs()) {         try {             URLConnection connection = url.openConnection().             if (connection instanceof JarURLConnection) {                 clearCache(connection).             }         } catch (IOException ex) {         // Ignore         }     } }
false;private;1;6;;private void clearCache(URLConnection connection) throws IOException {     Object jarFile = ((JarURLConnection) connection).getJarFile().     if (jarFile instanceof org.springframework.boot.loader.jar.JarFile) {         ((org.springframework.boot.loader.jar.JarFile) jarFile).clearCache().     } }
false;public;0;11;;@Override public boolean hasMoreElements() {     Handler.setUseFastConnectionExceptions(true).     try {         return this.delegate.hasMoreElements().     } finally {         Handler.setUseFastConnectionExceptions(false).     } }
false;public;0;10;;@Override public URL nextElement() {     Handler.setUseFastConnectionExceptions(true).     try {         return this.delegate.nextElement().     } finally {         Handler.setUseFastConnectionExceptions(false).     } }
