commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns a URL that can be used to load the archive.  * @return the archive URL  * @throws MalformedURLException if the URL is malformed  */ ;/**  * Returns a URL that can be used to load the archive.  * @return the archive URL  * @throws MalformedURLException if the URL is malformed  */ URL getUrl() throws MalformedURLException.
true;;0;1;/**  * Returns the manifest of the archive.  * @return the manifest  * @throws IOException if the manifest cannot be read  */ ;/**  * Returns the manifest of the archive.  * @return the manifest  * @throws IOException if the manifest cannot be read  */ Manifest getManifest() throws IOException.
true;;1;1;/**  * Returns nested {@link Archive}s for entries that match the specified filter.  * @param filter the filter used to limit entries  * @return nested archives  * @throws IOException if nested archives cannot be read  */ ;/**  * Returns nested {@link Archive}s for entries that match the specified filter.  * @param filter the filter used to limit entries  * @return nested archives  * @throws IOException if nested archives cannot be read  */ List<Archive> getNestedArchives(EntryFilter filter) throws IOException.
true;;0;1;/**  * Returns {@code true} if the entry represents a directory.  * @return if the entry is a directory  */ ;/**  * Returns {@code true} if the entry represents a directory.  * @return if the entry is a directory  */ boolean isDirectory().
true;;0;1;/**  * Returns the name of the entry.  * @return the name of the entry  */ ;/**  * Returns the name of the entry.  * @return the name of the entry  */ String getName().
true;;1;1;/**  * Apply the jar entry filter.  * @param entry the entry to filter  * @return {@code true} if the filter matches  */ ;/**  * Apply the jar entry filter.  * @param entry the entry to filter  * @return {@code true} if the filter matches  */ boolean matches(Entry entry).
