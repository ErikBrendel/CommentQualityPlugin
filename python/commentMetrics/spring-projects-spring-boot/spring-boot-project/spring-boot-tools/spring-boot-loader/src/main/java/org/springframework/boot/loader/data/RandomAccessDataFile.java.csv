# id;timestamp;commentText;codeText;commentWords;codeWords
RandomAccessDataFile -> public File getFile();1507173536;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file
RandomAccessDataFile -> public File getFile();1514456845;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file
RandomAccessDataFile -> public File getFile();1515014644;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file
RandomAccessDataFile -> public File getFile();1515528807;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file
RandomAccessDataFile -> public File getFile();1519728495;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file
RandomAccessDataFile -> public File getFile();1521215930;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.fileAccess.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file,access,file
RandomAccessDataFile -> public File getFile();1525099530;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.fileAccess.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file,access,file
RandomAccessDataFile -> public File getFile();1525218144;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.fileAccess.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file,access,file
RandomAccessDataFile -> public File getFile();1525376698;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.fileAccess.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file,access,file
RandomAccessDataFile -> public File getFile();1532738143;Returns the underlying File._@return the underlying file;public File getFile() {_		return this.fileAccess.file__	};returns,the,underlying,file,return,the,underlying,file;public,file,get,file,return,this,file,access,file
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1507173536;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1514456845;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1515014644;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1515528807;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1519728495;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1521215930;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1525099530;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1525218144;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1525376698;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> DataInputStream -> private int cap(long n);1532738143;Cap the specified value such that it cannot exceed the number of bytes_remaining._@param n the value to cap_@return the capped value;private int cap(long n) {_			return (int) Math.min(RandomAccessDataFile.this.length - this.position, n)__		};cap,the,specified,value,such,that,it,cannot,exceed,the,number,of,bytes,remaining,param,n,the,value,to,cap,return,the,capped,value;private,int,cap,long,n,return,int,math,min,random,access,data,file,this,length,this,position,n
RandomAccessDataFile -> private RandomAccessDataFile(FileAccess fileAccess, long offset, long length);1521215930;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param fileAccess provides access to the underlying file_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {_		this.offset = offset__		this.length = length__		this.fileAccess = fileAccess__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,access,provides,access,to,the,underlying,file,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,access,file,access,long,offset,long,length,this,offset,offset,this,length,length,this,file,access,file,access
RandomAccessDataFile -> private RandomAccessDataFile(FileAccess fileAccess, long offset, long length);1525099530;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param fileAccess provides access to the underlying file_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {_		this.fileAccess = fileAccess__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,access,provides,access,to,the,underlying,file,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,access,file,access,long,offset,long,length,this,file,access,file,access,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(FileAccess fileAccess, long offset, long length);1525218144;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param fileAccess provides access to the underlying file_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {_		this.fileAccess = fileAccess__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,access,provides,access,to,the,underlying,file,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,access,file,access,long,offset,long,length,this,file,access,file,access,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(FileAccess fileAccess, long offset, long length);1525376698;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param fileAccess provides access to the underlying file_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {_		this.fileAccess = fileAccess__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,access,provides,access,to,the,underlying,file,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,access,file,access,long,offset,long,length,this,file,access,file,access,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(FileAccess fileAccess, long offset, long length);1532738143;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param fileAccess provides access to the underlying file_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(FileAccess fileAccess, long offset, long length) {_		this.fileAccess = fileAccess__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,access,provides,access,to,the,underlying,file,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,access,file,access,long,offset,long,length,this,file,access,file,access,this,offset,offset,this,length,length
RandomAccessDataFile -> public RandomAccessDataFile(File file, int concurrentReads);1507173536;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@param concurrentReads the maximum number of concurrent reads allowed on the_underlying file before blocking_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File);public RandomAccessDataFile(File file, int concurrentReads) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		if (!file.exists()) {_			throw new IllegalArgumentException("File must exist")__		}_		this.file = file__		this.filePool = new FilePool(file, concurrentReads)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,param,concurrent,reads,the,maximum,number,of,concurrent,reads,allowed,on,the,underlying,file,before,blocking,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file;public,random,access,data,file,file,file,int,concurrent,reads,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,if,file,exists,throw,new,illegal,argument,exception,file,must,exist,this,file,file,this,file,pool,new,file,pool,file,concurrent,reads,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file, int concurrentReads);1514456845;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@param concurrentReads the maximum number of concurrent reads allowed on the_underlying file before blocking_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File);public RandomAccessDataFile(File file, int concurrentReads) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		if (!file.exists()) {_			throw new IllegalArgumentException(String.format(_					"File %s must exist", file.getAbsolutePath()))__		}_		this.file = file__		this.filePool = new FilePool(file, concurrentReads)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,param,concurrent,reads,the,maximum,number,of,concurrent,reads,allowed,on,the,underlying,file,before,blocking,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file;public,random,access,data,file,file,file,int,concurrent,reads,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,if,file,exists,throw,new,illegal,argument,exception,string,format,file,s,must,exist,file,get,absolute,path,this,file,file,this,file,pool,new,file,pool,file,concurrent,reads,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file, int concurrentReads);1515014644;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@param concurrentReads the maximum number of concurrent reads allowed on the_underlying file before blocking_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File);public RandomAccessDataFile(File file, int concurrentReads) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		if (!file.exists()) {_			throw new IllegalArgumentException(_					String.format("File %s must exist", file.getAbsolutePath()))__		}_		this.file = file__		this.filePool = new FilePool(file, concurrentReads)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,param,concurrent,reads,the,maximum,number,of,concurrent,reads,allowed,on,the,underlying,file,before,blocking,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file;public,random,access,data,file,file,file,int,concurrent,reads,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,if,file,exists,throw,new,illegal,argument,exception,string,format,file,s,must,exist,file,get,absolute,path,this,file,file,this,file,pool,new,file,pool,file,concurrent,reads,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file, int concurrentReads);1515528807;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@param concurrentReads the maximum number of concurrent reads allowed on the_underlying file before blocking_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File);public RandomAccessDataFile(File file, int concurrentReads) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		if (!file.exists()) {_			throw new IllegalArgumentException(_					String.format("File %s must exist", file.getAbsolutePath()))__		}_		this.file = file__		this.filePool = new FilePool(file, concurrentReads)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,param,concurrent,reads,the,maximum,number,of,concurrent,reads,allowed,on,the,underlying,file,before,blocking,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file;public,random,access,data,file,file,file,int,concurrent,reads,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,if,file,exists,throw,new,illegal,argument,exception,string,format,file,s,must,exist,file,get,absolute,path,this,file,file,this,file,pool,new,file,pool,file,concurrent,reads,this,offset,0l,this,length,file,length
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1507173536;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			RandomAccessFile file = this.file__			try {_				if (file == null) {_					file = RandomAccessDataFile.this.filePool.acquire()__					file.seek(RandomAccessDataFile.this.offset + this.position)__				}_				if (b == null) {_					int rtn = file.read()__					moveOn(rtn == -1 ? 0 : 1)__					return rtn__				}_				else {_					return (int) moveOn(file.read(b, off, cappedLen))__				}_			}_			finally {_				if (this.file == null && file != null) {_					RandomAccessDataFile.this.filePool.release(file)__				}_			}_		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,random,access,file,file,this,file,try,if,file,null,file,random,access,data,file,this,file,pool,acquire,file,seek,random,access,data,file,this,offset,this,position,if,b,null,int,rtn,file,read,move,on,rtn,1,0,1,return,rtn,else,return,int,move,on,file,read,b,off,capped,len,finally,if,this,file,null,file,null,random,access,data,file,this,file,pool,release,file
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1514456845;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			RandomAccessFile file = this.file__			try {_				if (file == null) {_					file = RandomAccessDataFile.this.filePool.acquire()__					file.seek(RandomAccessDataFile.this.offset + this.position)__				}_				if (b == null) {_					int rtn = file.read()__					moveOn(rtn == -1 ? 0 : 1)__					return rtn__				}_				else {_					return (int) moveOn(file.read(b, off, cappedLen))__				}_			}_			finally {_				if (this.file == null && file != null) {_					RandomAccessDataFile.this.filePool.release(file)__				}_			}_		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,random,access,file,file,this,file,try,if,file,null,file,random,access,data,file,this,file,pool,acquire,file,seek,random,access,data,file,this,offset,this,position,if,b,null,int,rtn,file,read,move,on,rtn,1,0,1,return,rtn,else,return,int,move,on,file,read,b,off,capped,len,finally,if,this,file,null,file,null,random,access,data,file,this,file,pool,release,file
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1515014644;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			RandomAccessFile file = this.file__			try {_				if (file == null) {_					file = RandomAccessDataFile.this.filePool.acquire()__					file.seek(RandomAccessDataFile.this.offset + this.position)__				}_				if (b == null) {_					int rtn = file.read()__					moveOn(rtn == -1 ? 0 : 1)__					return rtn__				}_				else {_					return (int) moveOn(file.read(b, off, cappedLen))__				}_			}_			finally {_				if (this.file == null && file != null) {_					RandomAccessDataFile.this.filePool.release(file)__				}_			}_		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,random,access,file,file,this,file,try,if,file,null,file,random,access,data,file,this,file,pool,acquire,file,seek,random,access,data,file,this,offset,this,position,if,b,null,int,rtn,file,read,move,on,rtn,1,0,1,return,rtn,else,return,int,move,on,file,read,b,off,capped,len,finally,if,this,file,null,file,null,random,access,data,file,this,file,pool,release,file
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1515528807;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			RandomAccessFile file = this.file__			try {_				if (file == null) {_					file = RandomAccessDataFile.this.filePool.acquire()__					file.seek(RandomAccessDataFile.this.offset + this.position)__				}_				if (b == null) {_					int rtn = file.read()__					moveOn(rtn == -1 ? 0 : 1)__					return rtn__				}_				else {_					return (int) moveOn(file.read(b, off, cappedLen))__				}_			}_			finally {_				if (this.file == null && file != null) {_					RandomAccessDataFile.this.filePool.release(file)__				}_			}_		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,random,access,file,file,this,file,try,if,file,null,file,random,access,data,file,this,file,pool,acquire,file,seek,random,access,data,file,this,offset,this,position,if,b,null,int,rtn,file,read,move,on,rtn,1,0,1,return,rtn,else,return,int,move,on,file,read,b,off,capped,len,finally,if,this,file,null,file,null,random,access,data,file,this,file,pool,release,file
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1519728495;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			synchronized (this.file) {_				this.file.seek(RandomAccessDataFile.this.offset + this.position)__				if (b == null) {_					int rtn = this.file.read()__					moveOn(rtn == -1 ? 0 : 1)__					return rtn__				}_				else {_					return (int) moveOn(this.file.read(b, off, cappedLen))__				}_			}_		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,synchronized,this,file,this,file,seek,random,access,data,file,this,offset,this,position,if,b,null,int,rtn,this,file,read,move,on,rtn,1,0,1,return,rtn,else,return,int,move,on,this,file,read,b,off,capped,len
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1521215930;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			return (int) moveOn(_					RandomAccessDataFile.this.read(b, this.position, off, cappedLen))__		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,return,int,move,on,random,access,data,file,this,read,b,this,position,off,capped,len
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1525099530;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			return (int) moveOn(_					RandomAccessDataFile.this.read(b, this.position, off, cappedLen))__		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,return,int,move,on,random,access,data,file,this,read,b,this,position,off,capped,len
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1525218144;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			return (int) moveOn(_					RandomAccessDataFile.this.read(b, this.position, off, cappedLen))__		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,return,int,move,on,random,access,data,file,this,read,b,this,position,off,capped,len
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1525376698;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			return (int) moveOn(_					RandomAccessDataFile.this.read(b, this.position, off, cappedLen))__		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,return,int,move,on,random,access,data,file,this,read,b,this,position,off,capped,len
RandomAccessDataFile -> DataInputStream -> public int doRead(byte[] b, int off, int len) throws IOException;1532738143;Perform the actual read._@param b the bytes to read or {@code null} when reading a single byte_@param off the offset of the byte array_@param len the length of data to read_@return the number of bytes read into {@code b} or the actual read byte if_{@code b} is {@code null}. Returns -1 when the end of the stream is reached_@throws IOException in case of I/O errors;public int doRead(byte[] b, int off, int len) throws IOException {_			if (len == 0) {_				return 0__			}_			int cappedLen = cap(len)__			if (cappedLen <= 0) {_				return -1__			}_			return (int) moveOn(_					RandomAccessDataFile.this.read(b, this.position, off, cappedLen))__		};perform,the,actual,read,param,b,the,bytes,to,read,or,code,null,when,reading,a,single,byte,param,off,the,offset,of,the,byte,array,param,len,the,length,of,data,to,read,return,the,number,of,bytes,read,into,code,b,or,the,actual,read,byte,if,code,b,is,code,null,returns,1,when,the,end,of,the,stream,is,reached,throws,ioexception,in,case,of,i,o,errors;public,int,do,read,byte,b,int,off,int,len,throws,ioexception,if,len,0,return,0,int,capped,len,cap,len,if,capped,len,0,return,1,return,int,move,on,random,access,data,file,this,read,b,this,position,off,capped,len
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1507173536;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1514456845;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1515014644;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1515528807;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1519728495;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1521215930;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1525099530;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1525218144;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1525376698;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> DataInputStream -> private long moveOn(int amount);1532738143;Move the stream position forwards the specified amount._@param amount the amount to move_@return the amount moved;private long moveOn(int amount) {_			this.position += amount__			return amount__		};move,the,stream,position,forwards,the,specified,amount,param,amount,the,amount,to,move,return,the,amount,moved;private,long,move,on,int,amount,this,position,amount,return,amount
RandomAccessDataFile -> public RandomAccessDataFile(File file);1507173536;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File, int);public RandomAccessDataFile(File file) {_		this(file, DEFAULT_CONCURRENT_READS)__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file,int;public,random,access,data,file,file,file,this,file
RandomAccessDataFile -> public RandomAccessDataFile(File file);1514456845;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File, int);public RandomAccessDataFile(File file) {_		this(file, DEFAULT_CONCURRENT_READS)__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file,int;public,random,access,data,file,file,file,this,file
RandomAccessDataFile -> public RandomAccessDataFile(File file);1515014644;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File, int);public RandomAccessDataFile(File file) {_		this(file, DEFAULT_CONCURRENT_READS)__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file,int;public,random,access,data,file,file,file,this,file
RandomAccessDataFile -> public RandomAccessDataFile(File file);1515528807;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist_@see #RandomAccessDataFile(File, int);public RandomAccessDataFile(File file) {_		this(file, DEFAULT_CONCURRENT_READS)__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist,see,random,access,data,file,file,int;public,random,access,data,file,file,file,this,file
RandomAccessDataFile -> public RandomAccessDataFile(File file);1519728495;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		try {_			this.randomAccessFile = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException ex) {_			throw new IllegalArgumentException(_					String.format("File %s must exist", file.getAbsolutePath()))__		}_		this.file = file__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,try,this,random,access,file,new,random,access,file,file,r,catch,file,not,found,exception,ex,throw,new,illegal,argument,exception,string,format,file,s,must,exist,file,get,absolute,path,this,file,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file);1521215930;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		this.fileAccess = new FileAccess(file)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,this,file,access,new,file,access,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file);1525099530;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		this.fileAccess = new FileAccess(file)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,this,file,access,new,file,access,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file);1525218144;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		this.fileAccess = new FileAccess(file)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,this,file,access,new,file,access,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file);1525376698;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		this.fileAccess = new FileAccess(file)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,this,file,access,new,file,access,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> public RandomAccessDataFile(File file);1532738143;Create a new {@link RandomAccessDataFile} backed by the specified file._@param file the underlying file_@throws IllegalArgumentException if the file is null or does not exist;public RandomAccessDataFile(File file) {_		if (file == null) {_			throw new IllegalArgumentException("File must not be null")__		}_		this.fileAccess = new FileAccess(file)__		this.offset = 0L__		this.length = file.length()__	};create,a,new,link,random,access,data,file,backed,by,the,specified,file,param,file,the,underlying,file,throws,illegal,argument,exception,if,the,file,is,null,or,does,not,exist;public,random,access,data,file,file,file,if,file,null,throw,new,illegal,argument,exception,file,must,not,be,null,this,file,access,new,file,access,file,this,offset,0l,this,length,file,length
RandomAccessDataFile -> private RandomAccessDataFile(File file, FilePool pool, long offset, long length);1507173536;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param file the underlying file_@param pool the underlying pool_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(File file, FilePool pool, long offset, long length) {_		this.file = file__		this.filePool = pool__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,the,underlying,file,param,pool,the,underlying,pool,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,file,file,pool,pool,long,offset,long,length,this,file,file,this,file,pool,pool,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(File file, FilePool pool, long offset, long length);1514456845;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param file the underlying file_@param pool the underlying pool_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(File file, FilePool pool, long offset, long length) {_		this.file = file__		this.filePool = pool__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,the,underlying,file,param,pool,the,underlying,pool,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,file,file,pool,pool,long,offset,long,length,this,file,file,this,file,pool,pool,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(File file, FilePool pool, long offset, long length);1515014644;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param file the underlying file_@param pool the underlying pool_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(File file, FilePool pool, long offset, long length) {_		this.file = file__		this.filePool = pool__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,the,underlying,file,param,pool,the,underlying,pool,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,file,file,pool,pool,long,offset,long,length,this,file,file,this,file,pool,pool,this,offset,offset,this,length,length
RandomAccessDataFile -> private RandomAccessDataFile(File file, FilePool pool, long offset, long length);1515528807;Private constructor used to create a {@link #getSubsection(long, long) subsection}._@param file the underlying file_@param pool the underlying pool_@param offset the offset of the section_@param length the length of the section;private RandomAccessDataFile(File file, FilePool pool, long offset, long length) {_		this.file = file__		this.filePool = pool__		this.offset = offset__		this.length = length__	};private,constructor,used,to,create,a,link,get,subsection,long,long,subsection,param,file,the,underlying,file,param,pool,the,underlying,pool,param,offset,the,offset,of,the,section,param,length,the,length,of,the,section;private,random,access,data,file,file,file,file,pool,pool,long,offset,long,length,this,file,file,this,file,pool,pool,this,offset,offset,this,length,length
