commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void setExcludes(List<Exclude> excludes) {     this.excludes = excludes. }
false;protected;1;3;;protected void setIncludes(List<Include> includes) {     this.includes = includes. }
false;protected;1;3;;protected void setExcludeGroupIds(String excludeGroupIds) {     this.excludeGroupIds = excludeGroupIds. }
false;protected;2;11;;protected Set<Artifact> filterDependencies(Set<Artifact> dependencies, FilterArtifacts filters) throws MojoExecutionException {     try {         Set<Artifact> filtered = new LinkedHashSet<>(dependencies).         filtered.retainAll(filters.filter(dependencies)).         return filtered.     } catch (ArtifactFilterException ex) {         throw new MojoExecutionException(ex.getMessage(), ex).     } }
true;protected,final;1;15;/**  * Return artifact filters configured for this MOJO.  * @param additionalFilters optional additional filters to apply  * @return the filters  */ ;/**  * Return artifact filters configured for this MOJO.  * @param additionalFilters optional additional filters to apply  * @return the filters  */ protected final FilterArtifacts getFilters(ArtifactsFilter... additionalFilters) {     FilterArtifacts filters = new FilterArtifacts().     for (ArtifactsFilter additionalFilter : additionalFilters) {         filters.addFilter(additionalFilter).     }     filters.addFilter(new MatchingGroupIdFilter(cleanFilterConfig(this.excludeGroupIds))).     if (this.includes != null && !this.includes.isEmpty()) {         filters.addFilter(new IncludeFilter(this.includes)).     }     if (this.excludes != null && !this.excludes.isEmpty()) {         filters.addFilter(new ExcludeFilter(this.excludes)).     }     return filters. }
false;private;1;14;;private String cleanFilterConfig(String content) {     if (content == null || content.trim().isEmpty()) {         return "".     }     StringBuilder cleaned = new StringBuilder().     StringTokenizer tokenizer = new StringTokenizer(content, ",").     while (tokenizer.hasMoreElements()) {         cleaned.append(tokenizer.nextToken().trim()).         if (tokenizer.hasMoreElements()) {             cleaned.append(",").         }     }     return cleaned.toString(). }
