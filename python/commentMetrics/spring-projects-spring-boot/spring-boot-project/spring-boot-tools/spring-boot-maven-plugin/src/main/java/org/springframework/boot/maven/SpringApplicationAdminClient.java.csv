commented;modifiers;parameterAmount;loc;comment;code
true;public;0;19;/**  * Check if the spring application managed by this instance is ready. Returns  * {@code false} if the mbean is not yet deployed so this method should be repeatedly  * called until a timeout is reached.  * @return {@code true} if the application is ready to service requests  * @throws MojoExecutionException if the JMX service could not be contacted  */ ;/**  * Check if the spring application managed by this instance is ready. Returns  * {@code false} if the mbean is not yet deployed so this method should be repeatedly  * called until a timeout is reached.  * @return {@code true} if the application is ready to service requests  * @throws MojoExecutionException if the JMX service could not be contacted  */ public boolean isReady() throws MojoExecutionException {     try {         return (Boolean) this.connection.getAttribute(this.objectName, "Ready").     } catch (InstanceNotFoundException ex) {         // Instance not available yet         return false.     } catch (AttributeNotFoundException ex) {         throw new IllegalStateException("Unexpected: attribute 'Ready' not available", ex).     } catch (ReflectionException ex) {         throw new MojoExecutionException("Failed to retrieve Ready attribute", ex.getCause()).     } catch (MBeanException | IOException ex) {         throw new MojoExecutionException(ex.getMessage(), ex).     } }
true;public;0;12;/**  * Stop the application managed by this instance.  * @throws MojoExecutionException if the JMX service could not be contacted  * @throws IOException if an I/O error occurs  * @throws InstanceNotFoundException if the lifecycle mbean cannot be found  */ ;/**  * Stop the application managed by this instance.  * @throws MojoExecutionException if the JMX service could not be contacted  * @throws IOException if an I/O error occurs  * @throws InstanceNotFoundException if the lifecycle mbean cannot be found  */ public void stop() throws MojoExecutionException, IOException, InstanceNotFoundException {     try {         this.connection.invoke(this.objectName, "shutdown", null, null).     } catch (ReflectionException ex) {         throw new MojoExecutionException("Shutdown failed", ex.getCause()).     } catch (MBeanException ex) {         throw new MojoExecutionException("Could not invoke shutdown operation", ex).     } }
false;private;1;8;;private ObjectName toObjectName(String name) {     try {         return new ObjectName(name).     } catch (MalformedObjectNameException ex) {         throw new IllegalArgumentException("Invalid jmx name '" + name + "'").     } }
true;public,static;1;5;/**  * Create a connector for an {@link javax.management.MBeanServer} exposed on the  * current machine and the current port. Security should be disabled.  * @param port the port on which the mbean server is exposed  * @return a connection  * @throws IOException if the connection to that server failed  */ ;/**  * Create a connector for an {@link javax.management.MBeanServer} exposed on the  * current machine and the current port. Security should be disabled.  * @param port the port on which the mbean server is exposed  * @return a connection  * @throws IOException if the connection to that server failed  */ public static JMXConnector connect(int port) throws IOException {     String url = "service:jmx:rmi:///jndi/rmi://127.0.0.1:" + port + "/jmxrmi".     JMXServiceURL serviceUrl = new JMXServiceURL(url).     return JMXConnectorFactory.connect(serviceUrl, null). }
