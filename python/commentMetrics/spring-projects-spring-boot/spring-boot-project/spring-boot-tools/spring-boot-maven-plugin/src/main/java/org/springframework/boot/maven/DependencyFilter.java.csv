commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override @SuppressWarnings({ "rawtypes", "unchecked" }) public Set filter(Set artifacts) throws ArtifactFilterException {     Set result = new HashSet().     for (Object artifact : artifacts) {         if (!filter((Artifact) artifact)) {             result.add(artifact).         }     }     return result. }
false;protected,abstract;1;1;;protected abstract boolean filter(Artifact artifact).
true;protected,final;2;10;/**  * Check if the specified {@link org.apache.maven.artifact.Artifact} matches the  * specified {@link org.springframework.boot.maven.FilterableDependency}. Returns  * {@code true} if it should be excluded  * @param artifact the Maven {@link Artifact}  * @param dependency the {@link FilterableDependency}  * @return {@code true} if the artifact matches the dependency  */ ;/**  * Check if the specified {@link org.apache.maven.artifact.Artifact} matches the  * specified {@link org.springframework.boot.maven.FilterableDependency}. Returns  * {@code true} if it should be excluded  * @param artifact the Maven {@link Artifact}  * @param dependency the {@link FilterableDependency}  * @return {@code true} if the artifact matches the dependency  */ protected final boolean equals(Artifact artifact, FilterableDependency dependency) {     if (!dependency.getGroupId().equals(artifact.getGroupId())) {         return false.     }     if (!dependency.getArtifactId().equals(artifact.getArtifactId())) {         return false.     }     return (dependency.getClassifier() == null || artifact.getClassifier() != null && dependency.getClassifier().equals(artifact.getClassifier())). }
false;protected,final;0;3;;protected final List<? extends FilterableDependency> getFilters() {     return this.filters. }
