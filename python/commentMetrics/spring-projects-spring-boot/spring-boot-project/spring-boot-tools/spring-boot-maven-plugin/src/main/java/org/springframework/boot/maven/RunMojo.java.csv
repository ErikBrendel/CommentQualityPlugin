commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean enableForkByDefault() {     return super.enableForkByDefault() || hasDevtools(). }
false;protected;0;7;;@Override protected void logDisabledFork() {     super.logDisabledFork().     if (hasDevtools()) {         getLog().warn("Fork mode disabled, devtools will be disabled").     } }
false;protected;3;19;;@Override protected void runWithForkedJvm(File workingDirectory, List<String> args, Map<String, String> environmentVariables) throws MojoExecutionException {     try {         RunProcess runProcess = new RunProcess(workingDirectory, new JavaExecutable().toString()).         Runtime.getRuntime().addShutdownHook(new Thread(new RunProcessKiller(runProcess))).         int exitCode = runProcess.run(true, args, environmentVariables).         if (exitCode == 0 || exitCode == EXIT_CODE_SIGINT) {             return.         }         throw new MojoExecutionException("Application finished with exit code: " + exitCode).     } catch (Exception ex) {         throw new MojoExecutionException("Could not exec java", ex).     } }
false;protected;2;11;;@Override protected void runWithMavenJvm(String startClassName, String... arguments) throws MojoExecutionException {     IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(startClassName).     Thread launchThread = new Thread(threadGroup, new LaunchRunner(startClassName, arguments), "main").     launchThread.setContextClassLoader(new URLClassLoader(getClassPathUrls())).     launchThread.start().     join(threadGroup).     threadGroup.rethrowUncaughtException(). }
false;private;1;20;;private void join(ThreadGroup threadGroup) {     boolean hasNonDaemonThreads.     do {         hasNonDaemonThreads = false.         Thread[] threads = new Thread[threadGroup.activeCount()].         threadGroup.enumerate(threads).         for (Thread thread : threads) {             if (thread != null && !thread.isDaemon()) {                 try {                     hasNonDaemonThreads = true.                     thread.join().                 } catch (InterruptedException ex) {                     Thread.currentThread().interrupt().                 }             }         }     } while (hasNonDaemonThreads). }
false;private;0;6;;private boolean hasDevtools() {     if (this.hasDevtools == null) {         this.hasDevtools = checkForDevtools().     }     return this.hasDevtools. }
false;private;0;11;;private boolean checkForDevtools() {     try {         URL[] urls = getClassPathUrls().         try (URLClassLoader classLoader = new URLClassLoader(urls)) {             return (classLoader.findResource(RESTARTER_CLASS_LOCATION) != null).         }     } catch (Exception ex) {         return false.     } }
false;public;0;4;;@Override public void run() {     this.runProcess.kill(). }
