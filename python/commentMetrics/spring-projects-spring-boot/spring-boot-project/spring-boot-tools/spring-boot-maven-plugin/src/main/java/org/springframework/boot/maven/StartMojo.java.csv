# id;timestamp;commentText;codeText;commentWords;codeWords
StartMojo -> public <T> T execute(long wait, int maxAttempts, Callable<T> callback) 			throws Exception;1507173536;Execute a task, retrying it on failure._@param <T> the result type_@param wait the wait time_@param maxAttempts the maximum number of attempts_@param callback the task to execute (possibly multiple times). The callback should_return {@code null} to indicate that another attempt should be made_@return the result_@throws Exception in case of execution errors;public <T> T execute(long wait, int maxAttempts, Callable<T> callback)_			throws Exception {_		getLog().debug("Waiting for spring application to start...")__		for (int i = 0_ i < maxAttempts_ i++) {_			T result = callback.call()__			if (result != null) {_				return result__			}_			String message = "Spring application is not ready yet, waiting " + wait_					+ "ms (attempt " + (i + 1) + ")"__			getLog().debug(message)__			synchronized (this.lock) {_				try {_					this.lock.wait(wait)__				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__					throw new IllegalStateException(_							"Interrupted while waiting for Spring Boot app to start.")__				}_			}_		}_		throw new MojoExecutionException(_				"Spring application did not start before the configured " + "timeout ("_						+ (wait * maxAttempts) + "ms")__	};execute,a,task,retrying,it,on,failure,param,t,the,result,type,param,wait,the,wait,time,param,max,attempts,the,maximum,number,of,attempts,param,callback,the,task,to,execute,possibly,multiple,times,the,callback,should,return,code,null,to,indicate,that,another,attempt,should,be,made,return,the,result,throws,exception,in,case,of,execution,errors;public,t,t,execute,long,wait,int,max,attempts,callable,t,callback,throws,exception,get,log,debug,waiting,for,spring,application,to,start,for,int,i,0,i,max,attempts,i,t,result,callback,call,if,result,null,return,result,string,message,spring,application,is,not,ready,yet,waiting,wait,ms,attempt,i,1,get,log,debug,message,synchronized,this,lock,try,this,lock,wait,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,throw,new,illegal,state,exception,interrupted,while,waiting,for,spring,boot,app,to,start,throw,new,mojo,execution,exception,spring,application,did,not,start,before,the,configured,timeout,wait,max,attempts,ms
StartMojo -> public <T> T execute(long wait, int maxAttempts, Callable<T> callback) 			throws Exception;1519362690;Execute a task, retrying it on failure._@param <T> the result type_@param wait the wait time_@param maxAttempts the maximum number of attempts_@param callback the task to execute (possibly multiple times). The callback should_return {@code null} to indicate that another attempt should be made_@return the result_@throws Exception in case of execution errors;public <T> T execute(long wait, int maxAttempts, Callable<T> callback)_			throws Exception {_		getLog().debug("Waiting for spring application to start...")__		for (int i = 0_ i < maxAttempts_ i++) {_			T result = callback.call()__			if (result != null) {_				return result__			}_			String message = "Spring application is not ready yet, waiting " + wait_					+ "ms (attempt " + (i + 1) + ")"__			getLog().debug(message)__			synchronized (this.lock) {_				try {_					this.lock.wait(wait)__				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__					throw new IllegalStateException(_							"Interrupted while waiting for Spring Boot app to start.")__				}_			}_		}_		throw new MojoExecutionException(_				"Spring application did not start before the configured " + "timeout ("_						+ (wait * maxAttempts) + "ms")__	};execute,a,task,retrying,it,on,failure,param,t,the,result,type,param,wait,the,wait,time,param,max,attempts,the,maximum,number,of,attempts,param,callback,the,task,to,execute,possibly,multiple,times,the,callback,should,return,code,null,to,indicate,that,another,attempt,should,be,made,return,the,result,throws,exception,in,case,of,execution,errors;public,t,t,execute,long,wait,int,max,attempts,callable,t,callback,throws,exception,get,log,debug,waiting,for,spring,application,to,start,for,int,i,0,i,max,attempts,i,t,result,callback,call,if,result,null,return,result,string,message,spring,application,is,not,ready,yet,waiting,wait,ms,attempt,i,1,get,log,debug,message,synchronized,this,lock,try,this,lock,wait,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,throw,new,illegal,state,exception,interrupted,while,waiting,for,spring,boot,app,to,start,throw,new,mojo,execution,exception,spring,application,did,not,start,before,the,configured,timeout,wait,max,attempts,ms
StartMojo -> public <T> T execute(long wait, int maxAttempts, Callable<T> callback) 			throws Exception;1524577778;Execute a task, retrying it on failure._@param <T> the result type_@param wait the wait time_@param maxAttempts the maximum number of attempts_@param callback the task to execute (possibly multiple times). The callback should_return {@code null} to indicate that another attempt should be made_@return the result_@throws Exception in case of execution errors;public <T> T execute(long wait, int maxAttempts, Callable<T> callback)_			throws Exception {_		getLog().debug("Waiting for spring application to start...")__		for (int i = 0_ i < maxAttempts_ i++) {_			T result = callback.call()__			if (result != null) {_				return result__			}_			String message = "Spring application is not ready yet, waiting " + wait_					+ "ms (attempt " + (i + 1) + ")"__			getLog().debug(message)__			synchronized (this.lock) {_				try {_					this.lock.wait(wait)__				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__					throw new IllegalStateException(_							"Interrupted while waiting for Spring Boot app to start.")__				}_			}_		}_		throw new MojoExecutionException(_				"Spring application did not start before the configured " + "timeout ("_						+ (wait * maxAttempts) + "ms")__	};execute,a,task,retrying,it,on,failure,param,t,the,result,type,param,wait,the,wait,time,param,max,attempts,the,maximum,number,of,attempts,param,callback,the,task,to,execute,possibly,multiple,times,the,callback,should,return,code,null,to,indicate,that,another,attempt,should,be,made,return,the,result,throws,exception,in,case,of,execution,errors;public,t,t,execute,long,wait,int,max,attempts,callable,t,callback,throws,exception,get,log,debug,waiting,for,spring,application,to,start,for,int,i,0,i,max,attempts,i,t,result,callback,call,if,result,null,return,result,string,message,spring,application,is,not,ready,yet,waiting,wait,ms,attempt,i,1,get,log,debug,message,synchronized,this,lock,try,this,lock,wait,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,throw,new,illegal,state,exception,interrupted,while,waiting,for,spring,boot,app,to,start,throw,new,mojo,execution,exception,spring,application,did,not,start,before,the,configured,timeout,wait,max,attempts,ms
StartMojo -> public <T> T execute(long wait, int maxAttempts, Callable<T> callback) 			throws Exception;1525476995;Execute a task, retrying it on failure._@param <T> the result type_@param wait the wait time_@param maxAttempts the maximum number of attempts_@param callback the task to execute (possibly multiple times). The callback should_return {@code null} to indicate that another attempt should be made_@return the result_@throws Exception in case of execution errors;public <T> T execute(long wait, int maxAttempts, Callable<T> callback)_			throws Exception {_		getLog().debug("Waiting for spring application to start...")__		for (int i = 0_ i < maxAttempts_ i++) {_			T result = callback.call()__			if (result != null) {_				return result__			}_			String message = "Spring application is not ready yet, waiting " + wait_					+ "ms (attempt " + (i + 1) + ")"__			getLog().debug(message)__			synchronized (this.lock) {_				try {_					this.lock.wait(wait)__				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__					throw new IllegalStateException(_							"Interrupted while waiting for Spring Boot app to start.")__				}_			}_		}_		throw new MojoExecutionException(_				"Spring application did not start before the configured " + "timeout ("_						+ (wait * maxAttempts) + "ms")__	};execute,a,task,retrying,it,on,failure,param,t,the,result,type,param,wait,the,wait,time,param,max,attempts,the,maximum,number,of,attempts,param,callback,the,task,to,execute,possibly,multiple,times,the,callback,should,return,code,null,to,indicate,that,another,attempt,should,be,made,return,the,result,throws,exception,in,case,of,execution,errors;public,t,t,execute,long,wait,int,max,attempts,callable,t,callback,throws,exception,get,log,debug,waiting,for,spring,application,to,start,for,int,i,0,i,max,attempts,i,t,result,callback,call,if,result,null,return,result,string,message,spring,application,is,not,ready,yet,waiting,wait,ms,attempt,i,1,get,log,debug,message,synchronized,this,lock,try,this,lock,wait,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,throw,new,illegal,state,exception,interrupted,while,waiting,for,spring,boot,app,to,start,throw,new,mojo,execution,exception,spring,application,did,not,start,before,the,configured,timeout,wait,max,attempts,ms
StartMojo -> public <T> T execute(long wait, int maxAttempts, Callable<T> callback) 			throws Exception;1539792379;Execute a task, retrying it on failure._@param <T> the result type_@param wait the wait time_@param maxAttempts the maximum number of attempts_@param callback the task to execute (possibly multiple times). The callback should_return {@code null} to indicate that another attempt should be made_@return the result_@throws Exception in case of execution errors;public <T> T execute(long wait, int maxAttempts, Callable<T> callback)_			throws Exception {_		getLog().debug("Waiting for spring application to start...")__		for (int i = 0_ i < maxAttempts_ i++) {_			T result = callback.call()__			if (result != null) {_				return result__			}_			String message = "Spring application is not ready yet, waiting " + wait_					+ "ms (attempt " + (i + 1) + ")"__			getLog().debug(message)__			synchronized (this.lock) {_				try {_					this.lock.wait(wait)__				}_				catch (InterruptedException ex) {_					Thread.currentThread().interrupt()__					throw new IllegalStateException(_							"Interrupted while waiting for Spring Boot app to start.")__				}_			}_		}_		throw new MojoExecutionException(_				"Spring application did not start before the configured " + "timeout ("_						+ (wait * maxAttempts) + "ms")__	};execute,a,task,retrying,it,on,failure,param,t,the,result,type,param,wait,the,wait,time,param,max,attempts,the,maximum,number,of,attempts,param,callback,the,task,to,execute,possibly,multiple,times,the,callback,should,return,code,null,to,indicate,that,another,attempt,should,be,made,return,the,result,throws,exception,in,case,of,execution,errors;public,t,t,execute,long,wait,int,max,attempts,callable,t,callback,throws,exception,get,log,debug,waiting,for,spring,application,to,start,for,int,i,0,i,max,attempts,i,t,result,callback,call,if,result,null,return,result,string,message,spring,application,is,not,ready,yet,waiting,wait,ms,attempt,i,1,get,log,debug,message,synchronized,this,lock,try,this,lock,wait,wait,catch,interrupted,exception,ex,thread,current,thread,interrupt,throw,new,illegal,state,exception,interrupted,while,waiting,for,spring,boot,app,to,start,throw,new,mojo,execution,exception,spring,application,did,not,start,before,the,configured,timeout,wait,max,attempts,ms
