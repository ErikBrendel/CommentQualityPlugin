commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void doWithLibraries(LibraryCallback callback) throws IOException {     Set<String> duplicates = getDuplicates(this.artifacts).     for (Artifact artifact : this.artifacts) {         LibraryScope scope = SCOPES.get(artifact.getScope()).         if (scope != null && artifact.getFile() != null) {             String name = getFileName(artifact).             if (duplicates.contains(name)) {                 this.log.debug("Duplicate found: " + name).                 name = artifact.getGroupId() + "-" + name.                 this.log.debug("Renamed to: " + name).             }             callback.library(new Library(name, artifact.getFile(), scope, isUnpackRequired(artifact))).         }     } }
false;private;1;11;;private Set<String> getDuplicates(Set<Artifact> artifacts) {     Set<String> duplicates = new HashSet<>().     Set<String> seen = new HashSet<>().     for (Artifact artifact : artifacts) {         String fileName = getFileName(artifact).         if (artifact.getFile() != null && !seen.add(fileName)) {             duplicates.add(fileName).         }     }     return duplicates. }
false;private;1;11;;private boolean isUnpackRequired(Artifact artifact) {     if (this.unpacks != null) {         for (Dependency unpack : this.unpacks) {             if (artifact.getGroupId().equals(unpack.getGroupId()) && artifact.getArtifactId().equals(unpack.getArtifactId())) {                 return true.             }         }     }     return false. }
false;private;1;10;;private String getFileName(Artifact artifact) {     StringBuilder sb = new StringBuilder().     sb.append(artifact.getArtifactId()).append("-").append(artifact.getBaseVersion()).     String classifier = artifact.getClassifier().     if (classifier != null) {         sb.append("-").append(classifier).     }     sb.append(".").append(artifact.getArtifactHandler().getExtension()).     return sb.toString(). }
