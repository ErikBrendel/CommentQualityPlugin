commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void includeSimple() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar"))).     Artifact artifact = createArtifact("com.foo", "bar").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).hasSize(1).     assertThat(result.iterator().next()).isSameAs(artifact). }
false;public;0;8;;@Test public void includeGroupIdNoMatch() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar"))).     Artifact artifact = createArtifact("com.baz", "bar").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).isEmpty(). }
false;public;0;8;;@Test public void includeArtifactIdNoMatch() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar"))).     Artifact artifact = createArtifact("com.foo", "biz").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).isEmpty(). }
false;public;0;9;;@Test public void includeClassifier() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar", "jdk5"))).     Artifact artifact = createArtifact("com.foo", "bar", "jdk5").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).hasSize(1).     assertThat(result.iterator().next()).isSameAs(artifact). }
false;public;0;8;;@Test public void includeClassifierNoTargetClassifier() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar", "jdk5"))).     Artifact artifact = createArtifact("com.foo", "bar").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).isEmpty(). }
false;public;0;8;;@Test public void includeClassifierNoMatch() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar", "jdk5"))).     Artifact artifact = createArtifact("com.foo", "bar", "jdk6").     Set result = filter.filter(Collections.singleton(artifact)).     assertThat(result).isEmpty(). }
false;public;0;13;;@Test public void includeMulti() throws ArtifactFilterException {     IncludeFilter filter = new IncludeFilter(Arrays.asList(createInclude("com.foo", "bar"), createInclude("com.foo", "bar2"), createInclude("org.acme", "app"))).     Set<Artifact> artifacts = new HashSet<>().     artifacts.add(createArtifact("com.foo", "bar")).     artifacts.add(createArtifact("com.foo", "bar")).     Artifact anotherAcme = createArtifact("org.acme", "another-app").     artifacts.add(anotherAcme).     Set result = filter.filter(artifacts).     assertThat(result).hasSize(2). }
false;private;2;3;;private Include createInclude(String groupId, String artifactId) {     return createInclude(groupId, artifactId, null). }
false;private;3;9;;private Include createInclude(String groupId, String artifactId, String classifier) {     Include include = new Include().     include.setGroupId(groupId).     include.setArtifactId(artifactId).     if (classifier != null) {         include.setClassifier(classifier).     }     return include. }
false;private;3;8;;private Artifact createArtifact(String groupId, String artifactId, String classifier) {     Artifact a = mock(Artifact.class).     given(a.getGroupId()).willReturn(groupId).     given(a.getArtifactId()).willReturn(artifactId).     given(a.getClassifier()).willReturn(classifier).     return a. }
false;private;2;3;;private Artifact createArtifact(String groupId, String artifactId) {     return createArtifact(groupId, artifactId, null). }
