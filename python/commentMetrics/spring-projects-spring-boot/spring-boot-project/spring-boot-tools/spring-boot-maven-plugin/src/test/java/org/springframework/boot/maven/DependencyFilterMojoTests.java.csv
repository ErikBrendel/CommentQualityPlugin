commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void filterDependencies() throws MojoExecutionException {     TestableDependencyFilterMojo mojo = new TestableDependencyFilterMojo(Collections.emptyList(), "com.foo").     Artifact artifact = createArtifact("com.bar", "one").     Set<Artifact> artifacts = mojo.filterDependencies(createArtifact("com.foo", "one"), createArtifact("com.foo", "two"), artifact).     assertThat(artifacts).hasSize(1).     assertThat(artifacts.iterator().next()).isSameAs(artifact). }
false;public;0;12;;@Test public void filterGroupIdExactMatch() throws MojoExecutionException {     TestableDependencyFilterMojo mojo = new TestableDependencyFilterMojo(Collections.emptyList(), "com.foo").     Artifact artifact = createArtifact("com.foo.bar", "one").     Set<Artifact> artifacts = mojo.filterDependencies(createArtifact("com.foo", "one"), createArtifact("com.foo", "two"), artifact).     assertThat(artifacts).hasSize(1).     assertThat(artifacts.iterator().next()).isSameAs(artifact). }
false;public;0;11;;@Test public void filterScopeKeepOrder() throws MojoExecutionException {     TestableDependencyFilterMojo mojo = new TestableDependencyFilterMojo(Collections.emptyList(), "", new ScopeFilter(null, Artifact.SCOPE_SYSTEM)).     Artifact one = createArtifact("com.foo", "one").     Artifact two = createArtifact("com.foo", "two", Artifact.SCOPE_SYSTEM).     Artifact three = createArtifact("com.foo", "three", Artifact.SCOPE_RUNTIME).     Set<Artifact> artifacts = mojo.filterDependencies(one, two, three).     assertThat(artifacts).containsExactly(one, three). }
false;public;0;11;;@Test public void filterGroupIdKeepOrder() throws MojoExecutionException {     TestableDependencyFilterMojo mojo = new TestableDependencyFilterMojo(Collections.emptyList(), "com.foo").     Artifact one = createArtifact("com.foo", "one").     Artifact two = createArtifact("com.bar", "two").     Artifact three = createArtifact("com.bar", "three").     Artifact four = createArtifact("com.foo", "four").     Set<Artifact> artifacts = mojo.filterDependencies(one, two, three, four).     assertThat(artifacts).containsExactly(two, three). }
false;public;0;14;;@Test public void filterExcludeKeepOrder() throws MojoExecutionException {     Exclude exclude = new Exclude().     exclude.setGroupId("com.bar").     exclude.setArtifactId("two").     TestableDependencyFilterMojo mojo = new TestableDependencyFilterMojo(Collections.singletonList(exclude), "").     Artifact one = createArtifact("com.foo", "one").     Artifact two = createArtifact("com.bar", "two").     Artifact three = createArtifact("com.bar", "three").     Artifact four = createArtifact("com.foo", "four").     Set<Artifact> artifacts = mojo.filterDependencies(one, two, three, four).     assertThat(artifacts).containsExactly(one, three, four). }
false;private,static;2;3;;private static Artifact createArtifact(String groupId, String artifactId) {     return createArtifact(groupId, artifactId, null). }
false;private,static;3;10;;private static Artifact createArtifact(String groupId, String artifactId, String scope) {     Artifact a = mock(Artifact.class).     given(a.getGroupId()).willReturn(groupId).     given(a.getArtifactId()).willReturn(artifactId).     if (scope != null) {         given(a.getScope()).willReturn(scope).     }     return a. }
false;public;1;5;;public Set<Artifact> filterDependencies(Artifact... artifacts) throws MojoExecutionException {     Set<Artifact> input = new LinkedHashSet<>(Arrays.asList(artifacts)).     return filterDependencies(input, getFilters(this.additionalFilters)). }
false;public;0;4;;@Override public void execute() { }
