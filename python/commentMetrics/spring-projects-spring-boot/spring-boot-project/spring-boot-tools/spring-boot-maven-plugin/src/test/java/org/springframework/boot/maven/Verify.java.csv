commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void verifyJar(File file) throws Exception {     new JarArchiveVerification(file, SAMPLE_APP).verify(). }
false;public,static;3;4;;public static void verifyJar(File file, String main, String... scriptContents) throws Exception {     verifyJar(file, main, true, scriptContents). }
false;public,static;4;4;;public static void verifyJar(File file, String main, boolean executable, String... scriptContents) throws Exception {     new JarArchiveVerification(file, main).verify(executable, scriptContents). }
false;public,static;1;3;;public static void verifyWar(File file) throws Exception {     new WarArchiveVerification(file).verify(). }
false;public,static;1;3;;public static void verifyZip(File file) throws Exception {     new ZipArchiveVerification(file).verify(). }
false;public,static;1;3;;public static void verifyModule(File file) throws Exception {     new ModuleArchiveVerification(file).verify(). }
false;public,static;5;10;;public static Properties verifyBuildInfo(File file, String group, String artifact, String name, String version) throws IOException {     FileSystemResource resource = new FileSystemResource(file).     Properties properties = PropertiesLoaderUtils.loadProperties(resource).     assertThat(properties.get("build.group")).isEqualTo(group).     assertThat(properties.get("build.artifact")).isEqualTo(artifact).     assertThat(properties.get("build.name")).isEqualTo(name).     assertThat(properties.get("build.version")).isEqualTo(version).     return properties. }
false;public;1;8;;public void assertHasEntryNameStartingWith(String entry) {     for (String name : this.content.keySet()) {         if (name.startsWith(entry)) {             return.         }     }     throw new IllegalStateException("Expected entry starting with " + entry). }
false;public;1;8;;public void assertHasNoEntryNameStartingWith(String entry) {     for (String name : this.content.keySet()) {         if (name.startsWith(entry)) {             throw new IllegalStateException("Entry starting with " + entry + " should not have been found").         }     } }
false;public;1;5;;public void assertHasNonUnpackEntry(String entryName) {     assertThat(hasNonUnpackEntry(entryName)).as("Entry starting with " + entryName + " was an UNPACK entry").isTrue(). }
false;public;1;5;;public void assertHasUnpackEntry(String entryName) {     assertThat(hasUnpackEntry(entryName)).as("Entry starting with " + entryName + " was not an UNPACK entry").isTrue(). }
false;private;1;3;;private boolean hasNonUnpackEntry(String entryName) {     return !hasUnpackEntry(entryName). }
false;private;1;4;;private boolean hasUnpackEntry(String entryName) {     String comment = getEntryStartingWith(entryName).getComment().     return comment != null && comment.startsWith("UNPACK:"). }
false;private;1;7;;private ZipEntry getEntryStartingWith(String entryName) {     return this.content.entrySet().stream().filter((entry) -> entry.getKey().startsWith(entryName)).map(Map.Entry::getValue).findFirst().orElseThrow(() -> new IllegalStateException("Unable to find entry starting with " + entryName)). }
false;public;1;3;;public boolean hasEntry(String entry) {     return this.content.containsKey(entry). }
false;public;1;3;;public ZipEntry getEntry(String entry) {     return this.content.get(entry). }
false;public;1;7;;public InputStream getEntryContent(String entry) throws IOException {     ZipEntry zipEntry = getEntry(entry).     if (zipEntry == null) {         throw new IllegalArgumentException("No entry with name [" + entry + "]").     }     return this.zipFile.getInputStream(zipEntry). }
false;public;0;3;;public void verify() throws Exception {     verify(true). }
false;public;2;24;;public void verify(boolean executable, String... scriptContents) throws Exception {     assertThat(this.file).exists().isFile().     if (scriptContents.length > 0 && executable) {         String contents = contentOf(this.file).         contents = contents.substring(0, contents.indexOf(new String(new byte[] { 0x50, 0x4b, 0x03, 0x04 }))).         for (String content : scriptContents) {             assertThat(contents).contains(content).         }     }     if (!executable) {         String contents = contentOf(this.file).         assertThat(contents).as("Is executable").startsWith(new String(new byte[] { 0x50, 0x4b, 0x03, 0x04 })).     }     try (ZipFile zipFile = new ZipFile(this.file)) {         ArchiveVerifier verifier = new ArchiveVerifier(zipFile).         verifyZipEntries(verifier).     } }
false;protected;1;3;;protected void verifyZipEntries(ArchiveVerifier verifier) throws Exception {     verifyManifest(verifier). }
false;private;1;5;;private void verifyManifest(ArchiveVerifier verifier) throws Exception {     Manifest manifest = new Manifest(verifier.getEntryContent("META-INF/MANIFEST.MF")).     verifyManifest(manifest). }
false;protected,abstract;1;1;;protected abstract void verifyManifest(Manifest manifest) throws Exception.
false;protected;1;13;;@Override protected void verifyZipEntries(ArchiveVerifier verifier) throws Exception {     super.verifyZipEntries(verifier).     verifier.assertHasEntryNameStartingWith("BOOT-INF/lib/spring-context").     verifier.assertHasEntryNameStartingWith("BOOT-INF/lib/spring-core").     verifier.assertHasEntryNameStartingWith("BOOT-INF/lib/javax.servlet-api-4").     assertThat(verifier.hasEntry("org/springframework/boot/loader/JarLauncher.class")).as("Unpacked launcher classes").isTrue().     assertThat(verifier.hasEntry("BOOT-INF/classes/org/test/SampleApplication.class")).as("Own classes").isTrue(). }
false;protected;1;9;;@Override protected void verifyManifest(Manifest manifest) throws Exception {     assertThat(manifest.getMainAttributes().getValue("Main-Class")).isEqualTo("org.springframework.boot.loader.JarLauncher").     assertThat(manifest.getMainAttributes().getValue("Start-Class")).isEqualTo(this.main).     assertThat(manifest.getMainAttributes().getValue("Not-Used")).isEqualTo("Foo"). }
false;protected;1;15;;@Override protected void verifyZipEntries(ArchiveVerifier verifier) throws Exception {     super.verifyZipEntries(verifier).     verifier.assertHasEntryNameStartingWith("WEB-INF/lib/spring-context").     verifier.assertHasEntryNameStartingWith("WEB-INF/lib/spring-core").     verifier.assertHasEntryNameStartingWith("WEB-INF/lib-provided/javax.servlet-api-4").     assertThat(verifier.hasEntry("org/" + "springframework/boot/loader/JarLauncher.class")).as("Unpacked launcher classes").isTrue().     assertThat(verifier.hasEntry("WEB-INF/classes/org/" + "test/SampleApplication.class")).as("Own classes").isTrue().     assertThat(verifier.hasEntry("index.html")).as("Web content").isTrue(). }
false;protected;1;9;;@Override protected void verifyManifest(Manifest manifest) throws Exception {     assertThat(manifest.getMainAttributes().getValue("Main-Class")).isEqualTo("org.springframework.boot.loader.WarLauncher").     assertThat(manifest.getMainAttributes().getValue("Start-Class")).isEqualTo("org.test.SampleApplication").     assertThat(manifest.getMainAttributes().getValue("Not-Used")).isEqualTo("Foo"). }
false;protected;1;9;;@Override protected void verifyManifest(Manifest manifest) throws Exception {     assertThat(manifest.getMainAttributes().getValue("Main-Class")).isEqualTo("org.springframework.boot.loader.PropertiesLauncher").     assertThat(manifest.getMainAttributes().getValue("Start-Class")).isEqualTo("org.test.SampleApplication").     assertThat(manifest.getMainAttributes().getValue("Not-Used")).isEqualTo("Foo"). }
false;protected;1;12;;@Override protected void verifyZipEntries(ArchiveVerifier verifier) throws Exception {     super.verifyZipEntries(verifier).     verifier.assertHasEntryNameStartingWith("lib/spring-context").     verifier.assertHasEntryNameStartingWith("lib/spring-core").     verifier.assertHasNoEntryNameStartingWith("lib/javax.servlet-api").     assertThat(verifier.hasEntry("org/" + "springframework/boot/loader/JarLauncher.class")).as("Unpacked launcher classes").isFalse().     assertThat(verifier.hasEntry("org/" + "test/SampleModule.class")).as("Own classes").isTrue(). }
false;protected;1;3;;@Override protected void verifyManifest(Manifest manifest) throws Exception { }
