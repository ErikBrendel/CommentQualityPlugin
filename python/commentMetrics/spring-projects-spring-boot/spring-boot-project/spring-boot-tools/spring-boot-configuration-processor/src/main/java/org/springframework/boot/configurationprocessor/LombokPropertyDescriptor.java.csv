commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;@Override protected boolean isProperty(MetadataGenerationEnvironment env) {     if (!hasLombokPublicAccessor(env, true)) {         return false.     }     boolean isCollection = env.getTypeUtils().isCollectionOrMap(getType()).     return !env.isExcluded(getType()) && (hasSetter(env) || isCollection). }
false;protected;1;7;;@Override protected boolean isNested(MetadataGenerationEnvironment environment) {     if (!hasLombokPublicAccessor(environment, true)) {         return false.     }     return super.isNested(environment). }
false;protected;1;8;;@Override protected ItemDeprecation resolveItemDeprecation(MetadataGenerationEnvironment environment) {     boolean deprecated = environment.isDeprecated(getField()) || environment.isDeprecated(getFactoryMethod()).     return deprecated ? new ItemDeprecation() : null. }
false;private;1;4;;private boolean hasSetter(MetadataGenerationEnvironment env) {     return !getField().getModifiers().contains(Modifier.FINAL) && hasLombokPublicAccessor(env, false). }
true;private;2;16;/**  * Determine if the current {@link #getField() field} defines a public accessor using  * lombok annotations.  * @param env the {@link MetadataGenerationEnvironment}  * @param getter {@code true} to look for the read accessor, {@code false} for the  * write accessor  * @return {@code true} if this field has a public accessor of the specified type  */ ;/**  * Determine if the current {@link #getField() field} defines a public accessor using  * lombok annotations.  * @param env the {@link MetadataGenerationEnvironment}  * @param getter {@code true} to look for the read accessor, {@code false} for the  * write accessor  * @return {@code true} if this field has a public accessor of the specified type  */ private boolean hasLombokPublicAccessor(MetadataGenerationEnvironment env, boolean getter) {     String annotation = (getter ? LOMBOK_GETTER_ANNOTATION : LOMBOK_SETTER_ANNOTATION).     AnnotationMirror lombokMethodAnnotationOnField = env.getAnnotation(getField(), annotation).     if (lombokMethodAnnotationOnField != null) {         return isAccessLevelPublic(env, lombokMethodAnnotationOnField).     }     AnnotationMirror lombokMethodAnnotationOnElement = env.getAnnotation(getOwnerElement(), annotation).     if (lombokMethodAnnotationOnElement != null) {         return isAccessLevelPublic(env, lombokMethodAnnotationOnElement).     }     return (env.getAnnotation(getOwnerElement(), LOMBOK_DATA_ANNOTATION) != null). }
false;private;2;6;;private boolean isAccessLevelPublic(MetadataGenerationEnvironment env, AnnotationMirror lombokAnnotation) {     Map<String, Object> values = env.getAnnotationElementValues(lombokAnnotation).     Object value = values.get("value").     return (value == null || value.toString().equals(LOMBOK_ACCESS_LEVEL_PUBLIC)). }
