commented;modifiers;parameterAmount;loc;comment;code
false;private;1;15;;private void process(TypeElement element) {     for (ExecutableElement method : ElementFilter.methodsIn(element.getEnclosedElements())) {         processMethod(method).     }     for (VariableElement field : ElementFilter.fieldsIn(element.getEnclosedElements())) {         processField(field).     }     Element superType = this.env.getTypeUtils().asElement(element.getSuperclass()).     if (superType instanceof TypeElement && !OBJECT_CLASS_NAME.equals(superType.toString())) {         process((TypeElement) superType).     } }
false;private;1;17;;private void processMethod(ExecutableElement method) {     if (isPublic(method)) {         String name = method.getSimpleName().toString().         if (isGetter(method) && !this.publicGetters.containsKey(name)) {             this.publicGetters.put(getAccessorName(name), method).         } else if (isSetter(method)) {             String propertyName = getAccessorName(name).             List<ExecutableElement> matchingSetters = this.publicSetters.computeIfAbsent(propertyName, (k) -> new ArrayList<>()).             TypeMirror paramType = method.getParameters().get(0).asType().             if (getMatchingSetter(matchingSetters, paramType) == null) {                 matchingSetters.add(method).             }         }     } }
false;private;1;6;;private boolean isPublic(ExecutableElement method) {     Set<Modifier> modifiers = method.getModifiers().     return modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.ABSTRACT) && !modifiers.contains(Modifier.STATIC). }
false;private;2;10;;private ExecutableElement getMatchingSetter(List<ExecutableElement> candidates, TypeMirror type) {     for (ExecutableElement candidate : candidates) {         TypeMirror paramType = candidate.getParameters().get(0).asType().         if (this.env.getTypeUtils().isSameType(paramType, type)) {             return candidate.         }     }     return null. }
false;private;1;7;;private boolean isGetter(ExecutableElement method) {     String name = method.getSimpleName().toString().     return ((name.startsWith("get") && name.length() > 3) || (name.startsWith("is") && name.length() > 2)) && method.getParameters().isEmpty() && (TypeKind.VOID != method.getReturnType().getKind()). }
false;private;1;5;;private boolean isSetter(ExecutableElement method) {     final String name = method.getSimpleName().toString().     return (name.startsWith("set") && name.length() > 3 && method.getParameters().size() == 1 && isSetterReturnType(method)). }
false;private;1;5;;private boolean isSetterReturnType(ExecutableElement method) {     TypeMirror returnType = method.getReturnType().     return (TypeKind.VOID == returnType.getKind() || this.env.getTypeUtils().isSameType(method.getEnclosingElement().asType(), returnType)). }
false;private;1;6;;private String getAccessorName(String methodName) {     String name = methodName.startsWith("is") ? methodName.substring(2) : methodName.substring(3).     name = Character.toLowerCase(name.charAt(0)) + name.substring(1).     return name. }
false;private;1;6;;private void processField(VariableElement field) {     String name = field.getSimpleName().toString().     if (!this.fields.containsKey(name)) {         this.fields.put(name, field).     } }
false;public;0;3;;public Map<String, VariableElement> getFields() {     return Collections.unmodifiableMap(this.fields). }
false;public;0;3;;public Map<String, ExecutableElement> getPublicGetters() {     return Collections.unmodifiableMap(this.publicGetters). }
false;public;2;16;;public ExecutableElement getPublicGetter(String name, TypeMirror type) {     ExecutableElement candidate = this.publicGetters.get(name).     if (candidate != null) {         TypeMirror returnType = candidate.getReturnType().         if (this.env.getTypeUtils().isSameType(returnType, type)) {             return candidate.         }         TypeMirror alternative = this.env.getTypeUtils().getWrapperOrPrimitiveFor(type).         if (alternative != null && this.env.getTypeUtils().isSameType(returnType, alternative)) {             return candidate.         }     }     return null. }
false;public;2;15;;public ExecutableElement getPublicSetter(String name, TypeMirror type) {     List<ExecutableElement> candidates = this.publicSetters.get(name).     if (candidates != null) {         ExecutableElement matching = getMatchingSetter(candidates, type).         if (matching != null) {             return matching.         }         TypeMirror alternative = this.env.getTypeUtils().getWrapperOrPrimitiveFor(type).         if (alternative != null) {             return getMatchingSetter(candidates, alternative).         }     }     return null. }
