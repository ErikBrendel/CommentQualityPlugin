commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public Map<String, Object> getFieldValues(TypeElement element) throws Exception {     Tree tree = this.trees.getTree(element).     if (tree != null) {         FieldCollector fieldCollector = new FieldCollector().         tree.accept(fieldCollector).         return fieldCollector.getFieldValues().     }     return Collections.emptyMap(). }
false;public;1;10;;@Override public void visitVariable(VariableTree variable) throws Exception {     Set<Modifier> flags = variable.getModifierFlags().     if (flags.contains(Modifier.STATIC) && flags.contains(Modifier.FINAL)) {         this.staticFinals.put(variable.getName(), getValue(variable)).     }     if (!flags.contains(Modifier.FINAL)) {         this.fieldValues.put(variable.getName(), getValue(variable)).     } }
false;private;1;9;;private Object getValue(VariableTree variable) throws Exception {     ExpressionTree initializer = variable.getInitializer().     Class<?> wrapperType = WRAPPER_TYPES.get(variable.getType()).     Object defaultValue = DEFAULT_TYPE_VALUES.get(wrapperType).     if (initializer != null) {         return getValue(initializer, defaultValue).     }     return defaultValue. }
false;private;2;30;;private Object getValue(ExpressionTree expression, Object defaultValue) throws Exception {     Object literalValue = expression.getLiteralValue().     if (literalValue != null) {         return literalValue.     }     Object factoryValue = expression.getFactoryValue().     if (factoryValue != null) {         return getFactoryValue(expression, factoryValue).     }     List<? extends ExpressionTree> arrayValues = expression.getArrayExpression().     if (arrayValues != null) {         Object[] result = new Object[arrayValues.size()].         for (int i = 0. i < arrayValues.size(). i++) {             Object value = getValue(arrayValues.get(i), null).             if (value == null) {                 // One of the elements could not be resolved                 return defaultValue.             }             result[i] = value.         }         return result.     }     if (expression.getKind().equals("IDENTIFIER")) {         return this.staticFinals.get(expression.toString()).     }     if (expression.getKind().equals("MEMBER_SELECT")) {         return WELL_KNOWN_STATIC_FINALS.get(expression.toString()).     }     return defaultValue. }
false;private;2;13;;private Object getFactoryValue(ExpressionTree expression, Object factoryValue) {     Object durationValue = getFactoryValue(expression, factoryValue, DURATION_OF, DURATION_SUFFIX).     if (durationValue != null) {         return durationValue.     }     Object dataSizeValue = getFactoryValue(expression, factoryValue, DATA_SIZE_OF, DATA_SIZE_SUFFIX).     if (dataSizeValue != null) {         return dataSizeValue.     }     return factoryValue. }
false;private;4;11;;private Object getFactoryValue(ExpressionTree expression, Object factoryValue, String prefix, Map<String, String> suffixMapping) {     Object instance = expression.getInstance().     if (instance != null && instance.toString().startsWith(prefix)) {         String type = instance.toString().         type = type.substring(prefix.length(), type.indexOf('(')).         String suffix = suffixMapping.get(type).         return (suffix != null) ? factoryValue + suffix : null.     }     return null. }
false;public;0;3;;public Map<String, Object> getFieldValues() {     return this.fieldValues. }
