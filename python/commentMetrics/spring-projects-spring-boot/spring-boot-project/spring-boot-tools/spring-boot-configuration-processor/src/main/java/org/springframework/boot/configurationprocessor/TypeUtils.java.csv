# id;timestamp;commentText;codeText;commentWords;codeWords
TypeUtils -> public String getType(TypeElement element, TypeMirror type);1550665501;Return the type of the specified {@link TypeMirror} including all its generic_information._@param element the {@link TypeElement} in which this {@code type} is declared_@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeElement element, TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, createTypeDescriptor(element))__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,element,the,link,type,element,in,which,this,code,type,is,declared,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,element,element,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,create,type,descriptor,element
TypeUtils -> public String getType(TypeElement element, TypeMirror type);1551172233;Return the type of the specified {@link TypeMirror} including all its generic_information._@param element the {@link TypeElement} in which this {@code type} is declared_@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeElement element, TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, createTypeDescriptor(element))__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,element,the,link,type,element,in,which,this,code,type,is,declared,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,element,element,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,create,type,descriptor,element
TypeUtils -> public String getQualifiedName(Element element);1507173536;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		if (element == null) {_			return null__		}_		TypeElement enclosingElement = getEnclosingTypeElement(element.asType())__		if (enclosingElement != null) {_			return getQualifiedName(enclosingElement) + "$"_					+ ((DeclaredType) element.asType()).asElement().getSimpleName()_							.toString()__		}_		if (element instanceof TypeElement) {_			return ((TypeElement) element).getQualifiedName().toString()__		}_		throw new IllegalStateException(_				"Could not extract qualified name from " + element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,if,element,null,return,null,type,element,enclosing,element,get,enclosing,type,element,element,as,type,if,enclosing,element,null,return,get,qualified,name,enclosing,element,declared,type,element,as,type,as,element,get,simple,name,to,string,if,element,instanceof,type,element,return,type,element,element,get,qualified,name,to,string,throw,new,illegal,state,exception,could,not,extract,qualified,name,from,element
TypeUtils -> public String getQualifiedName(Element element);1516192976;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1516215803;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1516280359;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1516311332;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1516341831;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1516839887;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1517327034;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1517345250;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1517470612;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1522899137;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1525376698;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1531466864;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1531743156;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1532738143;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1534686036;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1534753581;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1534754043;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1537178726;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1550665501;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getQualifiedName(Element element);1551172233;Return the qualified name of the specified element._@param element the element to handle_@return the fully qualified name of the element, suitable for a call to_{@link Class#forName(String)};public String getQualifiedName(Element element) {_		return this.typeExtractor.getQualifiedName(element)__	};return,the,qualified,name,of,the,specified,element,param,element,the,element,to,handle,return,the,fully,qualified,name,of,the,element,suitable,for,a,call,to,link,class,for,name,string;public,string,get,qualified,name,element,element,return,this,type,extractor,get,qualified,name,element
TypeUtils -> public String getType(TypeMirror type);1507173536;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		Class<?> wrapper = getWrapperFor(type)__		if (wrapper != null) {_			return wrapper.getName()__		}_		TypeElement enclosingElement = getEnclosingTypeElement(type)__		if (enclosingElement != null) {_			return getQualifiedName(enclosingElement) + "$"_					+ ((DeclaredType) type).asElement().getSimpleName().toString()__		}_		return type.toString()__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,class,wrapper,get,wrapper,for,type,if,wrapper,null,return,wrapper,get,name,type,element,enclosing,element,get,enclosing,type,element,type,if,enclosing,element,null,return,get,qualified,name,enclosing,element,declared,type,type,as,element,get,simple,name,to,string,return,type,to,string
TypeUtils -> public String getType(TypeMirror type);1516192976;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1516215803;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1516280359;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1516311332;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1516341831;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1516839887;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1517327034;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1517345250;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1517470612;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1522899137;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1525376698;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1531466864;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1531743156;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1532738143;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1534686036;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1534753581;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1534754043;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
TypeUtils -> public String getType(TypeMirror type);1537178726;Return the type of the specified {@link TypeMirror} including all its generic_information._@param type the type to handle_@return a representation of the type including all its generic information;public String getType(TypeMirror type) {_		if (type == null) {_			return null__		}_		return type.accept(this.typeExtractor, null)__	};return,the,type,of,the,specified,link,type,mirror,including,all,its,generic,information,param,type,the,type,to,handle,return,a,representation,of,the,type,including,all,its,generic,information;public,string,get,type,type,mirror,type,if,type,null,return,null,return,type,accept,this,type,extractor,null
