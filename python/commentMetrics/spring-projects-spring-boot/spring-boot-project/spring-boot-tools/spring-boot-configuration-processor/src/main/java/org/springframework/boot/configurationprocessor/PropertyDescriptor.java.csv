commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TypeElement getOwnerElement() {     return this.ownerElement. }
false;public;0;3;;public ExecutableElement getFactoryMethod() {     return this.factoryMethod. }
false;public;0;3;;public S getSource() {     return this.source. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public TypeMirror getType() {     return this.type. }
false;public;0;3;;public VariableElement getField() {     return this.field. }
false;public;0;3;;public ExecutableElement getGetter() {     return this.getter. }
false;protected,abstract;1;2;;protected abstract ItemDeprecation resolveItemDeprecation(MetadataGenerationEnvironment environment).
false;protected,abstract;1;1;;protected abstract boolean isProperty(MetadataGenerationEnvironment environment).
false;protected;1;17;;protected boolean isNested(MetadataGenerationEnvironment environment) {     Element typeElement = environment.getTypeUtils().asElement(getType()).     if (!(typeElement instanceof TypeElement) || typeElement.getKind() == ElementKind.ENUM) {         return false.     }     if (environment.getConfigurationPropertiesAnnotation(getGetter()) != null) {         return false.     }     if (environment.getNestedConfigurationPropertyAnnotation(getField()) != null) {         return true.     }     if (isCyclePresent(typeElement, getOwnerElement())) {         return false.     }     return isParentTheSame(typeElement, getOwnerElement()). }
false;public;2;10;;public ItemMetadata resolveItemMetadata(String prefix, MetadataGenerationEnvironment environment) {     if (isNested(environment)) {         return resolveItemMetadataGroup(prefix, environment).     } else if (isProperty(environment)) {         return resolveItemMetadataProperty(prefix, environment).     }     return null. }
false;private;2;10;;private ItemMetadata resolveItemMetadataProperty(String prefix, MetadataGenerationEnvironment environment) {     String dataType = resolveType(environment).     String ownerType = environment.getTypeUtils().getQualifiedName(getOwnerElement()).     String description = resolveDescription(environment).     Object defaultValue = resolveDefaultValue(environment).     ItemDeprecation deprecation = resolveItemDeprecation(environment).     return ItemMetadata.newProperty(prefix, getName(), dataType, ownerType, null, description, defaultValue, deprecation). }
false;private;2;9;;private ItemMetadata resolveItemMetadataGroup(String prefix, MetadataGenerationEnvironment environment) {     Element propertyElement = environment.getTypeUtils().asElement(getType()).     String nestedPrefix = ConfigurationMetadata.nestedPrefix(prefix, getName()).     String dataType = environment.getTypeUtils().getQualifiedName(propertyElement).     String ownerType = environment.getTypeUtils().getQualifiedName(getOwnerElement()).     String sourceMethod = (getGetter() != null) ? getGetter().toString() : null.     return ItemMetadata.newGroup(nestedPrefix, dataType, ownerType, sourceMethod). }
false;private;1;3;;private String resolveType(MetadataGenerationEnvironment environment) {     return environment.getTypeUtils().getType(getOwnerElement(), getType()). }
false;private;1;3;;private String resolveDescription(MetadataGenerationEnvironment environment) {     return environment.getTypeUtils().getJavaDoc(getField()). }
false;private;1;3;;private Object resolveDefaultValue(MetadataGenerationEnvironment environment) {     return environment.getDefaultValue(getOwnerElement(), getName()). }
false;private;2;9;;private boolean isCyclePresent(Element returnType, Element element) {     if (!(element.getEnclosingElement() instanceof TypeElement)) {         return false.     }     if (element.getEnclosingElement().equals(returnType)) {         return true.     }     return isCyclePresent(returnType, element.getEnclosingElement()). }
false;private;2;6;;private boolean isParentTheSame(Element returnType, TypeElement element) {     if (returnType == null || element == null) {         return false.     }     return getTopLevelType(returnType).equals(getTopLevelType(element)). }
false;private;1;6;;private Element getTopLevelType(Element element) {     if (!(element.getEnclosingElement() instanceof TypeElement)) {         return element.     }     return getTopLevelType(element.getEnclosingElement()). }
