commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getKind() throws Exception {     return findMethod("getKind").invoke(getInstance()).toString(). }
false;public;0;6;;public Object getLiteralValue() throws Exception {     if (this.literalTreeType.isAssignableFrom(getInstance().getClass())) {         return this.literalValueMethod.invoke(getInstance()).     }     return null. }
false;public;0;10;;public Object getFactoryValue() throws Exception {     if (this.methodInvocationTreeType.isAssignableFrom(getInstance().getClass())) {         List<?> arguments = (List<?>) this.methodInvocationArgumentsMethod.invoke(getInstance()).         if (arguments.size() == 1) {             return new ExpressionTree(arguments.get(0)).getLiteralValue().         }     }     return null. }
false;public;0;14;;public List<? extends ExpressionTree> getArrayExpression() throws Exception {     if (this.newArrayTreeType.isAssignableFrom(getInstance().getClass())) {         List<?> elements = (List<?>) this.arrayValueMethod.invoke(getInstance()).         List<ExpressionTree> result = new ArrayList<>().         if (elements == null) {             return result.         }         for (Object element : elements) {             result.add(new ExpressionTree(element)).         }         return result.     }     return null. }
